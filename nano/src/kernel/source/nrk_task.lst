   1               		.file	"nrk_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 128               	.global	nrk_get_high_ready_task_ID
 130               	nrk_get_high_ready_task_ID:
 131               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_task.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_task.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_task.c **** *
   6:../../src/kernel/source/nrk_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_task.c **** *
  10:../../src/kernel/source/nrk_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_task.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_task.c **** *
  14:../../src/kernel/source/nrk_task.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_task.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_task.c **** *
  19:../../src/kernel/source/nrk_task.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_task.c **** *
  22:../../src/kernel/source/nrk_task.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_task.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_task.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_task.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk_task.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk_task.c **** 
  28:../../src/kernel/source/nrk_task.c **** #include <nrk.h>
  29:../../src/kernel/source/nrk_task.c **** #include <nrk_task.h>
  30:../../src/kernel/source/nrk_task.c **** #include <include.h>
  31:../../src/kernel/source/nrk_task.c **** #include <ulib.h>
  32:../../src/kernel/source/nrk_task.c **** #include <nrk_timer.h>
  33:../../src/kernel/source/nrk_task.c **** #include <nrk_scheduler.h>
  34:../../src/kernel/source/nrk_task.c **** #include <nrk_error.h>
  35:../../src/kernel/source/nrk_task.c **** #include <nrk_stack_check.h>
  36:../../src/kernel/source/nrk_task.c **** 
  37:../../src/kernel/source/nrk_task.c **** //#define TIME_PAD  2
  38:../../src/kernel/source/nrk_task.c **** 
  39:../../src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ();
  40:../../src/kernel/source/nrk_task.c **** 
  41:../../src/kernel/source/nrk_task.c **** uint8_t nrk_get_high_ready_task_ID ()
  42:../../src/kernel/source/nrk_task.c **** {
 133               	.LM0:
 134               	.LFBB1:
 135               	/* prologue: frame size=0 */
 136               	/* prologue end (size=0) */
 137 0000 E091 0000 		lds r30,_head_node
 138 0004 F091 0000 		lds r31,(_head_node)+1
 139 0008 8081      		ld r24,Z
  43:../../src/kernel/source/nrk_task.c ****   return (_head_node->task_ID);
  44:../../src/kernel/source/nrk_task.c **** }
 141               	.LM1:
 142 000a 9927      		clr r25
 143               	/* epilogue: frame size=0 */
 144 000c 0895      		ret
 145               	/* epilogue end (size=1) */
 146               	/* function nrk_get_high_ready_task_ID size 7 (6) */
 148               	.Lscope1:
 150               		.stabd	78,0,0
 152               	.global	nrk_print_readyQ
 154               	nrk_print_readyQ:
 155               		.stabd	46,0,0
  45:../../src/kernel/source/nrk_task.c **** 
  46:../../src/kernel/source/nrk_task.c **** void nrk_print_readyQ ()
  47:../../src/kernel/source/nrk_task.c **** {
 157               	.LM2:
 158               	.LFBB2:
 159               	/* prologue: frame size=0 */
 160               	/* prologue end (size=0) */
  48:../../src/kernel/source/nrk_task.c ****   nrk_queue *ptr;
  49:../../src/kernel/source/nrk_task.c ****   ptr = _head_node;
 162               	.LM3:
 163 000e E091 0000 		lds r30,_head_node
 164 0012 F091 0000 		lds r31,(_head_node)+1
 165 0016 00C0      		rjmp .L4
 166               	.L5:
  50:../../src/kernel/source/nrk_task.c ****   //nrk_kprintf (PSTR ("nrk_queue: "));
  51:../../src/kernel/source/nrk_task.c ****   while (ptr != NULL) {
  52:../../src/kernel/source/nrk_task.c ****     //printf ("%d ", ptr->task_ID);
  53:../../src/kernel/source/nrk_task.c ****     ptr = ptr->Next;
 168               	.LM4:
 169 0018 0380      		ldd __tmp_reg__,Z+3
 170 001a F481      		ldd r31,Z+4
 171 001c E02D      		mov r30,__tmp_reg__
 172               	.L4:
 174               	.LM5:
 175 001e 3097      		sbiw r30,0
 176 0020 01F4      		brne .L5
 177               	/* epilogue: frame size=0 */
 178 0022 0895      		ret
 179               	/* epilogue end (size=1) */
 180               	/* function nrk_print_readyQ size 11 (10) */
 185               	.Lscope2:
 187               		.stabd	78,0,0
 190               	.global	nrk_add_to_readyQ
 192               	nrk_add_to_readyQ:
 193               		.stabd	46,0,0
  54:../../src/kernel/source/nrk_task.c ****   }
  55:../../src/kernel/source/nrk_task.c ****   //nrk_kprintf (PSTR ("\n\r"));
  56:../../src/kernel/source/nrk_task.c **** }
  57:../../src/kernel/source/nrk_task.c **** 
  58:../../src/kernel/source/nrk_task.c **** 
  59:../../src/kernel/source/nrk_task.c **** void nrk_add_to_readyQ (int8_t task_ID)
  60:../../src/kernel/source/nrk_task.c **** {
 195               	.LM6:
 196               	.LFBB3:
 197               	/* prologue: frame size=0 */
 198 0024 CF93      		push r28
 199 0026 DF93      		push r29
 200               	/* prologue end (size=2) */
 201 0028 482F      		mov r20,r24
  61:../../src/kernel/source/nrk_task.c ****   nrk_queue *NextNode;
  62:../../src/kernel/source/nrk_task.c ****   nrk_queue *CurNode;
  63:../../src/kernel/source/nrk_task.c **** 
  64:../../src/kernel/source/nrk_task.c ****   //printf( "nrk_add_to_readyQ %d\n",task_ID );
  65:../../src/kernel/source/nrk_task.c ****   // nrk_queue full
  66:../../src/kernel/source/nrk_task.c ****   if (_free_node == NULL) {
 203               	.LM7:
 204 002a C091 0000 		lds r28,_free_node
 205 002e D091 0000 		lds r29,(_free_node)+1
 206 0032 2097      		sbiw r28,0
 207 0034 01F4      		brne .+2
 208 0036 00C0      		rjmp .L25
  67:../../src/kernel/source/nrk_task.c ****     return;
  68:../../src/kernel/source/nrk_task.c ****   }
  69:../../src/kernel/source/nrk_task.c **** 
  70:../../src/kernel/source/nrk_task.c **** 
  71:../../src/kernel/source/nrk_task.c ****   NextNode = _head_node;
 210               	.LM8:
 211 0038 A091 0000 		lds r26,_head_node
 212 003c B091 0000 		lds r27,(_head_node)+1
  72:../../src/kernel/source/nrk_task.c ****   CurNode = _free_node;
  73:../../src/kernel/source/nrk_task.c **** 
  74:../../src/kernel/source/nrk_task.c ****   if (_head_node != NULL) {
 214               	.LM9:
 215 0040 1097      		sbiw r26,0
 216 0042 01F0      		breq .L11
  75:../../src/kernel/source/nrk_task.c **** 
  76:../../src/kernel/source/nrk_task.c ****     while (NextNode != NULL) {
  77:../../src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
  78:../../src/kernel/source/nrk_task.c ****         if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
 218               	.LM10:
 219 0044 9927      		clr r25
 220 0046 87FD      		sbrc r24,7
 221 0048 9095      		com r25
 222 004a 9C01      		movw r18,r24
 223 004c 65E0      		ldi r22,5
 224 004e 220F      	1:	lsl r18
 225 0050 331F      		rol r19
 226 0052 6A95      		dec r22
 227 0054 01F4      		brne 1b
 228 0056 280F      		add r18,r24
 229 0058 391F      		adc r19,r25
 230 005a 2050      		subi r18,lo8(-(nrk_task_TCB))
 231 005c 3040      		sbci r19,hi8(-(nrk_task_TCB))
 232               	.L26:
 234               	.LM11:
 235 005e 8C91      		ld r24,X
 236 0060 9927      		clr r25
 237 0062 BC01      		movw r22,r24
 238 0064 55E0      		ldi r21,5
 239 0066 660F      	1:	lsl r22
 240 0068 771F      		rol r23
 241 006a 5A95      		dec r21
 242 006c 01F4      		brne 1b
 243 006e 680F      		add r22,r24
 244 0070 791F      		adc r23,r25
 245 0072 6050      		subi r22,lo8(-(nrk_task_TCB))
 246 0074 7040      		sbci r23,hi8(-(nrk_task_TCB))
 247 0076 FB01      		movw r30,r22
 248 0078 8481      		ldd r24,Z+4
 249 007a 8823      		tst r24
 250 007c 01F0      		breq .L13
 252               	.LM12:
 253 007e 9385      		ldd r25,Z+11
 254 0080 F901      		movw r30,r18
 255 0082 8285      		ldd r24,Z+10
 256 0084 9817      		cp r25,r24
 257 0086 00F0      		brlo .L11
 258               	.L13:
  79:../../src/kernel/source/nrk_task.c ****             nrk_task_TCB[task_ID].task_prio)
  80:../../src/kernel/source/nrk_task.c ****           break;
  81:../../src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[task_ID].elevated_prio_flag)
 260               	.LM13:
 261 0088 F901      		movw r30,r18
 262 008a 8481      		ldd r24,Z+4
 263 008c 8823      		tst r24
 264 008e 01F0      		breq .L15
  82:../../src/kernel/source/nrk_task.c ****         if (nrk_task_TCB[NextNode->task_ID].task_prio <
 266               	.LM14:
 267 0090 FB01      		movw r30,r22
 268 0092 9285      		ldd r25,Z+10
 269 0094 F901      		movw r30,r18
 270 0096 8385      		ldd r24,Z+11
 271 0098 9817      		cp r25,r24
 272 009a 00F0      		brlo .L11
 273               	.L15:
  83:../../src/kernel/source/nrk_task.c ****             nrk_task_TCB[task_ID].task_prio_ceil)
  84:../../src/kernel/source/nrk_task.c ****           break;
  85:../../src/kernel/source/nrk_task.c ****       if (nrk_task_TCB[NextNode->task_ID].task_prio <
 275               	.LM15:
 276 009c FB01      		movw r30,r22
 277 009e 9285      		ldd r25,Z+10
 278 00a0 F901      		movw r30,r18
 279 00a2 8285      		ldd r24,Z+10
 280 00a4 9817      		cp r25,r24
 281 00a6 00F0      		brlo .L11
  86:../../src/kernel/source/nrk_task.c ****           nrk_task_TCB[task_ID].task_prio)
  87:../../src/kernel/source/nrk_task.c ****         break;
  88:../../src/kernel/source/nrk_task.c **** 
  89:../../src/kernel/source/nrk_task.c ****       NextNode = NextNode->Next;
 283               	.LM16:
 284 00a8 FD01      		movw r30,r26
 285 00aa A381      		ldd r26,Z+3
 286 00ac B481      		ldd r27,Z+4
 288               	.LM17:
 289 00ae 1097      		sbiw r26,0
 290 00b0 01F4      		brne .L26
 291               	.L11:
  90:../../src/kernel/source/nrk_task.c ****     }
  91:../../src/kernel/source/nrk_task.c **** 
  92:../../src/kernel/source/nrk_task.c **** 
  93:../../src/kernel/source/nrk_task.c ****     //      while ((NextNode != NULL) && ((nrk_task_TCB[NextNode->task_ID].task_prio >= nrk_task_TC
  94:../../src/kernel/source/nrk_task.c ****     //              NextNode = NextNode->Next;}
  95:../../src/kernel/source/nrk_task.c ****     // Stop if nextNode is freenode or next node less prio or (equal and elevated 
  96:../../src/kernel/source/nrk_task.c ****     // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
  97:../../src/kernel/source/nrk_task.c ****     // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2 
  98:../../src/kernel/source/nrk_task.c **** 
  99:../../src/kernel/source/nrk_task.c ****   }
 100:../../src/kernel/source/nrk_task.c **** 
 101:../../src/kernel/source/nrk_task.c ****   CurNode->task_ID = task_ID;
 293               	.LM18:
 294 00b2 4883      		st Y,r20
 102:../../src/kernel/source/nrk_task.c ****   _free_node = _free_node->Next;
 296               	.LM19:
 297 00b4 E091 0000 		lds r30,_free_node
 298 00b8 F091 0000 		lds r31,(_free_node)+1
 299 00bc 2381      		ldd r18,Z+3
 300 00be 3481      		ldd r19,Z+4
 301 00c0 3093 0000 		sts (_free_node)+1,r19
 302 00c4 2093 0000 		sts _free_node,r18
 103:../../src/kernel/source/nrk_task.c **** 
 104:../../src/kernel/source/nrk_task.c ****   if (NextNode == _head_node) {
 304               	.LM20:
 305 00c8 8091 0000 		lds r24,_head_node
 306 00cc 9091 0000 		lds r25,(_head_node)+1
 307 00d0 A817      		cp r26,r24
 308 00d2 B907      		cpc r27,r25
 309 00d4 01F4      		brne .L18
 105:../../src/kernel/source/nrk_task.c ****     //at start
 106:../../src/kernel/source/nrk_task.c ****     if (_head_node != NULL) {
 311               	.LM21:
 312 00d6 1097      		sbiw r26,0
 313 00d8 01F0      		breq .L20
 107:../../src/kernel/source/nrk_task.c ****       CurNode->Next = _head_node;
 315               	.LM22:
 316 00da BC83      		std Y+4,r27
 317 00dc AB83      		std Y+3,r26
 108:../../src/kernel/source/nrk_task.c ****       CurNode->Prev = NULL;
 319               	.LM23:
 320 00de 1A82      		std Y+2,__zero_reg__
 321 00e0 1982      		std Y+1,__zero_reg__
 109:../../src/kernel/source/nrk_task.c ****       _head_node->Prev = CurNode;
 323               	.LM24:
 324 00e2 FD01      		movw r30,r26
 325 00e4 00C0      		rjmp .L28
 326               	.L20:
 110:../../src/kernel/source/nrk_task.c ****     }
 111:../../src/kernel/source/nrk_task.c ****     else {
 112:../../src/kernel/source/nrk_task.c ****       CurNode->Next = NULL;
 328               	.LM25:
 329 00e6 1C82      		std Y+4,__zero_reg__
 330 00e8 1B82      		std Y+3,__zero_reg__
 113:../../src/kernel/source/nrk_task.c ****       CurNode->Prev = NULL;
 332               	.LM26:
 333 00ea 1A82      		std Y+2,__zero_reg__
 334 00ec 1982      		std Y+1,__zero_reg__
 114:../../src/kernel/source/nrk_task.c ****       _free_node->Prev = CurNode;
 336               	.LM27:
 337 00ee F901      		movw r30,r18
 338               	.L28:
 339 00f0 D283      		std Z+2,r29
 340 00f2 C183      		std Z+1,r28
 115:../../src/kernel/source/nrk_task.c ****     }
 116:../../src/kernel/source/nrk_task.c ****     _head_node = CurNode;
 342               	.LM28:
 343 00f4 D093 0000 		sts (_head_node)+1,r29
 344 00f8 C093 0000 		sts _head_node,r28
 345 00fc 00C0      		rjmp .L25
 346               	.L18:
 347 00fe FD01      		movw r30,r26
 348 0100 8181      		ldd r24,Z+1
 349 0102 9281      		ldd r25,Z+2
 117:../../src/kernel/source/nrk_task.c **** 
 118:../../src/kernel/source/nrk_task.c ****   }
 119:../../src/kernel/source/nrk_task.c ****   else {
 120:../../src/kernel/source/nrk_task.c ****     if (NextNode != _free_node) {
 351               	.LM29:
 352 0104 A217      		cp r26,r18
 353 0106 B307      		cpc r27,r19
 354 0108 01F0      		breq .L23
 121:../../src/kernel/source/nrk_task.c ****       // Insert  in middle
 122:../../src/kernel/source/nrk_task.c **** 
 123:../../src/kernel/source/nrk_task.c ****       CurNode->Prev = NextNode->Prev;
 356               	.LM30:
 357 010a 9A83      		std Y+2,r25
 358 010c 8983      		std Y+1,r24
 124:../../src/kernel/source/nrk_task.c ****       CurNode->Next = NextNode;
 360               	.LM31:
 361 010e BC83      		std Y+4,r27
 362 0110 AB83      		std Y+3,r26
 125:../../src/kernel/source/nrk_task.c ****       (NextNode->Prev)->Next = CurNode;
 364               	.LM32:
 365 0112 8181      		ldd r24,Z+1
 366 0114 9281      		ldd r25,Z+2
 367 0116 FC01      		movw r30,r24
 368 0118 D483      		std Z+4,r29
 369 011a C383      		std Z+3,r28
 370 011c 00C0      		rjmp .L29
 371               	.L23:
 126:../../src/kernel/source/nrk_task.c ****       NextNode->Prev = CurNode;
 127:../../src/kernel/source/nrk_task.c ****     }
 128:../../src/kernel/source/nrk_task.c ****     else {
 129:../../src/kernel/source/nrk_task.c ****       //insert at end
 130:../../src/kernel/source/nrk_task.c ****       CurNode->Next = NULL;
 373               	.LM33:
 374 011e 1C82      		std Y+4,__zero_reg__
 375 0120 1B82      		std Y+3,__zero_reg__
 131:../../src/kernel/source/nrk_task.c ****       CurNode->Prev = _free_node->Prev;
 377               	.LM34:
 378 0122 9A83      		std Y+2,r25
 379 0124 8983      		std Y+1,r24
 380               	.L29:
 132:../../src/kernel/source/nrk_task.c ****       _free_node->Prev = CurNode;
 382               	.LM35:
 383 0126 FD01      		movw r30,r26
 384 0128 D283      		std Z+2,r29
 385 012a C183      		std Z+1,r28
 386               	.L25:
 387               	/* epilogue: frame size=0 */
 388 012c DF91      		pop r29
 389 012e CF91      		pop r28
 390 0130 0895      		ret
 391               	/* epilogue end (size=3) */
 392               	/* function nrk_add_to_readyQ size 135 (130) */
 397               	.Lscope3:
 399               		.stabd	78,0,0
 402               	.global	nrk_rem_from_readyQ
 404               	nrk_rem_from_readyQ:
 405               		.stabd	46,0,0
 133:../../src/kernel/source/nrk_task.c ****     }
 134:../../src/kernel/source/nrk_task.c **** 
 135:../../src/kernel/source/nrk_task.c ****   }
 136:../../src/kernel/source/nrk_task.c **** 
 137:../../src/kernel/source/nrk_task.c **** }
 138:../../src/kernel/source/nrk_task.c **** 
 139:../../src/kernel/source/nrk_task.c **** 
 140:../../src/kernel/source/nrk_task.c **** void nrk_rem_from_readyQ (int8_t task_ID)
 141:../../src/kernel/source/nrk_task.c **** {
 407               	.LM36:
 408               	.LFBB4:
 409               	/* prologue: frame size=0 */
 410 0132 CF93      		push r28
 411 0134 DF93      		push r29
 412               	/* prologue end (size=2) */
 142:../../src/kernel/source/nrk_task.c **** 
 143:../../src/kernel/source/nrk_task.c ****   nrk_queue *CurNode;
 144:../../src/kernel/source/nrk_task.c **** //      nrk_queue       *tempNode;
 145:../../src/kernel/source/nrk_task.c **** 
 146:../../src/kernel/source/nrk_task.c **** //return;
 147:../../src/kernel/source/nrk_task.c **** 
 148:../../src/kernel/source/nrk_task.c ****   /*CurNode = _head_node;
 149:../../src/kernel/source/nrk_task.c **** 
 150:../../src/kernel/source/nrk_task.c ****      _head_node = _head_node->Next;
 151:../../src/kernel/source/nrk_task.c ****      _head_node->Prev = NULL;
 152:../../src/kernel/source/nrk_task.c **** 
 153:../../src/kernel/source/nrk_task.c ****      if (_free_node == NULL)
 154:../../src/kernel/source/nrk_task.c ****      {
 155:../../src/kernel/source/nrk_task.c ****      tempNode = _head_node;
 156:../../src/kernel/source/nrk_task.c ****      while (tempNode->Next!=NULL) tempNode=tempNode->Next;
 157:../../src/kernel/source/nrk_task.c ****      CurNode->Next = NULL;
 158:../../src/kernel/source/nrk_task.c ****      CurNode->Prev = tempNode;
 159:../../src/kernel/source/nrk_task.c ****      tempNode->Next = CurNode;
 160:../../src/kernel/source/nrk_task.c ****      _free_node = CurNode;
 161:../../src/kernel/source/nrk_task.c ****      }
 162:../../src/kernel/source/nrk_task.c ****      else
 163:../../src/kernel/source/nrk_task.c ****      {
 164:../../src/kernel/source/nrk_task.c ****      CurNode->Next = _free_node;
 165:../../src/kernel/source/nrk_task.c ****      _free_node->Prev = CurNode;
 166:../../src/kernel/source/nrk_task.c ****      _free_node = CurNode;
 167:../../src/kernel/source/nrk_task.c ****      }
 168:../../src/kernel/source/nrk_task.c ****    */
 169:../../src/kernel/source/nrk_task.c **** 
 170:../../src/kernel/source/nrk_task.c **** //      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);
 171:../../src/kernel/source/nrk_task.c **** 
 172:../../src/kernel/source/nrk_task.c ****   if (_head_node == NULL)
 414               	.LM37:
 415 0136 A091 0000 		lds r26,_head_node
 416 013a B091 0000 		lds r27,(_head_node)+1
 417 013e 1097      		sbiw r26,0
 418 0140 01F4      		brne .+2
 419 0142 00C0      		rjmp .L42
 173:../../src/kernel/source/nrk_task.c ****     return;
 174:../../src/kernel/source/nrk_task.c **** 
 175:../../src/kernel/source/nrk_task.c ****   CurNode = _head_node;
 176:../../src/kernel/source/nrk_task.c **** 
 177:../../src/kernel/source/nrk_task.c ****   if (_head_node->task_ID == task_ID) {
 421               	.LM38:
 422 0144 482F      		mov r20,r24
 423 0146 5527      		clr r21
 424 0148 47FD      		sbrc r20,7
 425 014a 5095      		com r21
 426 014c 8C91      		ld r24,X
 427 014e 9927      		clr r25
 428 0150 8417      		cp r24,r20
 429 0152 9507      		cpc r25,r21
 430 0154 01F4      		brne .L43
 178:../../src/kernel/source/nrk_task.c ****     //REmove from start
 179:../../src/kernel/source/nrk_task.c ****     _head_node = _head_node->Next;
 432               	.LM39:
 433 0156 ED01      		movw r28,r26
 434 0158 EB81      		ldd r30,Y+3
 435 015a FC81      		ldd r31,Y+4
 436 015c F093 0000 		sts (_head_node)+1,r31
 437 0160 E093 0000 		sts _head_node,r30
 180:../../src/kernel/source/nrk_task.c ****     _head_node->Prev = NULL;
 439               	.LM40:
 440 0164 1282      		std Z+2,__zero_reg__
 441 0166 1182      		std Z+1,__zero_reg__
 442 0168 00C0      		rjmp .L35
 443               	.L36:
 181:../../src/kernel/source/nrk_task.c ****   }
 182:../../src/kernel/source/nrk_task.c ****   else {
 183:../../src/kernel/source/nrk_task.c ****     while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 184:../../src/kernel/source/nrk_task.c ****       CurNode = CurNode->Next;
 445               	.LM41:
 446 016a D901      		movw r26,r18
 448               	.LM42:
 449 016c 232B      		or r18,r19
 450 016e 01F0      		breq .L42
 451               	.L43:
 452 0170 8C91      		ld r24,X
 453 0172 9927      		clr r25
 454 0174 FD01      		movw r30,r26
 455 0176 2381      		ldd r18,Z+3
 456 0178 3481      		ldd r19,Z+4
 457 017a 8417      		cp r24,r20
 458 017c 9507      		cpc r25,r21
 459 017e 01F4      		brne .L36
 185:../../src/kernel/source/nrk_task.c ****     if (CurNode == NULL)
 186:../../src/kernel/source/nrk_task.c ****       return;
 187:../../src/kernel/source/nrk_task.c **** 
 188:../../src/kernel/source/nrk_task.c **** 
 189:../../src/kernel/source/nrk_task.c ****     (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
 461               	.LM43:
 462 0180 C181      		ldd r28,Z+1
 463 0182 D281      		ldd r29,Z+2
 464 0184 3C83      		std Y+4,r19
 465 0186 2B83      		std Y+3,r18
 190:../../src/kernel/source/nrk_task.c ****     if (CurNode->Next != NULL)
 467               	.LM44:
 468 0188 8381      		ldd r24,Z+3
 469 018a 9481      		ldd r25,Z+4
 470 018c 0097      		sbiw r24,0
 471 018e 01F0      		breq .L35
 191:../../src/kernel/source/nrk_task.c ****       (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
 473               	.LM45:
 474 0190 FC01      		movw r30,r24
 475 0192 D283      		std Z+2,r29
 476 0194 C183      		std Z+1,r28
 477               	.L35:
 192:../../src/kernel/source/nrk_task.c **** 
 193:../../src/kernel/source/nrk_task.c ****   }
 194:../../src/kernel/source/nrk_task.c **** 
 195:../../src/kernel/source/nrk_task.c **** 
 196:../../src/kernel/source/nrk_task.c **** 
 197:../../src/kernel/source/nrk_task.c ****   // Add to free list
 198:../../src/kernel/source/nrk_task.c ****   if (_free_node == NULL) {
 479               	.LM46:
 480 0196 E091 0000 		lds r30,_free_node
 481 019a F091 0000 		lds r31,(_free_node)+1
 482 019e 3097      		sbiw r30,0
 483 01a0 01F4      		brne .L39
 199:../../src/kernel/source/nrk_task.c ****     _free_node = CurNode;
 485               	.LM47:
 486 01a2 B093 0000 		sts (_free_node)+1,r27
 487 01a6 A093 0000 		sts _free_node,r26
 200:../../src/kernel/source/nrk_task.c ****     _free_node->Next = NULL;
 489               	.LM48:
 490 01aa ED01      		movw r28,r26
 491 01ac 1C82      		std Y+4,__zero_reg__
 492 01ae 1B82      		std Y+3,__zero_reg__
 493 01b0 00C0      		rjmp .L41
 494               	.L39:
 201:../../src/kernel/source/nrk_task.c ****   }
 202:../../src/kernel/source/nrk_task.c ****   else {
 203:../../src/kernel/source/nrk_task.c ****     CurNode->Next = _free_node;
 496               	.LM49:
 497 01b2 ED01      		movw r28,r26
 498 01b4 FC83      		std Y+4,r31
 499 01b6 EB83      		std Y+3,r30
 204:../../src/kernel/source/nrk_task.c ****     _free_node->Prev = CurNode;
 501               	.LM50:
 502 01b8 B283      		std Z+2,r27
 503 01ba A183      		std Z+1,r26
 205:../../src/kernel/source/nrk_task.c ****     _free_node = CurNode;
 505               	.LM51:
 506 01bc B093 0000 		sts (_free_node)+1,r27
 507 01c0 A093 0000 		sts _free_node,r26
 508               	.L41:
 206:../../src/kernel/source/nrk_task.c ****   }
 207:../../src/kernel/source/nrk_task.c ****   _free_node->Prev = NULL;
 510               	.LM52:
 511 01c4 E091 0000 		lds r30,_free_node
 512 01c8 F091 0000 		lds r31,(_free_node)+1
 513 01cc 1282      		std Z+2,__zero_reg__
 514 01ce 1182      		std Z+1,__zero_reg__
 515               	.L42:
 516               	/* epilogue: frame size=0 */
 517 01d0 DF91      		pop r29
 518 01d2 CF91      		pop r28
 519 01d4 0895      		ret
 520               	/* epilogue end (size=3) */
 521               	/* function nrk_rem_from_readyQ size 82 (77) */
 526               	.Lscope4:
 528               		.stabd	78,0,0
 530               	.global	nrk_get_pid
 532               	nrk_get_pid:
 533               		.stabd	46,0,0
 208:../../src/kernel/source/nrk_task.c **** }
 209:../../src/kernel/source/nrk_task.c **** 
 210:../../src/kernel/source/nrk_task.c **** 
 211:../../src/kernel/source/nrk_task.c **** 
 212:../../src/kernel/source/nrk_task.c **** 
 213:../../src/kernel/source/nrk_task.c **** 
 214:../../src/kernel/source/nrk_task.c **** nrk_status_t nrk_activate_task (nrk_task_type * Task)
 215:../../src/kernel/source/nrk_task.c **** {
 216:../../src/kernel/source/nrk_task.c ****   uint8_t rtype;
 217:../../src/kernel/source/nrk_task.c ****   void *topOfStackPtr;
 218:../../src/kernel/source/nrk_task.c **** 
 219:../../src/kernel/source/nrk_task.c ****   topOfStackPtr =
 220:../../src/kernel/source/nrk_task.c ****     (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
 221:../../src/kernel/source/nrk_task.c **** 
 222:../../src/kernel/source/nrk_task.c ****   //printf("activate %d\n",(int)Task.task_ID);
 223:../../src/kernel/source/nrk_task.c ****   if (Task->FirstActivation == TRUE) {
 224:../../src/kernel/source/nrk_task.c ****     rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
 225:../../src/kernel/source/nrk_task.c ****     Task->FirstActivation = FALSE;
 226:../../src/kernel/source/nrk_task.c **** 
 227:../../src/kernel/source/nrk_task.c ****   }
 228:../../src/kernel/source/nrk_task.c ****   else {
 229:../../src/kernel/source/nrk_task.c ****     if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
 230:../../src/kernel/source/nrk_task.c ****       return NRK_ERROR;
 231:../../src/kernel/source/nrk_task.c ****     //Re-init some parts of TCB
 232:../../src/kernel/source/nrk_task.c **** 
 233:../../src/kernel/source/nrk_task.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
 234:../../src/kernel/source/nrk_task.c **** 
 235:../../src/kernel/source/nrk_task.c **** 
 236:../../src/kernel/source/nrk_task.c **** 
 237:../../src/kernel/source/nrk_task.c ****   }
 238:../../src/kernel/source/nrk_task.c **** 
 239:../../src/kernel/source/nrk_task.c ****   //nrk_task_TCB[Task->task_ID].task_state = READY;       
 240:../../src/kernel/source/nrk_task.c **** 
 241:../../src/kernel/source/nrk_task.c ****   // Remove from suspended or waiting if extended
 242:../../src/kernel/source/nrk_task.c **** 
 243:../../src/kernel/source/nrk_task.c ****   // OSSchedLock();
 244:../../src/kernel/source/nrk_task.c **** 
 245:../../src/kernel/source/nrk_task.c **** 
 246:../../src/kernel/source/nrk_task.c ****   // If Idle Task then Add to ready Q
 247:../../src/kernel/source/nrk_task.c ****   //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
 248:../../src/kernel/source/nrk_task.c ****   //nrk_add_to_readyQ(Task->task_ID);
 249:../../src/kernel/source/nrk_task.c ****   //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
 250:../../src/kernel/source/nrk_task.c ****   //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
 251:../../src/kernel/source/nrk_task.c ****   if (nrk_task_TCB[Task->task_ID].next_wakeup == 0) {
 252:../../src/kernel/source/nrk_task.c ****     nrk_task_TCB[Task->task_ID].task_state = READY;
 253:../../src/kernel/source/nrk_task.c ****     nrk_add_to_readyQ (Task->task_ID);
 254:../../src/kernel/source/nrk_task.c ****   }
 255:../../src/kernel/source/nrk_task.c **** 
 256:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 257:../../src/kernel/source/nrk_task.c **** }
 258:../../src/kernel/source/nrk_task.c **** 
 259:../../src/kernel/source/nrk_task.c **** 
 260:../../src/kernel/source/nrk_task.c **** 
 261:../../src/kernel/source/nrk_task.c **** nrk_status_t nrk_terminate_task ()
 262:../../src/kernel/source/nrk_task.c **** {
 263:../../src/kernel/source/nrk_task.c ****   nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 264:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->task_state = FINISHED;
 265:../../src/kernel/source/nrk_task.c **** 
 266:../../src/kernel/source/nrk_task.c ****   // HAHA, there is NO next period...
 267:../../src/kernel/source/nrk_task.c ****   nrk_wait_until_next_period ();
 268:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 269:../../src/kernel/source/nrk_task.c **** }
 270:../../src/kernel/source/nrk_task.c **** 
 271:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_period ()
 272:../../src/kernel/source/nrk_task.c **** {
 273:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 274:../../src/kernel/source/nrk_task.c **** 
 275:../../src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 276:../../src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
 277:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 278:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = 1;
 279:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 280:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 281:../../src/kernel/source/nrk_task.c **** 
 282:../../src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 283:../../src/kernel/source/nrk_task.c **** 
 284:../../src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 285:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 286:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 287:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 288:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 289:../../src/kernel/source/nrk_task.c ****     }
 290:../../src/kernel/source/nrk_task.c **** 
 291:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 292:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 293:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 294:../../src/kernel/source/nrk_task.c **** }
 295:../../src/kernel/source/nrk_task.c **** 
 296:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_n_periods (uint16_t p)
 297:../../src/kernel/source/nrk_task.c **** {
 298:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 299:../../src/kernel/source/nrk_task.c **** 
 300:../../src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 301:../../src/kernel/source/nrk_task.c **** 
 302:../../src/kernel/source/nrk_task.c ****   if (p == 0)
 303:../../src/kernel/source/nrk_task.c ****     p = 1;
 304:../../src/kernel/source/nrk_task.c **** // Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable 
 305:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 306:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 307:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = p;
 308:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 309:../../src/kernel/source/nrk_task.c **** 
 310:../../src/kernel/source/nrk_task.c **** //nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 311:../../src/kernel/source/nrk_task.c **** 
 312:../../src/kernel/source/nrk_task.c **** // +2 allows for potential time conflict resolution
 313:../../src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 314:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 315:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 316:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 317:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 318:../../src/kernel/source/nrk_task.c ****     }
 319:../../src/kernel/source/nrk_task.c **** 
 320:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 321:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 322:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 323:../../src/kernel/source/nrk_task.c **** }
 324:../../src/kernel/source/nrk_task.c **** 
 325:../../src/kernel/source/nrk_task.c **** /*
 326:../../src/kernel/source/nrk_task.c ****  * nrk_wait_ticks()
 327:../../src/kernel/source/nrk_task.c ****  *
 328:../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 329:../../src/kernel/source/nrk_task.c ****  * timer ticks after the curret OS tick timer.
 330:../../src/kernel/source/nrk_task.c ****  *
 331:../../src/kernel/source/nrk_task.c ****  */
 332:../../src/kernel/source/nrk_task.c **** 
 333:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_ticks (uint16_t ticks)
 334:../../src/kernel/source/nrk_task.c **** {
 335:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 336:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 337:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 338:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 339:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = ticks + timer;
 340:../../src/kernel/source/nrk_task.c **** 
 341:../../src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 342:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 343:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 344:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 345:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 346:../../src/kernel/source/nrk_task.c ****     }
 347:../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 348:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 349:../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 350:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 351:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 352:../../src/kernel/source/nrk_task.c **** }
 353:../../src/kernel/source/nrk_task.c **** 
 354:../../src/kernel/source/nrk_task.c **** 
 355:../../src/kernel/source/nrk_task.c **** /*
 356:../../src/kernel/source/nrk_task.c ****  * nrk_wait_until_ticks()
 357:../../src/kernel/source/nrk_task.c ****  *
 358:../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 359:../../src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 360:../../src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 361:../../src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 362:../../src/kernel/source/nrk_task.c ****  *
 363:../../src/kernel/source/nrk_task.c ****  */
 364:../../src/kernel/source/nrk_task.c **** 
 365:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_ticks (uint16_t ticks)
 366:../../src/kernel/source/nrk_task.c **** {
 367:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 368:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 369:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 370:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = ticks;
 371:../../src/kernel/source/nrk_task.c ****   // printf( "t %u\r\n",ticks );
 372:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 373:../../src/kernel/source/nrk_task.c **** 
 374:../../src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 375:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 376:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 377:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 378:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 379:../../src/kernel/source/nrk_task.c ****     }
 380:../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 381:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 382:../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 383:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 384:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 385:../../src/kernel/source/nrk_task.c **** }
 386:../../src/kernel/source/nrk_task.c **** 
 387:../../src/kernel/source/nrk_task.c **** int8_t nrk_set_next_wakeup (nrk_time_t t)
 388:../../src/kernel/source/nrk_task.c **** {
 389:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 390:../../src/kernel/source/nrk_task.c ****   uint16_t nw;
 391:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 392:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 393:../../src/kernel/source/nrk_task.c ****   nw = _nrk_time_to_ticks (&t);
 394:../../src/kernel/source/nrk_task.c ****   if (nw <= TIME_PAD)
 395:../../src/kernel/source/nrk_task.c ****     return NRK_ERROR;
 396:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = nw + timer;
 397:../../src/kernel/source/nrk_task.c **** /*	if(timer<(254-TIME_PAD))
 398:../../src/kernel/source/nrk_task.c **** 		if((timer+TIME_PAD)<=_nrk_get_next_wakeup())
 399:../../src/kernel/source/nrk_task.c **** 		{
 400:../../src/kernel/source/nrk_task.c **** 			timer+=TIME_PAD;
 401:../../src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val=timer;
 402:../../src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup(timer);
 403:../../src/kernel/source/nrk_task.c **** 		}
 404:../../src/kernel/source/nrk_task.c **** */
 405:../../src/kernel/source/nrk_task.c **** //      nrk_cur_task_TCB->nw_flag=1;
 406:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 407:../../src/kernel/source/nrk_task.c **** 
 408:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 409:../../src/kernel/source/nrk_task.c **** }
 410:../../src/kernel/source/nrk_task.c **** 
 411:../../src/kernel/source/nrk_task.c **** /*
 412:../../src/kernel/source/nrk_task.c ****  * nrk_wait_until_nw()
 413:../../src/kernel/source/nrk_task.c ****  *
 414:../../src/kernel/source/nrk_task.c ****  * This function will wait until a specified number of
 415:../../src/kernel/source/nrk_task.c ****  * timer ticks starting from when the task was swapped in.
 416:../../src/kernel/source/nrk_task.c ****  * This means that this function can set periodic timing
 417:../../src/kernel/source/nrk_task.c ****  * taking into account any task processing time.
 418:../../src/kernel/source/nrk_task.c ****  *
 419:../../src/kernel/source/nrk_task.c ****  */
 420:../../src/kernel/source/nrk_task.c **** 
 421:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_nw ()
 422:../../src/kernel/source/nrk_task.c **** {
 423:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 424:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 425:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 426:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->nw_flag = 1;
 427:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 428:../../src/kernel/source/nrk_task.c **** 
 429:../../src/kernel/source/nrk_task.c ****   if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 430:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 431:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 432:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 433:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 434:../../src/kernel/source/nrk_task.c ****     }
 435:../../src/kernel/source/nrk_task.c **** //else nrk_cur_task_TCB->next_wakeup=ticks+1;
 436:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 437:../../src/kernel/source/nrk_task.c **** //while(nrk_cur_task_TCB->suspend_flag==1);
 438:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 439:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 440:../../src/kernel/source/nrk_task.c **** }
 441:../../src/kernel/source/nrk_task.c **** 
 442:../../src/kernel/source/nrk_task.c **** 
 443:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait (nrk_time_t t)
 444:../../src/kernel/source/nrk_task.c **** {
 445:../../src/kernel/source/nrk_task.c ****   uint8_t timer;
 446:../../src/kernel/source/nrk_task.c ****   uint16_t nw;
 447:../../src/kernel/source/nrk_task.c **** 
 448:../../src/kernel/source/nrk_task.c ****   nrk_stack_check ();
 449:../../src/kernel/source/nrk_task.c **** 
 450:../../src/kernel/source/nrk_task.c ****   nrk_int_disable ();
 451:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->suspend_flag = 1;
 452:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->num_periods = 1;
 453:../../src/kernel/source/nrk_task.c ****   timer = _nrk_os_timer_get ();
 454:../../src/kernel/source/nrk_task.c **** 
 455:../../src/kernel/source/nrk_task.c **** //printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
 456:../../src/kernel/source/nrk_task.c ****   
 457:../../src/kernel/source/nrk_task.c ****   nw = _nrk_time_to_ticks (&t);
 458:../../src/kernel/source/nrk_task.c **** // printf( "t2 %u %u\r\n",timer, nw);
 459:../../src/kernel/source/nrk_task.c ****   nrk_cur_task_TCB->next_wakeup = nw + timer;
 460:../../src/kernel/source/nrk_task.c **** //printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
 461:../../src/kernel/source/nrk_task.c ****   if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 462:../../src/kernel/source/nrk_task.c ****   {
 463:../../src/kernel/source/nrk_task.c ****     if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ()) {
 464:../../src/kernel/source/nrk_task.c ****       timer += TIME_PAD;
 465:../../src/kernel/source/nrk_task.c ****       _nrk_prev_timer_val = timer;
 466:../../src/kernel/source/nrk_task.c ****       _nrk_set_next_wakeup (timer);
 467:../../src/kernel/source/nrk_task.c ****     }
 468:../../src/kernel/source/nrk_task.c ****   } 
 469:../../src/kernel/source/nrk_task.c ****   nrk_int_enable ();
 470:../../src/kernel/source/nrk_task.c **** 
 471:../../src/kernel/source/nrk_task.c ****   _nrk_wait_for_scheduler ();
 472:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 473:../../src/kernel/source/nrk_task.c **** }
 474:../../src/kernel/source/nrk_task.c **** 
 475:../../src/kernel/source/nrk_task.c **** 
 476:../../src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ()
 477:../../src/kernel/source/nrk_task.c **** {
 478:../../src/kernel/source/nrk_task.c **** 
 479:../../src/kernel/source/nrk_task.c ****   //TIMSK = BM (OCIE1A);
 480:../../src/kernel/source/nrk_task.c ****   do {
 481:../../src/kernel/source/nrk_task.c ****     nrk_idle ();                // wait for the interrupt to tick...
 482:../../src/kernel/source/nrk_task.c ****   } while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1);
 483:../../src/kernel/source/nrk_task.c **** 
 484:../../src/kernel/source/nrk_task.c ****   //TIMSK = BM (OCIE1A) | BM(OCIE0);
 485:../../src/kernel/source/nrk_task.c **** }
 486:../../src/kernel/source/nrk_task.c **** 
 487:../../src/kernel/source/nrk_task.c **** 
 488:../../src/kernel/source/nrk_task.c **** int8_t nrk_wait_until (nrk_time_t t)
 489:../../src/kernel/source/nrk_task.c **** {
 490:../../src/kernel/source/nrk_task.c ****   nrk_time_t ct;
 491:../../src/kernel/source/nrk_task.c ****   int8_t v;
 492:../../src/kernel/source/nrk_task.c ****   uint8_t c;
 493:../../src/kernel/source/nrk_task.c **** 
 494:../../src/kernel/source/nrk_task.c ****   //c = _nrk_os_timer_get ();
 495:../../src/kernel/source/nrk_task.c ****   //do{
 496:../../src/kernel/source/nrk_task.c ****   //}while(_nrk_os_timer_get()==c);
 497:../../src/kernel/source/nrk_task.c ****  
 498:../../src/kernel/source/nrk_task.c ****   //ttt=c+1; 
 499:../../src/kernel/source/nrk_task.c ****   nrk_time_get (&ct);
 500:../../src/kernel/source/nrk_task.c **** 
 501:../../src/kernel/source/nrk_task.c ****   v = nrk_time_sub (&t, t, ct);
 502:../../src/kernel/source/nrk_task.c ****   //nrk_time_compact_nanos(&t);
 503:../../src/kernel/source/nrk_task.c ****   if (v == NRK_ERROR)
 504:../../src/kernel/source/nrk_task.c ****   {
 505:../../src/kernel/source/nrk_task.c ****     return NRK_ERROR;
 506:../../src/kernel/source/nrk_task.c ****   }
 507:../../src/kernel/source/nrk_task.c **** //if(t.secs<ct.secs) return 0;
 508:../../src/kernel/source/nrk_task.c **** //if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;
 509:../../src/kernel/source/nrk_task.c **** 
 510:../../src/kernel/source/nrk_task.c **** //t.secs-=ct.secs;
 511:../../src/kernel/source/nrk_task.c **** //t.nano_secs-=ct.nano_secs;
 512:../../src/kernel/source/nrk_task.c **** //
 513:../../src/kernel/source/nrk_task.c ****   nrk_wait (t);
 514:../../src/kernel/source/nrk_task.c **** 
 515:../../src/kernel/source/nrk_task.c ****   return NRK_OK;
 516:../../src/kernel/source/nrk_task.c **** }
 517:../../src/kernel/source/nrk_task.c **** 
 518:../../src/kernel/source/nrk_task.c **** 
 519:../../src/kernel/source/nrk_task.c **** uint8_t nrk_get_pid ()
 520:../../src/kernel/source/nrk_task.c **** {
 535               	.LM53:
 536               	.LFBB5:
 537               	/* prologue: frame size=0 */
 538               	/* prologue end (size=0) */
 539 01d6 E091 0000 		lds r30,nrk_cur_task_TCB
 540 01da F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 541 01de 8085      		ldd r24,Z+8
 521:../../src/kernel/source/nrk_task.c ****   return nrk_cur_task_TCB->task_ID;
 522:../../src/kernel/source/nrk_task.c **** }
 543               	.LM54:
 544 01e0 9927      		clr r25
 545               	/* epilogue: frame size=0 */
 546 01e2 0895      		ret
 547               	/* epilogue end (size=1) */
 548               	/* function nrk_get_pid size 7 (6) */
 550               	.Lscope5:
 552               		.stabd	78,0,0
 554               	.global	_nrk_wait_for_scheduler
 556               	_nrk_wait_for_scheduler:
 557               		.stabd	46,0,0
 559               	.LM55:
 560               	.LFBB6:
 561               	/* prologue: frame size=0 */
 562               	/* prologue end (size=0) */
 563               	.L48:
 565               	.LM56:
 566 01e4 0E94 0000 		call nrk_idle
 568               	.LM57:
 569 01e8 E091 0000 		lds r30,nrk_cur_task_TCB
 570 01ec F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 571 01f0 8581      		ldd r24,Z+5
 572 01f2 8823      		tst r24
 573 01f4 01F4      		brne .L48
 574               	/* epilogue: frame size=0 */
 575 01f6 0895      		ret
 576               	/* epilogue end (size=1) */
 577               	/* function _nrk_wait_for_scheduler size 10 (9) */
 579               	.Lscope6:
 581               		.stabd	78,0,0
 584               	.global	nrk_wait
 586               	nrk_wait:
 587               		.stabd	46,0,0
 589               	.LM58:
 590               	.LFBB7:
 591               	/* prologue: frame size=8 */
 592 01f8 FF92      		push r15
 593 01fa 0F93      		push r16
 594 01fc 1F93      		push r17
 595 01fe CF93      		push r28
 596 0200 DF93      		push r29
 597 0202 CDB7      		in r28,__SP_L__
 598 0204 DEB7      		in r29,__SP_H__
 599 0206 2897      		sbiw r28,8
 600 0208 0FB6      		in __tmp_reg__,__SREG__
 601 020a F894      		cli
 602 020c DEBF      		out __SP_H__,r29
 603 020e 0FBE      		out __SREG__,__tmp_reg__
 604 0210 CDBF      		out __SP_L__,r28
 605               	/* prologue end (size=13) */
 606 0212 2983      		std Y+1,r18
 607 0214 3A83      		std Y+2,r19
 608 0216 4B83      		std Y+3,r20
 609 0218 5C83      		std Y+4,r21
 610 021a 6D83      		std Y+5,r22
 611 021c 7E83      		std Y+6,r23
 612 021e 8F83      		std Y+7,r24
 613 0220 9887      		std Y+8,r25
 615               	.LM59:
 616 0222 0E94 0000 		call nrk_stack_check
 618               	.LM60:
 619 0226 0E94 0000 		call nrk_int_disable
 621               	.LM61:
 622 022a E091 0000 		lds r30,nrk_cur_task_TCB
 623 022e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 624 0232 81E0      		ldi r24,lo8(1)
 625 0234 8583      		std Z+5,r24
 627               	.LM62:
 628 0236 81E0      		ldi r24,lo8(1)
 629 0238 90E0      		ldi r25,hi8(1)
 630 023a 90A3      		std Z+32,r25
 631 023c 878F      		std Z+31,r24
 633               	.LM63:
 634 023e 0E94 0000 		call _nrk_os_timer_get
 635 0242 F82E      		mov r15,r24
 637               	.LM64:
 638 0244 CE01      		movw r24,r28
 639 0246 0196      		adiw r24,1
 640 0248 0E94 0000 		call _nrk_time_to_ticks
 642               	.LM65:
 643 024c E091 0000 		lds r30,nrk_cur_task_TCB
 644 0250 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 645 0254 0F2D      		mov r16,r15
 646 0256 1127      		clr r17
 647 0258 800F      		add r24,r16
 648 025a 911F      		adc r25,r17
 649 025c 968B      		std Z+22,r25
 650 025e 858B      		std Z+21,r24
 652               	.LM66:
 653 0260 87EF      		ldi r24,lo8(-9)
 654 0262 8F15      		cp r24,r15
 655 0264 00F0      		brlo .L54
 657               	.LM67:
 658 0266 0E94 0000 		call _nrk_get_next_wakeup
 659 026a 0E5F      		subi r16,lo8(-(2))
 660 026c 1F4F      		sbci r17,hi8(-(2))
 661 026e 9927      		clr r25
 662 0270 8017      		cp r24,r16
 663 0272 9107      		cpc r25,r17
 664 0274 04F0      		brlt .L54
 666               	.LM68:
 667 0276 8F2D      		mov r24,r15
 668 0278 8E5F      		subi r24,lo8(-(2))
 670               	.LM69:
 671 027a 8093 0000 		sts _nrk_prev_timer_val,r24
 673               	.LM70:
 674 027e 0E94 0000 		call _nrk_set_next_wakeup
 675               	.L54:
 677               	.LM71:
 678 0282 0E94 0000 		call nrk_int_enable
 680               	.LM72:
 681 0286 0E94 0000 		call _nrk_wait_for_scheduler
 683               	.LM73:
 684 028a 81E0      		ldi r24,lo8(1)
 685 028c 90E0      		ldi r25,hi8(1)
 686               	/* epilogue: frame size=8 */
 687 028e 2896      		adiw r28,8
 688 0290 0FB6      		in __tmp_reg__,__SREG__
 689 0292 F894      		cli
 690 0294 DEBF      		out __SP_H__,r29
 691 0296 0FBE      		out __SREG__,__tmp_reg__
 692 0298 CDBF      		out __SP_L__,r28
 693 029a DF91      		pop r29
 694 029c CF91      		pop r28
 695 029e 1F91      		pop r17
 696 02a0 0F91      		pop r16
 697 02a2 FF90      		pop r15
 698 02a4 0895      		ret
 699               	/* epilogue end (size=12) */
 700               	/* function nrk_wait size 87 (62) */
 705               	.Lscope7:
 707               		.stabd	78,0,0
 710               	.global	nrk_wait_until
 712               	nrk_wait_until:
 713               		.stabd	46,0,0
 715               	.LM74:
 716               	.LFBB8:
 717               	/* prologue: frame size=16 */
 718 02a6 8F92      		push r8
 719 02a8 9F92      		push r9
 720 02aa AF92      		push r10
 721 02ac BF92      		push r11
 722 02ae CF92      		push r12
 723 02b0 DF92      		push r13
 724 02b2 EF92      		push r14
 725 02b4 FF92      		push r15
 726 02b6 0F93      		push r16
 727 02b8 1F93      		push r17
 728 02ba CF93      		push r28
 729 02bc DF93      		push r29
 730 02be CDB7      		in r28,__SP_L__
 731 02c0 DEB7      		in r29,__SP_H__
 732 02c2 6097      		sbiw r28,16
 733 02c4 0FB6      		in __tmp_reg__,__SREG__
 734 02c6 F894      		cli
 735 02c8 DEBF      		out __SP_H__,r29
 736 02ca 0FBE      		out __SREG__,__tmp_reg__
 737 02cc CDBF      		out __SP_L__,r28
 738               	/* prologue end (size=20) */
 739 02ce 2987      		std Y+9,r18
 740 02d0 3A87      		std Y+10,r19
 741 02d2 4B87      		std Y+11,r20
 742 02d4 5C87      		std Y+12,r21
 743 02d6 6D87      		std Y+13,r22
 744 02d8 7E87      		std Y+14,r23
 745 02da 8F87      		std Y+15,r24
 746 02dc 988B      		std Y+16,r25
 748               	.LM75:
 749 02de CE01      		movw r24,r28
 750 02e0 0196      		adiw r24,1
 751 02e2 0E94 0000 		call nrk_time_get
 753               	.LM76:
 754 02e6 8980      		ldd r8,Y+1
 755 02e8 9A80      		ldd r9,Y+2
 756 02ea AB80      		ldd r10,Y+3
 757 02ec BC80      		ldd r11,Y+4
 758 02ee CD80      		ldd r12,Y+5
 759 02f0 DE80      		ldd r13,Y+6
 760 02f2 EF80      		ldd r14,Y+7
 761 02f4 F884      		ldd r15,Y+8
 762 02f6 0985      		ldd r16,Y+9
 763 02f8 1A85      		ldd r17,Y+10
 764 02fa 2B85      		ldd r18,Y+11
 765 02fc 3C85      		ldd r19,Y+12
 766 02fe 4D85      		ldd r20,Y+13
 767 0300 5E85      		ldd r21,Y+14
 768 0302 6F85      		ldd r22,Y+15
 769 0304 7889      		ldd r23,Y+16
 770 0306 CE01      		movw r24,r28
 771 0308 0996      		adiw r24,9
 772 030a 0E94 0000 		call nrk_time_sub
 774               	.LM77:
 775 030e 8F3F      		cpi r24,lo8(-1)
 776 0310 01F4      		brne .L59
 778               	.LM78:
 779 0312 8FEF      		ldi r24,lo8(-1)
 780 0314 9FEF      		ldi r25,hi8(-1)
 781 0316 00C0      		rjmp .L61
 782               	.L59:
 784               	.LM79:
 785 0318 2985      		ldd r18,Y+9
 786 031a 3A85      		ldd r19,Y+10
 787 031c 4B85      		ldd r20,Y+11
 788 031e 5C85      		ldd r21,Y+12
 789 0320 6D85      		ldd r22,Y+13
 790 0322 7E85      		ldd r23,Y+14
 791 0324 8F85      		ldd r24,Y+15
 792 0326 9889      		ldd r25,Y+16
 793 0328 0E94 0000 		call nrk_wait
 794 032c 81E0      		ldi r24,lo8(1)
 795 032e 90E0      		ldi r25,hi8(1)
 796               	.L61:
 797               	/* epilogue: frame size=16 */
 798 0330 6096      		adiw r28,16
 799 0332 0FB6      		in __tmp_reg__,__SREG__
 800 0334 F894      		cli
 801 0336 DEBF      		out __SP_H__,r29
 802 0338 0FBE      		out __SREG__,__tmp_reg__
 803 033a CDBF      		out __SP_L__,r28
 804 033c DF91      		pop r29
 805 033e CF91      		pop r28
 806 0340 1F91      		pop r17
 807 0342 0F91      		pop r16
 808 0344 FF90      		pop r15
 809 0346 EF90      		pop r14
 810 0348 DF90      		pop r13
 811 034a CF90      		pop r12
 812 034c BF90      		pop r11
 813 034e AF90      		pop r10
 814 0350 9F90      		pop r9
 815 0352 8F90      		pop r8
 816 0354 0895      		ret
 817               	/* epilogue end (size=19) */
 818               	/* function nrk_wait_until size 88 (49) */
 823               	.Lscope8:
 825               		.stabd	78,0,0
 827               	.global	nrk_wait_until_nw
 829               	nrk_wait_until_nw:
 830               		.stabd	46,0,0
 832               	.LM80:
 833               	.LFBB9:
 834               	/* prologue: frame size=0 */
 835 0356 1F93      		push r17
 836               	/* prologue end (size=1) */
 838               	.LM81:
 839 0358 0E94 0000 		call nrk_int_disable
 841               	.LM82:
 842 035c E091 0000 		lds r30,nrk_cur_task_TCB
 843 0360 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 844 0364 81E0      		ldi r24,lo8(1)
 845 0366 8583      		std Z+5,r24
 847               	.LM83:
 848 0368 8683      		std Z+6,r24
 850               	.LM84:
 851 036a 0E94 0000 		call _nrk_os_timer_get
 852 036e 182F      		mov r17,r24
 854               	.LM85:
 855 0370 883F      		cpi r24,lo8(-8)
 856 0372 00F4      		brsh .L64
 858               	.LM86:
 859 0374 0E94 0000 		call _nrk_get_next_wakeup
 860 0378 212F      		mov r18,r17
 861 037a 3327      		clr r19
 862 037c 2E5F      		subi r18,lo8(-(2))
 863 037e 3F4F      		sbci r19,hi8(-(2))
 864 0380 9927      		clr r25
 865 0382 8217      		cp r24,r18
 866 0384 9307      		cpc r25,r19
 867 0386 04F0      		brlt .L64
 869               	.LM87:
 870 0388 812F      		mov r24,r17
 871 038a 8E5F      		subi r24,lo8(-(2))
 873               	.LM88:
 874 038c 8093 0000 		sts _nrk_prev_timer_val,r24
 876               	.LM89:
 877 0390 0E94 0000 		call _nrk_set_next_wakeup
 878               	.L64:
 880               	.LM90:
 881 0394 0E94 0000 		call nrk_int_enable
 883               	.LM91:
 884 0398 0E94 0000 		call _nrk_wait_for_scheduler
 886               	.LM92:
 887 039c 81E0      		ldi r24,lo8(1)
 888 039e 90E0      		ldi r25,hi8(1)
 889               	/* epilogue: frame size=0 */
 890 03a0 1F91      		pop r17
 891 03a2 0895      		ret
 892               	/* epilogue end (size=2) */
 893               	/* function nrk_wait_until_nw size 39 (36) */
 898               	.Lscope9:
 900               		.stabd	78,0,0
 903               	.global	nrk_set_next_wakeup
 905               	nrk_set_next_wakeup:
 906               		.stabd	46,0,0
 908               	.LM93:
 909               	.LFBB10:
 910               	/* prologue: frame size=8 */
 911 03a4 1F93      		push r17
 912 03a6 CF93      		push r28
 913 03a8 DF93      		push r29
 914 03aa CDB7      		in r28,__SP_L__
 915 03ac DEB7      		in r29,__SP_H__
 916 03ae 2897      		sbiw r28,8
 917 03b0 0FB6      		in __tmp_reg__,__SREG__
 918 03b2 F894      		cli
 919 03b4 DEBF      		out __SP_H__,r29
 920 03b6 0FBE      		out __SREG__,__tmp_reg__
 921 03b8 CDBF      		out __SP_L__,r28
 922               	/* prologue end (size=11) */
 923 03ba 2983      		std Y+1,r18
 924 03bc 3A83      		std Y+2,r19
 925 03be 4B83      		std Y+3,r20
 926 03c0 5C83      		std Y+4,r21
 927 03c2 6D83      		std Y+5,r22
 928 03c4 7E83      		std Y+6,r23
 929 03c6 8F83      		std Y+7,r24
 930 03c8 9887      		std Y+8,r25
 932               	.LM94:
 933 03ca 0E94 0000 		call nrk_int_disable
 935               	.LM95:
 936 03ce 0E94 0000 		call _nrk_os_timer_get
 937 03d2 182F      		mov r17,r24
 939               	.LM96:
 940 03d4 CE01      		movw r24,r28
 941 03d6 0196      		adiw r24,1
 942 03d8 0E94 0000 		call _nrk_time_to_ticks
 944               	.LM97:
 945 03dc 8330      		cpi r24,3
 946 03de 9105      		cpc r25,__zero_reg__
 947 03e0 00F4      		brsh .L69
 949               	.LM98:
 950 03e2 8FEF      		ldi r24,lo8(-1)
 951 03e4 9FEF      		ldi r25,hi8(-1)
 952 03e6 00C0      		rjmp .L71
 953               	.L69:
 955               	.LM99:
 956 03e8 E091 0000 		lds r30,nrk_cur_task_TCB
 957 03ec F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 958 03f0 810F      		add r24,r17
 959 03f2 911D      		adc r25,__zero_reg__
 960 03f4 968B      		std Z+22,r25
 961 03f6 858B      		std Z+21,r24
 963               	.LM100:
 964 03f8 0E94 0000 		call nrk_int_enable
 965 03fc 81E0      		ldi r24,lo8(1)
 966 03fe 90E0      		ldi r25,hi8(1)
 967               	.L71:
 968               	/* epilogue: frame size=8 */
 969 0400 2896      		adiw r28,8
 970 0402 0FB6      		in __tmp_reg__,__SREG__
 971 0404 F894      		cli
 972 0406 DEBF      		out __SP_H__,r29
 973 0408 0FBE      		out __SREG__,__tmp_reg__
 974 040a CDBF      		out __SP_L__,r28
 975 040c DF91      		pop r29
 976 040e CF91      		pop r28
 977 0410 1F91      		pop r17
 978 0412 0895      		ret
 979               	/* epilogue end (size=10) */
 980               	/* function nrk_set_next_wakeup size 56 (35) */
 986               	.Lscope10:
 988               		.stabd	78,0,0
 991               	.global	nrk_wait_until_ticks
 993               	nrk_wait_until_ticks:
 994               		.stabd	46,0,0
 996               	.LM101:
 997               	.LFBB11:
 998               	/* prologue: frame size=0 */
 999 0414 0F93      		push r16
 1000 0416 1F93      		push r17
 1001               	/* prologue end (size=2) */
 1002 0418 8C01      		movw r16,r24
 1004               	.LM102:
 1005 041a 0E94 0000 		call nrk_int_disable
 1007               	.LM103:
 1008 041e E091 0000 		lds r30,nrk_cur_task_TCB
 1009 0422 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1010 0426 81E0      		ldi r24,lo8(1)
 1011 0428 8583      		std Z+5,r24
 1013               	.LM104:
 1014 042a 168B      		std Z+22,r17
 1015 042c 058B      		std Z+21,r16
 1017               	.LM105:
 1018 042e 0E94 0000 		call _nrk_os_timer_get
 1019 0432 082F      		mov r16,r24
 1021               	.LM106:
 1022 0434 883F      		cpi r24,lo8(-8)
 1023 0436 00F4      		brsh .L74
 1025               	.LM107:
 1026 0438 0E94 0000 		call _nrk_get_next_wakeup
 1027 043c 202F      		mov r18,r16
 1028 043e 3327      		clr r19
 1029 0440 2E5F      		subi r18,lo8(-(2))
 1030 0442 3F4F      		sbci r19,hi8(-(2))
 1031 0444 9927      		clr r25
 1032 0446 8217      		cp r24,r18
 1033 0448 9307      		cpc r25,r19
 1034 044a 04F0      		brlt .L74
 1036               	.LM108:
 1037 044c 802F      		mov r24,r16
 1038 044e 8E5F      		subi r24,lo8(-(2))
 1040               	.LM109:
 1041 0450 8093 0000 		sts _nrk_prev_timer_val,r24
 1043               	.LM110:
 1044 0454 0E94 0000 		call _nrk_set_next_wakeup
 1045               	.L74:
 1047               	.LM111:
 1048 0458 0E94 0000 		call nrk_int_enable
 1050               	.LM112:
 1051 045c 0E94 0000 		call _nrk_wait_for_scheduler
 1053               	.LM113:
 1054 0460 81E0      		ldi r24,lo8(1)
 1055 0462 90E0      		ldi r25,hi8(1)
 1056               	/* epilogue: frame size=0 */
 1057 0464 1F91      		pop r17
 1058 0466 0F91      		pop r16
 1059 0468 0895      		ret
 1060               	/* epilogue end (size=3) */
 1061               	/* function nrk_wait_until_ticks size 43 (38) */
 1066               	.Lscope11:
 1068               		.stabd	78,0,0
 1071               	.global	nrk_wait_ticks
 1073               	nrk_wait_ticks:
 1074               		.stabd	46,0,0
 1076               	.LM114:
 1077               	.LFBB12:
 1078               	/* prologue: frame size=0 */
 1079 046a FF92      		push r15
 1080 046c 0F93      		push r16
 1081 046e 1F93      		push r17
 1082 0470 CF93      		push r28
 1083 0472 DF93      		push r29
 1084               	/* prologue end (size=5) */
 1085 0474 8C01      		movw r16,r24
 1087               	.LM115:
 1088 0476 0E94 0000 		call nrk_int_disable
 1090               	.LM116:
 1091 047a E091 0000 		lds r30,nrk_cur_task_TCB
 1092 047e F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1093 0482 81E0      		ldi r24,lo8(1)
 1094 0484 8583      		std Z+5,r24
 1096               	.LM117:
 1097 0486 0E94 0000 		call _nrk_os_timer_get
 1098 048a F82E      		mov r15,r24
 1100               	.LM118:
 1101 048c E091 0000 		lds r30,nrk_cur_task_TCB
 1102 0490 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1103 0494 C82F      		mov r28,r24
 1104 0496 DD27      		clr r29
 1105 0498 0C0F      		add r16,r28
 1106 049a 1D1F      		adc r17,r29
 1107 049c 168B      		std Z+22,r17
 1108 049e 058B      		std Z+21,r16
 1110               	.LM119:
 1111 04a0 87EF      		ldi r24,lo8(-9)
 1112 04a2 8F15      		cp r24,r15
 1113 04a4 00F0      		brlo .L79
 1115               	.LM120:
 1116 04a6 0E94 0000 		call _nrk_get_next_wakeup
 1117 04aa 2296      		adiw r28,2
 1118 04ac 9927      		clr r25
 1119 04ae 8C17      		cp r24,r28
 1120 04b0 9D07      		cpc r25,r29
 1121 04b2 04F0      		brlt .L79
 1123               	.LM121:
 1124 04b4 8F2D      		mov r24,r15
 1125 04b6 8E5F      		subi r24,lo8(-(2))
 1127               	.LM122:
 1128 04b8 8093 0000 		sts _nrk_prev_timer_val,r24
 1130               	.LM123:
 1131 04bc 0E94 0000 		call _nrk_set_next_wakeup
 1132               	.L79:
 1134               	.LM124:
 1135 04c0 0E94 0000 		call nrk_int_enable
 1137               	.LM125:
 1138 04c4 0E94 0000 		call _nrk_wait_for_scheduler
 1140               	.LM126:
 1141 04c8 81E0      		ldi r24,lo8(1)
 1142 04ca 90E0      		ldi r25,hi8(1)
 1143               	/* epilogue: frame size=0 */
 1144 04cc DF91      		pop r29
 1145 04ce CF91      		pop r28
 1146 04d0 1F91      		pop r17
 1147 04d2 0F91      		pop r16
 1148 04d4 FF90      		pop r15
 1149 04d6 0895      		ret
 1150               	/* epilogue end (size=6) */
 1151               	/* function nrk_wait_ticks size 55 (44) */
 1156               	.Lscope12:
 1158               		.stabd	78,0,0
 1161               	.global	nrk_wait_until_next_n_periods
 1163               	nrk_wait_until_next_n_periods:
 1164               		.stabd	46,0,0
 1166               	.LM127:
 1167               	.LFBB13:
 1168               	/* prologue: frame size=0 */
 1169 04d8 1F93      		push r17
 1170 04da CF93      		push r28
 1171 04dc DF93      		push r29
 1172               	/* prologue end (size=3) */
 1173 04de EC01      		movw r28,r24
 1175               	.LM128:
 1176 04e0 0E94 0000 		call nrk_stack_check
 1178               	.LM129:
 1179 04e4 2097      		sbiw r28,0
 1180 04e6 01F4      		brne .L84
 1182               	.LM130:
 1183 04e8 C1E0      		ldi r28,lo8(1)
 1184 04ea D0E0      		ldi r29,hi8(1)
 1185               	.L84:
 1187               	.LM131:
 1188 04ec 0E94 0000 		call nrk_int_disable
 1190               	.LM132:
 1191 04f0 E091 0000 		lds r30,nrk_cur_task_TCB
 1192 04f4 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1193 04f8 81E0      		ldi r24,lo8(1)
 1194 04fa 8583      		std Z+5,r24
 1196               	.LM133:
 1197 04fc D0A3      		std Z+32,r29
 1198 04fe C78F      		std Z+31,r28
 1200               	.LM134:
 1201 0500 0E94 0000 		call _nrk_os_timer_get
 1202 0504 182F      		mov r17,r24
 1204               	.LM135:
 1205 0506 883F      		cpi r24,lo8(-8)
 1206 0508 00F4      		brsh .L86
 1208               	.LM136:
 1209 050a 0E94 0000 		call _nrk_get_next_wakeup
 1210 050e 212F      		mov r18,r17
 1211 0510 3327      		clr r19
 1212 0512 2E5F      		subi r18,lo8(-(2))
 1213 0514 3F4F      		sbci r19,hi8(-(2))
 1214 0516 9927      		clr r25
 1215 0518 8217      		cp r24,r18
 1216 051a 9307      		cpc r25,r19
 1217 051c 04F0      		brlt .L86
 1219               	.LM137:
 1220 051e 812F      		mov r24,r17
 1221 0520 8E5F      		subi r24,lo8(-(2))
 1223               	.LM138:
 1224 0522 8093 0000 		sts _nrk_prev_timer_val,r24
 1226               	.LM139:
 1227 0526 0E94 0000 		call _nrk_set_next_wakeup
 1228               	.L86:
 1230               	.LM140:
 1231 052a 0E94 0000 		call nrk_int_enable
 1233               	.LM141:
 1234 052e 0E94 0000 		call _nrk_wait_for_scheduler
 1236               	.LM142:
 1237 0532 81E0      		ldi r24,lo8(1)
 1238 0534 90E0      		ldi r25,hi8(1)
 1239               	/* epilogue: frame size=0 */
 1240 0536 DF91      		pop r29
 1241 0538 CF91      		pop r28
 1242 053a 1F91      		pop r17
 1243 053c 0895      		ret
 1244               	/* epilogue end (size=4) */
 1245               	/* function nrk_wait_until_next_n_periods size 51 (44) */
 1250               	.Lscope13:
 1252               		.stabd	78,0,0
 1254               	.global	nrk_wait_until_next_period
 1256               	nrk_wait_until_next_period:
 1257               		.stabd	46,0,0
 1259               	.LM143:
 1260               	.LFBB14:
 1261               	/* prologue: frame size=0 */
 1262 053e 1F93      		push r17
 1263               	/* prologue end (size=1) */
 1265               	.LM144:
 1266 0540 0E94 0000 		call nrk_stack_check
 1268               	.LM145:
 1269 0544 0E94 0000 		call nrk_int_disable
 1271               	.LM146:
 1272 0548 E091 0000 		lds r30,nrk_cur_task_TCB
 1273 054c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1274 0550 81E0      		ldi r24,lo8(1)
 1275 0552 90E0      		ldi r25,hi8(1)
 1276 0554 90A3      		std Z+32,r25
 1277 0556 878F      		std Z+31,r24
 1279               	.LM147:
 1280 0558 81E0      		ldi r24,lo8(1)
 1281 055a 8583      		std Z+5,r24
 1283               	.LM148:
 1284 055c 0E94 0000 		call _nrk_os_timer_get
 1285 0560 182F      		mov r17,r24
 1287               	.LM149:
 1288 0562 883F      		cpi r24,lo8(-8)
 1289 0564 00F4      		brsh .L91
 1291               	.LM150:
 1292 0566 0E94 0000 		call _nrk_get_next_wakeup
 1293 056a 212F      		mov r18,r17
 1294 056c 3327      		clr r19
 1295 056e 2E5F      		subi r18,lo8(-(2))
 1296 0570 3F4F      		sbci r19,hi8(-(2))
 1297 0572 9927      		clr r25
 1298 0574 8217      		cp r24,r18
 1299 0576 9307      		cpc r25,r19
 1300 0578 04F0      		brlt .L91
 1302               	.LM151:
 1303 057a 812F      		mov r24,r17
 1304 057c 8E5F      		subi r24,lo8(-(2))
 1306               	.LM152:
 1307 057e 8093 0000 		sts _nrk_prev_timer_val,r24
 1309               	.LM153:
 1310 0582 0E94 0000 		call _nrk_set_next_wakeup
 1311               	.L91:
 1313               	.LM154:
 1314 0586 0E94 0000 		call nrk_int_enable
 1316               	.LM155:
 1317 058a 0E94 0000 		call _nrk_wait_for_scheduler
 1319               	.LM156:
 1320 058e 81E0      		ldi r24,lo8(1)
 1321 0590 90E0      		ldi r25,hi8(1)
 1322               	/* epilogue: frame size=0 */
 1323 0592 1F91      		pop r17
 1324 0594 0895      		ret
 1325               	/* epilogue end (size=2) */
 1326               	/* function nrk_wait_until_next_period size 44 (41) */
 1331               	.Lscope14:
 1333               		.stabd	78,0,0
 1335               	.global	nrk_terminate_task
 1337               	nrk_terminate_task:
 1338               		.stabd	46,0,0
 1340               	.LM157:
 1341               	.LFBB15:
 1342               	/* prologue: frame size=0 */
 1343               	/* prologue end (size=0) */
 1345               	.LM158:
 1346 0596 E091 0000 		lds r30,nrk_cur_task_TCB
 1347 059a F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1348 059e 8085      		ldd r24,Z+8
 1349 05a0 0E94 0000 		call nrk_rem_from_readyQ
 1351               	.LM159:
 1352 05a4 E091 0000 		lds r30,nrk_cur_task_TCB
 1353 05a8 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 1354 05ac 84E0      		ldi r24,lo8(4)
 1355 05ae 8187      		std Z+9,r24
 1357               	.LM160:
 1358 05b0 0E94 0000 		call nrk_wait_until_next_period
 1360               	.LM161:
 1361 05b4 81E0      		ldi r24,lo8(1)
 1362 05b6 90E0      		ldi r25,hi8(1)
 1363               	/* epilogue: frame size=0 */
 1364 05b8 0895      		ret
 1365               	/* epilogue end (size=1) */
 1366               	/* function nrk_terminate_task size 18 (17) */
 1368               	.Lscope15:
 1370               		.stabd	78,0,0
 1373               	.global	nrk_activate_task
 1375               	nrk_activate_task:
 1376               		.stabd	46,0,0
 1378               	.LM162:
 1379               	.LFBB16:
 1380               	/* prologue: frame size=0 */
 1381 05ba EF92      		push r14
 1382 05bc FF92      		push r15
 1383 05be 0F93      		push r16
 1384 05c0 1F93      		push r17
 1385 05c2 CF93      		push r28
 1386 05c4 DF93      		push r29
 1387               	/* prologue end (size=6) */
 1388 05c6 EC01      		movw r28,r24
 1390               	.LM163:
 1391 05c8 4B81      		ldd r20,Y+3
 1392 05ca 5C81      		ldd r21,Y+4
 1393 05cc 6981      		ldd r22,Y+1
 1394 05ce 7A81      		ldd r23,Y+2
 1395 05d0 8D81      		ldd r24,Y+5
 1396 05d2 9E81      		ldd r25,Y+6
 1397 05d4 0E94 0000 		call nrk_task_stk_init
 1398 05d8 BC01      		movw r22,r24
 1400               	.LM164:
 1401 05da 8F81      		ldd r24,Y+7
 1402 05dc 8823      		tst r24
 1403 05de 01F0      		breq .L98
 1405               	.LM165:
 1406 05e0 4B81      		ldd r20,Y+3
 1407 05e2 5C81      		ldd r21,Y+4
 1408 05e4 EE24      		clr r14
 1409 05e6 FF24      		clr r15
 1410 05e8 00E0      		ldi r16,lo8(0)
 1411 05ea 10E0      		ldi r17,hi8(0)
 1412 05ec 20E0      		ldi r18,lo8(0)
 1413 05ee 30E0      		ldi r19,hi8(0)
 1414 05f0 CE01      		movw r24,r28
 1415 05f2 0E94 0000 		call nrk_TCB_init
 1417               	.LM166:
 1418 05f6 1F82      		std Y+7,__zero_reg__
 1419 05f8 00C0      		rjmp .L100
 1420               	.L98:
 1422               	.LM167:
 1423 05fa 8881      		ld r24,Y
 1424 05fc 9927      		clr r25
 1425 05fe 87FD      		sbrc r24,7
 1426 0600 9095      		com r25
 1427 0602 FC01      		movw r30,r24
 1428 0604 A5E0      		ldi r26,5
 1429 0606 EE0F      	1:	lsl r30
 1430 0608 FF1F      		rol r31
 1431 060a AA95      		dec r26
 1432 060c 01F4      		brne 1b
 1433 060e E80F      		add r30,r24
 1434 0610 F91F      		adc r31,r25
 1435 0612 E050      		subi r30,lo8(-(nrk_task_TCB))
 1436 0614 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1437 0616 8185      		ldd r24,Z+9
 1438 0618 8330      		cpi r24,lo8(3)
 1439 061a 01F0      		breq .L101
 1440 061c 8FEF      		ldi r24,lo8(-1)
 1441 061e 9FEF      		ldi r25,hi8(-1)
 1442 0620 00C0      		rjmp .L103
 1443               	.L101:
 1445               	.LM168:
 1446 0622 7183      		std Z+1,r23
 1447 0624 6083      		st Z,r22
 1448               	.L100:
 1450               	.LM169:
 1451 0626 8881      		ld r24,Y
 1452 0628 9927      		clr r25
 1453 062a 87FD      		sbrc r24,7
 1454 062c 9095      		com r25
 1455 062e FC01      		movw r30,r24
 1456 0630 75E0      		ldi r23,5
 1457 0632 EE0F      	1:	lsl r30
 1458 0634 FF1F      		rol r31
 1459 0636 7A95      		dec r23
 1460 0638 01F4      		brne 1b
 1461 063a E80F      		add r30,r24
 1462 063c F91F      		adc r31,r25
 1463 063e E050      		subi r30,lo8(-(nrk_task_TCB))
 1464 0640 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1465 0642 8589      		ldd r24,Z+21
 1466 0644 9689      		ldd r25,Z+22
 1467 0646 892B      		or r24,r25
 1468 0648 01F4      		brne .L107
 1470               	.LM170:
 1471 064a 82E0      		ldi r24,lo8(2)
 1472 064c 8187      		std Z+9,r24
 1474               	.LM171:
 1475 064e 8881      		ld r24,Y
 1476 0650 0E94 0000 		call nrk_add_to_readyQ
 1477               	.L107:
 1478 0654 81E0      		ldi r24,lo8(1)
 1479 0656 90E0      		ldi r25,hi8(1)
 1480               	.L103:
 1481               	/* epilogue: frame size=0 */
 1482 0658 DF91      		pop r29
 1483 065a CF91      		pop r28
 1484 065c 1F91      		pop r17
 1485 065e 0F91      		pop r16
 1486 0660 FF90      		pop r15
 1487 0662 EF90      		pop r14
 1488 0664 0895      		ret
 1489               	/* epilogue end (size=7) */
 1490               	/* function nrk_activate_task size 86 (73) */
 1495               	.Lscope16:
 1497               		.stabd	78,0,0
 1498               		.comm _nrk_signal_list,4,1
 1499               		.comm nrk_idle_task_stk,128,1
 1500               		.comm nrk_kernel_stk_ptr,2,1
 1501               		.comm _nrk_prev_timer_val,1,1
 1502               		.comm _nrk_time_trigger,1,1
 1503               		.comm app_timer0_callback,2,1
 1504               		.comm app_timer0_prescale,1,1
 1505               		.comm _nrk_cpu_state,1,1
 1506               		.comm next_next_wakeup,2,1
 1507               		.comm error_task,1,1
 1508               		.comm error_num,1,1
 1521               	.Letext0:
 1522               	/* File "../../src/kernel/source/nrk_task.c": code  819 = 0x0333 ( 677), prologues  66, epilogues  
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_task.c
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:2      *ABS*:000000000000003f __SREG__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:3      *ABS*:000000000000003e __SP_H__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:4      *ABS*:000000000000003d __SP_L__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:130    .text:0000000000000000 nrk_get_high_ready_task_ID
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:154    .text:000000000000000e nrk_print_readyQ
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:192    .text:0000000000000024 nrk_add_to_readyQ
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:404    .text:0000000000000132 nrk_rem_from_readyQ
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:532    .text:00000000000001d6 nrk_get_pid
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:556    .text:00000000000001e4 _nrk_wait_for_scheduler
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:586    .text:00000000000001f8 nrk_wait
                            *COM*:0000000000000001 _nrk_prev_timer_val
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:712    .text:00000000000002a6 nrk_wait_until
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:829    .text:0000000000000356 nrk_wait_until_nw
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:905    .text:00000000000003a4 nrk_set_next_wakeup
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:993    .text:0000000000000414 nrk_wait_until_ticks
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:1073   .text:000000000000046a nrk_wait_ticks
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:1163   .text:00000000000004d8 nrk_wait_until_next_n_periods
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:1256   .text:000000000000053e nrk_wait_until_next_period
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:1337   .text:0000000000000596 nrk_terminate_task
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccMwzrVV.s:1375   .text:00000000000005ba nrk_activate_task
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_head_node
_free_node
nrk_task_TCB
nrk_cur_task_TCB
nrk_idle
nrk_stack_check
nrk_int_disable
_nrk_os_timer_get
_nrk_time_to_ticks
_nrk_get_next_wakeup
_nrk_set_next_wakeup
nrk_int_enable
nrk_time_get
nrk_time_sub
nrk_task_stk_init
nrk_TCB_init

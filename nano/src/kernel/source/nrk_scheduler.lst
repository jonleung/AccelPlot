   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 128               	.global	_nrk_scheduler
 130               	_nrk_scheduler:
 131               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_scheduler.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_scheduler.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_scheduler.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_scheduler.c **** *
   6:../../src/kernel/source/nrk_scheduler.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_scheduler.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_scheduler.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_scheduler.c **** *
  10:../../src/kernel/source/nrk_scheduler.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_scheduler.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_scheduler.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_scheduler.c **** *
  14:../../src/kernel/source/nrk_scheduler.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_scheduler.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_scheduler.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_scheduler.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_scheduler.c **** *
  19:../../src/kernel/source/nrk_scheduler.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_scheduler.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_scheduler.c **** *
  22:../../src/kernel/source/nrk_scheduler.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_scheduler.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_scheduler.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_scheduler.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk_scheduler.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk_scheduler.c **** 
  28:../../src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:../../src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:../../src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:../../src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:../../src/kernel/source/nrk_scheduler.c **** 
  44:../../src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  45:../../src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  46:../../src/kernel/source/nrk_scheduler.c **** #define CONTEXT_SWAP_TIME_BOUND    750
  47:../../src/kernel/source/nrk_scheduler.c **** uint8_t t;
  48:../../src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  49:../../src/kernel/source/nrk_scheduler.c **** {	   
 133               	.LM0:
 134               	.LFBB1:
 135               	/* prologue: frame size=0 */
 136 0000 8F92      		push r8
 137 0002 9F92      		push r9
 138 0004 AF92      		push r10
 139 0006 BF92      		push r11
 140 0008 CF92      		push r12
 141 000a DF92      		push r13
 142 000c EF92      		push r14
 143 000e FF92      		push r15
 144 0010 0F93      		push r16
 145 0012 1F93      		push r17
 146 0014 CF93      		push r28
 147 0016 DF93      		push r29
 148               	/* prologue end (size=12) */
  50:../../src/kernel/source/nrk_scheduler.c **** 	int8_t task_ID;
  51:../../src/kernel/source/nrk_scheduler.c **** 	uint16_t next_wake;
  52:../../src/kernel/source/nrk_scheduler.c **** 	uint16_t start_time_stamp;
  53:../../src/kernel/source/nrk_scheduler.c **** 
  54:../../src/kernel/source/nrk_scheduler.c **** 	nrk_int_disable();   // this should be removed...  Not needed
 150               	.LM1:
 151 0018 0E94 0000 		call nrk_int_disable
  55:../../src/kernel/source/nrk_scheduler.c **** 
  56:../../src/kernel/source/nrk_scheduler.c **** 
  57:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  58:../../src/kernel/source/nrk_scheduler.c **** 	_nrk_high_speed_timer_reset();
 153               	.LM2:
 154 001c 0E94 0000 		call _nrk_high_speed_timer_reset
  59:../../src/kernel/source/nrk_scheduler.c **** 	start_time_stamp=_nrk_high_speed_timer_get();
 156               	.LM3:
 157 0020 0E94 0000 		call _nrk_high_speed_timer_get
 158 0024 4C01      		movw r8,r24
  60:../../src/kernel/source/nrk_scheduler.c **** #endif
  61:../../src/kernel/source/nrk_scheduler.c **** 	_nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 160               	.LM4:
 161 0026 8AEF      		ldi r24,lo8(-6)
 162 0028 0E94 0000 		call _nrk_set_next_wakeup
  62:../../src/kernel/source/nrk_scheduler.c **** 	// Set to huge number which will later get set to min
  63:../../src/kernel/source/nrk_scheduler.c **** 
  64:../../src/kernel/source/nrk_scheduler.c **** 	next_wake=60000;
  65:../../src/kernel/source/nrk_scheduler.c **** 	// Safety zone starts here....
  66:../../src/kernel/source/nrk_scheduler.c **** 
  67:../../src/kernel/source/nrk_scheduler.c **** 
  68:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_WATCHDOG
  69:../../src/kernel/source/nrk_scheduler.c **** 	nrk_watchdog_reset();
 164               	.LM5:
 165 002c 0E94 0000 		call nrk_watchdog_reset
  70:../../src/kernel/source/nrk_scheduler.c **** 	#endif
  71:../../src/kernel/source/nrk_scheduler.c **** 
  72:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_SW_WDT
  73:../../src/kernel/source/nrk_scheduler.c **** 	_nrk_sw_wdt_check();
  74:../../src/kernel/source/nrk_scheduler.c **** 	#endif
  75:../../src/kernel/source/nrk_scheduler.c **** 
  76:../../src/kernel/source/nrk_scheduler.c **** 
  77:../../src/kernel/source/nrk_scheduler.c **** 
  78:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_KERNEL_TEST
  79:../../src/kernel/source/nrk_scheduler.c **** 	//nrk_kprintf( PSTR("*")); 
  80:../../src/kernel/source/nrk_scheduler.c **** 	//Check if OS tick was delayed...
  81:../../src/kernel/source/nrk_scheduler.c ****         // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) { 
  82:../../src/kernel/source/nrk_scheduler.c **** 	//		nrk_kprintf( PSTR("X" ));
  83:../../src/kernel/source/nrk_scheduler.c **** 		//printf( "%u ",_nrk_os_timer_get());
  84:../../src/kernel/source/nrk_scheduler.c **** 	//	}
  85:../../src/kernel/source/nrk_scheduler.c **** 		//printf( "%u\r\n",_nrk_prev_timer_val);
  86:../../src/kernel/source/nrk_scheduler.c **** 	if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  87:../../src/kernel/source/nrk_scheduler.c **** 		nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  88:../../src/kernel/source/nrk_scheduler.c **** 	#endif
  89:../../src/kernel/source/nrk_scheduler.c **** 	//while(_nrk_time_trigger>0)
  90:../../src/kernel/source/nrk_scheduler.c **** 	//{
  91:../../src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 167               	.LM6:
 168 0030 6091 0000 		lds r22,_nrk_prev_timer_val
 169 0034 7727      		clr r23
 170 0036 8827      		clr r24
 171 0038 9927      		clr r25
 172 003a 23EB      		ldi r18,lo8(976563)
 173 003c 36EE      		ldi r19,hi8(976563)
 174 003e 4EE0      		ldi r20,hlo8(976563)
 175 0040 50E0      		ldi r21,hhi8(976563)
 176 0042 0E94 0000 		call __mulsi3
 177 0046 7B01      		movw r14,r22
 178 0048 8C01      		movw r16,r24
 179 004a 8091 0000 		lds r24,nrk_system_time+4
 180 004e 9091 0000 		lds r25,(nrk_system_time+4)+1
 181 0052 A091 0000 		lds r26,(nrk_system_time+4)+2
 182 0056 B091 0000 		lds r27,(nrk_system_time+4)+3
 183 005a E80E      		add r14,r24
 184 005c F91E      		adc r15,r25
 185 005e 0A1F      		adc r16,r26
 186 0060 1B1F      		adc r17,r27
  92:../../src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 188               	.LM7:
 189 0062 C801      		movw r24,r16
 190 0064 B701      		movw r22,r14
 191 0066 0E94 0000 		call __udivmodsi4
 192 006a A801      		movw r20,r16
 193 006c 9701      		movw r18,r14
 194 006e 261B      		sub r18,r22
 195 0070 370B      		sbc r19,r23
 196 0072 480B      		sbc r20,r24
 197 0074 590B      		sbc r21,r25
 198 0076 8091 0000 		lds r24,nrk_system_time
 199 007a 9091 0000 		lds r25,(nrk_system_time)+1
 200 007e A091 0000 		lds r26,(nrk_system_time)+2
 201 0082 B091 0000 		lds r27,(nrk_system_time)+3
 202 0086 00C0      		rjmp .L2
 203               	.L3:
  93:../../src/kernel/source/nrk_scheduler.c **** 
  94:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_STATS_TRACKER
  95:../../src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
  96:../../src/kernel/source/nrk_scheduler.c **** 	{
  97:../../src/kernel/source/nrk_scheduler.c **** 		if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
  98:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
  99:../../src/kernel/source/nrk_scheduler.c **** 		// Add 0 time since the preempted call before set the correct value
 100:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 101:../../src/kernel/source/nrk_scheduler.c **** 	}
 102:../../src/kernel/source/nrk_scheduler.c **** 	else
 103:../../src/kernel/source/nrk_scheduler.c **** 	{
 104:../../src/kernel/source/nrk_scheduler.c **** 	  if(nrk_cur_task_TCB->suspend_flag==1)
 105:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 106:../../src/kernel/source/nrk_scheduler.c **** 	  else
 107:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 108:../../src/kernel/source/nrk_scheduler.c **** 	}
 109:../../src/kernel/source/nrk_scheduler.c **** 	#endif
 110:../../src/kernel/source/nrk_scheduler.c **** 	
 111:../../src/kernel/source/nrk_scheduler.c **** 	while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 112:../../src/kernel/source/nrk_scheduler.c **** 	{
 113:../../src/kernel/source/nrk_scheduler.c **** 		nrk_system_time.nano_secs-=NANOS_PER_SEC;
 205               	.LM8:
 206 0088 E12C      		mov r14,__zero_reg__
 207 008a 66E3      		ldi r22,hi8(-1000000000)
 208 008c F62E      		mov r15,r22
 209 008e 65E6      		ldi r22,hlo8(-1000000000)
 210 0090 062F      		mov r16,r22
 211 0092 64EC      		ldi r22,hhi8(-1000000000)
 212 0094 162F      		mov r17,r22
 213 0096 E20E      		add r14,r18
 214 0098 F31E      		adc r15,r19
 215 009a 041F      		adc r16,r20
 216 009c 151F      		adc r17,r21
 114:../../src/kernel/source/nrk_scheduler.c **** 		nrk_system_time.secs++;
 115:../../src/kernel/source/nrk_scheduler.c **** 		nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 218               	.LM9:
 219 009e C801      		movw r24,r16
 220 00a0 B701      		movw r22,r14
 221 00a2 23EB      		ldi r18,lo8(976563)
 222 00a4 36EE      		ldi r19,hi8(976563)
 223 00a6 4EE0      		ldi r20,hlo8(976563)
 224 00a8 50E0      		ldi r21,hhi8(976563)
 225 00aa 0E94 0000 		call __udivmodsi4
 226 00ae A801      		movw r20,r16
 227 00b0 9701      		movw r18,r14
 228 00b2 261B      		sub r18,r22
 229 00b4 370B      		sbc r19,r23
 230 00b6 480B      		sbc r20,r24
 231 00b8 590B      		sbc r21,r25
 232 00ba D601      		movw r26,r12
 233 00bc C501      		movw r24,r10
 234               	.L2:
 235 00be 5C01      		movw r10,r24
 236 00c0 6D01      		movw r12,r26
 237 00c2 0894      		sec
 238 00c4 A11C      		adc r10,__zero_reg__
 239 00c6 B11C      		adc r11,__zero_reg__
 240 00c8 C11C      		adc r12,__zero_reg__
 241 00ca D11C      		adc r13,__zero_reg__
 243               	.LM10:
 244 00cc 2030      		cpi r18,lo8(1000000000)
 245 00ce 6AEC      		ldi r22,hi8(1000000000)
 246 00d0 3607      		cpc r19,r22
 247 00d2 6AE9      		ldi r22,hlo8(1000000000)
 248 00d4 4607      		cpc r20,r22
 249 00d6 6BE3      		ldi r22,hhi8(1000000000)
 250 00d8 5607      		cpc r21,r22
 251 00da 00F4      		brsh .L3
 252 00dc 8093 0000 		sts nrk_system_time,r24
 253 00e0 9093 0000 		sts (nrk_system_time)+1,r25
 254 00e4 A093 0000 		sts (nrk_system_time)+2,r26
 255 00e8 B093 0000 		sts (nrk_system_time)+3,r27
 256 00ec 2093 0000 		sts nrk_system_time+4,r18
 257 00f0 3093 0000 		sts (nrk_system_time+4)+1,r19
 258 00f4 4093 0000 		sts (nrk_system_time+4)+2,r20
 259 00f8 5093 0000 		sts (nrk_system_time+4)+3,r21
 116:../../src/kernel/source/nrk_scheduler.c **** 	}
 117:../../src/kernel/source/nrk_scheduler.c **** 	//  _nrk_time_trigger--;
 118:../../src/kernel/source/nrk_scheduler.c **** 	//}  
 119:../../src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 261               	.LM11:
 262 00fc E091 0000 		lds r30,nrk_cur_task_TCB
 263 0100 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 264 0104 8581      		ldd r24,Z+5
 265 0106 8823      		tst r24
 266 0108 01F0      		breq .L5
 267 010a 8185      		ldd r24,Z+9
 268 010c 8430      		cpi r24,lo8(4)
 269 010e 01F0      		breq .L5
 120:../../src/kernel/source/nrk_scheduler.c **** 	{
 121:../../src/kernel/source/nrk_scheduler.c **** 	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 122:../../src/kernel/source/nrk_scheduler.c **** 		
 123:../../src/kernel/source/nrk_scheduler.c **** 		if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)  
 271               	.LM12:
 272 0110 8781      		ldd r24,Z+7
 273 0112 8230      		cpi r24,lo8(2)
 274 0114 01F0      		breq .L74
 124:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 125:../../src/kernel/source/nrk_scheduler.c **** 		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0) 
 276               	.LM13:
 277 0116 8823      		tst r24
 278 0118 01F0      		breq .L11
 279 011a 8681      		ldd r24,Z+6
 280 011c 8823      		tst r24
 281 011e 01F4      		brne .L13
 282               	.L74:
 126:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 284               	.LM14:
 285 0120 85E0      		ldi r24,lo8(5)
 286 0122 00C0      		rjmp .L75
 287               	.L13:
 127:../../src/kernel/source/nrk_scheduler.c **** 		else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1) 
 128:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->task_state = SUSPENDED;
 289               	.LM15:
 290 0124 83E0      		ldi r24,lo8(3)
 291               	.L75:
 292 0126 8187      		std Z+9,r24
 293 0128 00C0      		rjmp .L10
 294               	.L11:
 129:../../src/kernel/source/nrk_scheduler.c **** 		else	
 130:../../src/kernel/source/nrk_scheduler.c **** 		{
 131:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->task_state = SUSPENDED;
 296               	.LM16:
 297 012a 83E0      		ldi r24,lo8(3)
 298 012c 8187      		std Z+9,r24
 132:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->event_suspend=0;
 300               	.LM17:
 301 012e E091 0000 		lds r30,nrk_cur_task_TCB
 302 0132 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 303 0136 1782      		std Z+7,__zero_reg__
 133:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->nw_flag=0;
 305               	.LM18:
 306 0138 E091 0000 		lds r30,nrk_cur_task_TCB
 307 013c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 308 0140 1682      		std Z+6,__zero_reg__
 309               	.L10:
 134:../../src/kernel/source/nrk_scheduler.c **** 		}
 135:../../src/kernel/source/nrk_scheduler.c **** 		nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 311               	.LM19:
 312 0142 E091 0000 		lds r30,nrk_cur_task_TCB
 313 0146 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 314 014a 8085      		ldd r24,Z+8
 315 014c 0E94 0000 		call nrk_rem_from_readyQ
 316               	.L5:
 136:../../src/kernel/source/nrk_scheduler.c **** 	}
 137:../../src/kernel/source/nrk_scheduler.c **** 	// nrk_print_readyQ();
 138:../../src/kernel/source/nrk_scheduler.c **** 
 139:../../src/kernel/source/nrk_scheduler.c **** 	// Update cpu used value for ended task
 140:../../src/kernel/source/nrk_scheduler.c **** 	// If the task has used its reserve, suspend task
 141:../../src/kernel/source/nrk_scheduler.c **** 	// Don't disable IdleTask which is 0
 142:../../src/kernel/source/nrk_scheduler.c **** 	// Don't decrease cpu_remaining if reserve is 0 and hence disabled
 143:../../src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task
 318               	.LM20:
 319 0150 E091 0000 		lds r30,nrk_cur_task_TCB
 320 0154 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 321 0158 858D      		ldd r24,Z+29
 322 015a 968D      		ldd r25,Z+30
 323 015c 892B      		or r24,r25
 324 015e 01F0      		breq .L15
 325 0160 6085      		ldd r22,Z+8
 326 0162 6623      		tst r22
 327 0164 01F0      		breq .L15
 328 0166 8185      		ldd r24,Z+9
 329 0168 8430      		cpi r24,lo8(4)
 330 016a 01F0      		breq .L15
 144:../../src/kernel/source/nrk_scheduler.c **** 	{
 145:../../src/kernel/source/nrk_scheduler.c **** 		if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 332               	.LM21:
 333 016c 218D      		ldd r18,Z+25
 334 016e 328D      		ldd r19,Z+26
 335 0170 8091 0000 		lds r24,_nrk_prev_timer_val
 336 0174 9927      		clr r25
 337 0176 2817      		cp r18,r24
 338 0178 3907      		cpc r19,r25
 339 017a 00F4      		brsh .L19
 146:../../src/kernel/source/nrk_scheduler.c **** 		{
 147:../../src/kernel/source/nrk_scheduler.c **** 			#ifdef NRK_STATS_TRACKER
 148:../../src/kernel/source/nrk_scheduler.c **** 			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 149:../../src/kernel/source/nrk_scheduler.c **** 			#endif
 150:../../src/kernel/source/nrk_scheduler.c **** 			nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 341               	.LM22:
 342 017c 82E0      		ldi r24,lo8(2)
 343 017e 0E94 0000 		call nrk_kernel_error_add
 151:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->cpu_remaining=0;
 345               	.LM23:
 346 0182 E091 0000 		lds r30,nrk_cur_task_TCB
 347 0186 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 348 018a 128E      		std Z+26,__zero_reg__
 349 018c 118E      		std Z+25,__zero_reg__
 350 018e 00C0      		rjmp .L21
 351               	.L19:
 152:../../src/kernel/source/nrk_scheduler.c **** 		}else
 153:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 353               	.LM24:
 354 0190 281B      		sub r18,r24
 355 0192 390B      		sbc r19,r25
 356 0194 328F      		std Z+26,r19
 357 0196 218F      		std Z+25,r18
 358               	.L21:
 154:../../src/kernel/source/nrk_scheduler.c **** 
 155:../../src/kernel/source/nrk_scheduler.c **** 		task_ID= nrk_cur_task_TCB->task_ID;
 360               	.LM25:
 361 0198 E091 0000 		lds r30,nrk_cur_task_TCB
 362 019c F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 363 01a0 1085      		ldd r17,Z+8
 156:../../src/kernel/source/nrk_scheduler.c **** 
 157:../../src/kernel/source/nrk_scheduler.c **** 		if (nrk_cur_task_TCB->cpu_remaining ==0 ) {
 365               	.LM26:
 366 01a2 818D      		ldd r24,Z+25
 367 01a4 928D      		ldd r25,Z+26
 368 01a6 892B      		or r24,r25
 369 01a8 01F4      		brne .L15
 158:../../src/kernel/source/nrk_scheduler.c **** 			#ifdef NRK_STATS_TRACKER
 159:../../src/kernel/source/nrk_scheduler.c **** 			_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 160:../../src/kernel/source/nrk_scheduler.c **** 			#endif
 161:../../src/kernel/source/nrk_scheduler.c **** 			nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 371               	.LM27:
 372 01aa 612F      		mov r22,r17
 373 01ac 83E0      		ldi r24,lo8(3)
 374 01ae 0E94 0000 		call nrk_kernel_error_add
 162:../../src/kernel/source/nrk_scheduler.c **** 			nrk_cur_task_TCB->task_state = SUSPENDED;
 376               	.LM28:
 377 01b2 E091 0000 		lds r30,nrk_cur_task_TCB
 378 01b6 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 379 01ba 83E0      		ldi r24,lo8(3)
 380 01bc 8187      		std Z+9,r24
 163:../../src/kernel/source/nrk_scheduler.c **** 			nrk_rem_from_readyQ(task_ID);
 382               	.LM29:
 383 01be 812F      		mov r24,r17
 384 01c0 0E94 0000 		call nrk_rem_from_readyQ
 385               	.L15:
 386 01c4 C0E0      		ldi r28,lo8(nrk_task_TCB)
 387 01c6 D0E0      		ldi r29,hi8(nrk_task_TCB)
 388 01c8 00E6      		ldi r16,lo8(-5536)
 389 01ca 1AEE      		ldi r17,hi8(-5536)
 390 01cc CC24      		clr r12
 391 01ce DD24      		clr r13
 392               	.L23:
 393 01d0 EC2D      		mov r30,r12
 164:../../src/kernel/source/nrk_scheduler.c **** 		} 
 165:../../src/kernel/source/nrk_scheduler.c **** 	}
 166:../../src/kernel/source/nrk_scheduler.c **** 
 167:../../src/kernel/source/nrk_scheduler.c **** 	// Check I/O nrk_queues to add tasks with remaining cpu back...
 168:../../src/kernel/source/nrk_scheduler.c **** 
 169:../../src/kernel/source/nrk_scheduler.c **** 	// Add eligable tasks back to the ready Queue
 170:../../src/kernel/source/nrk_scheduler.c **** 	// At the same time find the next earliest wakeup
 171:../../src/kernel/source/nrk_scheduler.c **** 	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
 172:../../src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 395               	.LM30:
 396 01d2 8885      		ldd r24,Y+8
 397 01d4 8F3F      		cpi r24,lo8(-1)
 398 01d6 01F4      		brne .+2
 399 01d8 00C0      		rjmp .L24
 173:../../src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].suspend_flag=0;
 401               	.LM31:
 402 01da 1D82      		std Y+5,__zero_reg__
 174:../../src/kernel/source/nrk_scheduler.c **** 		if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED
 404               	.LM32:
 405 01dc 8823      		tst r24
 406 01de 01F0      		breq .L26
 407 01e0 8985      		ldd r24,Y+9
 408 01e2 8430      		cpi r24,lo8(4)
 409 01e4 01F0      		breq .L26
 175:../../src/kernel/source/nrk_scheduler.c **** 		{
 176:../../src/kernel/source/nrk_scheduler.c **** 			if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 411               	.LM33:
 412 01e6 2D89      		ldd r18,Y+21
 413 01e8 3E89      		ldd r19,Y+22
 414 01ea 8091 0000 		lds r24,_nrk_prev_timer_val
 415 01ee 9927      		clr r25
 416 01f0 2817      		cp r18,r24
 417 01f2 3907      		cpc r19,r25
 418 01f4 00F0      		brlo .L29
 177:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 420               	.LM34:
 421 01f6 281B      		sub r18,r24
 422 01f8 390B      		sbc r19,r25
 423 01fa 3E8B      		std Y+22,r19
 424 01fc 2D8B      		std Y+21,r18
 425 01fe 00C0      		rjmp .L31
 426               	.L29:
 178:../../src/kernel/source/nrk_scheduler.c **** 			else {
 179:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].next_wakeup=0;
 428               	.LM35:
 429 0200 1E8A      		std Y+22,__zero_reg__
 430 0202 1D8A      		std Y+21,__zero_reg__
 431               	.L31:
 180:../../src/kernel/source/nrk_scheduler.c **** 			}
 181:../../src/kernel/source/nrk_scheduler.c **** 			// Do next period book keeping.
 182:../../src/kernel/source/nrk_scheduler.c **** 			// next_period needs to be set such that the period is kept consistent even if other
 183:../../src/kernel/source/nrk_scheduler.c **** 			// wait until functions are called.
 184:../../src/kernel/source/nrk_scheduler.c **** 			if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 433               	.LM36:
 434 0204 2F89      		ldd r18,Y+23
 435 0206 388D      		ldd r19,Y+24
 436 0208 2817      		cp r18,r24
 437 020a 3907      		cpc r19,r25
 438 020c 00F0      		brlo .L32
 185:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 440               	.LM37:
 441 020e 281B      		sub r18,r24
 442 0210 390B      		sbc r19,r25
 443 0212 388F      		std Y+24,r19
 444 0214 2F8B      		std Y+23,r18
 445 0216 00C0      		rjmp .L34
 446               	.L32:
 186:../../src/kernel/source/nrk_scheduler.c **** 			else {
 187:../../src/kernel/source/nrk_scheduler.c **** 				if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 448               	.LM38:
 449 0218 6B8D      		ldd r22,Y+27
 450 021a 7C8D      		ldd r23,Y+28
 451 021c 8617      		cp r24,r22
 452 021e 9707      		cpc r25,r23
 453 0220 00F4      		brsh .L35
 188:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
 455               	.LM39:
 456 0222 681B      		sub r22,r24
 457 0224 790B      		sbc r23,r25
 458 0226 788F      		std Y+24,r23
 459 0228 6F8B      		std Y+23,r22
 460 022a 00C0      		rjmp .L34
 461               	.L35:
 189:../../src/kernel/source/nrk_scheduler.c **** 				else
 190:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
 463               	.LM40:
 464 022c 0E94 0000 		call __udivmodhi4
 465 0230 988F      		std Y+24,r25
 466 0232 8F8B      		std Y+23,r24
 467               	.L34:
 191:../../src/kernel/source/nrk_scheduler.c **** 			}
 192:../../src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID]
 469               	.LM41:
 470 0234 8F89      		ldd r24,Y+23
 471 0236 988D      		ldd r25,Y+24
 472 0238 892B      		or r24,r25
 473 023a 01F4      		brne .L26
 474 023c 8B8D      		ldd r24,Y+27
 475 023e 9C8D      		ldd r25,Y+28
 476 0240 988F      		std Y+24,r25
 477 0242 8F8B      		std Y+23,r24
 478               	.L26:
 193:../../src/kernel/source/nrk_scheduler.c **** 					
 194:../../src/kernel/source/nrk_scheduler.c **** 		}
 195:../../src/kernel/source/nrk_scheduler.c **** 
 196:../../src/kernel/source/nrk_scheduler.c **** 
 197:../../src/kernel/source/nrk_scheduler.c **** 		// Look for Next Task that Might Wakeup to interrupt current task
 198:../../src/kernel/source/nrk_scheduler.c **** 		if (nrk_task_TCB[task_ID].task_state == SUSPENDED ) {
 480               	.LM42:
 481 0244 8985      		ldd r24,Y+9
 482 0246 8330      		cpi r24,lo8(3)
 483 0248 01F0      		breq .+2
 484 024a 00C0      		rjmp .L24
 199:../../src/kernel/source/nrk_scheduler.c **** 			// printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 200:../../src/kernel/source/nrk_scheduler.c **** 			// If a task needs to become READY, make it ready
 201:../../src/kernel/source/nrk_scheduler.c **** 			if (nrk_task_TCB[task_ID].next_wakeup == 0) {
 486               	.LM43:
 487 024c 8D89      		ldd r24,Y+21
 488 024e 9E89      		ldd r25,Y+22
 489 0250 892B      		or r24,r25
 490 0252 01F0      		breq .+2
 491 0254 00C0      		rjmp .L39
 202:../../src/kernel/source/nrk_scheduler.c **** 				// printf( "Adding back %d\n",task_ID );
 203:../../src/kernel/source/nrk_scheduler.c **** 				if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task
 493               	.LM44:
 494 0256 8F81      		ldd r24,Y+7
 495 0258 8823      		tst r24
 496 025a 01F0      		breq .L41
 497 025c 8E81      		ldd r24,Y+6
 498 025e 8823      		tst r24
 499 0260 01F0      		breq .L41
 500 0262 81E0      		ldi r24,lo8(1)
 501 0264 90E0      		ldi r25,hi8(1)
 502 0266 A0E0      		ldi r26,hlo8(1)
 503 0268 B0E0      		ldi r27,hhi8(1)
 504 026a 0090 0000 		lds r0,nrk_wakeup_signal
 505 026e 00C0      		rjmp 2f
 506 0270 880F      	1:	lsl r24
 507 0272 991F      		rol r25
 508 0274 AA1F      		rol r26
 509 0276 BB1F      		rol r27
 510 0278 0A94      	2:	dec r0
 511 027a 02F4      		brpl 1b
 512 027c 898B      		std Y+17,r24
 513 027e 9A8B      		std Y+18,r25
 514 0280 AB8B      		std Y+19,r26
 515 0282 BC8B      		std Y+20,r27
 516               	.L41:
 204:../../src/kernel/source/nrk_scheduler.c **** 				//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
 205:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].event_suspend=0;
 518               	.LM45:
 519 0284 1F82      		std Y+7,__zero_reg__
 206:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].nw_flag=0;
 521               	.LM46:
 522 0286 1E82      		std Y+6,__zero_reg__
 207:../../src/kernel/source/nrk_scheduler.c **** 				nrk_task_TCB[task_ID].suspend_flag=0;
 524               	.LM47:
 525 0288 1D82      		std Y+5,__zero_reg__
 208:../../src/kernel/source/nrk_scheduler.c **** 				if(nrk_task_TCB[task_ID].num_periods==1) 
 527               	.LM48:
 528 028a 8F8D      		ldd r24,Y+31
 529 028c 98A1      		ldd r25,Y+32
 530 028e 4B8D      		ldd r20,Y+27
 531 0290 5C8D      		ldd r21,Y+28
 532 0292 2D8D      		ldd r18,Y+29
 533 0294 3E8D      		ldd r19,Y+30
 534 0296 8130      		cpi r24,1
 535 0298 9105      		cpc r25,__zero_reg__
 536 029a 01F4      		brne .L44
 209:../../src/kernel/source/nrk_scheduler.c **** 				{
 210:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 538               	.LM49:
 539 029c 3A8F      		std Y+26,r19
 540 029e 298F      		std Y+25,r18
 211:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].task_state = READY;
 542               	.LM50:
 543 02a0 82E0      		ldi r24,lo8(2)
 544 02a2 8987      		std Y+9,r24
 212:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 546               	.LM51:
 547 02a4 8F89      		ldd r24,Y+23
 548 02a6 988D      		ldd r25,Y+24
 549 02a8 9E8B      		std Y+22,r25
 550 02aa 8D8B      		std Y+21,r24
 213:../../src/kernel/source/nrk_scheduler.c **** 					// If there is no period set, don't wakeup periodically
 214:../../src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
 552               	.LM52:
 553 02ac 452B      		or r20,r21
 554 02ae 01F4      		brne .L46
 555 02b0 8AEF      		ldi r24,lo8(250)
 556 02b2 90E0      		ldi r25,hi8(250)
 557 02b4 9E8B      		std Y+22,r25
 558 02b6 8D8B      		std Y+21,r24
 559               	.L46:
 215:../../src/kernel/source/nrk_scheduler.c **** 					nrk_add_to_readyQ(task_ID);				
 561               	.LM53:
 562 02b8 8E2F      		mov r24,r30
 563 02ba 0E94 0000 		call nrk_add_to_readyQ
 564 02be 00C0      		rjmp .L39
 565               	.L44:
 216:../../src/kernel/source/nrk_scheduler.c **** 				} else 
 217:../../src/kernel/source/nrk_scheduler.c **** 				{
 218:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 567               	.LM54:
 568 02c0 3A8F      		std Y+26,r19
 569 02c2 298F      		std Y+25,r18
 219:../../src/kernel/source/nrk_scheduler.c **** 					//nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 220:../../src/kernel/source/nrk_scheduler.c **** 					//nrk_task_TCB[task_ID].num_periods--;
 221:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_p
 571               	.LM55:
 572 02c4 0197      		sbiw r24,1
 573 02c6 9C01      		movw r18,r24
 574 02c8 249F      		mul r18,r20
 575 02ca C001      		movw r24,r0
 576 02cc 259F      		mul r18,r21
 577 02ce 900D      		add r25,r0
 578 02d0 349F      		mul r19,r20
 579 02d2 900D      		add r25,r0
 580 02d4 1124      		clr r1
 581 02d6 9E8B      		std Y+22,r25
 582 02d8 8D8B      		std Y+21,r24
 222:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_p
 584               	.LM56:
 585 02da 988F      		std Y+24,r25
 586 02dc 8F8B      		std Y+23,r24
 223:../../src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
 588               	.LM57:
 589 02de 452B      		or r20,r21
 590 02e0 01F4      		brne .L48
 591 02e2 8AEF      		ldi r24,lo8(250)
 592 02e4 90E0      		ldi r25,hi8(250)
 593 02e6 9E8B      		std Y+22,r25
 594 02e8 8D8B      		std Y+21,r24
 595               	.L48:
 224:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].num_periods=1;
 597               	.LM58:
 598 02ea 81E0      		ldi r24,lo8(1)
 599 02ec 90E0      		ldi r25,hi8(1)
 600 02ee 98A3      		std Y+32,r25
 601 02f0 8F8F      		std Y+31,r24
 602               	.L39:
 225:../../src/kernel/source/nrk_scheduler.c **** 		//			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 226:../../src/kernel/source/nrk_scheduler.c **** 		//			nrk_task_TCB[task_ID].num_periods=1; 
 227:../../src/kernel/source/nrk_scheduler.c **** 				}
 228:../../src/kernel/source/nrk_scheduler.c **** 			}
 229:../../src/kernel/source/nrk_scheduler.c **** 
 230:../../src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[task_ID].next_wakeup!=0 && 
 604               	.LM59:
 605 02f2 8D89      		ldd r24,Y+21
 606 02f4 9E89      		ldd r25,Y+22
 607 02f6 0097      		sbiw r24,0
 608 02f8 01F0      		breq .L24
 609 02fa 8017      		cp r24,r16
 610 02fc 9107      		cpc r25,r17
 611 02fe 00F4      		brsh .L24
 612 0300 8C01      		movw r16,r24
 613               	.L24:
 614 0302 0894      		sec
 615 0304 C11C      		adc r12,__zero_reg__
 616 0306 D11C      		adc r13,__zero_reg__
 617 0308 A196      		adiw r28,33
 619               	.LM60:
 620 030a 35E0      		ldi r19,lo8(5)
 621 030c C316      		cp r12,r19
 622 030e D104      		cpc r13,__zero_reg__
 623 0310 01F0      		breq .+2
 624 0312 00C0      		rjmp .L23
 231:../../src/kernel/source/nrk_scheduler.c **** 					nrk_task_TCB[task_ID].next_wakeup<next_wake )
 232:../../src/kernel/source/nrk_scheduler.c **** 			{
 233:../../src/kernel/source/nrk_scheduler.c **** 				// Find closest next_wake task
 234:../../src/kernel/source/nrk_scheduler.c **** 				next_wake=nrk_task_TCB[task_ID].next_wakeup;
 235:../../src/kernel/source/nrk_scheduler.c **** 			}
 236:../../src/kernel/source/nrk_scheduler.c **** 
 237:../../src/kernel/source/nrk_scheduler.c **** 		}		
 238:../../src/kernel/source/nrk_scheduler.c **** 	}
 239:../../src/kernel/source/nrk_scheduler.c **** 
 240:../../src/kernel/source/nrk_scheduler.c **** 
 241:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_STATS_TRACKER
 242:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 243:../../src/kernel/source/nrk_scheduler.c **** 	#endif
 244:../../src/kernel/source/nrk_scheduler.c **** 	task_ID = nrk_get_high_ready_task_ID();  
 626               	.LM61:
 627 0314 0E94 0000 		call nrk_get_high_ready_task_ID
 628 0318 E82E      		mov r14,r24
 245:../../src/kernel/source/nrk_scheduler.c **** 	nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 630               	.LM62:
 631 031a 9927      		clr r25
 632 031c 87FD      		sbrc r24,7
 633 031e 9095      		com r25
 634 0320 FC01      		movw r30,r24
 635 0322 25E0      		ldi r18,5
 636 0324 EE0F      	1:	lsl r30
 637 0326 FF1F      		rol r31
 638 0328 2A95      		dec r18
 639 032a 01F4      		brne 1b
 640 032c E80F      		add r30,r24
 641 032e F91F      		adc r31,r25
 642 0330 E050      		subi r30,lo8(-(nrk_task_TCB))
 643 0332 F040      		sbci r31,hi8(-(nrk_task_TCB))
 644 0334 4285      		ldd r20,Z+10
 645 0336 4093 0000 		sts nrk_high_ready_prio,r20
 246:../../src/kernel/source/nrk_scheduler.c **** 	nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 647               	.LM63:
 648 033a 81E2      		ldi r24,lo8(33)
 649 033c 6E2D      		mov r22,r14
 650 033e 6802      		muls r22,r24
 651 0340 9001      		movw r18,r0
 652 0342 1124      		clr r1
 653 0344 2050      		subi r18,lo8(-(nrk_task_TCB))
 654 0346 3040      		sbci r19,hi8(-(nrk_task_TCB))
 655 0348 3093 0000 		sts (nrk_high_ready_TCB)+1,r19
 656 034c 2093 0000 		sts nrk_high_ready_TCB,r18
 247:../../src/kernel/source/nrk_scheduler.c **** 
 248:../../src/kernel/source/nrk_scheduler.c **** 	// next_wake should hold next time when a suspended task might get run
 249:../../src/kernel/source/nrk_scheduler.c **** 	// task_ID holds the highest priority READY task ID
 250:../../src/kernel/source/nrk_scheduler.c **** 	// So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time 
 251:../../src/kernel/source/nrk_scheduler.c **** 
 252:../../src/kernel/source/nrk_scheduler.c **** 	// Now we pick the next wakeup (either the end of the current task, or the possible resume
 253:../../src/kernel/source/nrk_scheduler.c **** 	// of a suspended task) 
 254:../../src/kernel/source/nrk_scheduler.c **** 	if(task_ID!=NRK_IDLE_TASK_ID) 
 658               	.LM64:
 659 0350 EE20      		tst r14
 660 0352 01F0      		breq .L53
 255:../../src/kernel/source/nrk_scheduler.c **** 	{
 256:../../src/kernel/source/nrk_scheduler.c **** 		// You are a non-Idle Task
 257:../../src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_T
 662               	.LM65:
 663 0354 858D      		ldd r24,Z+29
 664 0356 968D      		ldd r25,Z+30
 665 0358 892B      		or r24,r25
 666 035a 01F0      		breq .L55
 667 035c 818D      		ldd r24,Z+25
 668 035e 928D      		ldd r25,Z+26
 669 0360 8A3F      		cpi r24,250
 670 0362 9105      		cpc r25,__zero_reg__
 671 0364 00F4      		brsh .L55
 672 0366 8017      		cp r24,r16
 673 0368 9107      		cpc r25,r17
 674 036a 00F4      		brsh .L59
 675 036c 8C01      		movw r16,r24
 676 036e 00C0      		rjmp .L59
 677               	.L55:
 678 0370 0B3F      		cpi r16,251
 679 0372 1105      		cpc r17,__zero_reg__
 680 0374 00F0      		brlo .L59
 681 0376 00C0      		rjmp .L65
 682               	.L53:
 258:../../src/kernel/source/nrk_scheduler.c **** 		{
 259:../../src/kernel/source/nrk_scheduler.c **** 			if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 260:../../src/kernel/source/nrk_scheduler.c **** 				next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 261:../../src/kernel/source/nrk_scheduler.c **** 		}
 262:../../src/kernel/source/nrk_scheduler.c **** 		else 
 263:../../src/kernel/source/nrk_scheduler.c **** 		{ 
 264:../../src/kernel/source/nrk_scheduler.c **** 			if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME; 
 265:../../src/kernel/source/nrk_scheduler.c **** 		}
 266:../../src/kernel/source/nrk_scheduler.c **** 	} 
 267:../../src/kernel/source/nrk_scheduler.c **** 	else {
 268:../../src/kernel/source/nrk_scheduler.c **** 		// This is the idle task
 269:../../src/kernel/source/nrk_scheduler.c **** 		// Make sure you wake up from the idle task a little earlier
 270:../../src/kernel/source/nrk_scheduler.c **** 		// if you would go into deep sleep...
 271:../../src/kernel/source/nrk_scheduler.c **** 		// After waking from deep sleep, the next context swap must be at least
 272:../../src/kernel/source/nrk_scheduler.c ****   		// NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time. 
 273:../../src/kernel/source/nrk_scheduler.c **** 		#ifndef NRK_NO_POWER_DOWN	
 274:../../src/kernel/source/nrk_scheduler.c **** 		if(next_wake>NRK_SLEEP_WAKEUP_TIME) 
 684               	.LM66:
 685 0378 0B30      		cpi r16,11
 686 037a 1105      		cpc r17,__zero_reg__
 687 037c 00F0      		brlo .L59
 275:../../src/kernel/source/nrk_scheduler.c **** 		{
 276:../../src/kernel/source/nrk_scheduler.c **** 			if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 689               	.LM67:
 690 037e C801      		movw r24,r16
 691 0380 0A97      		sbiw r24,10
 692 0382 8A3F      		cpi r24,250
 693 0384 9105      		cpc r25,__zero_reg__
 694 0386 00F4      		brsh .L62
 695 0388 8C01      		movw r16,r24
 696 038a 0997      		sbiw r24,9
 697 038c 00F4      		brsh .L59
 698 038e 09E0      		ldi r16,lo8(9)
 699 0390 10E0      		ldi r17,hi8(9)
 700 0392 00C0      		rjmp .L59
 701               	.L62:
 277:../../src/kernel/source/nrk_scheduler.c **** 			{
 278:../../src/kernel/source/nrk_scheduler.c **** 				if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME){
 279:../../src/kernel/source/nrk_scheduler.c **** 					next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 280:../../src/kernel/source/nrk_scheduler.c **** 				}
 281:../../src/kernel/source/nrk_scheduler.c **** 				else {
 282:../../src/kernel/source/nrk_scheduler.c **** 					next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 283:../../src/kernel/source/nrk_scheduler.c **** 				}
 284:../../src/kernel/source/nrk_scheduler.c **** 			} else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME){ 
 703               	.LM68:
 704 0394 0550      		subi r16,lo8(261)
 705 0396 1140      		sbci r17,hi8(261)
 706 0398 00F4      		brsh .L65
 707 039a 00EF      		ldi r16,lo8(240)
 708 039c 10E0      		ldi r17,hi8(240)
 709 039e 00C0      		rjmp .L59
 710               	.L65:
 711 03a0 0AEF      		ldi r16,lo8(250)
 712 03a2 10E0      		ldi r17,hi8(250)
 713               	.L59:
 285:../../src/kernel/source/nrk_scheduler.c **** 				next_wake=MAX_SCHED_WAKEUP_TIME;
 286:../../src/kernel/source/nrk_scheduler.c **** 			} else {
 287:../../src/kernel/source/nrk_scheduler.c **** 				next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 288:../../src/kernel/source/nrk_scheduler.c **** 			}
 289:../../src/kernel/source/nrk_scheduler.c **** 		} 
 290:../../src/kernel/source/nrk_scheduler.c **** 		#endif
 291:../../src/kernel/source/nrk_scheduler.c **** 	}
 292:../../src/kernel/source/nrk_scheduler.c **** 
 293:../../src/kernel/source/nrk_scheduler.c **** 	/*
 294:../../src/kernel/source/nrk_scheduler.c **** 	// Some code to catch the case when the scheduler wakes up
 295:../../src/kernel/source/nrk_scheduler.c **** 	// from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 296:../../src/kernel/source/nrk_scheduler.c **** 	if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 297:../../src/kernel/source/nrk_scheduler.c **** 	{
 298:../../src/kernel/source/nrk_scheduler.c **** 	nrk_int_disable();
 299:../../src/kernel/source/nrk_scheduler.c **** 	while(1)
 300:../../src/kernel/source/nrk_scheduler.c **** 		{
 301:../../src/kernel/source/nrk_scheduler.c **** 		nrk_spin_wait_us(60000);
 302:../../src/kernel/source/nrk_scheduler.c **** 		nrk_led_toggle(RED_LED);
 303:../../src/kernel/source/nrk_scheduler.c **** 		nrk_spin_wait_us(60000);
 304:../../src/kernel/source/nrk_scheduler.c **** 		nrk_led_toggle(GREEN_LED);
 305:../../src/kernel/source/nrk_scheduler.c **** 		printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 306:../../src/kernel/source/nrk_scheduler.c **** 		}
 307:../../src/kernel/source/nrk_scheduler.c **** 	}*/
 308:../../src/kernel/source/nrk_scheduler.c **** 
 309:../../src/kernel/source/nrk_scheduler.c **** 
 310:../../src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 311:../../src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 312:../../src/kernel/source/nrk_scheduler.c **** 	if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME; 
 313:../../src/kernel/source/nrk_scheduler.c **** #endif
 314:../../src/kernel/source/nrk_scheduler.c **** 	//printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 315:../../src/kernel/source/nrk_scheduler.c **** 	nrk_cur_task_prio = nrk_high_ready_prio;
 715               	.LM69:
 716 03a4 4093 0000 		sts nrk_cur_task_prio,r20
 316:../../src/kernel/source/nrk_scheduler.c **** 	nrk_cur_task_TCB  = nrk_high_ready_TCB;
 718               	.LM70:
 719 03a8 3093 0000 		sts (nrk_cur_task_TCB)+1,r19
 720 03ac 2093 0000 		sts nrk_cur_task_TCB,r18
 317:../../src/kernel/source/nrk_scheduler.c **** 
 318:../../src/kernel/source/nrk_scheduler.c **** 	#ifdef NRK_KERNEL_TEST
 319:../../src/kernel/source/nrk_scheduler.c **** 	if(nrk_high_ready_TCB==NULL)
 320:../../src/kernel/source/nrk_scheduler.c **** 		{
 321:../../src/kernel/source/nrk_scheduler.c **** 		nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 322:../../src/kernel/source/nrk_scheduler.c **** 		}
 323:../../src/kernel/source/nrk_scheduler.c **** 	#endif
 324:../../src/kernel/source/nrk_scheduler.c **** 	//printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 325:../../src/kernel/source/nrk_scheduler.c **** 
 326:../../src/kernel/source/nrk_scheduler.c **** 	_nrk_prev_timer_val=next_wake;
 722               	.LM71:
 723 03b0 0093 0000 		sts _nrk_prev_timer_val,r16
 327:../../src/kernel/source/nrk_scheduler.c **** 
 328:../../src/kernel/source/nrk_scheduler.c **** 
 329:../../src/kernel/source/nrk_scheduler.c **** 	if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal? 
 725               	.LM72:
 726 03b4 0E94 0000 		call _nrk_os_timer_get
 727 03b8 9927      		clr r25
 728 03ba 0196      		adiw r24,1
 729 03bc 8017      		cp r24,r16
 730 03be 9107      		cpc r25,r17
 731 03c0 00F0      		brlo .L67
 330:../../src/kernel/source/nrk_scheduler.c **** 	{
 331:../../src/kernel/source/nrk_scheduler.c **** 		// FIXME: Terrible Terrible...
 332:../../src/kernel/source/nrk_scheduler.c **** 		// Need to find out why this is happening...
 333:../../src/kernel/source/nrk_scheduler.c **** 		#ifdef NRK_KERNEL_TEST
 334:../../src/kernel/source/nrk_scheduler.c **** 		// Ignore if you are the idle task coming from deep sleep
 335:../../src/kernel/source/nrk_scheduler.c **** 		if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 336:../../src/kernel/source/nrk_scheduler.c **** 			nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 337:../../src/kernel/source/nrk_scheduler.c **** 		#endif
 338:../../src/kernel/source/nrk_scheduler.c **** 		// This is bad news, but keeps things running
 339:../../src/kernel/source/nrk_scheduler.c **** 		// +2 just in case we are on the edge of the last tick
 340:../../src/kernel/source/nrk_scheduler.c **** 		next_wake=_nrk_os_timer_get()+2;
 733               	.LM73:
 734 03c2 0E94 0000 		call _nrk_os_timer_get
 735 03c6 082F      		mov r16,r24
 736 03c8 1127      		clr r17
 737 03ca 0E5F      		subi r16,lo8(-(2))
 738 03cc 1F4F      		sbci r17,hi8(-(2))
 341:../../src/kernel/source/nrk_scheduler.c **** 		_nrk_prev_timer_val=next_wake;
 740               	.LM74:
 741 03ce 0093 0000 		sts _nrk_prev_timer_val,r16
 742               	.L67:
 342:../../src/kernel/source/nrk_scheduler.c **** 	} 
 343:../../src/kernel/source/nrk_scheduler.c **** 
 344:../../src/kernel/source/nrk_scheduler.c **** 	if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 744               	.LM75:
 745 03d2 EE20      		tst r14
 746 03d4 01F0      		breq .L69
 747 03d6 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 748               	.L69:
 345:../../src/kernel/source/nrk_scheduler.c **** 	
 346:../../src/kernel/source/nrk_scheduler.c **** 	_nrk_set_next_wakeup(next_wake);
 750               	.LM76:
 751 03da 802F      		mov r24,r16
 752 03dc 0E94 0000 		call _nrk_set_next_wakeup
 347:../../src/kernel/source/nrk_scheduler.c **** 	
 348:../../src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 349:../../src/kernel/source/nrk_scheduler.c **** 	// Bound Context Swap to 100us 
 350:../../src/kernel/source/nrk_scheduler.c **** 	nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 754               	.LM77:
 755 03e0 6EEE      		ldi r22,lo8(750)
 756 03e2 72E0      		ldi r23,hi8(750)
 757 03e4 C401      		movw r24,r8
 758 03e6 0E94 0000 		call nrk_high_speed_timer_wait
 351:../../src/kernel/source/nrk_scheduler.c **** #endif	
 352:../../src/kernel/source/nrk_scheduler.c **** 	nrk_stack_pointer_restore();
 760               	.LM78:
 761 03ea 0E94 0000 		call nrk_stack_pointer_restore
 353:../../src/kernel/source/nrk_scheduler.c **** 	//nrk_int_enable();
 354:../../src/kernel/source/nrk_scheduler.c **** 	nrk_start_high_ready_task();
 763               	.LM79:
 764 03ee 0E94 0000 		call nrk_start_high_ready_task
 765               	/* epilogue: frame size=0 */
 766 03f2 DF91      		pop r29
 767 03f4 CF91      		pop r28
 768 03f6 1F91      		pop r17
 769 03f8 0F91      		pop r16
 770 03fa FF90      		pop r15
 771 03fc EF90      		pop r14
 772 03fe DF90      		pop r13
 773 0400 CF90      		pop r12
 774 0402 BF90      		pop r11
 775 0404 AF90      		pop r10
 776 0406 9F90      		pop r9
 777 0408 8F90      		pop r8
 778 040a 0895      		ret
 779               	/* epilogue end (size=13) */
 780               	/* function _nrk_scheduler size 520 (495) */
 787               	.Lscope1:
 789               		.stabd	78,0,0
 790               		.comm _nrk_signal_list,4,1
 791               		.comm nrk_idle_task_stk,128,1
 792               		.comm nrk_kernel_stk_ptr,2,1
 793               		.comm nrk_task_TCB,165,1
 794               		.comm nrk_wakeup_signal,1,1
 795               		.comm _nrk_readyQ,30,1
 796               		.comm _free_node,2,1
 797               		.comm _head_node,2,1
 798               		.comm nrk_cur_task_prio,1,1
 799               		.comm nrk_cur_task_TCB,2,1
 800               		.comm nrk_high_ready_prio,1,1
 801               		.comm nrk_high_ready_TCB,2,1
 802               		.comm _nrk_resource_cnt,1,1
 803               		.comm nrk_system_time,8,1
 804               		.comm nrk_sem_list,3,1
 805               		.comm error_task,1,1
 806               		.comm error_num,1,1
 807               		.comm _nrk_cpu_state,1,1
 808               		.comm next_next_wakeup,2,1
 809               		.comm _nrk_prev_timer_val,1,1
 810               		.comm _nrk_time_trigger,1,1
 811               		.comm app_timer0_callback,2,1
 812               		.comm app_timer0_prescale,1,1
 813               		.comm t,1,1
 839               	.Letext0:
 840               	/* File "../../src/kernel/source/nrk_scheduler.c": code  520 = 0x0208 ( 495), prologues  12, epilog
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_scheduler.c
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:2      *ABS*:000000000000003f __SREG__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:3      *ABS*:000000000000003e __SP_H__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:4      *ABS*:000000000000003d __SP_L__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccuqnrC0.s:130    .text:0000000000000000 _nrk_scheduler
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:00000000000000a5 nrk_task_TCB
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000001 t

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
nrk_watchdog_reset
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task

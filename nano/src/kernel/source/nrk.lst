   1               		.file	"nrk.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 130               	.global	nrk_int_disable
 132               	nrk_int_disable:
 133               		.stabd	46,0,0
   1:../../src/kernel/source/nrk.c **** /******************************************************************************
   2:../../src/kernel/source/nrk.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk.c **** *
   6:../../src/kernel/source/nrk.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk.c **** *
  10:../../src/kernel/source/nrk.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk.c **** *
  14:../../src/kernel/source/nrk.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk.c **** *
  19:../../src/kernel/source/nrk.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk.c **** *
  22:../../src/kernel/source/nrk.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk.c **** *  Zane Starr
  25:../../src/kernel/source/nrk.c **** *  Anand Eswaren
  26:../../src/kernel/source/nrk.c **** *******************************************************************************/
  27:../../src/kernel/source/nrk.c **** 
  28:../../src/kernel/source/nrk.c **** #include <stdio.h>
  29:../../src/kernel/source/nrk.c **** #include <nrk_includes.h> 
  30:../../src/kernel/source/nrk.c **** #include <ulib.h>
  31:../../src/kernel/source/nrk.c **** #include <nrk.h>
  32:../../src/kernel/source/nrk.c **** #include <nrk_task.h>
  33:../../src/kernel/source/nrk.c **** #include <nrk_idle_task.h>
  34:../../src/kernel/source/nrk.c **** #include <nrk_defs.h>
  35:../../src/kernel/source/nrk.c **** #include <nrk_cpu.h>
  36:../../src/kernel/source/nrk.c **** #include <nrk_scheduler.h>
  37:../../src/kernel/source/nrk.c **** #include <nrk_error.h>
  38:../../src/kernel/source/nrk.c **** #include <nrk_events.h>
  39:../../src/kernel/source/nrk.c **** #include <nrk_stack_check.h>
  40:../../src/kernel/source/nrk.c **** #include <nrk_status.h>
  41:../../src/kernel/source/nrk.c **** #include <nrk_watchdog.h>
  42:../../src/kernel/source/nrk.c **** #include <nrk_sw_wdt.h>
  43:../../src/kernel/source/nrk.c **** #include <nrk_reserve.h>
  44:../../src/kernel/source/nrk.c **** #include <nrk_cfg.h>
  45:../../src/kernel/source/nrk.c **** #include <nrk_stats.h>
  46:../../src/kernel/source/nrk.c **** 
  47:../../src/kernel/source/nrk.c **** inline void nrk_int_disable(void) {
 135               	.LM0:
 136               	.LFBB1:
 137               	/* prologue: frame size=0 */
 138               	/* prologue end (size=0) */
  48:../../src/kernel/source/nrk.c ****   DISABLE_GLOBAL_INT();
 140               	.LM1:
 141               	/* #APP */
 142 0000 F894      		cli
 143               		
 144               	/* #NOAPP */
 145               	/* epilogue: frame size=0 */
 146 0002 0895      		ret
 147               	/* epilogue end (size=1) */
 148               	/* function nrk_int_disable size 5 (4) */
 150               	.Lscope1:
 152               		.stabd	78,0,0
 154               	.global	nrk_int_enable
 156               	nrk_int_enable:
 157               		.stabd	46,0,0
  49:../../src/kernel/source/nrk.c **** };
  50:../../src/kernel/source/nrk.c **** 
  51:../../src/kernel/source/nrk.c **** inline void nrk_int_enable(void) {
 159               	.LM2:
 160               	.LFBB2:
 161               	/* prologue: frame size=0 */
 162               	/* prologue end (size=0) */
  52:../../src/kernel/source/nrk.c ****   ENABLE_GLOBAL_INT();
 164               	.LM3:
 165               	/* #APP */
 166 0004 7894      		sei
 167               		
 168               	/* #NOAPP */
 169               	/* epilogue: frame size=0 */
 170 0006 0895      		ret
 171               	/* epilogue end (size=1) */
 172               	/* function nrk_int_enable size 5 (4) */
 174               	.Lscope2:
 176               		.stabd	78,0,0
 178               	.global	nrk_version
 180               	nrk_version:
 181               		.stabd	46,0,0
  53:../../src/kernel/source/nrk.c **** };
  54:../../src/kernel/source/nrk.c **** 
  55:../../src/kernel/source/nrk.c **** uint8_t nrk_task_init_cnt;
  56:../../src/kernel/source/nrk.c **** 
  57:../../src/kernel/source/nrk.c **** 
  58:../../src/kernel/source/nrk.c **** void nrk_halt()
  59:../../src/kernel/source/nrk.c **** {
  60:../../src/kernel/source/nrk.c **** nrk_int_disable();
  61:../../src/kernel/source/nrk.c **** while(1);
  62:../../src/kernel/source/nrk.c **** }
  63:../../src/kernel/source/nrk.c **** 
  64:../../src/kernel/source/nrk.c **** /**
  65:../../src/kernel/source/nrk.c ****  *  nrk_init();
  66:../../src/kernel/source/nrk.c ****  * *  - Init TCBlist - linked list of empty TCBs
  67:../../src/kernel/source/nrk.c ****  *  - Init global variables
  68:../../src/kernel/source/nrk.c ****  *  - Init event list
  69:../../src/kernel/source/nrk.c ****  *  - Create idle task
  70:../../src/kernel/source/nrk.c ****  */
  71:../../src/kernel/source/nrk.c **** void nrk_init()
  72:../../src/kernel/source/nrk.c **** {
  73:../../src/kernel/source/nrk.c **** 	
  74:../../src/kernel/source/nrk.c ****     uint8_t i;	
  75:../../src/kernel/source/nrk.c **** //    unsigned char *stkc;
  76:../../src/kernel/source/nrk.c **** 	
  77:../../src/kernel/source/nrk.c ****    nrk_task_type IdleTask;
  78:../../src/kernel/source/nrk.c ****    nrk_wakeup_signal = nrk_signal_create();
  79:../../src/kernel/source/nrk.c ****    if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
  80:../../src/kernel/source/nrk.c ****    //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
  81:../../src/kernel/source/nrk.c **** #ifndef NRK_SOFT_REBOOT_ON_ERROR
  82:../../src/kernel/source/nrk.c ****    i=_nrk_startup_error();
  83:../../src/kernel/source/nrk.c ****    if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  84:../../src/kernel/source/nrk.c **** #ifndef IGNORE_EXT_RST_ERROR
  85:../../src/kernel/source/nrk.c ****    if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
  86:../../src/kernel/source/nrk.c **** #endif
  87:../../src/kernel/source/nrk.c **** #ifndef IGNORE_BROWN_OUT_ERROR
  88:../../src/kernel/source/nrk.c ****    if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
  89:../../src/kernel/source/nrk.c **** #endif
  90:../../src/kernel/source/nrk.c ****    //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
  91:../../src/kernel/source/nrk.c **** 
  92:../../src/kernel/source/nrk.c ****    //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
  93:../../src/kernel/source/nrk.c **** #endif
  94:../../src/kernel/source/nrk.c **** 
  95:../../src/kernel/source/nrk.c ****    #ifdef NRK_STARTUP_VOLTAGE_CHECK
  96:../../src/kernel/source/nrk.c ****    	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
  97:../../src/kernel/source/nrk.c ****    #endif
  98:../../src/kernel/source/nrk.c **** 
  99:../../src/kernel/source/nrk.c **** 
 100:../../src/kernel/source/nrk.c **** 
 101:../../src/kernel/source/nrk.c **** 
 102:../../src/kernel/source/nrk.c ****    #ifdef NRK_REBOOT_ON_ERROR
 103:../../src/kernel/source/nrk.c ****    #ifndef NRK_WATCHDOG
 104:../../src/kernel/source/nrk.c ****    while(1)
 105:../../src/kernel/source/nrk.c **** 	   {
 106:../../src/kernel/source/nrk.c **** 		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
 107:../../src/kernel/source/nrk.c ****     		for (i = 0; i < 100; i++)
 108:../../src/kernel/source/nrk.c ****       			nrk_spin_wait_us (1000);
 109:../../src/kernel/source/nrk.c **** 	   }
 110:../../src/kernel/source/nrk.c ****    #endif
 111:../../src/kernel/source/nrk.c ****    #endif
 112:../../src/kernel/source/nrk.c **** 
 113:../../src/kernel/source/nrk.c ****    #ifdef NRK_WATCHDOG
 114:../../src/kernel/source/nrk.c ****     if(nrk_watchdog_check()==NRK_ERROR) 
 115:../../src/kernel/source/nrk.c **** 	{
 116:../../src/kernel/source/nrk.c ****     	nrk_watchdog_disable();
 117:../../src/kernel/source/nrk.c **** 	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
 118:../../src/kernel/source/nrk.c **** 	}
 119:../../src/kernel/source/nrk.c ****     nrk_watchdog_enable();
 120:../../src/kernel/source/nrk.c ****     #endif
 121:../../src/kernel/source/nrk.c ****   
 122:../../src/kernel/source/nrk.c ****   // nrk_stack_pointer_init(); 
 123:../../src/kernel/source/nrk.c **** /* 
 124:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 125:../../src/kernel/source/nrk.c **** 	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 126:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk[0]=STK_CANARY_VAL;
 127:../../src/kernel/source/nrk.c ****     	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 128:../../src/kernel/source/nrk.c ****     #else
 129:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
 130:../../src/kernel/source/nrk.c ****     	*stkc = STK_CANARY_VAL;
 131:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 132:../../src/kernel/source/nrk.c **** 	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
 133:../../src/kernel/source/nrk.c ****     #endif
 134:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 135:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 136:../../src/kernel/source/nrk.c **** */	
 137:../../src/kernel/source/nrk.c ****  
 138:../../src/kernel/source/nrk.c ****    // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
 139:../../src/kernel/source/nrk.c **** 
 140:../../src/kernel/source/nrk.c ****     
 141:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = 0;
 142:../../src/kernel/source/nrk.c ****     nrk_cur_task_TCB = NULL;
 143:../../src/kernel/source/nrk.c ****     
 144:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = NULL;
 145:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = 0; 
 146:../../src/kernel/source/nrk.c **** 
 147:../../src/kernel/source/nrk.c ****    #ifdef NRK_STATS_TRACKER
 148:../../src/kernel/source/nrk.c **** 	nrk_stats_reset();
 149:../../src/kernel/source/nrk.c ****    #endif
 150:../../src/kernel/source/nrk.c **** 
 151:../../src/kernel/source/nrk.c ****     #ifdef NRK_MAX_RESERVES 
 152:../../src/kernel/source/nrk.c ****     // Setup the reserve structures
 153:../../src/kernel/source/nrk.c ****     _nrk_reserve_init();
 154:../../src/kernel/source/nrk.c ****     #endif
 155:../../src/kernel/source/nrk.c **** 
 156:../../src/kernel/source/nrk.c ****     _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
 157:../../src/kernel/source/nrk.c **** 
 158:../../src/kernel/source/nrk.c **** for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
 159:../../src/kernel/source/nrk.c **** {
 160:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].count=-1;
 161:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].value=-1;
 162:../../src/kernel/source/nrk.c ****     nrk_sem_list[i].resource_ceiling=-1;
 163:../../src/kernel/source/nrk.c ****     //nrk_resource_count[i]=-1;
 164:../../src/kernel/source/nrk.c ****     //nrk_resource_value[i]=-1;
 165:../../src/kernel/source/nrk.c ****     //nrk_resource_ceiling[i]=-1;
 166:../../src/kernel/source/nrk.c ****     
 167:../../src/kernel/source/nrk.c **** }        
 168:../../src/kernel/source/nrk.c ****     for (i= 0; i<NRK_MAX_TASKS; i++)
 169:../../src/kernel/source/nrk.c **** 	{
 170:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
 171:../../src/kernel/source/nrk.c ****         nrk_task_TCB[i].task_ID = -1; 
 172:../../src/kernel/source/nrk.c ****         }
 173:../../src/kernel/source/nrk.c ****   
 174:../../src/kernel/source/nrk.c ****        
 175:../../src/kernel/source/nrk.c ****     // Setup a double linked list of Ready Tasks 
 176:../../src/kernel/source/nrk.c ****     for (i=0;i<NRK_MAX_TASKS;i++)
 177:../../src/kernel/source/nrk.c **** 	{
 178:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
 179:../../src/kernel/source/nrk.c **** 		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
 180:../../src/kernel/source/nrk.c **** 	}
 181:../../src/kernel/source/nrk.c **** 	
 182:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[0].Prev	=	NULL;
 183:../../src/kernel/source/nrk.c **** 	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
 184:../../src/kernel/source/nrk.c **** 	_head_node = NULL;
 185:../../src/kernel/source/nrk.c **** 	_free_node = &_nrk_readyQ[0];
 186:../../src/kernel/source/nrk.c **** 	
 187:../../src/kernel/source/nrk.c **** 	
 188:../../src/kernel/source/nrk.c **** 	
 189:../../src/kernel/source/nrk.c **** 
 190:../../src/kernel/source/nrk.c **** 	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
 191:../../src/kernel/source/nrk.c **** 	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
 192:../../src/kernel/source/nrk.c **** 	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
 193:../../src/kernel/source/nrk.c **** 	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
 194:../../src/kernel/source/nrk.c **** 	IdleTask.prio = 0;
 195:../../src/kernel/source/nrk.c **** 	IdleTask.period.secs = 0;
 196:../../src/kernel/source/nrk.c **** 	IdleTask.period.nano_secs = 0;
 197:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.secs = 0;
 198:../../src/kernel/source/nrk.c **** 	IdleTask.cpu_reserve.nano_secs = 0;
 199:../../src/kernel/source/nrk.c **** 	IdleTask.offset.secs = 0;
 200:../../src/kernel/source/nrk.c **** 	IdleTask.offset.nano_secs = 0;
 201:../../src/kernel/source/nrk.c **** 	IdleTask.FirstActivation = TRUE;
 202:../../src/kernel/source/nrk.c **** 	IdleTask.Type = IDLE_TASK;
 203:../../src/kernel/source/nrk.c **** 	IdleTask.SchType = PREEMPTIVE;
 204:../../src/kernel/source/nrk.c **** 	nrk_activate_task(&IdleTask);
 205:../../src/kernel/source/nrk.c **** 	
 206:../../src/kernel/source/nrk.c **** }
 207:../../src/kernel/source/nrk.c **** 
 208:../../src/kernel/source/nrk.c **** 
 209:../../src/kernel/source/nrk.c **** 
 210:../../src/kernel/source/nrk.c **** 
 211:../../src/kernel/source/nrk.c **** 
 212:../../src/kernel/source/nrk.c **** 
 213:../../src/kernel/source/nrk.c **** 
 214:../../src/kernel/source/nrk.c **** 
 215:../../src/kernel/source/nrk.c **** void nrk_start (void)
 216:../../src/kernel/source/nrk.c **** {
 217:../../src/kernel/source/nrk.c **** 	int8_t task_ID;
 218:../../src/kernel/source/nrk.c **** 	uint8_t i,j;
 219:../../src/kernel/source/nrk.c **** //	NRK_STK *x;
 220:../../src/kernel/source/nrk.c **** //	unsigned char *stkc;
 221:../../src/kernel/source/nrk.c **** 
 222:../../src/kernel/source/nrk.c **** 	/*
 223:../../src/kernel/source/nrk.c **** 		- Get highest priority task from rdy list
 224:../../src/kernel/source/nrk.c **** 		- set cur prio and start the task 
 225:../../src/kernel/source/nrk.c **** 	*/
 226:../../src/kernel/source/nrk.c ****     // Check to make sure all tasks unique
 227:../../src/kernel/source/nrk.c ****     for(i=0; i<NRK_MAX_TASKS; i++ )
 228:../../src/kernel/source/nrk.c ****     {
 229:../../src/kernel/source/nrk.c **** 	task_ID = nrk_task_TCB[i].task_ID;
 230:../../src/kernel/source/nrk.c **** 	// only check activated tasks
 231:../../src/kernel/source/nrk.c **** 	if(task_ID!=-1)
 232:../../src/kernel/source/nrk.c **** 	{
 233:../../src/kernel/source/nrk.c ****     		for(j=0; j<NRK_MAX_TASKS; j++ )
 234:../../src/kernel/source/nrk.c **** 		{
 235:../../src/kernel/source/nrk.c **** 			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
 236:../../src/kernel/source/nrk.c **** 			{
 237:../../src/kernel/source/nrk.c **** 			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
 238:../../src/kernel/source/nrk.c **** 
 239:../../src/kernel/source/nrk.c **** 			}
 240:../../src/kernel/source/nrk.c **** 		}
 241:../../src/kernel/source/nrk.c **** 	}
 242:../../src/kernel/source/nrk.c **** 
 243:../../src/kernel/source/nrk.c ****     }
 244:../../src/kernel/source/nrk.c **** 
 245:../../src/kernel/source/nrk.c ****     task_ID = nrk_get_high_ready_task_ID();	
 246:../../src/kernel/source/nrk.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 247:../../src/kernel/source/nrk.c ****     nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
 248:../../src/kernel/source/nrk.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 249:../../src/kernel/source/nrk.c **** 		
 250:../../src/kernel/source/nrk.c **** //    nrk_stack_pointer_restore();
 251:../../src/kernel/source/nrk.c **** 
 252:../../src/kernel/source/nrk.c ****     /*
 253:../../src/kernel/source/nrk.c ****     #ifdef KERNEL_STK_ARRAY
 254:../../src/kernel/source/nrk.c ****      	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 255:../../src/kernel/source/nrk.c ****     #else
 256:../../src/kernel/source/nrk.c ****     	stkc = NRK_KERNEL_STK_TOP;
 257:../../src/kernel/source/nrk.c ****     #endif
 258:../../src/kernel/source/nrk.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 259:../../src/kernel/source/nrk.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
 260:../../src/kernel/source/nrk.c ****     
 261:../../src/kernel/source/nrk.c ****     //TODO: this way on msp
 262:../../src/kernel/source/nrk.c ****     // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 263:../../src/kernel/source/nrk.c ****     // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
 264:../../src/kernel/source/nrk.c **** */
 265:../../src/kernel/source/nrk.c ****     nrk_target_start();
 266:../../src/kernel/source/nrk.c ****     nrk_stack_pointer_init(); 
 267:../../src/kernel/source/nrk.c ****     nrk_start_high_ready_task();	
 268:../../src/kernel/source/nrk.c **** 
 269:../../src/kernel/source/nrk.c ****     // you should never get here    
 270:../../src/kernel/source/nrk.c ****     while(1);
 271:../../src/kernel/source/nrk.c **** }
 272:../../src/kernel/source/nrk.c **** 
 273:../../src/kernel/source/nrk.c **** 
 274:../../src/kernel/source/nrk.c **** int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pe
 275:../../src/kernel/source/nrk.c **** {
 276:../../src/kernel/source/nrk.c **** 	
 277:../../src/kernel/source/nrk.c ****     //  Already in critical section so no needenter critical section
 278:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK)
 279:../../src/kernel/source/nrk.c ****     	Task->task_ID=nrk_task_init_cnt;
 280:../../src/kernel/source/nrk.c ****     else Task->task_ID=NRK_IDLE_TASK_ID;
 281:../../src/kernel/source/nrk.c **** 
 282:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
 283:../../src/kernel/source/nrk.c ****     if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
 284:../../src/kernel/source/nrk.c ****     if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
 285:../../src/kernel/source/nrk.c ****     //initialize member of TCB structure
 286:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
 287:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
 288:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
 289:../../src/kernel/source/nrk.c ****     
 290:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
 291:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].suspend_flag = 0;
 292:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
 293:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
 294:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->
 295:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
 296:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
 297:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].num_periods = 1;
 298:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
 299:../../src/kernel/source/nrk.c ****     nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 300:../../src/kernel/source/nrk.c ****  
 301:../../src/kernel/source/nrk.c **** 	
 302:../../src/kernel/source/nrk.c **** 	         
 303:../../src/kernel/source/nrk.c **** 
 304:../../src/kernel/source/nrk.c **** 			
 305:../../src/kernel/source/nrk.c ****     return NRK_OK;
 306:../../src/kernel/source/nrk.c **** 
 307:../../src/kernel/source/nrk.c **** }
 308:../../src/kernel/source/nrk.c **** 
 309:../../src/kernel/source/nrk.c **** 
 310:../../src/kernel/source/nrk.c **** /*
 311:../../src/kernel/source/nrk.c ****  * _nrk_timer_tick() 
 312:../../src/kernel/source/nrk.c ****  *
 313:../../src/kernel/source/nrk.c ****  * This function is called by the interrupt timer0.
 314:../../src/kernel/source/nrk.c ****  * It calls the scheduler.
 315:../../src/kernel/source/nrk.c ****  */
 316:../../src/kernel/source/nrk.c **** void _nrk_timer_tick(void)
 317:../../src/kernel/source/nrk.c **** {
 318:../../src/kernel/source/nrk.c **** 	// want to do something before the scheduler gets called? 
 319:../../src/kernel/source/nrk.c **** 	// Go ahead and put it here...
 320:../../src/kernel/source/nrk.c **** 
 321:../../src/kernel/source/nrk.c **** 	_nrk_scheduler();
 322:../../src/kernel/source/nrk.c **** 
 323:../../src/kernel/source/nrk.c ****   	return;
 324:../../src/kernel/source/nrk.c **** }
 325:../../src/kernel/source/nrk.c **** 
 326:../../src/kernel/source/nrk.c **** 
 327:../../src/kernel/source/nrk.c **** uint16_t nrk_version (void)
 328:../../src/kernel/source/nrk.c **** {
 183               	.LM4:
 184               	.LFBB3:
 185               	/* prologue: frame size=0 */
 186               	/* prologue end (size=0) */
 329:../../src/kernel/source/nrk.c ****     return (NRK_VERSION);
 330:../../src/kernel/source/nrk.c **** }
 188               	.LM5:
 189 0008 85E6      		ldi r24,lo8(101)
 190 000a 90E0      		ldi r25,hi8(101)
 191               	/* epilogue: frame size=0 */
 192 000c 0895      		ret
 193               	/* epilogue end (size=1) */
 194               	/* function nrk_version size 3 (2) */
 196               	.Lscope3:
 198               		.stabd	78,0,0
 200               	.global	_nrk_timer_tick
 202               	_nrk_timer_tick:
 203               		.stabd	46,0,0
 205               	.LM6:
 206               	.LFBB4:
 207               	/* prologue: frame size=0 */
 208               	/* prologue end (size=0) */
 210               	.LM7:
 211 000e 0E94 0000 		call _nrk_scheduler
 212               	/* epilogue: frame size=0 */
 213 0012 0895      		ret
 214               	/* epilogue end (size=1) */
 215               	/* function _nrk_timer_tick size 3 (2) */
 217               	.Lscope4:
 219               		.stabd	78,0,0
 227               	.global	nrk_TCB_init
 229               	nrk_TCB_init:
 230               		.stabd	46,0,0
 232               	.LM8:
 233               	.LFBB5:
 234               	/* prologue: frame size=0 */
 235 0014 EF92      		push r14
 236 0016 FF92      		push r15
 237 0018 0F93      		push r16
 238 001a 1F93      		push r17
 239 001c CF93      		push r28
 240 001e DF93      		push r29
 241               	/* prologue end (size=6) */
 242 0020 EC01      		movw r28,r24
 243 0022 8B01      		movw r16,r22
 244 0024 7A01      		movw r14,r20
 246               	.LM9:
 247 0026 8985      		ldd r24,Y+9
 248 0028 8230      		cpi r24,lo8(2)
 249 002a 01F0      		breq .L10
 251               	.LM10:
 252 002c 8091 0000 		lds r24,nrk_task_init_cnt
 253 0030 8883      		st Y,r24
 254 0032 00C0      		rjmp .L12
 255               	.L10:
 257               	.LM11:
 258 0034 1882      		st Y,__zero_reg__
 259               	.L12:
 261               	.LM12:
 262 0036 8091 0000 		lds r24,nrk_task_init_cnt
 263 003a 8530      		cpi r24,lo8(5)
 264 003c 00F0      		brlo .L13
 265 003e 60E0      		ldi r22,lo8(0)
 266 0040 87E0      		ldi r24,lo8(7)
 267 0042 0E94 0000 		call nrk_kernel_error_add
 268               	.L13:
 270               	.LM13:
 271 0046 8985      		ldd r24,Y+9
 272 0048 8230      		cpi r24,lo8(2)
 273 004a 01F0      		breq .L15
 274 004c 8091 0000 		lds r24,nrk_task_init_cnt
 275 0050 8F5F      		subi r24,lo8(-(1))
 276 0052 8093 0000 		sts nrk_task_init_cnt,r24
 277               	.L15:
 279               	.LM14:
 280 0056 8091 0000 		lds r24,nrk_task_init_cnt
 281 005a 8823      		tst r24
 282 005c 01F4      		brne .L17
 283 005e 81E0      		ldi r24,lo8(1)
 284 0060 8093 0000 		sts nrk_task_init_cnt,r24
 285               	.L17:
 287               	.LM15:
 288 0064 8881      		ld r24,Y
 289 0066 9927      		clr r25
 290 0068 87FD      		sbrc r24,7
 291 006a 9095      		com r25
 292 006c FC01      		movw r30,r24
 293 006e 45E0      		ldi r20,5
 294 0070 EE0F      	1:	lsl r30
 295 0072 FF1F      		rol r31
 296 0074 4A95      		dec r20
 297 0076 01F4      		brne 1b
 298 0078 E80F      		add r30,r24
 299 007a F91F      		adc r31,r25
 300 007c E050      		subi r30,lo8(-(nrk_task_TCB))
 301 007e F040      		sbci r31,hi8(-(nrk_task_TCB))
 302 0080 1183      		std Z+1,r17
 303 0082 0083      		st Z,r16
 305               	.LM16:
 306 0084 8881      		ld r24,Y
 307 0086 9927      		clr r25
 308 0088 87FD      		sbrc r24,7
 309 008a 9095      		com r25
 310 008c FC01      		movw r30,r24
 311 008e 35E0      		ldi r19,5
 312 0090 EE0F      	1:	lsl r30
 313 0092 FF1F      		rol r31
 314 0094 3A95      		dec r19
 315 0096 01F4      		brne 1b
 316 0098 E80F      		add r30,r24
 317 009a F91F      		adc r31,r25
 318 009c E050      		subi r30,lo8(-(nrk_task_TCB))
 319 009e F040      		sbci r31,hi8(-(nrk_task_TCB))
 320 00a0 8885      		ldd r24,Y+8
 321 00a2 8287      		std Z+10,r24
 323               	.LM17:
 324 00a4 8881      		ld r24,Y
 325 00a6 9927      		clr r25
 326 00a8 87FD      		sbrc r24,7
 327 00aa 9095      		com r25
 328 00ac FC01      		movw r30,r24
 329 00ae 25E0      		ldi r18,5
 330 00b0 EE0F      	1:	lsl r30
 331 00b2 FF1F      		rol r31
 332 00b4 2A95      		dec r18
 333 00b6 01F4      		brne 1b
 334 00b8 E80F      		add r30,r24
 335 00ba F91F      		adc r31,r25
 336 00bc E050      		subi r30,lo8(-(nrk_task_TCB))
 337 00be F040      		sbci r31,hi8(-(nrk_task_TCB))
 338 00c0 83E0      		ldi r24,lo8(3)
 339 00c2 8187      		std Z+9,r24
 341               	.LM18:
 342 00c4 2881      		ld r18,Y
 343 00c6 822F      		mov r24,r18
 344 00c8 9927      		clr r25
 345 00ca 87FD      		sbrc r24,7
 346 00cc 9095      		com r25
 347 00ce FC01      		movw r30,r24
 348 00d0 05E0      		ldi r16,5
 349 00d2 EE0F      	1:	lsl r30
 350 00d4 FF1F      		rol r31
 351 00d6 0A95      		dec r16
 352 00d8 01F4      		brne 1b
 353 00da E80F      		add r30,r24
 354 00dc F91F      		adc r31,r25
 355 00de E050      		subi r30,lo8(-(nrk_task_TCB))
 356 00e0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 357 00e2 2087      		std Z+8,r18
 359               	.LM19:
 360 00e4 8881      		ld r24,Y
 361 00e6 9927      		clr r25
 362 00e8 87FD      		sbrc r24,7
 363 00ea 9095      		com r25
 364 00ec FC01      		movw r30,r24
 365 00ee 15E0      		ldi r17,5
 366 00f0 EE0F      	1:	lsl r30
 367 00f2 FF1F      		rol r31
 368 00f4 1A95      		dec r17
 369 00f6 01F4      		brne 1b
 370 00f8 E80F      		add r30,r24
 371 00fa F91F      		adc r31,r25
 372 00fc E050      		subi r30,lo8(-(nrk_task_TCB))
 373 00fe F040      		sbci r31,hi8(-(nrk_task_TCB))
 374 0100 1582      		std Z+5,__zero_reg__
 376               	.LM20:
 377 0102 0881      		ld r16,Y
 378 0104 1127      		clr r17
 379 0106 07FD      		sbrc r16,7
 380 0108 1095      		com r17
 381 010a CE01      		movw r24,r28
 382 010c 0B96      		adiw r24,11
 383 010e 0E94 0000 		call _nrk_time_to_ticks
 384 0112 F801      		movw r30,r16
 385 0114 B5E0      		ldi r27,5
 386 0116 EE0F      	1:	lsl r30
 387 0118 FF1F      		rol r31
 388 011a BA95      		dec r27
 389 011c 01F4      		brne 1b
 390 011e E00F      		add r30,r16
 391 0120 F11F      		adc r31,r17
 392 0122 E050      		subi r30,lo8(-(nrk_task_TCB))
 393 0124 F040      		sbci r31,hi8(-(nrk_task_TCB))
 394 0126 948F      		std Z+28,r25
 395 0128 838F      		std Z+27,r24
 397               	.LM21:
 398 012a 0881      		ld r16,Y
 399 012c 1127      		clr r17
 400 012e 07FD      		sbrc r16,7
 401 0130 1095      		com r17
 402 0132 CE01      		movw r24,r28
 403 0134 4B96      		adiw r24,27
 404 0136 0E94 0000 		call _nrk_time_to_ticks
 405 013a F801      		movw r30,r16
 406 013c A5E0      		ldi r26,5
 407 013e EE0F      	1:	lsl r30
 408 0140 FF1F      		rol r31
 409 0142 AA95      		dec r26
 410 0144 01F4      		brne 1b
 411 0146 E00F      		add r30,r16
 412 0148 F11F      		adc r31,r17
 413 014a E050      		subi r30,lo8(-(nrk_task_TCB))
 414 014c F040      		sbci r31,hi8(-(nrk_task_TCB))
 415 014e 968B      		std Z+22,r25
 416 0150 858B      		std Z+21,r24
 418               	.LM22:
 419 0152 8881      		ld r24,Y
 420 0154 9927      		clr r25
 421 0156 87FD      		sbrc r24,7
 422 0158 9095      		com r25
 423 015a FC01      		movw r30,r24
 424 015c 75E0      		ldi r23,5
 425 015e EE0F      	1:	lsl r30
 426 0160 FF1F      		rol r31
 427 0162 7A95      		dec r23
 428 0164 01F4      		brne 1b
 429 0166 E80F      		add r30,r24
 430 0168 F91F      		adc r31,r25
 431 016a E050      		subi r30,lo8(-(nrk_task_TCB))
 432 016c F040      		sbci r31,hi8(-(nrk_task_TCB))
 433 016e 8589      		ldd r24,Z+21
 434 0170 9689      		ldd r25,Z+22
 435 0172 238D      		ldd r18,Z+27
 436 0174 348D      		ldd r19,Z+28
 437 0176 820F      		add r24,r18
 438 0178 931F      		adc r25,r19
 439 017a 908F      		std Z+24,r25
 440 017c 878B      		std Z+23,r24
 442               	.LM23:
 443 017e 0881      		ld r16,Y
 444 0180 1127      		clr r17
 445 0182 07FD      		sbrc r16,7
 446 0184 1095      		com r17
 447 0186 CE01      		movw r24,r28
 448 0188 4396      		adiw r24,19
 449 018a 0E94 0000 		call _nrk_time_to_ticks
 450 018e F801      		movw r30,r16
 451 0190 65E0      		ldi r22,5
 452 0192 EE0F      	1:	lsl r30
 453 0194 FF1F      		rol r31
 454 0196 6A95      		dec r22
 455 0198 01F4      		brne 1b
 456 019a E00F      		add r30,r16
 457 019c F11F      		adc r31,r17
 458 019e E050      		subi r30,lo8(-(nrk_task_TCB))
 459 01a0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 460 01a2 968F      		std Z+30,r25
 461 01a4 858F      		std Z+29,r24
 463               	.LM24:
 464 01a6 8881      		ld r24,Y
 465 01a8 9927      		clr r25
 466 01aa 87FD      		sbrc r24,7
 467 01ac 9095      		com r25
 468 01ae FC01      		movw r30,r24
 469 01b0 55E0      		ldi r21,5
 470 01b2 EE0F      	1:	lsl r30
 471 01b4 FF1F      		rol r31
 472 01b6 5A95      		dec r21
 473 01b8 01F4      		brne 1b
 474 01ba E80F      		add r30,r24
 475 01bc F91F      		adc r31,r25
 476 01be E050      		subi r30,lo8(-(nrk_task_TCB))
 477 01c0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 478 01c2 858D      		ldd r24,Z+29
 479 01c4 968D      		ldd r25,Z+30
 480 01c6 928F      		std Z+26,r25
 481 01c8 818F      		std Z+25,r24
 483               	.LM25:
 484 01ca 8881      		ld r24,Y
 485 01cc 9927      		clr r25
 486 01ce 87FD      		sbrc r24,7
 487 01d0 9095      		com r25
 488 01d2 FC01      		movw r30,r24
 489 01d4 45E0      		ldi r20,5
 490 01d6 EE0F      	1:	lsl r30
 491 01d8 FF1F      		rol r31
 492 01da 4A95      		dec r20
 493 01dc 01F4      		brne 1b
 494 01de E80F      		add r30,r24
 495 01e0 F91F      		adc r31,r25
 496 01e2 E050      		subi r30,lo8(-(nrk_task_TCB))
 497 01e4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 498 01e6 81E0      		ldi r24,lo8(1)
 499 01e8 90E0      		ldi r25,hi8(1)
 500 01ea 90A3      		std Z+32,r25
 501 01ec 878F      		std Z+31,r24
 503               	.LM26:
 504 01ee 8881      		ld r24,Y
 505 01f0 9927      		clr r25
 506 01f2 87FD      		sbrc r24,7
 507 01f4 9095      		com r25
 508 01f6 FC01      		movw r30,r24
 509 01f8 35E0      		ldi r19,5
 510 01fa EE0F      	1:	lsl r30
 511 01fc FF1F      		rol r31
 512 01fe 3A95      		dec r19
 513 0200 01F4      		brne 1b
 514 0202 E80F      		add r30,r24
 515 0204 F91F      		adc r31,r25
 516 0206 E050      		subi r30,lo8(-(nrk_task_TCB))
 517 0208 F040      		sbci r31,hi8(-(nrk_task_TCB))
 518 020a F382      		std Z+3,r15
 519 020c E282      		std Z+2,r14
 521               	.LM27:
 522 020e 8881      		ld r24,Y
 523 0210 9927      		clr r25
 524 0212 87FD      		sbrc r24,7
 525 0214 9095      		com r25
 526 0216 FC01      		movw r30,r24
 527 0218 25E0      		ldi r18,5
 528 021a EE0F      	1:	lsl r30
 529 021c FF1F      		rol r31
 530 021e 2A95      		dec r18
 531 0220 01F4      		brne 1b
 532 0222 E80F      		add r30,r24
 533 0224 F91F      		adc r31,r25
 534 0226 E050      		subi r30,lo8(-(nrk_task_TCB))
 535 0228 F040      		sbci r31,hi8(-(nrk_task_TCB))
 536 022a 81E0      		ldi r24,lo8(1)
 537 022c 8487      		std Z+12,r24
 539               	.LM28:
 540 022e 81E0      		ldi r24,lo8(1)
 541 0230 90E0      		ldi r25,hi8(1)
 542               	/* epilogue: frame size=0 */
 543 0232 DF91      		pop r29
 544 0234 CF91      		pop r28
 545 0236 1F91      		pop r17
 546 0238 0F91      		pop r16
 547 023a FF90      		pop r15
 548 023c EF90      		pop r14
 549 023e 0895      		ret
 550               	/* epilogue end (size=7) */
 551               	/* function nrk_TCB_init size 278 (265) */
 553               	.Lscope5:
 555               		.stabd	78,0,0
 557               	.global	nrk_start
 559               	nrk_start:
 560               		.stabd	46,0,0
 562               	.LM29:
 563               	.LFBB6:
 564               	/* prologue: frame size=0 */
 565 0240 8F92      		push r8
 566 0242 9F92      		push r9
 567 0244 AF92      		push r10
 568 0246 BF92      		push r11
 569 0248 CF92      		push r12
 570 024a DF92      		push r13
 571 024c EF92      		push r14
 572 024e FF92      		push r15
 573 0250 0F93      		push r16
 574 0252 1F93      		push r17
 575 0254 CF93      		push r28
 576 0256 DF93      		push r29
 577               	/* prologue end (size=12) */
 578 0258 60E0      		ldi r22,lo8(nrk_task_TCB+8)
 579 025a A62E      		mov r10,r22
 580 025c 60E0      		ldi r22,hi8(nrk_task_TCB+8)
 581 025e B62E      		mov r11,r22
 582 0260 CC24      		clr r12
 583 0262 DD24      		clr r13
 585               	.LM30:
 586 0264 4501      		movw r8,r10
 587               	.L21:
 589               	.LM31:
 590 0266 EC2C      		mov r14,r12
 592               	.LM32:
 593 0268 F501      		movw r30,r10
 594 026a F080      		ld r15,Z
 596               	.LM33:
 597 026c FFEF      		ldi r31,lo8(-1)
 598 026e FF16      		cp r15,r31
 599 0270 01F0      		breq .L22
 600 0272 E401      		movw r28,r8
 601 0274 00E0      		ldi r16,lo8(0)
 602 0276 10E0      		ldi r17,hi8(0)
 603               	.L24:
 605               	.LM34:
 606 0278 E016      		cp r14,r16
 607 027a 01F0      		breq .L25
 608 027c 8881      		ld r24,Y
 609 027e F816      		cp r15,r24
 610 0280 01F4      		brne .L25
 612               	.LM35:
 613 0282 6F2D      		mov r22,r15
 614 0284 85E0      		ldi r24,lo8(5)
 615 0286 0E94 0000 		call nrk_kernel_error_add
 616               	.L25:
 617 028a 0F5F      		subi r16,lo8(-(1))
 618 028c 1F4F      		sbci r17,hi8(-(1))
 619 028e A196      		adiw r28,33
 621               	.LM36:
 622 0290 0530      		cpi r16,5
 623 0292 1105      		cpc r17,__zero_reg__
 624 0294 01F4      		brne .L24
 625               	.L22:
 626 0296 0894      		sec
 627 0298 C11C      		adc r12,__zero_reg__
 628 029a D11C      		adc r13,__zero_reg__
 629 029c 81E2      		ldi r24,lo8(33)
 630 029e 90E0      		ldi r25,hi8(33)
 631 02a0 A80E      		add r10,r24
 632 02a2 B91E      		adc r11,r25
 634               	.LM37:
 635 02a4 95E0      		ldi r25,lo8(5)
 636 02a6 C916      		cp r12,r25
 637 02a8 D104      		cpc r13,__zero_reg__
 638 02aa 01F4      		brne .L21
 640               	.LM38:
 641 02ac 0E94 0000 		call nrk_get_high_ready_task_ID
 643               	.LM39:
 644 02b0 282F      		mov r18,r24
 645 02b2 3327      		clr r19
 646 02b4 27FD      		sbrc r18,7
 647 02b6 3095      		com r19
 648 02b8 F901      		movw r30,r18
 649 02ba 55E0      		ldi r21,5
 650 02bc EE0F      	1:	lsl r30
 651 02be FF1F      		rol r31
 652 02c0 5A95      		dec r21
 653 02c2 01F4      		brne 1b
 654 02c4 E20F      		add r30,r18
 655 02c6 F31F      		adc r31,r19
 656 02c8 E050      		subi r30,lo8(-(nrk_task_TCB))
 657 02ca F040      		sbci r31,hi8(-(nrk_task_TCB))
 658 02cc 3285      		ldd r19,Z+10
 659 02ce 3093 0000 		sts nrk_high_ready_prio,r19
 661               	.LM40:
 662 02d2 21E2      		ldi r18,lo8(33)
 663 02d4 8202      		muls r24,r18
 664 02d6 C001      		movw r24,r0
 665 02d8 1124      		clr r1
 666 02da 8050      		subi r24,lo8(-(nrk_task_TCB))
 667 02dc 9040      		sbci r25,hi8(-(nrk_task_TCB))
 668 02de 9093 0000 		sts (nrk_cur_task_TCB)+1,r25
 669 02e2 8093 0000 		sts nrk_cur_task_TCB,r24
 670 02e6 9093 0000 		sts (nrk_high_ready_TCB)+1,r25
 671 02ea 8093 0000 		sts nrk_high_ready_TCB,r24
 673               	.LM41:
 674 02ee 3093 0000 		sts nrk_cur_task_prio,r19
 676               	.LM42:
 677 02f2 0E94 0000 		call nrk_target_start
 679               	.LM43:
 680 02f6 0E94 0000 		call nrk_stack_pointer_init
 682               	.LM44:
 683 02fa 0E94 0000 		call nrk_start_high_ready_task
 684               	.L29:
 685 02fe 00C0      		rjmp .L29
 686               	/* epilogue: frame size=0 */
 687               	/* epilogue: noreturn */
 688               	/* epilogue end (size=0) */
 689               	/* function nrk_start size 96 (84) */
 695               	.Lscope6:
 697               		.stabd	78,0,0
 699               	.global	nrk_init
 701               	nrk_init:
 702               		.stabd	46,0,0
 704               	.LM45:
 705               	.LFBB7:
 706               	/* prologue: frame size=35 */
 707 0300 0F93      		push r16
 708 0302 1F93      		push r17
 709 0304 CF93      		push r28
 710 0306 DF93      		push r29
 711 0308 CDB7      		in r28,__SP_L__
 712 030a DEB7      		in r29,__SP_H__
 713 030c A397      		sbiw r28,35
 714 030e 0FB6      		in __tmp_reg__,__SREG__
 715 0310 F894      		cli
 716 0312 DEBF      		out __SP_H__,r29
 717 0314 0FBE      		out __SREG__,__tmp_reg__
 718 0316 CDBF      		out __SP_L__,r28
 719               	/* prologue end (size=12) */
 721               	.LM46:
 722 0318 0E94 0000 		call nrk_signal_create
 723 031c 8093 0000 		sts nrk_wakeup_signal,r24
 725               	.LM47:
 726 0320 8F3F      		cpi r24,lo8(-1)
 727 0322 01F4      		brne .L35
 729               	.LM48:
 730 0324 60E0      		ldi r22,lo8(0)
 731 0326 8EE0      		ldi r24,lo8(14)
 732 0328 0E94 0000 		call nrk_kernel_error_add
 733               	.L35:
 735               	.LM49:
 736 032c 0E94 0000 		call _nrk_startup_error
 738               	.LM50:
 739 0330 082F      		mov r16,r24
 740 0332 1127      		clr r17
 741 0334 00FF      		sbrs r16,0
 742 0336 00C0      		rjmp .L37
 743 0338 60E0      		ldi r22,lo8(0)
 744 033a 86E0      		ldi r24,lo8(6)
 745 033c 0E94 0000 		call nrk_kernel_error_add
 746               	.L37:
 748               	.LM51:
 749 0340 01FF      		sbrs r16,1
 750 0342 00C0      		rjmp .L39
 751 0344 60E0      		ldi r22,lo8(0)
 752 0346 84E1      		ldi r24,lo8(20)
 753 0348 0E94 0000 		call nrk_kernel_error_add
 754               	.L39:
 756               	.LM52:
 757 034c 02FF      		sbrs r16,2
 758 034e 00C0      		rjmp .L41
 759 0350 60E0      		ldi r22,lo8(0)
 760 0352 83E1      		ldi r24,lo8(19)
 761 0354 0E94 0000 		call nrk_kernel_error_add
 762               	.L41:
 764               	.LM53:
 765 0358 0E94 0000 		call nrk_watchdog_check
 766 035c 8F3F      		cpi r24,lo8(-1)
 767 035e 01F4      		brne .L43
 769               	.LM54:
 770 0360 0E94 0000 		call nrk_watchdog_disable
 772               	.LM55:
 773 0364 60E0      		ldi r22,lo8(0)
 774 0366 80E1      		ldi r24,lo8(16)
 775 0368 0E94 0000 		call nrk_kernel_error_add
 776               	.L43:
 778               	.LM56:
 779 036c 0E94 0000 		call nrk_watchdog_enable
 781               	.LM57:
 782 0370 1092 0000 		sts nrk_cur_task_prio,__zero_reg__
 784               	.LM58:
 785 0374 1092 0000 		sts (nrk_cur_task_TCB)+1,__zero_reg__
 786 0378 1092 0000 		sts nrk_cur_task_TCB,__zero_reg__
 788               	.LM59:
 789 037c 1092 0000 		sts (nrk_high_ready_TCB)+1,__zero_reg__
 790 0380 1092 0000 		sts nrk_high_ready_TCB,__zero_reg__
 792               	.LM60:
 793 0384 1092 0000 		sts nrk_high_ready_prio,__zero_reg__
 795               	.LM61:
 796 0388 1092 0000 		sts _nrk_resource_cnt,__zero_reg__
 798               	.LM62:
 799 038c 8FEF      		ldi r24,lo8(-1)
 800 038e 8093 0000 		sts nrk_sem_list,r24
 802               	.LM63:
 803 0392 8093 0000 		sts nrk_sem_list+2,r24
 805               	.LM64:
 806 0396 8093 0000 		sts nrk_sem_list+1,r24
 807 039a E0E0      		ldi r30,lo8(nrk_task_TCB)
 808 039c F0E0      		ldi r31,hi8(nrk_task_TCB)
 809               	.L45:
 811               	.LM65:
 812 039e 83E6      		ldi r24,lo8(99)
 813 03a0 8287      		std Z+10,r24
 815               	.LM66:
 816 03a2 8FEF      		ldi r24,lo8(-1)
 817 03a4 8087      		std Z+8,r24
 818 03a6 B196      		adiw r30,33
 820               	.LM67:
 821 03a8 20E0      		ldi r18,hi8(nrk_task_TCB+165)
 822 03aa E030      		cpi r30,lo8(nrk_task_TCB+165)
 823 03ac F207      		cpc r31,r18
 824 03ae 01F4      		brne .L45
 825 03b0 E0E0      		ldi r30,lo8(_nrk_readyQ)
 826 03b2 F0E0      		ldi r31,hi8(_nrk_readyQ)
 827               	.L47:
 829               	.LM68:
 830 03b4 CF01      		movw r24,r30
 831 03b6 0596      		adiw r24,5
 832 03b8 9483      		std Z+4,r25
 833 03ba 8383      		std Z+3,r24
 835               	.LM69:
 836 03bc F783      		std Z+7,r31
 837 03be E683      		std Z+6,r30
 838 03c0 FC01      		movw r30,r24
 840               	.LM70:
 841 03c2 20E0      		ldi r18,hi8(_nrk_readyQ+25)
 842 03c4 8030      		cpi r24,lo8(_nrk_readyQ+25)
 843 03c6 9207      		cpc r25,r18
 844 03c8 01F4      		brne .L47
 846               	.LM71:
 847 03ca 1092 0000 		sts (_nrk_readyQ+1)+1,__zero_reg__
 848 03ce 1092 0000 		sts _nrk_readyQ+1,__zero_reg__
 850               	.LM72:
 851 03d2 1092 0000 		sts (_nrk_readyQ+28)+1,__zero_reg__
 852 03d6 1092 0000 		sts _nrk_readyQ+28,__zero_reg__
 854               	.LM73:
 855 03da 1092 0000 		sts (_head_node)+1,__zero_reg__
 856 03de 1092 0000 		sts _head_node,__zero_reg__
 858               	.LM74:
 859 03e2 4997      		sbiw r24,25
 860 03e4 9093 0000 		sts (_free_node)+1,r25
 861 03e8 8093 0000 		sts _free_node,r24
 863               	.LM75:
 864 03ec 60E0      		ldi r22,lo8(pm(nrk_idle_task))
 865 03ee 70E0      		ldi r23,hi8(pm(nrk_idle_task))
 866 03f0 8E01      		movw r16,r28
 867 03f2 0F5F      		subi r16,lo8(-(1))
 868 03f4 1F4F      		sbci r17,hi8(-(1))
 869 03f6 C801      		movw r24,r16
 870 03f8 0E94 0000 		call nrk_task_set_entry_function
 872               	.LM76:
 873 03fc 40E8      		ldi r20,lo8(128)
 874 03fe 50E0      		ldi r21,hi8(128)
 875 0400 60E0      		ldi r22,lo8(nrk_idle_task_stk)
 876 0402 70E0      		ldi r23,hi8(nrk_idle_task_stk)
 877 0404 C801      		movw r24,r16
 878 0406 0E94 0000 		call nrk_task_set_stk
 880               	.LM77:
 881 040a 85E5      		ldi r24,lo8(85)
 882 040c 8093 0000 		sts nrk_idle_task_stk,r24
 884               	.LM78:
 885 0410 1986      		std Y+9,__zero_reg__
 887               	.LM79:
 888 0412 1C86      		std Y+12,__zero_reg__
 889 0414 1D86      		std Y+13,__zero_reg__
 890 0416 1E86      		std Y+14,__zero_reg__
 891 0418 1F86      		std Y+15,__zero_reg__
 893               	.LM80:
 894 041a 188A      		std Y+16,__zero_reg__
 895 041c 198A      		std Y+17,__zero_reg__
 896 041e 1A8A      		std Y+18,__zero_reg__
 897 0420 1B8A      		std Y+19,__zero_reg__
 899               	.LM81:
 900 0422 1C8A      		std Y+20,__zero_reg__
 901 0424 1D8A      		std Y+21,__zero_reg__
 902 0426 1E8A      		std Y+22,__zero_reg__
 903 0428 1F8A      		std Y+23,__zero_reg__
 905               	.LM82:
 906 042a 188E      		std Y+24,__zero_reg__
 907 042c 198E      		std Y+25,__zero_reg__
 908 042e 1A8E      		std Y+26,__zero_reg__
 909 0430 1B8E      		std Y+27,__zero_reg__
 911               	.LM83:
 912 0432 1C8E      		std Y+28,__zero_reg__
 913 0434 1D8E      		std Y+29,__zero_reg__
 914 0436 1E8E      		std Y+30,__zero_reg__
 915 0438 1F8E      		std Y+31,__zero_reg__
 917               	.LM84:
 918 043a 18A2      		std Y+32,__zero_reg__
 919 043c 19A2      		std Y+33,__zero_reg__
 920 043e 1AA2      		std Y+34,__zero_reg__
 921 0440 1BA2      		std Y+35,__zero_reg__
 923               	.LM85:
 924 0442 91E0      		ldi r25,lo8(1)
 925 0444 9887      		std Y+8,r25
 927               	.LM86:
 928 0446 82E0      		ldi r24,lo8(2)
 929 0448 8A87      		std Y+10,r24
 931               	.LM87:
 932 044a 9B87      		std Y+11,r25
 934               	.LM88:
 935 044c C801      		movw r24,r16
 936 044e 0E94 0000 		call nrk_activate_task
 937               	/* epilogue: frame size=35 */
 938 0452 A396      		adiw r28,35
 939 0454 0FB6      		in __tmp_reg__,__SREG__
 940 0456 F894      		cli
 941 0458 DEBF      		out __SP_H__,r29
 942 045a 0FBE      		out __SREG__,__tmp_reg__
 943 045c CDBF      		out __SP_L__,r28
 944 045e DF91      		pop r29
 945 0460 CF91      		pop r28
 946 0462 1F91      		pop r17
 947 0464 0F91      		pop r16
 948 0466 0895      		ret
 949               	/* epilogue end (size=11) */
 950               	/* function nrk_init size 180 (157) */
 955               	.Lscope7:
 957               		.stabd	78,0,0
 959               	.global	nrk_halt
 961               	nrk_halt:
 962               		.stabd	46,0,0
 964               	.LM89:
 965               	.LFBB8:
 966               	/* prologue: frame size=0 */
 967               	/* prologue end (size=0) */
 968               	.LBB4:
 969               	.LBB5:
 971               	.LM90:
 972               	/* #APP */
 973 0468 F894      		cli
 974               		
 975               	/* #NOAPP */
 976               	.L55:
 977 046a 00C0      		rjmp .L55
 978               	.LBE5:
 979               	.LBE4:
 980               	/* epilogue: frame size=0 */
 981               	/* epilogue: noreturn */
 982               	/* epilogue end (size=0) */
 983               	/* function nrk_halt size 5 (5) */
 985               	.Lscope8:
 987               		.stabd	78,0,0
 988               		.comm _nrk_signal_list,4,1
 989               		.comm nrk_idle_task_stk,128,1
 990               		.comm nrk_kernel_stk_ptr,2,1
 991               		.comm nrk_task_TCB,165,1
 992               		.comm nrk_wakeup_signal,1,1
 993               		.comm _nrk_readyQ,30,1
 994               		.comm _free_node,2,1
 995               		.comm _head_node,2,1
 996               		.comm nrk_cur_task_prio,1,1
 997               		.comm nrk_cur_task_TCB,2,1
 998               		.comm nrk_high_ready_prio,1,1
 999               		.comm nrk_high_ready_TCB,2,1
 1000               		.comm _nrk_resource_cnt,1,1
 1001               		.comm nrk_system_time,8,1
 1002               		.comm nrk_sem_list,3,1
 1003               		.comm _nrk_cpu_state,1,1
 1004               		.comm next_next_wakeup,2,1
 1005               		.comm error_task,1,1
 1006               		.comm error_num,1,1
 1007               		.comm nrk_task_init_cnt,1,1
 1029               	.Letext0:
 1030               	/* File "../../src/kernel/source/nrk.c": code  575 = 0x023f ( 523), prologues  30, epilogues  22 */
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk.c
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:2      *ABS*:000000000000003f __SREG__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:3      *ABS*:000000000000003e __SP_H__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:4      *ABS*:000000000000003d __SP_L__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:132    .text:0000000000000000 nrk_int_disable
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:156    .text:0000000000000004 nrk_int_enable
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:180    .text:0000000000000008 nrk_version
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:202    .text:000000000000000e _nrk_timer_tick
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:229    .text:0000000000000014 nrk_TCB_init
                            *COM*:0000000000000001 nrk_task_init_cnt
                            *COM*:00000000000000a5 nrk_task_TCB
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:559    .text:0000000000000240 nrk_start
                            *COM*:0000000000000001 nrk_high_ready_prio
                            *COM*:0000000000000002 nrk_cur_task_TCB
                            *COM*:0000000000000002 nrk_high_ready_TCB
                            *COM*:0000000000000001 nrk_cur_task_prio
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:701    .text:0000000000000300 nrk_init
                            *COM*:0000000000000001 nrk_wakeup_signal
                            *COM*:0000000000000001 _nrk_resource_cnt
                            *COM*:0000000000000003 nrk_sem_list
                            *COM*:000000000000001e _nrk_readyQ
                            *COM*:0000000000000002 _head_node
                            *COM*:0000000000000002 _free_node
                            *COM*:0000000000000080 nrk_idle_task_stk
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccixmR7E.s:961    .text:0000000000000468 nrk_halt
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000008 nrk_system_time
                            *COM*:0000000000000001 _nrk_cpu_state
                            *COM*:0000000000000002 next_next_wakeup
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_nrk_scheduler
nrk_kernel_error_add
_nrk_time_to_ticks
nrk_get_high_ready_task_ID
nrk_target_start
nrk_stack_pointer_init
nrk_start_high_ready_task
nrk_signal_create
_nrk_startup_error
nrk_watchdog_check
nrk_watchdog_disable
nrk_watchdog_enable
nrk_idle_task
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task

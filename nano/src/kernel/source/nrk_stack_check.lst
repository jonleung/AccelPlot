   1               		.file	"nrk_stack_check.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 133               	.global	nrk_stack_check_pid
 135               	nrk_stack_check_pid:
 136               		.stabd	46,0,0
   1:../../src/kernel/source/nrk_stack_check.c **** /******************************************************************************
   2:../../src/kernel/source/nrk_stack_check.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../src/kernel/source/nrk_stack_check.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../src/kernel/source/nrk_stack_check.c **** *  All rights reserved.
   5:../../src/kernel/source/nrk_stack_check.c **** *
   6:../../src/kernel/source/nrk_stack_check.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../src/kernel/source/nrk_stack_check.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../src/kernel/source/nrk_stack_check.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../src/kernel/source/nrk_stack_check.c **** *
  10:../../src/kernel/source/nrk_stack_check.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../src/kernel/source/nrk_stack_check.c **** *  it under the terms of the GNU General Public License as published by
  12:../../src/kernel/source/nrk_stack_check.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../src/kernel/source/nrk_stack_check.c **** *
  14:../../src/kernel/source/nrk_stack_check.c **** *  This program is distributed in the hope that it will be useful,
  15:../../src/kernel/source/nrk_stack_check.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../src/kernel/source/nrk_stack_check.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../src/kernel/source/nrk_stack_check.c **** *  GNU General Public License for more details.
  18:../../src/kernel/source/nrk_stack_check.c **** *
  19:../../src/kernel/source/nrk_stack_check.c **** *  You should have received a copy of the GNU General Public License
  20:../../src/kernel/source/nrk_stack_check.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../src/kernel/source/nrk_stack_check.c **** *
  22:../../src/kernel/source/nrk_stack_check.c **** *  Contributing Authors (specific to this file):
  23:../../src/kernel/source/nrk_stack_check.c **** *  Anthony Rowe
  24:../../src/kernel/source/nrk_stack_check.c **** *  Zane Starr
  25:../../src/kernel/source/nrk_stack_check.c **** *******************************************************************************/
  26:../../src/kernel/source/nrk_stack_check.c **** 
  27:../../src/kernel/source/nrk_stack_check.c **** #include <nrk.h>
  28:../../src/kernel/source/nrk_stack_check.c **** #include <nrk_error.h>
  29:../../src/kernel/source/nrk_stack_check.c **** #include <nrk_stack_check.h>
  30:../../src/kernel/source/nrk_stack_check.c **** #include <stdio.h>
  31:../../src/kernel/source/nrk_stack_check.c **** 
  32:../../src/kernel/source/nrk_stack_check.c **** void dump_stack_info()
  33:../../src/kernel/source/nrk_stack_check.c **** {
  34:../../src/kernel/source/nrk_stack_check.c **** 	unsigned int *stk;
  35:../../src/kernel/source/nrk_stack_check.c **** 	unsigned char *stkc;
  36:../../src/kernel/source/nrk_stack_check.c **** 	uint8_t i;
  37:../../src/kernel/source/nrk_stack_check.c **** 
  38:../../src/kernel/source/nrk_stack_check.c **** 	nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
  39:../../src/kernel/source/nrk_stack_check.c **** 
  40:../../src/kernel/source/nrk_stack_check.c **** 	printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
  41:../../src/kernel/source/nrk_stack_check.c **** 	stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
  42:../../src/kernel/source/nrk_stack_check.c **** 	stkc = (unsigned char*)stk;
  43:../../src/kernel/source/nrk_stack_check.c **** 	printf( "bottom = %x ",(uint16_t)stkc );
  44:../../src/kernel/source/nrk_stack_check.c **** 	printf( "canary = %x ",*stkc );
  45:../../src/kernel/source/nrk_stack_check.c **** 	stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
  46:../../src/kernel/source/nrk_stack_check.c **** 	stkc = (unsigned char*)stk;
  47:../../src/kernel/source/nrk_stack_check.c **** 	printf( "stk = %x ",(uint16_t)stkc );
  48:../../src/kernel/source/nrk_stack_check.c **** 	printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
  49:../../src/kernel/source/nrk_stack_check.c **** 
  50:../../src/kernel/source/nrk_stack_check.c **** 	for(i=0; i<NRK_MAX_TASKS; i++ )
  51:../../src/kernel/source/nrk_stack_check.c **** 	{
  52:../../src/kernel/source/nrk_stack_check.c **** 		stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
  53:../../src/kernel/source/nrk_stack_check.c **** 		stkc = (unsigned char*)stk;
  54:../../src/kernel/source/nrk_stack_check.c **** 		printf( "%d: bottom = %x ",i,(uint16_t)stkc );
  55:../../src/kernel/source/nrk_stack_check.c **** 		printf( "canary = %x ",*stkc );
  56:../../src/kernel/source/nrk_stack_check.c **** 		stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
  57:../../src/kernel/source/nrk_stack_check.c **** 		stkc = (unsigned char*)stk;
  58:../../src/kernel/source/nrk_stack_check.c **** 		printf( "stk = %x ",(uint16_t)stkc );
  59:../../src/kernel/source/nrk_stack_check.c **** 		printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
  60:../../src/kernel/source/nrk_stack_check.c **** 
  61:../../src/kernel/source/nrk_stack_check.c **** 	}
  62:../../src/kernel/source/nrk_stack_check.c **** 
  63:../../src/kernel/source/nrk_stack_check.c **** }
  64:../../src/kernel/source/nrk_stack_check.c **** 
  65:../../src/kernel/source/nrk_stack_check.c **** 
  66:../../src/kernel/source/nrk_stack_check.c **** /*
  67:../../src/kernel/source/nrk_stack_check.c ****  * Simple Canary value stack overflow check.
  68:../../src/kernel/source/nrk_stack_check.c ****  * If the end of the stack was overwritten, then flag an error.
  69:../../src/kernel/source/nrk_stack_check.c ****  *
  70:../../src/kernel/source/nrk_stack_check.c ****  * */
  71:../../src/kernel/source/nrk_stack_check.c **** //inline void nrk_stack_check()
  72:../../src/kernel/source/nrk_stack_check.c **** void nrk_stack_check()
  73:../../src/kernel/source/nrk_stack_check.c **** {
  74:../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
  75:../../src/kernel/source/nrk_stack_check.c **** 
  76:../../src/kernel/source/nrk_stack_check.c **** unsigned int *stk ;  // 2 bytes
  77:../../src/kernel/source/nrk_stack_check.c **** unsigned char *stkc; // 1 byte
  78:../../src/kernel/source/nrk_stack_check.c ****     
  79:../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */ 
  80:../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  81:../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL) {
  82:../../src/kernel/source/nrk_stack_check.c **** 	    	#ifdef NRK_REPORT_ERRORS
  83:../../src/kernel/source/nrk_stack_check.c **** 	    	 dump_stack_info();
  84:../../src/kernel/source/nrk_stack_check.c **** 		#endif
  85:../../src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_STACK_OVERFLOW ); 
  86:../../src/kernel/source/nrk_stack_check.c **** 		 *stkc=STK_CANARY_VAL; 
  87:../../src/kernel/source/nrk_stack_check.c ****     		  } 
  88:../../src/kernel/source/nrk_stack_check.c ****  
  89:../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */ 
  90:../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
  91:../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND ) {
  92:../../src/kernel/source/nrk_stack_check.c **** 	    	#ifdef NRK_REPORT_ERRORS
  93:../../src/kernel/source/nrk_stack_check.c **** 	    	 dump_stack_info();
  94:../../src/kernel/source/nrk_stack_check.c **** 		#endif
  95:../../src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
  96:../../src/kernel/source/nrk_stack_check.c ****     		 } 
  97:../../src/kernel/source/nrk_stack_check.c **** 
  98:../../src/kernel/source/nrk_stack_check.c **** 
  99:../../src/kernel/source/nrk_stack_check.c **** 
 100:../../src/kernel/source/nrk_stack_check.c **** 
 101:../../src/kernel/source/nrk_stack_check.c **** #endif
 102:../../src/kernel/source/nrk_stack_check.c **** }
 103:../../src/kernel/source/nrk_stack_check.c **** 
 104:../../src/kernel/source/nrk_stack_check.c **** int8_t nrk_stack_check_pid(int8_t pid)
 105:../../src/kernel/source/nrk_stack_check.c **** {
 138               	.LM0:
 139               	.LFBB1:
 140               	/* prologue: frame size=0 */
 141               	/* prologue end (size=0) */
 106:../../src/kernel/source/nrk_stack_check.c **** #ifdef NRK_STACK_CHECK
 107:../../src/kernel/source/nrk_stack_check.c **** 
 108:../../src/kernel/source/nrk_stack_check.c **** unsigned int *stk ;  // 2 bytes
 109:../../src/kernel/source/nrk_stack_check.c **** unsigned char *stkc; // 1 byte
 110:../../src/kernel/source/nrk_stack_check.c ****     
 111:../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */ 
 143               	.LM1:
 144 0000 9927      		clr r25
 145 0002 87FD      		sbrc r24,7
 146 0004 9095      		com r25
 147 0006 FC01      		movw r30,r24
 148 0008 25E0      		ldi r18,5
 149 000a EE0F      	1:	lsl r30
 150 000c FF1F      		rol r31
 151 000e 2A95      		dec r18
 152 0010 01F4      		brne 1b
 153 0012 E80F      		add r30,r24
 154 0014 F91F      		adc r31,r25
 155 0016 E050      		subi r30,lo8(-(nrk_task_TCB))
 156 0018 F040      		sbci r31,hi8(-(nrk_task_TCB))
 157 001a A281      		ldd r26,Z+2
 158 001c B381      		ldd r27,Z+3
 112:../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 113:../../src/kernel/source/nrk_stack_check.c ****     if(*stkc != STK_CANARY_VAL) {
 160               	.LM2:
 161 001e 8C91      		ld r24,X
 162 0020 8535      		cpi r24,lo8(85)
 163 0022 01F0      		breq .L2
 114:../../src/kernel/source/nrk_stack_check.c **** 		 *stkc=STK_CANARY_VAL; 
 165               	.LM3:
 166 0024 85E5      		ldi r24,lo8(85)
 167 0026 8C93      		st X,r24
 168 0028 8FEF      		ldi r24,lo8(-1)
 169 002a 9FEF      		ldi r25,hi8(-1)
 170 002c 0895      		ret
 171               	.L2:
 115:../../src/kernel/source/nrk_stack_check.c **** 		 return NRK_ERROR;
 116:../../src/kernel/source/nrk_stack_check.c ****     		  }  
 117:../../src/kernel/source/nrk_stack_check.c ****     stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */ 
 118:../../src/kernel/source/nrk_stack_check.c ****     stkc = (unsigned char*)stk;
 119:../../src/kernel/source/nrk_stack_check.c ****     if(stkc > (unsigned char *)RAMEND ) {
 173               	.LM4:
 174 002e 8081      		ld r24,Z
 175 0030 9181      		ldd r25,Z+1
 176 0032 8050      		subi r24,lo8(8704)
 177 0034 9242      		sbci r25,hi8(8704)
 178 0036 00F4      		brsh .L5
 179 0038 81E0      		ldi r24,lo8(1)
 180 003a 90E0      		ldi r25,hi8(1)
 181 003c 0895      		ret
 182               	.L5:
 120:../../src/kernel/source/nrk_stack_check.c **** 	   	 nrk_error_add( NRK_INVALID_STACK_POINTER); 
 184               	.LM5:
 185 003e 82E1      		ldi r24,lo8(18)
 186 0040 0E94 0000 		call nrk_error_add
 187 0044 8FEF      		ldi r24,lo8(-1)
 188 0046 9FEF      		ldi r25,hi8(-1)
 121:../../src/kernel/source/nrk_stack_check.c **** 		 return NRK_ERROR;
 122:../../src/kernel/source/nrk_stack_check.c ****     		}
 123:../../src/kernel/source/nrk_stack_check.c **** #endif
 124:../../src/kernel/source/nrk_stack_check.c **** return NRK_OK;
 125:../../src/kernel/source/nrk_stack_check.c **** }
 190               	.LM6:
 191 0048 0895      		ret
 192               	/* epilogue: frame size=0 */
 193               	/* epilogue: noreturn */
 194               	/* epilogue end (size=0) */
 195               	/* function nrk_stack_check_pid size 38 (38) */
 197               	.Lscope1:
 199               		.stabd	78,0,0
 200               		.data
 201               	.LC0:
 202 0000 6375 723A 		.string	"cur: %d "
 202      2025 6420 
 202      00
 203               	.LC1:
 204 0009 626F 7474 		.string	"bottom = %x "
 204      6F6D 203D 
 204      2025 7820 
 204      00
 205               	.LC2:
 206 0016 6361 6E61 		.string	"canary = %x "
 206      7279 203D 
 206      2025 7820 
 206      00
 207               	.LC3:
 208 0023 7374 6B20 		.string	"stk = %x "
 208      3D20 2578 
 208      2000 
 209               	.LC4:
 210 002d 7463 6220 		.string	"tcb addr = %x\r\n"
 210      6164 6472 
 210      203D 2025 
 210      780D 0A00 
 211               	.LC5:
 212 003d 2564 3A20 		.string	"%d: bottom = %x "
 212      626F 7474 
 212      6F6D 203D 
 212      2025 7820 
 212      00
 213               		.text
 215               	.global	dump_stack_info
 217               	dump_stack_info:
 218               		.stabd	46,0,0
 220               	.LM7:
 221               	.LFBB2:
 222               	/* prologue: frame size=0 */
 223 004a 6F92      		push r6
 224 004c 7F92      		push r7
 225 004e 8F92      		push r8
 226 0050 9F92      		push r9
 227 0052 AF92      		push r10
 228 0054 BF92      		push r11
 229 0056 CF92      		push r12
 230 0058 DF92      		push r13
 231 005a EF92      		push r14
 232 005c FF92      		push r15
 233 005e 0F93      		push r16
 234 0060 1F93      		push r17
 235 0062 CF93      		push r28
 236 0064 DF93      		push r29
 237               	/* prologue end (size=14) */
 239               	.LM8:
 240 0066 80E0      		ldi r24,lo8(__c.2270)
 241 0068 90E0      		ldi r25,hi8(__c.2270)
 242 006a 0E94 0000 		call nrk_kprintf
 244               	.LM9:
 245 006e E091 0000 		lds r30,nrk_cur_task_TCB
 246 0072 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 247 0076 8085      		ldd r24,Z+8
 248 0078 9927      		clr r25
 249 007a 87FD      		sbrc r24,7
 250 007c 9095      		com r25
 251 007e 9F93      		push r25
 252 0080 8F93      		push r24
 253 0082 80E0      		ldi r24,lo8(.LC0)
 254 0084 90E0      		ldi r25,hi8(.LC0)
 255 0086 9F93      		push r25
 256 0088 8F93      		push r24
 257 008a 0E94 0000 		call printf
 259               	.LM10:
 260 008e E091 0000 		lds r30,nrk_cur_task_TCB
 261 0092 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 262 0096 0281      		ldd r16,Z+2
 263 0098 1381      		ldd r17,Z+3
 265               	.LM11:
 266 009a 1F93      		push r17
 267 009c 0F93      		push r16
 268 009e 80E0      		ldi r24,lo8(.LC1)
 269 00a0 90E0      		ldi r25,hi8(.LC1)
 270 00a2 9F93      		push r25
 271 00a4 8F93      		push r24
 272 00a6 0E94 0000 		call printf
 274               	.LM12:
 275 00aa F801      		movw r30,r16
 276 00ac 8081      		ld r24,Z
 277 00ae 9927      		clr r25
 278 00b0 9F93      		push r25
 279 00b2 8F93      		push r24
 280 00b4 50E0      		ldi r21,lo8(.LC2)
 281 00b6 C52E      		mov r12,r21
 282 00b8 50E0      		ldi r21,hi8(.LC2)
 283 00ba D52E      		mov r13,r21
 284 00bc DF92      		push r13
 285 00be CF92      		push r12
 286 00c0 0E94 0000 		call printf
 288               	.LM13:
 289 00c4 E091 0000 		lds r30,nrk_cur_task_TCB
 290 00c8 F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 291 00cc 8081      		ld r24,Z
 292 00ce 9181      		ldd r25,Z+1
 293 00d0 9F93      		push r25
 294 00d2 8F93      		push r24
 295 00d4 40E0      		ldi r20,lo8(.LC3)
 296 00d6 E42E      		mov r14,r20
 297 00d8 40E0      		ldi r20,hi8(.LC3)
 298 00da F42E      		mov r15,r20
 299 00dc FF92      		push r15
 300 00de EF92      		push r14
 301 00e0 0E94 0000 		call printf
 303               	.LM14:
 304 00e4 8091 0000 		lds r24,nrk_cur_task_TCB
 305 00e8 9091 0000 		lds r25,(nrk_cur_task_TCB)+1
 306 00ec 9F93      		push r25
 307 00ee 8F93      		push r24
 308 00f0 00E0      		ldi r16,lo8(.LC4)
 309 00f2 10E0      		ldi r17,hi8(.LC4)
 310 00f4 1F93      		push r17
 311 00f6 0F93      		push r16
 312 00f8 0E94 0000 		call printf
 313 00fc C0E0      		ldi r28,lo8(nrk_task_TCB)
 314 00fe D0E0      		ldi r29,hi8(nrk_task_TCB)
 315 0100 AA24      		clr r10
 316 0102 BB24      		clr r11
 317 0104 8DB7      		in r24,__SP_L__
 318 0106 9EB7      		in r25,__SP_H__
 319 0108 4496      		adiw r24,20
 320 010a 0FB6      		in __tmp_reg__,__SREG__
 321 010c F894      		cli
 322 010e 9EBF      		out __SP_H__,r25
 323 0110 0FBE      		out __SREG__,__tmp_reg__
 324 0112 8DBF      		out __SP_L__,r24
 326               	.LM15:
 327 0114 30E0      		ldi r19,lo8(.LC5)
 328 0116 632E      		mov r6,r19
 329 0118 30E0      		ldi r19,hi8(.LC5)
 330 011a 732E      		mov r7,r19
 332               	.LM16:
 333 011c 4601      		movw r8,r12
 335               	.LM17:
 336 011e 6701      		movw r12,r14
 338               	.LM18:
 339 0120 7801      		movw r14,r16
 340               	.L9:
 342               	.LM19:
 343 0122 0A81      		ldd r16,Y+2
 344 0124 1B81      		ldd r17,Y+3
 346               	.LM20:
 347 0126 1F93      		push r17
 348 0128 0F93      		push r16
 349 012a BF92      		push r11
 350 012c AF92      		push r10
 351 012e 7F92      		push r7
 352 0130 6F92      		push r6
 353 0132 0E94 0000 		call printf
 355               	.LM21:
 356 0136 F801      		movw r30,r16
 357 0138 8081      		ld r24,Z
 358 013a 9927      		clr r25
 359 013c 9F93      		push r25
 360 013e 8F93      		push r24
 361 0140 9F92      		push r9
 362 0142 8F92      		push r8
 363 0144 0E94 0000 		call printf
 365               	.LM22:
 366 0148 8881      		ld r24,Y
 367 014a 9981      		ldd r25,Y+1
 368 014c 9F93      		push r25
 369 014e 8F93      		push r24
 370 0150 DF92      		push r13
 371 0152 CF92      		push r12
 372 0154 0E94 0000 		call printf
 374               	.LM23:
 375 0158 DF93      		push r29
 376 015a CF93      		push r28
 377 015c FF92      		push r15
 378 015e EF92      		push r14
 379 0160 0E94 0000 		call printf
 380 0164 0894      		sec
 381 0166 A11C      		adc r10,__zero_reg__
 382 0168 B11C      		adc r11,__zero_reg__
 383 016a A196      		adiw r28,33
 385               	.LM24:
 386 016c 8DB7      		in r24,__SP_L__
 387 016e 9EB7      		in r25,__SP_H__
 388 0170 4296      		adiw r24,18
 389 0172 0FB6      		in __tmp_reg__,__SREG__
 390 0174 F894      		cli
 391 0176 9EBF      		out __SP_H__,r25
 392 0178 0FBE      		out __SREG__,__tmp_reg__
 393 017a 8DBF      		out __SP_L__,r24
 394 017c 95E0      		ldi r25,lo8(5)
 395 017e A916      		cp r10,r25
 396 0180 B104      		cpc r11,__zero_reg__
 397 0182 01F4      		brne .L9
 398               	/* epilogue: frame size=0 */
 399 0184 DF91      		pop r29
 400 0186 CF91      		pop r28
 401 0188 1F91      		pop r17
 402 018a 0F91      		pop r16
 403 018c FF90      		pop r15
 404 018e EF90      		pop r14
 405 0190 DF90      		pop r13
 406 0192 CF90      		pop r12
 407 0194 BF90      		pop r11
 408 0196 AF90      		pop r10
 409 0198 9F90      		pop r9
 410 019a 8F90      		pop r8
 411 019c 7F90      		pop r7
 412 019e 6F90      		pop r6
 413 01a0 0895      		ret
 414               	/* epilogue end (size=15) */
 415               	/* function dump_stack_info size 172 (143) */
 417               	.Lscope2:
 419               		.stabd	78,0,0
 421               	.global	nrk_stack_check
 423               	nrk_stack_check:
 424               		.stabd	46,0,0
 426               	.LM25:
 427               	.LFBB3:
 428               	/* prologue: frame size=0 */
 429 01a2 CF93      		push r28
 430 01a4 DF93      		push r29
 431               	/* prologue end (size=2) */
 433               	.LM26:
 434 01a6 E091 0000 		lds r30,nrk_cur_task_TCB
 435 01aa F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 436 01ae C281      		ldd r28,Z+2
 437 01b0 D381      		ldd r29,Z+3
 439               	.LM27:
 440 01b2 8881      		ld r24,Y
 441 01b4 8535      		cpi r24,lo8(85)
 442 01b6 01F0      		breq .L15
 444               	.LM28:
 445 01b8 0E94 0000 		call dump_stack_info
 447               	.LM29:
 448 01bc 81E0      		ldi r24,lo8(1)
 449 01be 0E94 0000 		call nrk_error_add
 451               	.LM30:
 452 01c2 85E5      		ldi r24,lo8(85)
 453 01c4 8883      		st Y,r24
 454               	.L15:
 456               	.LM31:
 457 01c6 E091 0000 		lds r30,nrk_cur_task_TCB
 458 01ca F091 0000 		lds r31,(nrk_cur_task_TCB)+1
 459 01ce 8081      		ld r24,Z
 460 01d0 9181      		ldd r25,Z+1
 461 01d2 8050      		subi r24,lo8(8704)
 462 01d4 9242      		sbci r25,hi8(8704)
 463 01d6 00F0      		brlo .L19
 465               	.LM32:
 466 01d8 0E94 0000 		call dump_stack_info
 468               	.LM33:
 469 01dc 82E1      		ldi r24,lo8(18)
 470 01de 0E94 0000 		call nrk_error_add
 471               	.L19:
 472               	/* epilogue: frame size=0 */
 473 01e2 DF91      		pop r29
 474 01e4 CF91      		pop r28
 475 01e6 0895      		ret
 476               	/* epilogue end (size=3) */
 477               	/* function nrk_stack_check size 36 (31) */
 479               	.Lscope3:
 481               		.stabd	78,0,0
 482               		.section	.progmem.data,"a",@progbits
 485               	__c.2270:
 486 0000 0D0A 5354 		.string	"\r\nSTACK DUMP\r\n"
 486      4143 4B20 
 486      4455 4D50 
 486      0D0A 00
 487               		.comm _nrk_signal_list,4,1
 488               		.comm nrk_idle_task_stk,128,1
 489               		.comm nrk_kernel_stk_ptr,2,1
 490               		.comm error_task,1,1
 491               		.comm error_num,1,1
 498               		.text
 500               	.Letext0:
 501               	/* File "../../src/kernel/source/nrk_stack_check.c": code  246 = 0x00f6 ( 212), prologues  16, epil
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nrk_stack_check.c
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:2      *ABS*:000000000000003f __SREG__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:3      *ABS*:000000000000003e __SP_H__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:4      *ABS*:000000000000003d __SP_L__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:135    .text:0000000000000000 nrk_stack_check_pid
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:217    .text:000000000000004a dump_stack_info
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:485    .progmem.data:0000000000000000 __c.2270
/var/folders/Qq/QqLTHlelFveneFuzSoIahU+++TI/-Tmp-//ccWlcygG.s:423    .text:00000000000001a2 nrk_stack_check
                            *COM*:0000000000000004 _nrk_signal_list
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
nrk_task_TCB
nrk_error_add
nrk_kprintf
nrk_cur_task_TCB
printf

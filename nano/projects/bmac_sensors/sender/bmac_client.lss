
bmac_client.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a8  00800200  00007dca  00007e3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007dca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f4  008003a8  00007f72  00007fe6  2**0
                  ALLOC
  3 .stab         00011598  00000000  00000000  00007fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009366  00000000  00000000  00019580  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__ctors_end>
       4:	0c 94 68 32 	jmp	0x64d0	; 0x64d0 <__vector_1>
       8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
       c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      10:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      14:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      18:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      1c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      20:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_8>
      24:	0c 94 96 32 	jmp	0x652c	; 0x652c <__vector_9>
      28:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      2c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      30:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      34:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__vector_13>
      38:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      3c:	0c 94 1f 30 	jmp	0x603e	; 0x603e <__vector_13>
      40:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      44:	0c 94 52 30 	jmp	0x60a4	; 0x60a4 <__vector_17>
      48:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      4c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      50:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      54:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      58:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      5c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      60:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      64:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      68:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      6c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      70:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      74:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      78:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      7c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      80:	0c 94 5c 30 	jmp	0x60b8	; 0x60b8 <__vector_32>
      84:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      88:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      8c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      90:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__vector_36>
      94:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      98:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      9c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      a0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      a4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      a8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      ac:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      b0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      b4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      b8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      bc:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      c0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      c4:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      c8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__bad_interrupt>
      cc:	45 20       	and	r4, r5
      ce:	4b 20       	and	r4, r11
      d0:	4e 20       	and	r4, r14
      d2:	51 20       	and	r5, r1
      d4:	54 20       	and	r5, r4
      d6:	57 20       	and	r5, r7
      d8:	5d 20       	and	r5, r13
      da:	5a 20       	and	r5, r10
      dc:	60 20       	and	r6, r0
      de:	63 20       	and	r6, r3
      e0:	66 20       	and	r6, r6
      e2:	6f 20       	and	r6, r15
      e4:	72 20       	and	r7, r2
      e6:	75 20       	and	r7, r5
      e8:	78 20       	and	r7, r8
      ea:	6c 20       	and	r6, r12
      ec:	42 20       	and	r4, r2
      ee:	48 20       	and	r4, r8
      f0:	7b 20       	and	r7, r11
      f2:	7e 20       	and	r7, r14
      f4:	69 20       	and	r6, r9

000000f6 <__c.2447>:
      f6:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     106:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

00000115 <__c.2408>:
     115:	54 78 20 74 61 73 6b 20 73 65 6e 74 20 64 61 74     Tx task sent dat
     125:	61 21 0d 0a 00                                      a!...

0000012a <__c.2406>:
     12a:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     13a:	72 72 6f 72 0d 0a 00                                rror...

00000141 <__c.2404>:
     141:	54 78 20 70 61 63 6b 65 74 20 65 6e 71 75 65 75     Tx packet enqueu
     151:	65 64 0d 0a 00                                      ed...

00000156 <__c.2781>:
     156:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     166:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000172 <__c.2737>:
     172:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     182:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     192:	0d 0a 00                                            ...

00000195 <__c.2735>:
     195:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     1a5:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     1b5:	74 0d 0a 00                                         t...

000001b9 <__c.2643>:
     1b9:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1c9:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     1d9:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000001e5 <__c.2641>:
     1e5:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1f5:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     205:	61 69 6c 65 64 0d 0a 00                             ailed...

0000020d <__c.2639>:
     20d:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     21d:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     22d:	61 69 6c 65 64 0d 0a 00                             ailed...

00000235 <__c.2798>:
     235:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     245:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     255:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000262 <__c.2736>:
     262:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     272:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     282:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

0000028e <__c.2420>:
     28e:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000295 <__c.2417>:
     295:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000002a4 <__c.2414>:
     2a4:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002b5 <__c.2411>:
     2b5:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2c5:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002d0 <__c.2408>:
     2d0:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2e0:	20 53 69 67 6e 61 6c 00                              Signal.

000002e8 <__c.2405>:
     2e8:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2f8:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000308 <__c.2402>:
     308:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     318:	72 6f 72 00                                         ror.

0000031c <__c.2399>:
     31c:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000032d <__c.2396>:
     32d:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     33d:	61 72 74 00                                         art.

00000341 <__c.2393>:
     341:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000350 <__c.2390>:
     350:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     360:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000036b <__c.2387>:
     36b:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000377 <__c.2384>:
     377:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     387:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     397:	20 6f 6b 3f 00                                       ok?.

0000039c <__c.2381>:
     39c:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3ac:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003ba <__c.2378>:
     3ba:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3ca:	72 74 00                                            rt.

000003cd <__c.2375>:
     3cd:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3dd:	49 44 00                                            ID.

000003e0 <__c.2372>:
     3e0:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3f0:	20 57 61 6b 65 75 70 00                              Wakeup.

000003f8 <__c.2369>:
     3f8:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     408:	6c 61 74 65 64 00                                   lated.

0000040e <__c.2366>:
     40e:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     41e:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000429 <__c.2363>:
     429:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     439:	69 6e 74 65 72 00                                   inter.

0000043f <__c.2360>:
     43f:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     44f:	6c 6f 77 00                                         low.

00000453 <__c.2356>:
     453:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     463:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     473:	6e 6f 75 67 68 21 00                                nough!.

0000047a <__c.2353>:
     47a:	29 3a 20 00                                         ): .

0000047e <__c.2351>:
     47e:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000048a <__c.2270>:
     48a:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000499 <__c.2062>:
     499:	45 46 47 65 66 67 00                                EFGefg.

000004a0 <__c.2056>:
     4a0:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000004b0 <__ctors_end>:
     4b0:	11 24       	eor	r1, r1
     4b2:	1f be       	out	0x3f, r1	; 63
     4b4:	cf ef       	ldi	r28, 0xFF	; 255
     4b6:	d1 e2       	ldi	r29, 0x21	; 33
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	cd bf       	out	0x3d, r28	; 61

000004bc <__do_copy_data>:
     4bc:	13 e0       	ldi	r17, 0x03	; 3
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b2 e0       	ldi	r27, 0x02	; 2
     4c2:	ea ec       	ldi	r30, 0xCA	; 202
     4c4:	fd e7       	ldi	r31, 0x7D	; 125
     4c6:	00 e0       	ldi	r16, 0x00	; 0
     4c8:	0b bf       	out	0x3b, r16	; 59
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__do_copy_data+0x14>
     4cc:	07 90       	elpm	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	a8 3a       	cpi	r26, 0xA8	; 168
     4d2:	b1 07       	cpc	r27, r17
     4d4:	d9 f7       	brne	.-10     	; 0x4cc <__do_copy_data+0x10>

000004d6 <__do_clear_bss>:
     4d6:	17 e0       	ldi	r17, 0x07	; 7
     4d8:	a8 ea       	ldi	r26, 0xA8	; 168
     4da:	b3 e0       	ldi	r27, 0x03	; 3
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <.do_clear_bss_start>

000004de <.do_clear_bss_loop>:
     4de:	1d 92       	st	X+, r1

000004e0 <.do_clear_bss_start>:
     4e0:	ac 39       	cpi	r26, 0x9C	; 156
     4e2:	b1 07       	cpc	r27, r17
     4e4:	e1 f7       	brne	.-8      	; 0x4de <.do_clear_bss_loop>
     4e6:	0e 94 c5 03 	call	0x78a	; 0x78a <main>
     4ea:	0c 94 e4 3e 	jmp	0x7dc8	; 0x7dc8 <_exit>

000004ee <__bad_interrupt>:
     4ee:	0c 94 8a 30 	jmp	0x6114	; 0x6114 <__vector_default>

000004f2 <nrk_register_drivers>:
   //     #define NRK_MAX_DRIVER_CNT  
   //     in nrk_cfg.h
   // Make sure to add:
   //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
   //     in makefile
   val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	86 ef       	ldi	r24, 0xF6	; 246
     4f6:	98 e0       	ldi	r25, 0x08	; 8
     4f8:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <nrk_register_driver>
   if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     4fc:	8f 3f       	cpi	r24, 0xFF	; 255
     4fe:	21 f4       	brne	.+8      	; 0x508 <nrk_register_drivers+0x16>
     500:	86 ef       	ldi	r24, 0xF6	; 246
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
     508:	08 95       	ret

0000050a <nrk_create_taskset>:

}

void nrk_create_taskset ()
{
   TX_TASK.task = tx_task;
     50a:	82 ee       	ldi	r24, 0xE2	; 226
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	90 93 fe 05 	sts	0x05FE, r25
     512:	80 93 fd 05 	sts	0x05FD, r24
   TX_TASK.Ptos = (void *) &tx_task_stack[NRK_APP_STACKSIZE - 1];
     516:	83 e7       	ldi	r24, 0x73	; 115
     518:	95 e0       	ldi	r25, 0x05	; 5
     51a:	90 93 fa 05 	sts	0x05FA, r25
     51e:	80 93 f9 05 	sts	0x05F9, r24
   TX_TASK.Pbos = (void *) &tx_task_stack[0];
     522:	84 e7       	ldi	r24, 0x74	; 116
     524:	94 e0       	ldi	r25, 0x04	; 4
     526:	90 93 fc 05 	sts	0x05FC, r25
     52a:	80 93 fb 05 	sts	0x05FB, r24
   TX_TASK.prio = 2;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 00 06 	sts	0x0600, r24
   TX_TASK.FirstActivation = TRUE;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 ff 05 	sts	0x05FF, r24
   TX_TASK.Type = BASIC_TASK;
     53a:	80 93 01 06 	sts	0x0601, r24
   TX_TASK.SchType = PREEMPTIVE;
     53e:	80 93 02 06 	sts	0x0602, r24
   TX_TASK.period.secs = 0;
     542:	10 92 03 06 	sts	0x0603, r1
     546:	10 92 04 06 	sts	0x0604, r1
     54a:	10 92 05 06 	sts	0x0605, r1
     54e:	10 92 06 06 	sts	0x0606, r1
   TX_TASK.period.nano_secs = 250* NANOS_PER_MS;
     552:	80 e8       	ldi	r24, 0x80	; 128
     554:	92 eb       	ldi	r25, 0xB2	; 178
     556:	a6 ee       	ldi	r26, 0xE6	; 230
     558:	be e0       	ldi	r27, 0x0E	; 14
     55a:	80 93 07 06 	sts	0x0607, r24
     55e:	90 93 08 06 	sts	0x0608, r25
     562:	a0 93 09 06 	sts	0x0609, r26
     566:	b0 93 0a 06 	sts	0x060A, r27
   TX_TASK.cpu_reserve.secs = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	80 93 0b 06 	sts	0x060B, r24
     576:	90 93 0c 06 	sts	0x060C, r25
     57a:	a0 93 0d 06 	sts	0x060D, r26
     57e:	b0 93 0e 06 	sts	0x060E, r27
   TX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	95 e6       	ldi	r25, 0x65	; 101
     586:	ad ec       	ldi	r26, 0xCD	; 205
     588:	bd e1       	ldi	r27, 0x1D	; 29
     58a:	80 93 0f 06 	sts	0x060F, r24
     58e:	90 93 10 06 	sts	0x0610, r25
     592:	a0 93 11 06 	sts	0x0611, r26
     596:	b0 93 12 06 	sts	0x0612, r27
   TX_TASK.offset.secs = 0;
     59a:	10 92 13 06 	sts	0x0613, r1
     59e:	10 92 14 06 	sts	0x0614, r1
     5a2:	10 92 15 06 	sts	0x0615, r1
     5a6:	10 92 16 06 	sts	0x0616, r1
   TX_TASK.offset.nano_secs = 0;
     5aa:	10 92 17 06 	sts	0x0617, r1
     5ae:	10 92 18 06 	sts	0x0618, r1
     5b2:	10 92 19 06 	sts	0x0619, r1
     5b6:	10 92 1a 06 	sts	0x061A, r1
   nrk_activate_task (&TX_TASK);
     5ba:	88 ef       	ldi	r24, 0xF8	; 248
     5bc:	95 e0       	ldi	r25, 0x05	; 5
     5be:	0e 94 0d 28 	call	0x501a	; 0x501a <nrk_activate_task>
     5c2:	08 95       	ret

000005c4 <tx_task>:

   return 0;
}

void tx_task ()
{
     5c4:	2f 92       	push	r2
     5c6:	3f 92       	push	r3
     5c8:	4f 92       	push	r4
     5ca:	5f 92       	push	r5
     5cc:	6f 92       	push	r6
     5ce:	7f 92       	push	r7
     5d0:	8f 92       	push	r8
     5d2:	9f 92       	push	r9
     5d4:	af 92       	push	r10
     5d6:	bf 92       	push	r11
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	28 97       	sbiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
   nrk_sig_t tx_done_signal;
   uint16_t adxl_x, adxl_y, adxl_z, mic, light, temp, bat;
   nrk_sig_mask_t ret;

   // init bmac on channel 25
   bmac_init (25);
     5f8:	89 e1       	ldi	r24, 0x19	; 25
     5fa:	0e 94 a4 06 	call	0xd48	; 0xd48 <bmac_init>
   // bmac_set_cca_thresh(-45);


   if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));    

   printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     5fe:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <nrk_get_pid>
     602:	99 27       	eor	r25, r25
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	92 e0       	ldi	r25, 0x02	; 2
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>

   // Wait until the tx_task starts up bmac
   // This should be called by all tasks using bmac that
   // do not call bmac_init()...
   while (!bmac_started ())
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <tx_task+0x5e>
       nrk_wait_until_next_period ();
     61e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <nrk_wait_until_next_period>
   printf ("tx_task PID=%d\r\n", nrk_get_pid ());

   // Wait until the tx_task starts up bmac
   // This should be called by all tasks using bmac that
   // do not call bmac_init()...
   while (!bmac_started ())
     622:	0e 94 81 04 	call	0x902	; 0x902 <bmac_started>
     626:	88 23       	and	r24, r24
     628:	d1 f3       	breq	.-12     	; 0x61e <tx_task+0x5a>
       nrk_wait_until_next_period ();

   // Get and register the tx_done_signal if you want to
   // do non-blocking transmits
   tx_done_signal = bmac_get_tx_done_signal ();
     62a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <bmac_get_tx_done_signal>
     62e:	18 2f       	mov	r17, r24
   nrk_signal_register (tx_done_signal);
     630:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>

   // Open ADC device as read
   fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
     634:	65 e0       	ldi	r22, 0x05	; 5
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <nrk_open>
     63c:	08 2f       	mov	r16, r24
       
       val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
       val=nrk_read(fd,&adxl_z,4);
       
       // Build a sensor packet
       sprintf (tx_buf,
     63e:	34 e8       	ldi	r19, 0x84	; 132
     640:	a3 2e       	mov	r10, r19
     642:	35 e0       	ldi	r19, 0x05	; 5
     644:	b3 2e       	mov	r11, r19
       // This function shows how to transmit packets in a
       // non-blocking manner  
       val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
       nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
       // This functions waits on the tx_done_signal
       ret = nrk_event_wait (SIG(tx_done_signal));
     646:	21 e0       	ldi	r18, 0x01	; 1
     648:	62 2e       	mov	r6, r18
     64a:	71 2c       	mov	r7, r1
     64c:	81 2c       	mov	r8, r1
     64e:	91 2c       	mov	r9, r1
     650:	74 01       	movw	r14, r8
     652:	63 01       	movw	r12, r6
     654:	04 c0       	rjmp	.+8      	; 0x65e <tx_task+0x9a>
     656:	cc 0c       	add	r12, r12
     658:	dd 1c       	adc	r13, r13
     65a:	ee 1c       	adc	r14, r14
     65c:	ff 1c       	adc	r15, r15
     65e:	1a 95       	dec	r17
     660:	d2 f7       	brpl	.-12     	; 0x656 <tx_task+0x92>
     662:	9a e2       	ldi	r25, 0x2A	; 42
     664:	29 2e       	mov	r2, r25
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	39 2e       	mov	r3, r25
     66a:	85 e1       	ldi	r24, 0x15	; 21
     66c:	48 2e       	mov	r4, r24
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	58 2e       	mov	r5, r24
   if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));

   cnt = 0;
   while (1) {

       val=nrk_set_status(fd,SENSOR_SELECT,BAT);
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	80 2f       	mov	r24, r16
     678:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <nrk_set_status>
       val=nrk_read(fd,&bat,2);
     67c:	42 e0       	ldi	r20, 0x02	; 2
     67e:	be 01       	movw	r22, r28
     680:	69 5f       	subi	r22, 0xF9	; 249
     682:	7f 4f       	sbci	r23, 0xFF	; 255
     684:	80 2f       	mov	r24, r16
     686:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <nrk_read>

       // TODO: Please enter code to input ADC values from all the sensors
       //Please modify the rest of the code in order to send all the sensor values to the server node
       //adxl_x, adxl_y, adxl_z, mic, light, temp, bat;
       
       val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
     68a:	42 e0       	ldi	r20, 0x02	; 2
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	80 2f       	mov	r24, r16
     690:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <nrk_set_status>
       val=nrk_read(fd,&adxl_x,4);
     694:	44 e0       	ldi	r20, 0x04	; 4
     696:	be 01       	movw	r22, r28
     698:	6f 5f       	subi	r22, 0xFF	; 255
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	80 2f       	mov	r24, r16
     69e:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <nrk_read>
       
       val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     6a2:	45 e0       	ldi	r20, 0x05	; 5
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	80 2f       	mov	r24, r16
     6a8:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <nrk_set_status>
       val=nrk_read(fd,&adxl_y,4);
     6ac:	44 e0       	ldi	r20, 0x04	; 4
     6ae:	be 01       	movw	r22, r28
     6b0:	6d 5f       	subi	r22, 0xFD	; 253
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	80 2f       	mov	r24, r16
     6b6:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <nrk_read>
       
       val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
     6ba:	46 e0       	ldi	r20, 0x06	; 6
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	80 2f       	mov	r24, r16
     6c0:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <nrk_set_status>
       val=nrk_read(fd,&adxl_z,4);
     6c4:	44 e0       	ldi	r20, 0x04	; 4
     6c6:	be 01       	movw	r22, r28
     6c8:	6b 5f       	subi	r22, 0xFB	; 251
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	80 2f       	mov	r24, r16
     6ce:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <nrk_read>
       
       // Build a sensor packet
       sprintf (tx_buf,
     6d2:	8d 81       	ldd	r24, Y+5	; 0x05
     6d4:	9e 81       	ldd	r25, Y+6	; 0x06
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	81 e1       	ldi	r24, 0x11	; 17
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	bf 92       	push	r11
     6f4:	af 92       	push	r10
     6f6:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <sprintf>
           "x=%d,y=%d,z=%d\n",
           adxl_x, adxl_y, adxl_z);
       printf( "tx_buf=%s",tx_buf );
     6fa:	bf 92       	push	r11
     6fc:	af 92       	push	r10
     6fe:	e1 e2       	ldi	r30, 0x21	; 33
     700:	f2 e0       	ldi	r31, 0x02	; 2
     702:	ff 93       	push	r31
     704:	ef 93       	push	r30
     706:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>

       cnt++;
       nrk_led_set (BLUE_LED);
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
       // For this there is no need to register  
       // val=bmac_tx_packet(tx_buf, strlen(tx_buf));

       // This function shows how to transmit packets in a
       // non-blocking manner  
       val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
     712:	f5 01       	movw	r30, r10
     714:	01 90       	ld	r0, Z+
     716:	00 20       	and	r0, r0
     718:	e9 f7       	brne	.-6      	; 0x714 <tx_task+0x150>
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	e4 58       	subi	r30, 0x84	; 132
     71e:	f5 40       	sbci	r31, 0x05	; 5
     720:	6e 2f       	mov	r22, r30
     722:	c5 01       	movw	r24, r10
     724:	0e 94 19 04 	call	0x832	; 0x832 <bmac_tx_pkt_nonblocking>
       nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
     728:	81 e4       	ldi	r24, 0x41	; 65
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
       // This functions waits on the tx_done_signal
       ret = nrk_event_wait (SIG(tx_done_signal));
     730:	c7 01       	movw	r24, r14
     732:	b6 01       	movw	r22, r12
     734:	0e 94 f5 24 	call	0x49ea	; 0x49ea <nrk_event_wait>

       // Just check to be sure signal is okay
       if(ret & SIG(tx_done_signal) == 0 )
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	ed b7       	in	r30, 0x3d	; 61
     742:	fe b7       	in	r31, 0x3e	; 62
     744:	3e 96       	adiw	r30, 0x0e	; 14
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	fe bf       	out	0x3e, r31	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	ed bf       	out	0x3d, r30	; 61
     750:	c1 14       	cp	r12, r1
     752:	d1 04       	cpc	r13, r1
     754:	e1 04       	cpc	r14, r1
     756:	f1 04       	cpc	r15, r1
     758:	11 f4       	brne	.+4      	; 0x75e <tx_task+0x19a>
     75a:	a4 01       	movw	r20, r8
     75c:	93 01       	movw	r18, r6
     75e:	26 23       	and	r18, r22
     760:	37 23       	and	r19, r23
     762:	48 23       	and	r20, r24
     764:	59 23       	and	r21, r25
     766:	21 15       	cp	r18, r1
     768:	31 05       	cpc	r19, r1
     76a:	41 05       	cpc	r20, r1
     76c:	51 05       	cpc	r21, r1
     76e:	19 f0       	breq	.+6      	; 0x776 <tx_task+0x1b2>
           nrk_kprintf (PSTR ("TX done signal error\r\n"));
     770:	c1 01       	movw	r24, r2
     772:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>

       // Task gets control again after TX complete
       nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
     776:	c2 01       	movw	r24, r4
     778:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
       nrk_led_clr (BLUE_LED);
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
       nrk_wait_until_next_period ();
     784:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <nrk_wait_until_next_period>
     788:	74 cf       	rjmp	.-280    	; 0x672 <tx_task+0xae>

0000078a <main>:
void nrk_register_drivers();

uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
     78a:	cf ef       	ldi	r28, 0xFF	; 255
     78c:	d1 e2       	ldi	r29, 0x21	; 33
     78e:	de bf       	out	0x3e, r29	; 62
     790:	cd bf       	out	0x3d, r28	; 61
   uint16_t div;
   nrk_setup_ports ();
     792:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <nrk_setup_ports>
   nrk_setup_uart (UART_BAUDRATE_115K2);
     796:	87 e0       	ldi	r24, 0x07	; 7
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 9d 1b 	call	0x373a	; 0x373a <nrk_setup_uart>

   nrk_init ();
     79e:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <nrk_init>

   nrk_led_clr (0);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
   nrk_led_clr (1);
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
   nrk_led_clr (2);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
   nrk_led_clr (3);
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>

   nrk_time_set (0, 0);
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 71 29 	call	0x52e2	; 0x52e2 <nrk_time_set>

   bmac_task_config ();
     7d6:	0e 94 aa 04 	call	0x954	; 0x954 <bmac_task_config>

   nrk_register_drivers();
     7da:	0e 94 79 02 	call	0x4f2	; 0x4f2 <nrk_register_drivers>
   nrk_create_taskset ();
     7de:	0e 94 85 02 	call	0x50a	; 0x50a <nrk_create_taskset>
   nrk_start ();
     7e2:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <nrk_start>

   return 0;
}
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0c 94 e4 3e 	jmp	0x7dc8	; 0x7dc8 <_exit>

000007ee <rf_rx_callback>:

/**
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
     7ee:	08 95       	ret

000007f0 <bmac_tx_reserve_set>:
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
else return NRK_ERROR;
#else
return NRK_ERROR;
#endif
}
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	08 95       	ret

000007f6 <bmac_tx_reserve_get>:
  return nrk_reserve_get(tx_reserve);
else return 0;
#else
return 0;
#endif
}
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret

000007fc <bmac_addr_decode_dest_mac>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
     7fc:	90 93 77 05 	sts	0x0577, r25
     800:	80 93 76 05 	sts	0x0576, r24
return NRK_OK;
}
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	08 95       	ret

0000080a <bmac_set_cca_active>:
return NRK_OK;
}

void bmac_set_cca_active(uint8_t active)
{
cca_active=active;
     80a:	80 93 5d 04 	sts	0x045D, r24
     80e:	08 95       	ret

00000810 <bmac_rx_pkt_set_buffer>:
else return NRK_OK;
}

int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{
if(buf==NULL) return NRK_ERROR;
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	19 f4       	brne	.+6      	; 0x81a <bmac_rx_pkt_set_buffer+0xa>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	08 95       	ret
    bmac_rfRxInfo.pPayload = buf;
     81a:	90 93 21 06 	sts	0x0621, r25
     81e:	80 93 20 06 	sts	0x0620, r24
    bmac_rfRxInfo.max_length = size;
     822:	60 93 1f 06 	sts	0x061F, r22
    rx_buf_empty=1;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 50 04 	sts	0x0450, r24
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     830:	08 95       	ret

00000832 <bmac_tx_pkt_nonblocking>:
    is_enabled=1;
    return NRK_OK;
}

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
{
     832:	9c 01       	movw	r18, r24
  if(tx_data_ready==1) return NRK_ERROR;
     834:	80 91 4f 04 	lds	r24, 0x044F
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	19 f4       	brne	.+6      	; 0x842 <bmac_tx_pkt_nonblocking+0x10>
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	08 95       	ret
  tx_data_ready=1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 4f 04 	sts	0x044F, r24
  bmac_rfTxInfo.pPayload=buf;
     848:	30 93 7a 05 	sts	0x057A, r19
     84c:	20 93 79 05 	sts	0x0579, r18
  bmac_rfTxInfo.length=len;
     850:	60 93 78 05 	sts	0x0578, r22
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     858:	08 95       	ret

0000085a <bmac_rx_pkt_ready>:
  *rssi=bmac_rfRxInfo.rssi;
  return bmac_rfRxInfo.pPayload;
}

int8_t bmac_rx_pkt_ready(void)
{
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	80 91 50 04 	lds	r24, 0x0450
     862:	88 23       	and	r24, r24
     864:	11 f4       	brne	.+4      	; 0x86a <bmac_rx_pkt_ready+0x10>
     866:	21 e0       	ldi	r18, 0x01	; 1
     868:	30 e0       	ldi	r19, 0x00	; 0
return (!rx_buf_empty);
}
     86a:	c9 01       	movw	r24, r18
     86c:	08 95       	ret

0000086e <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 50 04 	sts	0x0450, r24
return NRK_OK;
}
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	08 95       	ret

0000087a <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate(nrk_time_t period)
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	28 97       	sbiw	r28, 0x08	; 8
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	29 83       	std	Y+1, r18	; 0x01
     890:	3a 83       	std	Y+2, r19	; 0x02
     892:	4b 83       	std	Y+3, r20	; 0x03
     894:	5c 83       	std	Y+4, r21	; 0x04
     896:	6d 83       	std	Y+5, r22	; 0x05
     898:	7e 83       	std	Y+6, r23	; 0x06
     89a:	8f 83       	std	Y+7, r24	; 0x07
     89c:	98 87       	std	Y+8, r25	; 0x08
     89e:	2d 81       	ldd	r18, Y+5	; 0x05
     8a0:	3e 81       	ldd	r19, Y+6	; 0x06
     8a2:	4f 81       	ldd	r20, Y+7	; 0x07
     8a4:	58 85       	ldd	r21, Y+8	; 0x08
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	ab 81       	ldd	r26, Y+3	; 0x03
     8ac:	bc 81       	ldd	r27, Y+4	; 0x04
if(period.secs==0 && period.nano_secs < BMAC_MIN_CHECK_RATE_MS*NANOS_PER_MS)
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	a1 05       	cpc	r26, r1
     8b2:	b1 05       	cpc	r27, r1
     8b4:	59 f4       	brne	.+22     	; 0x8cc <bmac_set_rx_check_rate+0x52>
     8b6:	20 30       	cpi	r18, 0x00	; 0
     8b8:	6d e2       	ldi	r22, 0x2D	; 45
     8ba:	36 07       	cpc	r19, r22
     8bc:	61 e3       	ldi	r22, 0x31	; 49
     8be:	46 07       	cpc	r20, r22
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	56 07       	cpc	r21, r22
     8c4:	18 f4       	brcc	.+6      	; 0x8cc <bmac_set_rx_check_rate+0x52>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <bmac_set_rx_check_rate+0x76>
	return NRK_ERROR;
_bmac_check_period.secs=period.secs;
     8cc:	80 93 55 04 	sts	0x0455, r24
     8d0:	90 93 56 04 	sts	0x0456, r25
     8d4:	a0 93 57 04 	sts	0x0457, r26
     8d8:	b0 93 58 04 	sts	0x0458, r27
_bmac_check_period.nano_secs=period.nano_secs;
     8dc:	20 93 59 04 	sts	0x0459, r18
     8e0:	30 93 5a 04 	sts	0x045A, r19
     8e4:	40 93 5b 04 	sts	0x045B, r20
     8e8:	50 93 5c 04 	sts	0x045C, r21
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	28 96       	adiw	r28, 0x08	; 8
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <bmac_started>:
return NRK_OK;
}

int8_t bmac_started()
{
     902:	80 91 51 04 	lds	r24, 0x0451
return bmac_running;
}
     906:	99 27       	eor	r25, r25
     908:	87 fd       	sbrc	r24, 7
     90a:	90 95       	com	r25
     90c:	08 95       	ret

0000090e <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get()
{
  return rx_failure_cnt;
}
     90e:	80 91 4b 04 	lds	r24, 0x044B
     912:	90 91 4c 04 	lds	r25, 0x044C
     916:	08 95       	ret

00000918 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset()
{
  rx_failure_cnt=0;
     918:	10 92 4b 04 	sts	0x044B, r1
     91c:	10 92 4c 04 	sts	0x044C, r1
     920:	10 92 4d 04 	sts	0x044D, r1
     924:	10 92 4e 04 	sts	0x044E, r1
return NRK_OK;
}
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret

0000092e <_b_pow>:

uint8_t _b_pow(uint8_t in)
{
uint8_t i;
uint8_t result;
if(in<=1) return 1;
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	18 f4       	brcc	.+6      	; 0x938 <_b_pow+0xa>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	08 95       	ret
if(in>7) in=6; // cap it at 128 
     938:	88 30       	cpi	r24, 0x08	; 8
     93a:	08 f0       	brcs	.+2      	; 0x93e <_b_pow+0x10>
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
result=1;
for(i=0; i<in; i++ )
  result=result*2;
     944:	99 0f       	add	r25, r25
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t i;
uint8_t result;
if(in<=1) return 1;
if(in>7) in=6; // cap it at 128 
result=1;
for(i=0; i<in; i++ )
     94a:	28 17       	cp	r18, r24
     94c:	d8 f3       	brcs	.-10     	; 0x944 <_b_pow+0x16>
  result=result*2;
return result;
     94e:	89 2f       	mov	r24, r25
     950:	99 27       	eor	r25, r25
}
     952:	08 95       	ret

00000954 <bmac_task_config>:


void bmac_task_config ()
{
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
    nrk_task_set_entry_function( &bmac_task, bmac_nw_task);
     958:	08 ea       	ldi	r16, 0xA8	; 168
     95a:	13 e0       	ldi	r17, 0x03	; 3
     95c:	6f ec       	ldi	r22, 0xCF	; 207
     95e:	77 e0       	ldi	r23, 0x07	; 7
     960:	c8 01       	movw	r24, r16
     962:	0e 94 06 33 	call	0x660c	; 0x660c <nrk_task_set_entry_function>
    nrk_task_set_stk( &bmac_task, bmac_task_stack, BMAC_STACKSIZE);
     966:	40 e8       	ldi	r20, 0x80	; 128
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	6b ec       	ldi	r22, 0xCB	; 203
     96c:	73 e0       	ldi	r23, 0x03	; 3
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 67 33 	call	0x66ce	; 0x66ce <nrk_task_set_stk>
    bmac_task.prio = BMAC_TASK_PRIORITY;
     974:	84 e1       	ldi	r24, 0x14	; 20
     976:	80 93 b0 03 	sts	0x03B0, r24
    bmac_task.FirstActivation = TRUE;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 af 03 	sts	0x03AF, r24
    bmac_task.Type = BASIC_TASK;
     980:	80 93 b1 03 	sts	0x03B1, r24
    bmac_task.SchType = PREEMPTIVE;
     984:	80 93 b2 03 	sts	0x03B2, r24
    bmac_task.period.secs = 0;
     988:	10 92 b3 03 	sts	0x03B3, r1
     98c:	10 92 b4 03 	sts	0x03B4, r1
     990:	10 92 b5 03 	sts	0x03B5, r1
     994:	10 92 b6 03 	sts	0x03B6, r1
    bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	9d e2       	ldi	r25, 0x2D	; 45
     99c:	a1 e3       	ldi	r26, 0x31	; 49
     99e:	b1 e0       	ldi	r27, 0x01	; 1
     9a0:	80 93 b7 03 	sts	0x03B7, r24
     9a4:	90 93 b8 03 	sts	0x03B8, r25
     9a8:	a0 93 b9 03 	sts	0x03B9, r26
     9ac:	b0 93 ba 03 	sts	0x03BA, r27
    bmac_task.cpu_reserve.secs = 5;      // bmac reserve , 0 to disable
     9b0:	85 e0       	ldi	r24, 0x05	; 5
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	80 93 bb 03 	sts	0x03BB, r24
     9bc:	90 93 bc 03 	sts	0x03BC, r25
     9c0:	a0 93 bd 03 	sts	0x03BD, r26
     9c4:	b0 93 be 03 	sts	0x03BE, r27
    bmac_task.cpu_reserve.nano_secs = 0;
     9c8:	10 92 bf 03 	sts	0x03BF, r1
     9cc:	10 92 c0 03 	sts	0x03C0, r1
     9d0:	10 92 c1 03 	sts	0x03C1, r1
     9d4:	10 92 c2 03 	sts	0x03C2, r1
    bmac_task.offset.secs = 0;
     9d8:	10 92 c3 03 	sts	0x03C3, r1
     9dc:	10 92 c4 03 	sts	0x03C4, r1
     9e0:	10 92 c5 03 	sts	0x03C5, r1
     9e4:	10 92 c6 03 	sts	0x03C6, r1
    bmac_task.offset.nano_secs = 0;
     9e8:	10 92 c7 03 	sts	0x03C7, r1
     9ec:	10 92 c8 03 	sts	0x03C8, r1
     9f0:	10 92 c9 03 	sts	0x03C9, r1
     9f4:	10 92 ca 03 	sts	0x03CA, r1
    #ifdef DEBUG
    printf( "bmac activate\r\n" );
    #endif 
    nrk_activate_task (&bmac_task);
     9f8:	c8 01       	movw	r24, r16
     9fa:	0e 94 0d 28 	call	0x501a	; 0x501a <nrk_activate_task>
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <_bmac_channel_check>:
{
return bmac_running;
}

int8_t _bmac_channel_check()
{
     a04:	1f 93       	push	r17
int8_t val;
rf_polling_rx_on();
     a06:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <rf_polling_rx_on>
nrk_spin_wait_us(250);
     a0a:	8a ef       	ldi	r24, 0xFA	; 250
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
val=CCA_IS_1;
     a12:	89 b1       	in	r24, 0x09	; 9
     a14:	99 27       	eor	r25, r25
     a16:	24 e0       	ldi	r18, 0x04	; 4
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	2a 95       	dec	r18
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <_bmac_channel_check+0x14>
if(val) rf_rx_off(); 
     a20:	18 2f       	mov	r17, r24
     a22:	11 70       	andi	r17, 0x01	; 1
     a24:	80 ff       	sbrs	r24, 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <_bmac_channel_check+0x28>
     a28:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
return val;

}
     a2c:	81 2f       	mov	r24, r17
     a2e:	99 27       	eor	r25, r25
     a30:	1f 91       	pop	r17
     a32:	08 95       	ret

00000a34 <_bmac_tx>:
  rx_failure_cnt=0;
return NRK_OK;
}

int8_t _bmac_tx()
{
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
uint16_t b;

#ifdef DEBUG
nrk_kprintf( PSTR("_bmac_tx()\r\n"));
#endif
if(cca_active)
     a40:	80 91 5d 04 	lds	r24, 0x045D
     a44:	88 23       	and	r24, r24
     a46:	09 f4       	brne	.+2      	; 0xa4a <_bmac_tx+0x16>
     a48:	4a c0       	rjmp	.+148    	; 0xade <_bmac_tx+0xaa>
{

// Add random time here to stop nodes from synchronizing with eachother
b=_nrk_time_to_ticks(&_bmac_check_period);
     a4a:	85 e5       	ldi	r24, 0x55	; 85
     a4c:	94 e0       	ldi	r25, 0x04	; 4
     a4e:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
     a52:	8c 01       	movw	r16, r24
b=b/((rand()%10)+1);
     a54:	0e 94 c5 3b 	call	0x778a	; 0x778a <rand>
//printf( "waiting %d\r\n",b );
nrk_wait_until_ticks(b);
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__divmodhi4>
     a60:	bc 01       	movw	r22, r24
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <__udivmodhi4>
     a6c:	cb 01       	movw	r24, r22
     a6e:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <nrk_wait_until_ticks>
     a72:	ff 24       	eor	r15, r15
     a74:	f3 94       	inc	r15
     a76:	c5 e5       	ldi	r28, 0x55	; 85
     a78:	d4 e0       	ldi	r29, 0x04	; 4
//nrk_wait_ticks(b);

	backoff_count=1;
	do{
	v=_bmac_channel_check();
     a7a:	0e 94 02 05 	call	0xa04	; 0xa04 <_bmac_channel_check>
     a7e:	e8 2e       	mov	r14, r24
	rf_rx_off(); 
     a80:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
	if(v==1) break;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	e8 16       	cp	r14, r24
     a88:	51 f1       	breq	.+84     	; 0xade <_bmac_tx+0xaa>
	// Channel is busy
	backoff=rand()%(_b_pow(backoff_count));
     a8a:	0e 94 c5 3b 	call	0x778a	; 0x778a <rand>
     a8e:	8c 01       	movw	r16, r24
     a90:	8f 2d       	mov	r24, r15
     a92:	0e 94 97 04 	call	0x92e	; 0x92e <_b_pow>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
     a96:	68 2f       	mov	r22, r24
     a98:	77 27       	eor	r23, r23
     a9a:	c8 01       	movw	r24, r16
     a9c:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__divmodhi4>
     aa0:	99 27       	eor	r25, r25
     aa2:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <nrk_wait_until_next_n_periods>
	backoff_count++;
	if(backoff_count>6) backoff_count=6; // cap it at 64	
	b=_nrk_time_to_ticks(&_bmac_check_period);
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
     aac:	8c 01       	movw	r16, r24
	b=b/((rand()%10)+1);
     aae:	0e 94 c5 3b 	call	0x778a	; 0x778a <rand>
//	printf( "waiting %d\r\n",b );
	nrk_wait_until_ticks(b);
     ab2:	6a e0       	ldi	r22, 0x0A	; 10
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__divmodhi4>
     aba:	bc 01       	movw	r22, r24
     abc:	6f 5f       	subi	r22, 0xFF	; 255
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <__udivmodhi4>
     ac6:	cb 01       	movw	r24, r22
     ac8:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <nrk_wait_until_ticks>
//	nrk_wait_ticks(b);

	} while(v==0);
     acc:	ee 20       	and	r14, r14
     ace:	39 f4       	brne	.+14     	; 0xade <_bmac_tx+0xaa>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
	backoff_count++;
     ad0:	f3 94       	inc	r15
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	8f 15       	cp	r24, r15
     ad6:	88 f6       	brcc	.-94     	; 0xa7a <_bmac_tx+0x46>
     ad8:	36 e0       	ldi	r19, 0x06	; 6
     ada:	f3 2e       	mov	r15, r19
     adc:	ce cf       	rjmp	.-100    	; 0xa7a <_bmac_tx+0x46>
//	nrk_wait_ticks(b);

	} while(v==0);
}

	rf_test_mode();
     ade:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <rf_test_mode>
	rf_carrier_on(); 
     ae2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <rf_carrier_on>
	nrk_wait(_bmac_check_period);
     ae6:	20 91 55 04 	lds	r18, 0x0455
     aea:	30 91 56 04 	lds	r19, 0x0456
     aee:	40 91 57 04 	lds	r20, 0x0457
     af2:	50 91 58 04 	lds	r21, 0x0458
     af6:	60 91 59 04 	lds	r22, 0x0459
     afa:	70 91 5a 04 	lds	r23, 0x045A
     afe:	80 91 5b 04 	lds	r24, 0x045B
     b02:	90 91 5c 04 	lds	r25, 0x045C
     b06:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <nrk_wait>
	//nrk_wait_until_next_period();
	rf_carrier_off(); 
     b0a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <rf_carrier_off>
	rf_data_mode();
     b0e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <rf_data_mode>
	// send packet
	rf_rx_off();
     b12:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
	pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
     b16:	86 e7       	ldi	r24, 0x76	; 118
     b18:	95 e0       	ldi	r25, 0x05	; 5
     b1a:	0e 94 42 11 	call	0x2284	; 0x2284 <rf_tx_packet>
     b1e:	80 93 52 04 	sts	0x0452, r24
	rf_rx_off(); 	
     b22:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
tx_data_ready=0;
     b26:	10 92 4f 04 	sts	0x044F, r1
nrk_event_signal (bmac_tx_pkt_done_signal);
     b2a:	80 91 a5 06 	lds	r24, 0x06A5
     b2e:	0e 94 a3 23 	call	0x4746	; 0x4746 <nrk_event_signal>
return NRK_OK;
}
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <_bmac_rx>:
return val;

}

int8_t _bmac_rx()
{
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
int8_t n;
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
     b48:	60 91 53 04 	lds	r22, 0x0453
     b4c:	8b e1       	ldi	r24, 0x1B	; 27
     b4e:	96 e0       	ldi	r25, 0x06	; 6
     b50:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <rf_set_rx>
        rf_polling_rx_on ();
     b54:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <rf_polling_rx_on>
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	26 c0       	rjmp	.+76     	; 0xba8 <_bmac_rx+0x64>
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
	{
	cnt++;
     b5c:	1f 5f       	subi	r17, 0xFF	; 255
	nrk_wait(_bmac_check_period);
     b5e:	20 91 55 04 	lds	r18, 0x0455
     b62:	30 91 56 04 	lds	r19, 0x0456
     b66:	40 91 57 04 	lds	r20, 0x0457
     b6a:	50 91 58 04 	lds	r21, 0x0458
     b6e:	60 91 59 04 	lds	r22, 0x0459
     b72:	70 91 5a 04 	lds	r23, 0x045A
     b76:	80 91 5b 04 	lds	r24, 0x045B
     b7a:	90 91 5c 04 	lds	r25, 0x045C
     b7e:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <nrk_wait>
	if(cnt>2) { 
     b82:	13 30       	cpi	r17, 0x03	; 3
     b84:	89 f4       	brne	.+34     	; 0xba8 <_bmac_rx+0x64>
			#ifdef DEBUG
			printf( "rx timeout 1 %d\r\n",cnt );
			#endif
			if(rx_failure_cnt<65535) rx_failure_cnt++;
     b86:	80 91 4b 04 	lds	r24, 0x044B
     b8a:	90 91 4c 04 	lds	r25, 0x044C
     b8e:	a0 91 4d 04 	lds	r26, 0x044D
     b92:	b0 91 4e 04 	lds	r27, 0x044E
     b96:	8f 3f       	cpi	r24, 0xFF	; 255
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	92 07       	cpc	r25, r18
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	a2 07       	cpc	r26, r18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	b2 07       	cpc	r27, r18
     ba4:	00 f5       	brcc	.+64     	; 0xbe6 <_bmac_rx+0xa2>
     ba6:	14 c0       	rjmp	.+40     	; 0xbd0 <_bmac_rx+0x8c>
uint8_t cnt;

	rf_set_rx (&bmac_rfRxInfo, g_chan);
        rf_polling_rx_on ();
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     ba8:	0e 94 35 0b 	call	0x166a	; 0x166a <rf_rx_check_fifop>
     bac:	88 23       	and	r24, r24
     bae:	b1 f2       	breq	.-84     	; 0xb5c <_bmac_rx+0x18>
     bb0:	1d c0       	rjmp	.+58     	; 0xbec <_bmac_rx+0xa8>
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
                cnt++;
     bb2:	1f 5f       	subi	r17, 0xFF	; 255
                nrk_spin_wait_us(100);
     bb4:	84 e6       	ldi	r24, 0x64	; 100
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
                if (cnt > 50) { 
     bbc:	13 33       	cpi	r17, 0x33	; 51
     bbe:	b9 f4       	brne	.+46     	; 0xbee <_bmac_rx+0xaa>
			#ifdef DEBUG
			printf( "rx timeout 2\r\n" ); 
			#endif
			rx_failure_cnt++;
     bc0:	80 91 4b 04 	lds	r24, 0x044B
     bc4:	90 91 4c 04 	lds	r25, 0x044C
     bc8:	a0 91 4d 04 	lds	r26, 0x044D
     bcc:	b0 91 4e 04 	lds	r27, 0x044E
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	a1 1d       	adc	r26, r1
     bd4:	b1 1d       	adc	r27, r1
     bd6:	80 93 4b 04 	sts	0x044B, r24
     bda:	90 93 4c 04 	sts	0x044C, r25
     bde:	a0 93 4d 04 	sts	0x044D, r26
     be2:	b0 93 4e 04 	sts	0x044E, r27
			rf_rx_off(); 
     be6:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
     bea:	22 c0       	rjmp	.+68     	; 0xc30 <_bmac_rx+0xec>
			return 0;
     bec:	10 e0       	ldi	r17, 0x00	; 0
	}
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
     bee:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <rf_polling_rx_packet>
     bf2:	08 2f       	mov	r16, r24
     bf4:	88 23       	and	r24, r24
     bf6:	e9 f2       	breq	.-70     	; 0xbb2 <_bmac_rx+0x6e>
			rf_rx_off(); 
			return 0;
			}        
                }
        }
        rf_rx_off();
     bf8:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
        if (n == 1) {
     bfc:	01 30       	cpi	r16, 0x01	; 1
     bfe:	29 f4       	brne	.+10     	; 0xc0a <_bmac_rx+0xc6>
                // CRC and checksum passed
    		rx_buf_empty=0;
     c00:	10 92 50 04 	sts	0x0450, r1
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	15 c0       	rjmp	.+42     	; 0xc34 <_bmac_rx+0xf0>
        } else 
	{
	#ifdef DEBUG 
	printf( "CRC failed!\r\n" );
	#endif 
	rx_failure_cnt++;
     c0a:	80 91 4b 04 	lds	r24, 0x044B
     c0e:	90 91 4c 04 	lds	r25, 0x044C
     c12:	a0 91 4d 04 	lds	r26, 0x044D
     c16:	b0 91 4e 04 	lds	r27, 0x044E
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	a1 1d       	adc	r26, r1
     c1e:	b1 1d       	adc	r27, r1
     c20:	80 93 4b 04 	sts	0x044B, r24
     c24:	90 93 4c 04 	sts	0x044C, r25
     c28:	a0 93 4d 04 	sts	0x044D, r26
     c2c:	b0 93 4e 04 	sts	0x044E, r27
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <bmac_get_tx_done_signal>:
return(bmac_rx_pkt_signal);
}

nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
     c3a:	80 91 a5 06 	lds	r24, 0x06A5
     c3e:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
     c42:	80 91 a5 06 	lds	r24, 0x06A5
return(bmac_tx_pkt_done_signal);
}
     c46:	99 27       	eor	r25, r25
     c48:	87 fd       	sbrc	r24, 7
     c4a:	90 95       	com	r25
     c4c:	08 95       	ret

00000c4e <bmac_get_rx_pkt_signal>:
return NRK_OK;
}

nrk_sig_t bmac_get_rx_pkt_signal()
{
   nrk_signal_register(bmac_rx_pkt_signal); 
     c4e:	80 91 81 05 	lds	r24, 0x0581
     c52:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
     c56:	80 91 81 05 	lds	r24, 0x0581
return(bmac_rx_pkt_signal);
}
     c5a:	99 27       	eor	r25, r25
     c5c:	87 fd       	sbrc	r24, 7
     c5e:	90 95       	com	r25
     c60:	08 95       	ret

00000c62 <bmac_tx_pkt>:
return(bmac_tx_pkt_done_signal);
}


int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	8c 01       	movw	r16, r24
     c6c:	f6 2e       	mov	r15, r22
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
     c6e:	80 91 4f 04 	lds	r24, 0x044F
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f4       	brne	.+2      	; 0xc78 <bmac_tx_pkt+0x16>
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <bmac_tx_pkt+0x94>
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) { 
		return NRK_ERROR;
		}
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
     c78:	80 91 a5 06 	lds	r24, 0x06A5
     c7c:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
tx_data_ready=1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 4f 04 	sts	0x044F, r24
bmac_rfTxInfo.pPayload=buf;
     c86:	10 93 7a 05 	sts	0x057A, r17
     c8a:	00 93 79 05 	sts	0x0579, r16
bmac_rfTxInfo.length=len;
     c8e:	f0 92 78 05 	sts	0x0578, r15
#ifdef DEBUG
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	00 90 a5 06 	lds	r0, 0x06A5
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <bmac_tx_pkt+0x46>
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	d2 f7       	brpl	.-12     	; 0xca0 <bmac_tx_pkt+0x3e>
     cac:	0e 94 f5 24 	call	0x49ea	; 0x49ea <nrk_event_wait>
     cb0:	7b 01       	movw	r14, r22
     cb2:	8c 01       	movw	r16, r24
if(mask==0) nrk_kprintf( PSTR("BMAC TX: Error calling event wait\r\n"));
     cb4:	61 15       	cp	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	81 05       	cpc	r24, r1
     cba:	91 05       	cpc	r25, r1
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <bmac_tx_pkt+0x64>
     cbe:	85 e9       	ldi	r24, 0x95	; 149
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
if((mask&SIG(bmac_tx_pkt_done_signal))==0) nrk_kprintf( PSTR("BMAC TX: Woke up on wrong signal\r\n"));
     cc6:	d8 01       	movw	r26, r16
     cc8:	c7 01       	movw	r24, r14
     cca:	00 90 a5 06 	lds	r0, 0x06A5
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <bmac_tx_pkt+0x76>
     cd0:	b6 95       	lsr	r27
     cd2:	a7 95       	ror	r26
     cd4:	97 95       	ror	r25
     cd6:	87 95       	ror	r24
     cd8:	0a 94       	dec	r0
     cda:	d2 f7       	brpl	.-12     	; 0xcd0 <bmac_tx_pkt+0x6e>
     cdc:	80 fd       	sbrc	r24, 0
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <bmac_tx_pkt+0x86>
     ce0:	82 e7       	ldi	r24, 0x72	; 114
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
if(pkt_got_ack) return NRK_OK;
     ce8:	80 91 52 04 	lds	r24, 0x0452
     cec:	88 23       	and	r24, r24
     cee:	19 f0       	breq	.+6      	; 0xcf6 <bmac_tx_pkt+0x94>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <bmac_tx_pkt+0x98>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <bmac_enable>:
  rf_power_down();
}

void bmac_enable()
{
  is_enabled=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 54 04 	sts	0x0454, r24
  rf_power_up();
     d0a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     d0e:	80 91 75 05 	lds	r24, 0x0575
     d12:	0e 94 a3 23 	call	0x4746	; 0x4746 <nrk_event_signal>
     d16:	08 95       	ret

00000d18 <bmac_disable>:
return NRK_OK;
}

void bmac_disable()
{
  is_enabled=0;
     d18:	10 92 54 04 	sts	0x0454, r1
  rf_power_down();
     d1c:	0e 94 1f 0a 	call	0x143e	; 0x143e <rf_power_down>
     d20:	08 95       	ret

00000d22 <bmac_set_channel>:
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}

int8_t bmac_set_channel(uint8_t chan)
{
     d22:	68 2f       	mov	r22, r24
if(chan>26) return NRK_ERROR;
     d24:	8b 31       	cpi	r24, 0x1B	; 27
     d26:	18 f0       	brcs	.+6      	; 0xd2e <bmac_set_channel+0xc>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	9f ef       	ldi	r25, 0xFF	; 255
     d2c:	08 95       	ret
g_chan=chan;
     d2e:	80 93 53 04 	sts	0x0453, r24
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4f ef       	ldi	r20, 0xFF	; 255
     d38:	5f ef       	ldi	r21, 0xFF	; 255
     d3a:	8b e1       	ldi	r24, 0x1B	; 27
     d3c:	96 e0       	ldi	r25, 0x06	; 6
     d3e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <rf_init>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     d46:	08 95       	ret

00000d48 <bmac_init>:
    rx_buf_empty=1;
return NRK_OK;
}

int8_t bmac_init (uint8_t chan)
{
     d48:	1f 93       	push	r17
     d4a:	18 2f       	mov	r17, r24
    bmac_running=0;
     d4c:	10 92 51 04 	sts	0x0451, r1
    tx_reserve=-1;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	80 93 5e 04 	sts	0x045E, r24
    cca_active=true;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 5d 04 	sts	0x045D, r24
    rx_failure_cnt=0;
     d5c:	10 92 4b 04 	sts	0x044B, r1
     d60:	10 92 4c 04 	sts	0x044C, r1
     d64:	10 92 4d 04 	sts	0x044D, r1
     d68:	10 92 4e 04 	sts	0x044E, r1
	#endif
    #endif



    _bmac_check_period.secs=0;
     d6c:	10 92 55 04 	sts	0x0455, r1
     d70:	10 92 56 04 	sts	0x0456, r1
     d74:	10 92 57 04 	sts	0x0457, r1
     d78:	10 92 58 04 	sts	0x0458, r1
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	91 ee       	ldi	r25, 0xE1	; 225
     d80:	a5 ef       	ldi	r26, 0xF5	; 245
     d82:	b5 e0       	ldi	r27, 0x05	; 5
     d84:	80 93 59 04 	sts	0x0459, r24
     d88:	90 93 5a 04 	sts	0x045A, r25
     d8c:	a0 93 5b 04 	sts	0x045B, r26
     d90:	b0 93 5c 04 	sts	0x045C, r27
    bmac_rx_pkt_signal=nrk_signal_create();
     d94:	0e 94 12 22 	call	0x4424	; 0x4424 <nrk_signal_create>
     d98:	80 93 81 05 	sts	0x0581, r24
    if(bmac_rx_pkt_signal==NRK_ERROR)
     d9c:	8f 3f       	cpi	r24, 0xFF	; 255
     d9e:	19 f4       	brne	.+6      	; 0xda6 <bmac_init+0x5e>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
     da0:	8d e0       	ldi	r24, 0x0D	; 13
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    bmac_tx_pkt_done_signal=nrk_signal_create();
     da6:	0e 94 12 22 	call	0x4424	; 0x4424 <nrk_signal_create>
     daa:	80 93 a5 06 	sts	0x06A5, r24
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
     dae:	8f 3f       	cpi	r24, 0xFF	; 255
     db0:	79 f4       	brne	.+30     	; 0xdd0 <bmac_init+0x88>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
     db2:	85 ee       	ldi	r24, 0xE5	; 229
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     dba:	e0 91 67 07 	lds	r30, 0x0767
     dbe:	f0 91 68 07 	lds	r31, 0x0768
     dc2:	60 85       	ldd	r22, Z+8	; 0x08
     dc4:	8e e0       	ldi	r24, 0x0E	; 14
     dc6:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
     dce:	5b c0       	rjmp	.+182    	; 0xe86 <bmac_init+0x13e>
	return NRK_ERROR;
	}
    bmac_enable_signal=nrk_signal_create();
     dd0:	0e 94 12 22 	call	0x4424	; 0x4424 <nrk_signal_create>
     dd4:	80 93 75 05 	sts	0x0575, r24
    if(bmac_enable_signal==NRK_ERROR)
     dd8:	8f 3f       	cpi	r24, 0xFF	; 255
     dda:	19 f4       	brne	.+6      	; 0xde2 <bmac_init+0x9a>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
     ddc:	89 eb       	ldi	r24, 0xB9	; 185
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	ea cf       	rjmp	.-44     	; 0xdb6 <bmac_init+0x6e>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}

     
    tx_data_ready=0;
     de2:	10 92 4f 04 	sts	0x044F, r1
    // Set the one main rx buffer
    rx_buf_empty=0;
     de6:	10 92 50 04 	sts	0x0450, r1
    bmac_rfRxInfo.pPayload = NULL;
     dea:	10 92 21 06 	sts	0x0621, r1
     dee:	10 92 20 06 	sts	0x0620, r1
    bmac_rfRxInfo.max_length = 0;
     df2:	10 92 1f 06 	sts	0x061F, r1

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	4f ef       	ldi	r20, 0xFF	; 255
     dfc:	5f ef       	ldi	r21, 0xFF	; 255
     dfe:	61 2f       	mov	r22, r17
     e00:	8b e1       	ldi	r24, 0x1B	; 27
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <rf_init>
    g_chan=chan;
     e08:	10 93 53 04 	sts	0x0453, r17
 
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
     e0c:	40 98       	cbi	0x08, 0	; 8
     e0e:	83 e1       	ldi	r24, 0x13	; 19
     e10:	8e bd       	out	0x2e, r24	; 46
     e12:	0d b4       	in	r0, 0x2d	; 45
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <bmac_init+0xca>
     e18:	85 ee       	ldi	r24, 0xE5	; 229
     e1a:	8e bd       	out	0x2e, r24	; 46
     e1c:	0d b4       	in	r0, 0x2d	; 45
     e1e:	07 fe       	sbrs	r0, 7
     e20:	fd cf       	rjmp	.-6      	; 0xe1c <bmac_init+0xd4>
     e22:	80 e8       	ldi	r24, 0x80	; 128
     e24:	8e bd       	out	0x2e, r24	; 46
     e26:	0d b4       	in	r0, 0x2d	; 45
     e28:	07 fe       	sbrs	r0, 7
     e2a:	fd cf       	rjmp	.-6      	; 0xe26 <bmac_init+0xde>
     e2c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
     e2e:	40 98       	cbi	0x08, 0	; 8
     e30:	85 e1       	ldi	r24, 0x15	; 21
     e32:	8e bd       	out	0x2e, r24	; 46
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <bmac_init+0xec>
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	8e bd       	out	0x2e, r24	; 46
     e3e:	0d b4       	in	r0, 0x2d	; 45
     e40:	07 fe       	sbrs	r0, 7
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <bmac_init+0xf6>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	8e bd       	out	0x2e, r24	; 46
     e48:	0d b4       	in	r0, 0x2d	; 45
     e4a:	07 fe       	sbrs	r0, 7
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <bmac_init+0x100>
     e4e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
     e50:	40 98       	cbi	0x08, 0	; 8
     e52:	87 e1       	ldi	r24, 0x17	; 23
     e54:	8e bd       	out	0x2e, r24	; 46
     e56:	0d b4       	in	r0, 0x2d	; 45
     e58:	07 fe       	sbrs	r0, 7
     e5a:	fd cf       	rjmp	.-6      	; 0xe56 <bmac_init+0x10e>
     e5c:	8a e0       	ldi	r24, 0x0A	; 10
     e5e:	8e bd       	out	0x2e, r24	; 46
     e60:	0d b4       	in	r0, 0x2d	; 45
     e62:	07 fe       	sbrs	r0, 7
     e64:	fd cf       	rjmp	.-6      	; 0xe60 <bmac_init+0x118>
     e66:	86 e5       	ldi	r24, 0x56	; 86
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	0d b4       	in	r0, 0x2d	; 45
     e6c:	07 fe       	sbrs	r0, 7
     e6e:	fd cf       	rjmp	.-6      	; 0xe6a <bmac_init+0x122>
     e70:	40 9a       	sbi	0x08, 0	; 8
    // default cca thresh of -45
    //rf_set_cca_thresh(-45); 
    rf_set_cca_thresh(-45); 
     e72:	83 ed       	ldi	r24, 0xD3	; 211
     e74:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <rf_set_cca_thresh>
    bmac_running=1;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 51 04 	sts	0x0451, r24
    is_enabled=1;
     e7e:	80 93 54 04 	sts	0x0454, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <bmac_set_cca_thresh>:
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
{
  rf_set_cca_thresh(thresh); 
     e8a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <rf_set_cca_thresh>
return NRK_OK;
}
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	08 95       	ret

00000e94 <bmac_set_rf_power>:
}


int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
     e94:	80 32       	cpi	r24, 0x20	; 32
     e96:	18 f0       	brcs	.+6      	; 0xe9e <bmac_set_rf_power+0xa>
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	9f ef       	ldi	r25, 0xFF	; 255
     e9c:	08 95       	ret
rf_tx_power(power);
     e9e:	0e 94 1b 11 	call	0x2236	; 0x2236 <rf_tx_power>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     ea6:	08 95       	ret

00000ea8 <bmac_encryption_disable>:
  return NRK_OK;
}

int8_t bmac_encryption_disable()
{
  rf_security_disable();
     ea8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <rf_security_disable>
  return NRK_OK;
}
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <bmac_encryption_enable>:
  return NRK_OK;
}

int8_t bmac_encryption_enable()
{
  rf_security_enable();
     eb2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <rf_security_enable>
  return NRK_OK;
}
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	08 95       	ret

00000ebc <bmac_encryption_set_key>:
return rf_security_last_pkt_status();
}

int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
{
  if(len!=16) return NRK_ERROR;
     ebc:	60 31       	cpi	r22, 0x10	; 16
     ebe:	19 f0       	breq	.+6      	; 0xec6 <bmac_encryption_set_key+0xa>
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	08 95       	ret
  rf_security_set_key(key);
     ec6:	0e 94 c4 14 	call	0x2988	; 0x2988 <rf_security_set_key>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
  return NRK_OK;
}
     ece:	08 95       	ret

00000ed0 <bmac_rx_pkt_is_encrypted>:
return NRK_OK;
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
     ed0:	0e 94 30 0a 	call	0x1460	; 0x1460 <rf_security_last_pkt_status>
}
     ed4:	99 27       	eor	r25, r25
     ed6:	87 fd       	sbrc	r24, 7
     ed8:	90 95       	com	r25
     eda:	08 95       	ret

00000edc <bmac_addr_decode_set_my_mac>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
     edc:	0e 94 89 14 	call	0x2912	; 0x2912 <rf_addr_decode_set_my_mac>
return NRK_OK;
}
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	08 95       	ret

00000ee6 <bmac_addr_decode_enable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
{
rf_addr_decode_enable();
     ee6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <rf_addr_decode_enable>
return NRK_OK;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	08 95       	ret

00000ef0 <bmac_addr_decode_disable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
{
rf_addr_decode_disable();
     ef0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <rf_addr_decode_disable>
return NRK_OK;
}
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	08 95       	ret

00000efa <bmac_auto_ack_enable>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
     efa:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <rf_auto_ack_enable>
return NRK_OK;
}
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret

00000f04 <bmac_auto_ack_disable>:
}


int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
     f04:	0e 94 0e 0b 	call	0x161c	; 0x161c <rf_auto_ack_disable>
return NRK_OK;
}
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <bmac_encryption_set_ctr_counter>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
     f0e:	64 30       	cpi	r22, 0x04	; 4
     f10:	19 f0       	breq	.+6      	; 0xf18 <bmac_encryption_set_ctr_counter+0xa>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	08 95       	ret
rf_security_set_ctr_counter(counter);
     f18:	0e 94 34 0a 	call	0x1468	; 0x1468 <rf_security_set_ctr_counter>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
   return NRK_OK;
}
     f20:	08 95       	ret

00000f22 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt()
{
nrk_sig_mask_t event;

if(bmac_rx_pkt_ready()==1) return NRK_OK;
     f22:	80 91 50 04 	lds	r24, 0x0450
     f26:	88 23       	and	r24, r24
     f28:	09 f1       	breq	.+66     	; 0xf6c <bmac_wait_until_rx_pkt+0x4a>

    nrk_signal_register(bmac_rx_pkt_signal); 
     f2a:	80 91 81 05 	lds	r24, 0x0581
     f2e:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	00 90 81 05 	lds	r0, 0x0581
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <bmac_wait_until_rx_pkt+0x26>
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	d2 f7       	brpl	.-12     	; 0xf40 <bmac_wait_until_rx_pkt+0x1e>
     f4c:	0e 94 f5 24 	call	0x49ea	; 0x49ea <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
     f50:	00 90 81 05 	lds	r0, 0x0581
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <bmac_wait_until_rx_pkt+0x3c>
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	77 95       	ror	r23
     f5c:	67 95       	ror	r22
     f5e:	0a 94       	dec	r0
     f60:	d2 f7       	brpl	.-12     	; 0xf56 <bmac_wait_until_rx_pkt+0x34>
     f62:	60 fd       	sbrc	r22, 0
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <bmac_wait_until_rx_pkt+0x4a>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
     f6a:	08 95       	ret
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
else return NRK_OK;
}
     f70:	08 95       	ret

00000f72 <bmac_rx_pkt_get>:
return NRK_ERROR;
}


uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{
     f72:	fc 01       	movw	r30, r24
     f74:	db 01       	movw	r26, r22

  if(bmac_rx_pkt_ready()==0) 
     f76:	80 91 50 04 	lds	r24, 0x0450
     f7a:	88 23       	and	r24, r24
     f7c:	29 f0       	breq	.+10     	; 0xf88 <bmac_rx_pkt_get+0x16>
	{
	*len=0;
     f7e:	10 82       	st	Z, r1
	*rssi=0;
     f80:	1c 92       	st	X, r1
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	08 95       	ret
	return NULL;
	}
  *len=bmac_rfRxInfo.length;
     f88:	80 91 1e 06 	lds	r24, 0x061E
     f8c:	80 83       	st	Z, r24
  *rssi=bmac_rfRxInfo.rssi;
     f8e:	80 91 23 06 	lds	r24, 0x0623
     f92:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     f94:	80 91 20 06 	lds	r24, 0x0620
     f98:	90 91 21 06 	lds	r25, 0x0621
}
     f9c:	08 95       	ret

00000f9e <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <bmac_nw_task+0x6>
int8_t v;
int8_t e;
uint8_t backoff;
nrk_sig_mask_t event;

while(bmac_started()==0) nrk_wait_until_next_period();
     fa0:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <nrk_wait_until_next_period>
     fa4:	80 91 51 04 	lds	r24, 0x0451
     fa8:	88 23       	and	r24, r24
     faa:	d1 f3       	breq	.-12     	; 0xfa0 <bmac_nw_task+0x2>

//register the signal after bmac_init has been called
v=nrk_signal_register(bmac_enable_signal); 
     fac:	80 91 75 05 	lds	r24, 0x0575
     fb0:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
if(v==NRK_ERROR) nrk_kprintf( PSTR("Failed to register signal\r\n"));
     fb4:	8f 3f       	cpi	r24, 0xFF	; 255
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <bmac_nw_task+0x22>
     fb8:	86 e5       	ldi	r24, 0x56	; 86
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
    #ifdef NRK_SW_WDT
	#ifdef BMAC_SW_WDT_ID
	nrk_sw_wdt_update(BMAC_SW_WDT_ID);
	#endif
    #endif
	if(is_enabled ) { 
     fc0:	80 91 54 04 	lds	r24, 0x0454
     fc4:	88 23       	and	r24, r24
     fc6:	59 f1       	breq	.+86     	; 0x101e <bmac_nw_task+0x80>
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
     fc8:	80 91 50 04 	lds	r24, 0x0450
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	41 f4       	brne	.+16     	; 0xfe0 <bmac_nw_task+0x42>
     fd0:	0e 94 02 05 	call	0xa04	; 0xa04 <_bmac_channel_check>
	// If the buffer is full, signal the receiving task again.
	else e=nrk_event_signal (bmac_rx_pkt_signal);
	// bmac_channel check turns on radio, don't turn off if
	// data is coming.
		if(v==0)
     fd4:	88 23       	and	r24, r24
     fd6:	41 f4       	brne	.+16     	; 0xfe8 <bmac_nw_task+0x4a>
			{
			if(_bmac_rx()==1)
     fd8:	0e 94 a2 05 	call	0xb44	; 0xb44 <_bmac_rx>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	21 f4       	brne	.+8      	; 0xfe8 <bmac_nw_task+0x4a>
			  {
				e=nrk_event_signal (bmac_rx_pkt_signal);
     fe0:	80 91 81 05 	lds	r24, 0x0581
     fe4:	0e 94 a3 23 	call	0x4746	; 0x4746 <nrk_event_signal>
				//	printf( "errno: %u \r\n",nrk_errno_get() );
				//}
			  }
			  //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));
			} 
		if(/*rx_buf_empty==1 &&*/ tx_data_ready==1)
     fe8:	80 91 4f 04 	lds	r24, 0x044F
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	21 f4       	brne	.+8      	; 0xff8 <bmac_nw_task+0x5a>
			{
				rf_rx_off(); 
     ff0:	0e 94 ba 10 	call	0x2174	; 0x2174 <rf_rx_off>
				_bmac_tx();
     ff4:	0e 94 1a 05 	call	0xa34	; 0xa34 <_bmac_tx>
			}
	//do {
		nrk_wait(_bmac_check_period); 
     ff8:	20 91 55 04 	lds	r18, 0x0455
     ffc:	30 91 56 04 	lds	r19, 0x0456
    1000:	40 91 57 04 	lds	r20, 0x0457
    1004:	50 91 58 04 	lds	r21, 0x0458
    1008:	60 91 59 04 	lds	r22, 0x0459
    100c:	70 91 5a 04 	lds	r23, 0x045A
    1010:	80 91 5b 04 	lds	r24, 0x045B
    1014:	90 91 5c 04 	lds	r25, 0x045C
    1018:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <nrk_wait>
    101c:	d1 cf       	rjmp	.-94     	; 0xfc0 <bmac_nw_task+0x22>
	//	if(rx_buf_empty!=1)  nrk_event_signal (bmac_rx_pkt_signal);
	//} while(rx_buf_empty!=1);
	} else {
		event=0;
		do {
		v=nrk_signal_register(bmac_enable_signal); 
    101e:	80 91 75 05 	lds	r24, 0x0575
    1022:	0e 94 9b 22 	call	0x4536	; 0x4536 <nrk_signal_register>
    		event=nrk_event_wait (SIG(bmac_enable_signal));
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	00 90 75 05 	lds	r0, 0x0575
    1032:	04 c0       	rjmp	.+8      	; 0x103c <bmac_nw_task+0x9e>
    1034:	66 0f       	add	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	d2 f7       	brpl	.-12     	; 0x1034 <bmac_nw_task+0x96>
    1040:	0e 94 f5 24 	call	0x49ea	; 0x49ea <nrk_event_wait>
		} while((event & SIG(bmac_enable_signal))==0);
    1044:	00 90 75 05 	lds	r0, 0x0575
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <bmac_nw_task+0xb4>
    104a:	96 95       	lsr	r25
    104c:	87 95       	ror	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	0a 94       	dec	r0
    1054:	d2 f7       	brpl	.-12     	; 0x104a <bmac_nw_task+0xac>
    1056:	60 fd       	sbrc	r22, 0
    1058:	b3 cf       	rjmp	.-154    	; 0xfc0 <bmac_nw_task+0x22>
    105a:	e1 cf       	rjmp	.-62     	; 0x101e <bmac_nw_task+0x80>

0000105c <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
    105c:	ea e7       	ldi	r30, 0x7A	; 122
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	80 83       	st	Z, r24
    1064:	ac e7       	ldi	r26, 0x7C	; 124
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	80 e4       	ldi	r24, 0x40	; 64
    106a:	8c 93       	st	X, r24
  ADC_ENABLE ();
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 83       	st	Z, r24
  channel=0;
    1072:	10 92 ac 06 	sts	0x06AC, r1
  ADC_SET_CHANNEL (0);
    1076:	8c 91       	ld	r24, X
    1078:	80 7e       	andi	r24, 0xE0	; 224
    107a:	8c 93       	st	X, r24
    107c:	9c 91       	ld	r25, X
    107e:	8c 91       	ld	r24, X
    1080:	80 7e       	andi	r24, 0xE0	; 224
    1082:	89 2b       	or	r24, r25
    1084:	8c 93       	st	X, r24
    1086:	08 95       	ret

00001088 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
    1088:	88 ec       	ldi	r24, 0xC8	; 200
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    1090:	08 95       	ret

00001092 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
    1092:	80 91 7a 00 	lds	r24, 0x007A
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	80 93 7a 00 	sts	0x007A, r24
    109c:	80 91 7a 00 	lds	r24, 0x007A
    10a0:	84 ff       	sbrs	r24, 4
    10a2:	fc cf       	rjmp	.-8      	; 0x109c <get_adc_val+0xa>
	delay();
    10a4:	0e 94 44 08 	call	0x1088	; 0x1088 <delay>
	ADC_GET_SAMPLE_10(adc_val);
    10a8:	20 91 78 00 	lds	r18, 0x0078
    10ac:	33 27       	eor	r19, r19
    10ae:	80 91 79 00 	lds	r24, 0x0079
    10b2:	99 27       	eor	r25, r25
    10b4:	98 2f       	mov	r25, r24
    10b6:	88 27       	eor	r24, r24
	return adc_val;
}
    10b8:	82 2b       	or	r24, r18
    10ba:	93 2b       	or	r25, r19
    10bc:	08 95       	ret

000010be <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	22 97       	sbiw	r28, 0x02	; 2
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    10d8:	0e 94 b5 0a 	call	0x156a	; 0x156a <rf_get_sem>
    10dc:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
    10e2:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    10e6:	15 9a       	sbi	0x02, 5	; 2
    10e8:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    10ea:	8f 2d       	mov	r24, r15
    10ec:	80 62       	ori	r24, 0x20	; 32
    10ee:	99 27       	eor	r25, r25
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    10f4:	40 98       	cbi	0x08, 0	; 8
    10f6:	8b e1       	ldi	r24, 0x1B	; 27
    10f8:	8e bd       	out	0x2e, r24	; 46
    10fa:	0d b4       	in	r0, 0x2d	; 45
    10fc:	07 fe       	sbrs	r0, 7
    10fe:	fd cf       	rjmp	.-6      	; 0x10fa <read_voltage_status+0x3c>
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	89 2f       	mov	r24, r25
    1106:	99 27       	eor	r25, r25
    1108:	8e bd       	out	0x2e, r24	; 46
    110a:	0d b4       	in	r0, 0x2d	; 45
    110c:	07 fe       	sbrs	r0, 7
    110e:	fd cf       	rjmp	.-6      	; 0x110a <read_voltage_status+0x4c>
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	8e bd       	out	0x2e, r24	; 46
    1116:	0d b4       	in	r0, 0x2d	; 45
    1118:	07 fe       	sbrs	r0, 7
    111a:	fd cf       	rjmp	.-6      	; 0x1116 <read_voltage_status+0x58>
    111c:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    1126:	40 98       	cbi	0x08, 0	; 8
    1128:	8b e5       	ldi	r24, 0x5B	; 91
    112a:	8e bd       	out	0x2e, r24	; 46
    112c:	0d b4       	in	r0, 0x2d	; 45
    112e:	07 fe       	sbrs	r0, 7
    1130:	fd cf       	rjmp	.-6      	; 0x112c <read_voltage_status+0x6e>
    1132:	1e bc       	out	0x2e, r1	; 46
    1134:	0d b4       	in	r0, 0x2d	; 45
    1136:	07 fe       	sbrs	r0, 7
    1138:	fd cf       	rjmp	.-6      	; 0x1134 <read_voltage_status+0x76>
    113a:	8e b5       	in	r24, 0x2e	; 46
    113c:	99 27       	eor	r25, r25
    113e:	98 2f       	mov	r25, r24
    1140:	88 27       	eor	r24, r24
    1142:	9a 83       	std	Y+2, r25	; 0x02
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	1e bc       	out	0x2e, r1	; 46
    1148:	0d b4       	in	r0, 0x2d	; 45
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <read_voltage_status+0x8a>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	2e b5       	in	r18, 0x2e	; 46
    1154:	33 27       	eor	r19, r19
    1156:	28 2b       	or	r18, r24
    1158:	39 2b       	or	r19, r25
    115a:	3a 83       	std	Y+2, r19	; 0x02
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	86 fd       	sbrc	r24, 6
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <read_voltage_status+0xb4>
level++;
    1168:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    116a:	2f e1       	ldi	r18, 0x1F	; 31
    116c:	f2 16       	cp	r15, r18
    116e:	09 f0       	breq	.+2      	; 0x1172 <read_voltage_status+0xb4>
    1170:	bc cf       	rjmp	.-136    	; 0x10ea <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    1172:	01 15       	cp	r16, r1
    1174:	11 05       	cpc	r17, r1
    1176:	19 f0       	breq	.+6      	; 0x117e <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
    1178:	c8 01       	movw	r24, r16
    117a:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
if(level==0)
    117e:	ff 20       	and	r15, r15
    1180:	c9 f4       	brne	.+50     	; 0x11b4 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
    1182:	0e 94 49 08 	call	0x1092	; 0x1092 <get_adc_val>
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	8f 3a       	cpi	r24, 0xAF	; 175
    1190:	91 05       	cpc	r25, r1
    1192:	30 f0       	brcs	.+12     	; 0x11a0 <read_voltage_status+0xe2>
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	8e 5a       	subi	r24, 0xAE	; 174
    119a:	90 40       	sbci	r25, 0x00	; 0
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	8a 54       	subi	r24, 0x4A	; 74
    11a6:	91 40       	sbci	r25, 0x01	; 1
    11a8:	98 f4       	brcc	.+38     	; 0x11d0 <read_voltage_status+0x112>
    11aa:	8a e4       	ldi	r24, 0x4A	; 74
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	0e c0       	rjmp	.+28     	; 0x11d0 <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    11b4:	2d e7       	ldi	r18, 0x7D	; 125
    11b6:	f2 9e       	mul	r15, r18
    11b8:	90 01       	movw	r18, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	88 e2       	ldi	r24, 0x28	; 40
    11be:	93 e2       	ldi	r25, 0x23	; 35
    11c0:	82 1b       	sub	r24, r18
    11c2:	93 0b       	sbc	r25, r19
    11c4:	6b e1       	ldi	r22, 0x1B	; 27
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	0e 94 49 3e 	call	0x7c92	; 0x7c92 <__divmodhi4>
    11cc:	7a 83       	std	Y+2, r23	; 0x02
    11ce:	69 83       	std	Y+1, r22	; 0x01

return val;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	22 96       	adiw	r28, 0x02	; 2
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	08 95       	ret

000011ec <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	98 2f       	mov	r25, r24
    11fe:	ea 01       	movw	r28, r20
    1200:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	09 f4       	brne	.+2      	; 0x1208 <dev_manager_ff_sensors+0x1c>
    1206:	81 c0       	rjmp	.+258    	; 0x130a <dev_manager_ff_sensors+0x11e>
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	30 f4       	brcc	.+12     	; 0x1218 <dev_manager_ff_sensors+0x2c>
    120c:	88 23       	and	r24, r24
    120e:	71 f0       	breq	.+28     	; 0x122c <dev_manager_ff_sensors+0x40>
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	09 f0       	breq	.+2      	; 0x1216 <dev_manager_ff_sensors+0x2a>
    1214:	d2 c0       	rjmp	.+420    	; 0x13ba <dev_manager_ff_sensors+0x1ce>
    1216:	10 c0       	rjmp	.+32     	; 0x1238 <dev_manager_ff_sensors+0x4c>
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	09 f4       	brne	.+2      	; 0x121e <dev_manager_ff_sensors+0x32>
    121c:	81 c0       	rjmp	.+258    	; 0x1320 <dev_manager_ff_sensors+0x134>
    121e:	84 30       	cpi	r24, 0x04	; 4
    1220:	08 f4       	brcc	.+2      	; 0x1224 <dev_manager_ff_sensors+0x38>
    1222:	77 c0       	rjmp	.+238    	; 0x1312 <dev_manager_ff_sensors+0x126>
    1224:	85 30       	cpi	r24, 0x05	; 5
    1226:	09 f0       	breq	.+2      	; 0x122a <dev_manager_ff_sensors+0x3e>
    1228:	c8 c0       	rjmp	.+400    	; 0x13ba <dev_manager_ff_sensors+0x1ce>
    122a:	2d c0       	rjmp	.+90     	; 0x1286 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    1230:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    1232:	0e 94 2e 08 	call	0x105c	; 0x105c <init_adc>
    1236:	6a c0       	rjmp	.+212    	; 0x130c <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    1238:	80 91 ab 06 	lds	r24, 0x06AB
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	09 f4       	brne	.+2      	; 0x1242 <dev_manager_ff_sensors+0x56>
    1240:	c3 c0       	rjmp	.+390    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
    1242:	90 93 ab 06 	sts	0x06AB, r25
		    if(opt&READ_FLAG)
    1246:	77 27       	eor	r23, r23
    1248:	60 ff       	sbrs	r22, 0
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    124c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    124e:	10 92 ac 06 	sts	0x06AC, r1
  			ADC_SET_CHANNEL (0);
    1252:	80 91 7c 00 	lds	r24, 0x007C
    1256:	80 7e       	andi	r24, 0xE0	; 224
    1258:	80 93 7c 00 	sts	0x007C, r24
    125c:	90 91 7c 00 	lds	r25, 0x007C
    1260:	80 91 7c 00 	lds	r24, 0x007C
    1264:	80 7e       	andi	r24, 0xE0	; 224
    1266:	89 2b       	or	r24, r25
    1268:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    126c:	88 ee       	ldi	r24, 0xE8	; 232
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	9f c0       	rjmp	.+318    	; 0x13b0 <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    1272:	61 fd       	sbrc	r22, 1
    1274:	a9 c0       	rjmp	.+338    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    1276:	62 fd       	sbrc	r22, 2
    1278:	a7 c0       	rjmp	.+334    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    127a:	67 70       	andi	r22, 0x07	; 7
    127c:	70 70       	andi	r23, 0x00	; 0
    127e:	67 2b       	or	r22, r23
    1280:	09 f4       	brne	.+2      	; 0x1284 <dev_manager_ff_sensors+0x98>
    1282:	a2 c0       	rjmp	.+324    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
    1284:	97 c0       	rjmp	.+302    	; 0x13b4 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    1286:	82 2f       	mov	r24, r18
    1288:	81 50       	subi	r24, 0x01	; 1
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	08 f0       	brcs	.+2      	; 0x1290 <dev_manager_ff_sensors+0xa4>
    128e:	99 c0       	rjmp	.+306    	; 0x13c2 <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
    1290:	90 91 ac 06 	lds	r25, 0x06AC
    1294:	89 2f       	mov	r24, r25
    1296:	81 50       	subi	r24, 0x01	; 1
    1298:	86 30       	cpi	r24, 0x06	; 6
    129a:	18 f4       	brcc	.+6      	; 0x12a2 <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    129c:	0e 94 49 08 	call	0x1092	; 0x1092 <get_adc_val>
    12a0:	22 c0       	rjmp	.+68     	; 0x12e6 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    12a2:	99 23       	and	r25, r25
    12a4:	19 f4       	brne	.+6      	; 0x12ac <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    12a6:	0e 94 5f 08 	call	0x10be	; 0x10be <read_voltage_status>
    12aa:	1d c0       	rjmp	.+58     	; 0x12e6 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    12ac:	97 30       	cpi	r25, 0x07	; 7
    12ae:	51 f5       	brne	.+84     	; 0x1304 <dev_manager_ff_sensors+0x118>
    12b0:	f1 e0       	ldi	r31, 0x01	; 1
    12b2:	cf 2e       	mov	r12, r31
    12b4:	f4 e0       	ldi	r31, 0x04	; 4
    12b6:	df 2e       	mov	r13, r31
    12b8:	ee 24       	eor	r14, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    12be:	0e 94 49 08 	call	0x1092	; 0x1092 <get_adc_val>
    12c2:	8c 15       	cp	r24, r12
    12c4:	9d 05       	cpc	r25, r13
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <dev_manager_ff_sensors+0xde>
    12c8:	6c 01       	movw	r12, r24
    12ca:	e8 16       	cp	r14, r24
    12cc:	f9 06       	cpc	r15, r25
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <dev_manager_ff_sensors+0xe6>
    12d0:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    12d2:	8d e7       	ldi	r24, 0x7D	; 125
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    12da:	0f 5f       	subi	r16, 0xFF	; 255
    12dc:	00 34       	cpi	r16, 0x40	; 64
    12de:	79 f7       	brne	.-34     	; 0x12be <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    12e0:	c7 01       	movw	r24, r14
    12e2:	8c 19       	sub	r24, r12
    12e4:	9d 09       	sbc	r25, r13
				if(size==2)
    12e6:	12 30       	cpi	r17, 0x02	; 2
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
    12ea:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    12ec:	89 2f       	mov	r24, r25
    12ee:	99 27       	eor	r25, r25
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
    12f6:	11 30       	cpi	r17, 0x01	; 1
    12f8:	29 f4       	brne	.+10     	; 0x1304 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	88 83       	st	Y, r24
    1304:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	09 c0       	rjmp	.+18     	; 0x131c <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    130a:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    130c:	10 92 ab 06 	sts	0x06AB, r1
    1310:	51 c0       	rjmp	.+162    	; 0x13b4 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    1312:	61 30       	cpi	r22, 0x01	; 1
    1314:	09 f0       	breq	.+2      	; 0x1318 <dev_manager_ff_sensors+0x12c>
    1316:	58 c0       	rjmp	.+176    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
    1318:	80 91 ac 06 	lds	r24, 0x06AC
    131c:	99 27       	eor	r25, r25
    131e:	56 c0       	rjmp	.+172    	; 0x13cc <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    1320:	61 30       	cpi	r22, 0x01	; 1
    1322:	09 f0       	breq	.+2      	; 0x1326 <dev_manager_ff_sensors+0x13a>
    1324:	51 c0       	rjmp	.+162    	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    1326:	27 30       	cpi	r18, 0x07	; 7
    1328:	d9 f4       	brne	.+54     	; 0x1360 <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
    132a:	20 93 ac 06 	sts	0x06AC, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    132e:	80 91 7c 00 	lds	r24, 0x007C
    1332:	8f 77       	andi	r24, 0x7F	; 127
    1334:	80 93 7c 00 	sts	0x007C, r24
    1338:	80 91 7c 00 	lds	r24, 0x007C
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    1342:	80 91 7c 00 	lds	r24, 0x007C
    1346:	80 7e       	andi	r24, 0xE0	; 224
    1348:	80 93 7c 00 	sts	0x007C, r24
    134c:	90 91 7c 00 	lds	r25, 0x007C
    1350:	80 91 7c 00 	lds	r24, 0x007C
    1354:	93 60       	ori	r25, 0x03	; 3
    1356:	80 7e       	andi	r24, 0xE0	; 224
    1358:	98 2b       	or	r25, r24
    135a:	90 93 7c 00 	sts	0x007C, r25
    135e:	26 c0       	rjmp	.+76     	; 0x13ac <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    1360:	28 30       	cpi	r18, 0x08	; 8
    1362:	20 f0       	brcs	.+8      	; 0x136c <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    136a:	2e c0       	rjmp	.+92     	; 0x13c8 <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
    136c:	20 93 ac 06 	sts	0x06AC, r18
				if(channel==LIGHT)
    1370:	21 30       	cpi	r18, 0x01	; 1
    1372:	49 f4       	brne	.+18     	; 0x1386 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
    1374:	80 91 7c 00 	lds	r24, 0x007C
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	80 93 7c 00 	sts	0x007C, r24
    137e:	80 91 7c 00 	lds	r24, 0x007C
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	03 c0       	rjmp	.+6      	; 0x138c <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
    1386:	80 91 7c 00 	lds	r24, 0x007C
    138a:	80 6c       	ori	r24, 0xC0	; 192
    138c:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    1390:	80 91 7c 00 	lds	r24, 0x007C
    1394:	80 7e       	andi	r24, 0xE0	; 224
    1396:	80 93 7c 00 	sts	0x007C, r24
    139a:	90 91 7c 00 	lds	r25, 0x007C
    139e:	80 91 7c 00 	lds	r24, 0x007C
    13a2:	80 7e       	andi	r24, 0xE0	; 224
    13a4:	89 2b       	or	r24, r25
    13a6:	81 2b       	or	r24, r17
    13a8:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    13ac:	88 ec       	ldi	r24, 0xC8	; 200
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	8c e0       	ldi	r24, 0x0C	; 12
    13be:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <dev_manager_ff_sensors+0x1e0>
		 return 0;
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	08 95       	ret

000013de <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    13de:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    13e0:	9c 01       	movw	r18, r24
    13e2:	26 5a       	subi	r18, 0xA6	; 166
    13e4:	3e 4b       	sbci	r19, 0xBE	; 190
    13e6:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	28 0f       	add	r18, r24
    13f2:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    13f4:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    13f6:	40 98       	cbi	0x08, 0	; 8
    13f8:	88 e1       	ldi	r24, 0x18	; 24
    13fa:	8e bd       	out	0x2e, r24	; 46
    13fc:	0d b4       	in	r0, 0x2d	; 45
    13fe:	07 fe       	sbrs	r0, 7
    1400:	fd cf       	rjmp	.-6      	; 0x13fc <halRfSetChannel+0x1e>
    1402:	83 2f       	mov	r24, r19
    1404:	99 27       	eor	r25, r25
    1406:	8e bd       	out	0x2e, r24	; 46
    1408:	0d b4       	in	r0, 0x2d	; 45
    140a:	07 fe       	sbrs	r0, 7
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <halRfSetChannel+0x2a>
    140e:	2e bd       	out	0x2e, r18	; 46
    1410:	0d b4       	in	r0, 0x2d	; 45
    1412:	07 fe       	sbrs	r0, 7
    1414:	fd cf       	rjmp	.-6      	; 0x1410 <halRfSetChannel+0x32>
    1416:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
    1418:	78 94       	sei
    141a:	08 95       	ret

0000141c <halRfWaitForCrystalOscillator>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    141c:	f8 94       	cli

    141e:	40 98       	cbi	0x08, 0	; 8
    1420:	1e bc       	out	0x2e, r1	; 46
    1422:	0d b4       	in	r0, 0x2d	; 45
    1424:	07 fe       	sbrs	r0, 7
    1426:	fd cf       	rjmp	.-6      	; 0x1422 <halRfWaitForCrystalOscillator+0x6>
    1428:	8e b5       	in	r24, 0x2e	; 46
    142a:	40 9a       	sbi	0x08, 0	; 8
// VREF is set to VCC by default
    142c:	78 94       	sei
#define ADC_INIT() \
    142e:	86 ff       	sbrs	r24, 6
    1430:	f5 cf       	rjmp	.-22     	; 0x141c <halRfWaitForCrystalOscillator>
    1432:	08 95       	ret

00001434 <set_rf_rx_callback>:
//
//	PARAMETERS:
//		UINT8 channel
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
    1434:	90 93 60 04 	sts	0x0460, r25
    1438:	80 93 5f 04 	sts	0x045F, r24
    143c:	08 95       	ret

0000143e <rf_power_down>:
    143e:	f8 94       	cli
    1440:	40 98       	cbi	0x08, 0	; 8
    1442:	87 e0       	ldi	r24, 0x07	; 7
    1444:	8e bd       	out	0x2e, r24	; 46
    1446:	0d b4       	in	r0, 0x2d	; 45
    1448:	07 fe       	sbrs	r0, 7
    144a:	fd cf       	rjmp	.-6      	; 0x1446 <rf_power_down+0x8>
    144c:	40 9a       	sbi	0x08, 0	; 8
    144e:	40 98       	cbi	0x08, 0	; 8
    1450:	86 e0       	ldi	r24, 0x06	; 6
    1452:	8e bd       	out	0x2e, r24	; 46
    1454:	0d b4       	in	r0, 0x2d	; 45
    1456:	07 fe       	sbrs	r0, 7
    1458:	fd cf       	rjmp	.-6      	; 0x1454 <rf_power_down+0x16>
    145a:	40 9a       	sbi	0x08, 0	; 8
    145c:	78 94       	sei
    145e:	08 95       	ret

00001460 <rf_security_last_pkt_status>:
    1460:	80 91 c2 06 	lds	r24, 0x06C2
    1464:	99 27       	eor	r25, r25
    1466:	08 95       	ret

00001468 <rf_security_set_ctr_counter>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	dc 01       	movw	r26, r24
    146e:	40 98       	cbi	0x08, 0	; 8
    1470:	89 ec       	ldi	r24, 0xC9	; 201
    1472:	8e bd       	out	0x2e, r24	; 46
    1474:	0d b4       	in	r0, 0x2d	; 45
    1476:	07 fe       	sbrs	r0, 7
    1478:	fd cf       	rjmp	.-6      	; 0x1474 <rf_security_set_ctr_counter+0xc>
    147a:	80 e8       	ldi	r24, 0x80	; 128
    147c:	8e bd       	out	0x2e, r24	; 46
    147e:	0d b4       	in	r0, 0x2d	; 45
    1480:	07 fe       	sbrs	r0, 7
    1482:	fd cf       	rjmp	.-6      	; 0x147e <rf_security_set_ctr_counter+0x16>
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	fd 01       	movw	r30, r26
    148a:	e9 0f       	add	r30, r25
    148c:	f1 1d       	adc	r31, r1
    148e:	80 81       	ld	r24, Z
    1490:	8e bd       	out	0x2e, r24	; 46
    1492:	0d b4       	in	r0, 0x2d	; 45
    1494:	07 fe       	sbrs	r0, 7
    1496:	fd cf       	rjmp	.-6      	; 0x1492 <rf_security_set_ctr_counter+0x2a>
    1498:	99 23       	and	r25, r25
    149a:	a9 f7       	brne	.-22     	; 0x1486 <rf_security_set_ctr_counter+0x1e>
    149c:	40 9a       	sbi	0x08, 0	; 8
    149e:	40 98       	cbi	0x08, 0	; 8
    14a0:	8b ec       	ldi	r24, 0xCB	; 203
    14a2:	8e bd       	out	0x2e, r24	; 46
    14a4:	0d b4       	in	r0, 0x2d	; 45
    14a6:	07 fe       	sbrs	r0, 7
    14a8:	fd cf       	rjmp	.-6      	; 0x14a4 <rf_security_set_ctr_counter+0x3c>
    14aa:	80 e8       	ldi	r24, 0x80	; 128
    14ac:	8e bd       	out	0x2e, r24	; 46
    14ae:	0d b4       	in	r0, 0x2d	; 45
    14b0:	07 fe       	sbrs	r0, 7
    14b2:	fd cf       	rjmp	.-6      	; 0x14ae <rf_security_set_ctr_counter+0x46>
    14b4:	92 e0       	ldi	r25, 0x02	; 2
    14b6:	9d 01       	movw	r18, r26
    14b8:	2e 5f       	subi	r18, 0xFE	; 254
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	e9 01       	movw	r28, r18
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	f9 01       	movw	r30, r18
    14c2:	e9 0f       	add	r30, r25
    14c4:	f1 1d       	adc	r31, r1
    14c6:	80 81       	ld	r24, Z
    14c8:	8e bd       	out	0x2e, r24	; 46
    14ca:	0d b4       	in	r0, 0x2d	; 45
    14cc:	07 fe       	sbrs	r0, 7
    14ce:	fd cf       	rjmp	.-6      	; 0x14ca <rf_security_set_ctr_counter+0x62>
    14d0:	99 23       	and	r25, r25
    14d2:	a1 f7       	brne	.-24     	; 0x14bc <rf_security_set_ctr_counter+0x54>
    14d4:	40 9a       	sbi	0x08, 0	; 8
    14d6:	8c 91       	ld	r24, X
    14d8:	80 93 c3 06 	sts	0x06C3, r24
    14dc:	fd 01       	movw	r30, r26
    14de:	81 81       	ldd	r24, Z+1	; 0x01
    14e0:	80 93 c4 06 	sts	0x06C4, r24
    14e4:	88 81       	ld	r24, Y
    14e6:	80 93 c5 06 	sts	0x06C5, r24
    14ea:	83 81       	ldd	r24, Z+3	; 0x03
    14ec:	80 93 c6 06 	sts	0x06C6, r24
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <rf_security_enable>:
    14f6:	40 98       	cbi	0x08, 0	; 8
    14f8:	89 e1       	ldi	r24, 0x19	; 25
    14fa:	8e bd       	out	0x2e, r24	; 46
    14fc:	0d b4       	in	r0, 0x2d	; 45
    14fe:	07 fe       	sbrs	r0, 7
    1500:	fd cf       	rjmp	.-6      	; 0x14fc <rf_security_enable+0x6>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	8e bd       	out	0x2e, r24	; 46
    1506:	0d b4       	in	r0, 0x2d	; 45
    1508:	07 fe       	sbrs	r0, 7
    150a:	fd cf       	rjmp	.-6      	; 0x1506 <rf_security_enable+0x10>
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	8e bd       	out	0x2e, r24	; 46
    1510:	0d b4       	in	r0, 0x2d	; 45
    1512:	07 fe       	sbrs	r0, 7
    1514:	fd cf       	rjmp	.-6      	; 0x1510 <rf_security_enable+0x1a>
    1516:	40 9a       	sbi	0x08, 0	; 8
    1518:	40 98       	cbi	0x08, 0	; 8
    151a:	8a e1       	ldi	r24, 0x1A	; 26
    151c:	8e bd       	out	0x2e, r24	; 46
    151e:	0d b4       	in	r0, 0x2d	; 45
    1520:	07 fe       	sbrs	r0, 7
    1522:	fd cf       	rjmp	.-6      	; 0x151e <rf_security_enable+0x28>
    1524:	8e e0       	ldi	r24, 0x0E	; 14
    1526:	8e bd       	out	0x2e, r24	; 46
    1528:	0d b4       	in	r0, 0x2d	; 45
    152a:	07 fe       	sbrs	r0, 7
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <rf_security_enable+0x32>
    152e:	8e e0       	ldi	r24, 0x0E	; 14
    1530:	8e bd       	out	0x2e, r24	; 46
    1532:	0d b4       	in	r0, 0x2d	; 45
    1534:	07 fe       	sbrs	r0, 7
    1536:	fd cf       	rjmp	.-6      	; 0x1532 <rf_security_enable+0x3c>
    1538:	40 9a       	sbi	0x08, 0	; 8
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 b3 06 	sts	0x06B3, r24
    1540:	08 95       	ret

00001542 <rf_security_disable>:
    1542:	40 98       	cbi	0x08, 0	; 8
    1544:	89 e1       	ldi	r24, 0x19	; 25
    1546:	8e bd       	out	0x2e, r24	; 46
    1548:	0d b4       	in	r0, 0x2d	; 45
    154a:	07 fe       	sbrs	r0, 7
    154c:	fd cf       	rjmp	.-6      	; 0x1548 <rf_security_disable+0x6>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8e bd       	out	0x2e, r24	; 46
    1552:	0d b4       	in	r0, 0x2d	; 45
    1554:	07 fe       	sbrs	r0, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <rf_security_disable+0x10>
    1558:	84 ec       	ldi	r24, 0xC4	; 196
    155a:	8e bd       	out	0x2e, r24	; 46
    155c:	0d b4       	in	r0, 0x2d	; 45
    155e:	07 fe       	sbrs	r0, 7
    1560:	fd cf       	rjmp	.-6      	; 0x155c <rf_security_disable+0x1a>
    1562:	40 9a       	sbi	0x08, 0	; 8
    1564:	10 92 b3 06 	sts	0x06B3, r1
    1568:	08 95       	ret

0000156a <rf_get_sem>:
    156a:	80 91 b1 06 	lds	r24, 0x06B1
    156e:	90 91 b2 06 	lds	r25, 0x06B2
    1572:	08 95       	ret

00001574 <rf_addr_decode_enable>:
    1574:	20 91 b4 06 	lds	r18, 0x06B4
    1578:	30 91 b5 06 	lds	r19, 0x06B5
    157c:	38 60       	ori	r19, 0x08	; 8
    157e:	30 93 b5 06 	sts	0x06B5, r19
    1582:	20 93 b4 06 	sts	0x06B4, r18
    1586:	40 98       	cbi	0x08, 0	; 8
    1588:	81 e1       	ldi	r24, 0x11	; 17
    158a:	8e bd       	out	0x2e, r24	; 46
    158c:	0d b4       	in	r0, 0x2d	; 45
    158e:	07 fe       	sbrs	r0, 7
    1590:	fd cf       	rjmp	.-6      	; 0x158c <rf_addr_decode_enable+0x18>
    1592:	83 2f       	mov	r24, r19
    1594:	99 27       	eor	r25, r25
    1596:	8e bd       	out	0x2e, r24	; 46
    1598:	0d b4       	in	r0, 0x2d	; 45
    159a:	07 fe       	sbrs	r0, 7
    159c:	fd cf       	rjmp	.-6      	; 0x1598 <rf_addr_decode_enable+0x24>
    159e:	2e bd       	out	0x2e, r18	; 46
    15a0:	0d b4       	in	r0, 0x2d	; 45
    15a2:	07 fe       	sbrs	r0, 7
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <rf_addr_decode_enable+0x2c>
    15a6:	40 9a       	sbi	0x08, 0	; 8
    15a8:	08 95       	ret

000015aa <rf_addr_decode_disable>:
    15aa:	20 91 b4 06 	lds	r18, 0x06B4
    15ae:	30 91 b5 06 	lds	r19, 0x06B5
    15b2:	37 7f       	andi	r19, 0xF7	; 247
    15b4:	30 93 b5 06 	sts	0x06B5, r19
    15b8:	20 93 b4 06 	sts	0x06B4, r18
    15bc:	40 98       	cbi	0x08, 0	; 8
    15be:	81 e1       	ldi	r24, 0x11	; 17
    15c0:	8e bd       	out	0x2e, r24	; 46
    15c2:	0d b4       	in	r0, 0x2d	; 45
    15c4:	07 fe       	sbrs	r0, 7
    15c6:	fd cf       	rjmp	.-6      	; 0x15c2 <rf_addr_decode_disable+0x18>
    15c8:	83 2f       	mov	r24, r19
    15ca:	99 27       	eor	r25, r25
    15cc:	8e bd       	out	0x2e, r24	; 46
    15ce:	0d b4       	in	r0, 0x2d	; 45
    15d0:	07 fe       	sbrs	r0, 7
    15d2:	fd cf       	rjmp	.-6      	; 0x15ce <rf_addr_decode_disable+0x24>
    15d4:	2e bd       	out	0x2e, r18	; 46
    15d6:	0d b4       	in	r0, 0x2d	; 45
    15d8:	07 fe       	sbrs	r0, 7
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <rf_addr_decode_disable+0x2c>
    15dc:	40 9a       	sbi	0x08, 0	; 8
    15de:	08 95       	ret

000015e0 <rf_auto_ack_enable>:
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	80 93 c1 06 	sts	0x06C1, r24
    15e6:	20 91 b4 06 	lds	r18, 0x06B4
    15ea:	30 91 b5 06 	lds	r19, 0x06B5
    15ee:	20 61       	ori	r18, 0x10	; 16
    15f0:	30 93 b5 06 	sts	0x06B5, r19
    15f4:	20 93 b4 06 	sts	0x06B4, r18
    15f8:	40 98       	cbi	0x08, 0	; 8
    15fa:	81 e1       	ldi	r24, 0x11	; 17
    15fc:	8e bd       	out	0x2e, r24	; 46
    15fe:	0d b4       	in	r0, 0x2d	; 45
    1600:	07 fe       	sbrs	r0, 7
    1602:	fd cf       	rjmp	.-6      	; 0x15fe <rf_auto_ack_enable+0x1e>
    1604:	83 2f       	mov	r24, r19
    1606:	99 27       	eor	r25, r25
    1608:	8e bd       	out	0x2e, r24	; 46
    160a:	0d b4       	in	r0, 0x2d	; 45
    160c:	07 fe       	sbrs	r0, 7
    160e:	fd cf       	rjmp	.-6      	; 0x160a <rf_auto_ack_enable+0x2a>
    1610:	2e bd       	out	0x2e, r18	; 46
    1612:	0d b4       	in	r0, 0x2d	; 45
    1614:	07 fe       	sbrs	r0, 7
    1616:	fd cf       	rjmp	.-6      	; 0x1612 <rf_auto_ack_enable+0x32>
    1618:	40 9a       	sbi	0x08, 0	; 8
    161a:	08 95       	ret

0000161c <rf_auto_ack_disable>:
    161c:	10 92 c1 06 	sts	0x06C1, r1
    1620:	20 91 b4 06 	lds	r18, 0x06B4
    1624:	30 91 b5 06 	lds	r19, 0x06B5
    1628:	2f 7e       	andi	r18, 0xEF	; 239
    162a:	30 93 b5 06 	sts	0x06B5, r19
    162e:	20 93 b4 06 	sts	0x06B4, r18
    1632:	40 98       	cbi	0x08, 0	; 8
    1634:	81 e1       	ldi	r24, 0x11	; 17
    1636:	8e bd       	out	0x2e, r24	; 46
    1638:	0d b4       	in	r0, 0x2d	; 45
    163a:	07 fe       	sbrs	r0, 7
    163c:	fd cf       	rjmp	.-6      	; 0x1638 <rf_auto_ack_disable+0x1c>
    163e:	83 2f       	mov	r24, r19
    1640:	99 27       	eor	r25, r25
    1642:	8e bd       	out	0x2e, r24	; 46
    1644:	0d b4       	in	r0, 0x2d	; 45
    1646:	07 fe       	sbrs	r0, 7
    1648:	fd cf       	rjmp	.-6      	; 0x1644 <rf_auto_ack_disable+0x28>
    164a:	2e bd       	out	0x2e, r18	; 46
    164c:	0d b4       	in	r0, 0x2d	; 45
    164e:	07 fe       	sbrs	r0, 7
    1650:	fd cf       	rjmp	.-6      	; 0x164c <rf_auto_ack_disable+0x30>
    1652:	40 9a       	sbi	0x08, 0	; 8
    1654:	08 95       	ret

00001656 <rf_busy>:
    1656:	89 b1       	in	r24, 0x09	; 9
    1658:	99 27       	eor	r25, r25
    165a:	66 e0       	ldi	r22, 0x06	; 6
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	6a 95       	dec	r22
    1662:	e1 f7       	brne	.-8      	; 0x165c <rf_busy+0x6>
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	90 70       	andi	r25, 0x00	; 0
    1668:	08 95       	ret

0000166a <rf_rx_check_fifop>:
    166a:	8c b1       	in	r24, 0x0c	; 12
    166c:	99 27       	eor	r25, r25
    166e:	87 fd       	sbrc	r24, 7
    1670:	90 95       	com	r25
    1672:	88 27       	eor	r24, r24
    1674:	99 0f       	add	r25, r25
    1676:	88 1f       	adc	r24, r24
    1678:	99 27       	eor	r25, r25
    167a:	08 95       	ret

0000167c <rf_rx_check_sfd>:
    167c:	89 b1       	in	r24, 0x09	; 9
    167e:	99 27       	eor	r25, r25
    1680:	e6 e0       	ldi	r30, 0x06	; 6
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	ea 95       	dec	r30
    1688:	e1 f7       	brne	.-8      	; 0x1682 <rf_rx_check_sfd+0x6>
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	08 95       	ret

00001690 <rf_rx_packet>:
    1690:	80 91 c7 06 	lds	r24, 0x06C7
    1694:	88 23       	and	r24, r24
    1696:	19 f4       	brne	.+6      	; 0x169e <rf_rx_packet+0xe>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	08 95       	ret
    169e:	80 91 c7 06 	lds	r24, 0x06C7
    16a2:	10 92 c7 06 	sts	0x06C7, r1
    16a6:	99 27       	eor	r25, r25
    16a8:	87 fd       	sbrc	r24, 7
    16aa:	90 95       	com	r25
    16ac:	08 95       	ret

000016ae <rf_flush_rx_fifo>:
    16ae:	40 98       	cbi	0x08, 0	; 8
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	8e bd       	out	0x2e, r24	; 46
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fe       	sbrs	r0, 7
    16b8:	fd cf       	rjmp	.-6      	; 0x16b4 <rf_flush_rx_fifo+0x6>
    16ba:	40 9a       	sbi	0x08, 0	; 8
    16bc:	40 98       	cbi	0x08, 0	; 8
    16be:	88 e0       	ldi	r24, 0x08	; 8
    16c0:	8e bd       	out	0x2e, r24	; 46
    16c2:	0d b4       	in	r0, 0x2d	; 45
    16c4:	07 fe       	sbrs	r0, 7
    16c6:	fd cf       	rjmp	.-6      	; 0x16c2 <rf_flush_rx_fifo+0x14>
    16c8:	40 9a       	sbi	0x08, 0	; 8
    16ca:	08 95       	ret

000016cc <rf_rx_set_serial>:
    16cc:	40 98       	cbi	0x08, 0	; 8
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	8e bd       	out	0x2e, r24	; 46
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <rf_rx_set_serial+0x6>
    16d8:	40 9a       	sbi	0x08, 0	; 8
    16da:	40 98       	cbi	0x08, 0	; 8
    16dc:	82 e1       	ldi	r24, 0x12	; 18
    16de:	8e bd       	out	0x2e, r24	; 46
    16e0:	0d b4       	in	r0, 0x2d	; 45
    16e2:	07 fe       	sbrs	r0, 7
    16e4:	fd cf       	rjmp	.-6      	; 0x16e0 <rf_rx_set_serial+0x14>
    16e6:	85 e0       	ldi	r24, 0x05	; 5
    16e8:	8e bd       	out	0x2e, r24	; 46
    16ea:	0d b4       	in	r0, 0x2d	; 45
    16ec:	07 fe       	sbrs	r0, 7
    16ee:	fd cf       	rjmp	.-6      	; 0x16ea <rf_rx_set_serial+0x1e>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	8e bd       	out	0x2e, r24	; 46
    16f4:	0d b4       	in	r0, 0x2d	; 45
    16f6:	07 fe       	sbrs	r0, 7
    16f8:	fd cf       	rjmp	.-6      	; 0x16f4 <rf_rx_set_serial+0x28>
    16fa:	40 9a       	sbi	0x08, 0	; 8
    16fc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <rf_flush_rx_fifo>
    1700:	08 95       	ret

00001702 <rf_tx_set_serial>:
    1702:	40 98       	cbi	0x08, 0	; 8
    1704:	82 e1       	ldi	r24, 0x12	; 18
    1706:	8e bd       	out	0x2e, r24	; 46
    1708:	0d b4       	in	r0, 0x2d	; 45
    170a:	07 fe       	sbrs	r0, 7
    170c:	fd cf       	rjmp	.-6      	; 0x1708 <rf_tx_set_serial+0x6>
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	8e bd       	out	0x2e, r24	; 46
    1712:	0d b4       	in	r0, 0x2d	; 45
    1714:	07 fe       	sbrs	r0, 7
    1716:	fd cf       	rjmp	.-6      	; 0x1712 <rf_tx_set_serial+0x10>
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	8e bd       	out	0x2e, r24	; 46
    171c:	0d b4       	in	r0, 0x2d	; 45
    171e:	07 fe       	sbrs	r0, 7
    1720:	fd cf       	rjmp	.-6      	; 0x171c <rf_tx_set_serial+0x1a>
    1722:	40 9a       	sbi	0x08, 0	; 8
    1724:	0e 94 57 0b 	call	0x16ae	; 0x16ae <rf_flush_rx_fifo>
    1728:	08 95       	ret

0000172a <rf_set_preamble_length>:
    172a:	28 2f       	mov	r18, r24
    172c:	33 27       	eor	r19, r19
    172e:	2f 70       	andi	r18, 0x0F	; 15
    1730:	30 70       	andi	r19, 0x00	; 0
    1732:	80 91 b4 06 	lds	r24, 0x06B4
    1736:	90 91 b5 06 	lds	r25, 0x06B5
    173a:	80 7f       	andi	r24, 0xF0	; 240
    173c:	28 2b       	or	r18, r24
    173e:	39 2b       	or	r19, r25
    1740:	30 93 b5 06 	sts	0x06B5, r19
    1744:	20 93 b4 06 	sts	0x06B4, r18
    1748:	40 98       	cbi	0x08, 0	; 8
    174a:	81 e1       	ldi	r24, 0x11	; 17
    174c:	8e bd       	out	0x2e, r24	; 46
    174e:	0d b4       	in	r0, 0x2d	; 45
    1750:	07 fe       	sbrs	r0, 7
    1752:	fd cf       	rjmp	.-6      	; 0x174e <rf_set_preamble_length+0x24>
    1754:	83 2f       	mov	r24, r19
    1756:	99 27       	eor	r25, r25
    1758:	8e bd       	out	0x2e, r24	; 46
    175a:	0d b4       	in	r0, 0x2d	; 45
    175c:	07 fe       	sbrs	r0, 7
    175e:	fd cf       	rjmp	.-6      	; 0x175a <rf_set_preamble_length+0x30>
    1760:	2e bd       	out	0x2e, r18	; 46
    1762:	0d b4       	in	r0, 0x2d	; 45
    1764:	07 fe       	sbrs	r0, 7
    1766:	fd cf       	rjmp	.-6      	; 0x1762 <rf_set_preamble_length+0x38>
    1768:	40 9a       	sbi	0x08, 0	; 8
    176a:	08 95       	ret

0000176c <rf_set_cca_mode>:
    176c:	28 2f       	mov	r18, r24
    176e:	33 27       	eor	r19, r19
    1770:	23 70       	andi	r18, 0x03	; 3
    1772:	30 70       	andi	r19, 0x00	; 0
    1774:	b6 e0       	ldi	r27, 0x06	; 6
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	ba 95       	dec	r27
    177c:	e1 f7       	brne	.-8      	; 0x1776 <rf_set_cca_mode+0xa>
    177e:	80 91 b4 06 	lds	r24, 0x06B4
    1782:	90 91 b5 06 	lds	r25, 0x06B5
    1786:	8f 73       	andi	r24, 0x3F	; 63
    1788:	28 2b       	or	r18, r24
    178a:	39 2b       	or	r19, r25
    178c:	30 93 b5 06 	sts	0x06B5, r19
    1790:	20 93 b4 06 	sts	0x06B4, r18
    1794:	40 98       	cbi	0x08, 0	; 8
    1796:	81 e1       	ldi	r24, 0x11	; 17
    1798:	8e bd       	out	0x2e, r24	; 46
    179a:	0d b4       	in	r0, 0x2d	; 45
    179c:	07 fe       	sbrs	r0, 7
    179e:	fd cf       	rjmp	.-6      	; 0x179a <rf_set_cca_mode+0x2e>
    17a0:	83 2f       	mov	r24, r19
    17a2:	99 27       	eor	r25, r25
    17a4:	8e bd       	out	0x2e, r24	; 46
    17a6:	0d b4       	in	r0, 0x2d	; 45
    17a8:	07 fe       	sbrs	r0, 7
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <rf_set_cca_mode+0x3a>
    17ac:	2e bd       	out	0x2e, r18	; 46
    17ae:	0d b4       	in	r0, 0x2d	; 45
    17b0:	07 fe       	sbrs	r0, 7
    17b2:	fd cf       	rjmp	.-6      	; 0x17ae <rf_set_cca_mode+0x42>
    17b4:	40 9a       	sbi	0x08, 0	; 8
    17b6:	08 95       	ret

000017b8 <__vector_8>:
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	2f 93       	push	r18
    17c4:	3f 93       	push	r19
    17c6:	4f 93       	push	r20
    17c8:	5f 93       	push	r21
    17ca:	6f 93       	push	r22
    17cc:	7f 93       	push	r23
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
    17d2:	af 93       	push	r26
    17d4:	bf 93       	push	r27
    17d6:	ef 93       	push	r30
    17d8:	ff 93       	push	r31
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	24 97       	sbiw	r28, 0x04	; 4
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	80 e8       	ldi	r24, 0x80	; 128
    17ea:	8c bb       	out	0x1c, r24	; 28
    17ec:	67 9b       	sbis	0x0c, 7	; 12
    17ee:	97 c1       	rjmp	.+814    	; 0x1b1e <__vector_8+0x366>
    17f0:	67 9b       	sbis	0x0c, 7	; 12
    17f2:	1c c0       	rjmp	.+56     	; 0x182c <__vector_8+0x74>
    17f4:	31 99       	sbic	0x06, 1	; 6
    17f6:	1a c0       	rjmp	.+52     	; 0x182c <__vector_8+0x74>
    17f8:	40 98       	cbi	0x08, 0	; 8
    17fa:	8f e7       	ldi	r24, 0x7F	; 127
    17fc:	8e bd       	out	0x2e, r24	; 46
    17fe:	0d b4       	in	r0, 0x2d	; 45
    1800:	07 fe       	sbrs	r0, 7
    1802:	fd cf       	rjmp	.-6      	; 0x17fe <__vector_8+0x46>
    1804:	1e bc       	out	0x2e, r1	; 46
    1806:	0d b4       	in	r0, 0x2d	; 45
    1808:	07 fe       	sbrs	r0, 7
    180a:	fd cf       	rjmp	.-6      	; 0x1806 <__vector_8+0x4e>
    180c:	8e b5       	in	r24, 0x2e	; 46
    180e:	40 9a       	sbi	0x08, 0	; 8
    1810:	40 98       	cbi	0x08, 0	; 8
    1812:	88 e0       	ldi	r24, 0x08	; 8
    1814:	8e bd       	out	0x2e, r24	; 46
    1816:	0d b4       	in	r0, 0x2d	; 45
    1818:	07 fe       	sbrs	r0, 7
    181a:	fd cf       	rjmp	.-6      	; 0x1816 <__vector_8+0x5e>
    181c:	40 9a       	sbi	0x08, 0	; 8
    181e:	40 98       	cbi	0x08, 0	; 8
    1820:	88 e0       	ldi	r24, 0x08	; 8
    1822:	8e bd       	out	0x2e, r24	; 46
    1824:	0d b4       	in	r0, 0x2d	; 45
    1826:	07 fe       	sbrs	r0, 7
    1828:	fd cf       	rjmp	.-6      	; 0x1824 <__vector_8+0x6c>
    182a:	78 c1       	rjmp	.+752    	; 0x1b1c <__vector_8+0x364>
    182c:	40 98       	cbi	0x08, 0	; 8
    182e:	8f e7       	ldi	r24, 0x7F	; 127
    1830:	8e bd       	out	0x2e, r24	; 46
    1832:	0d b4       	in	r0, 0x2d	; 45
    1834:	07 fe       	sbrs	r0, 7
    1836:	fd cf       	rjmp	.-6      	; 0x1832 <__vector_8+0x7a>
    1838:	1e bc       	out	0x2e, r1	; 46
    183a:	0d b4       	in	r0, 0x2d	; 45
    183c:	07 fe       	sbrs	r0, 7
    183e:	fd cf       	rjmp	.-6      	; 0x183a <__vector_8+0x82>
    1840:	4e b5       	in	r20, 0x2e	; 46
    1842:	40 9a       	sbi	0x08, 0	; 8
    1844:	4f 77       	andi	r20, 0x7F	; 127
    1846:	4c 30       	cpi	r20, 0x0C	; 12
    1848:	8c f0       	brlt	.+34     	; 0x186c <__vector_8+0xb4>
    184a:	e0 91 b6 06 	lds	r30, 0x06B6
    184e:	f0 91 b7 06 	lds	r31, 0x06B7
    1852:	24 2f       	mov	r18, r20
    1854:	33 27       	eor	r19, r19
    1856:	27 fd       	sbrc	r18, 7
    1858:	30 95       	com	r19
    185a:	2b 50       	subi	r18, 0x0B	; 11
    185c:	30 40       	sbci	r19, 0x00	; 0
    185e:	84 81       	ldd	r24, Z+4	; 0x04
    1860:	99 27       	eor	r25, r25
    1862:	87 fd       	sbrc	r24, 7
    1864:	90 95       	com	r25
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	ac f5       	brge	.+106    	; 0x18d6 <__vector_8+0x11e>
    186c:	40 98       	cbi	0x08, 0	; 8
    186e:	8f e7       	ldi	r24, 0x7F	; 127
    1870:	8e bd       	out	0x2e, r24	; 46
    1872:	0d b4       	in	r0, 0x2d	; 45
    1874:	07 fe       	sbrs	r0, 7
    1876:	fd cf       	rjmp	.-6      	; 0x1872 <__vector_8+0xba>
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	24 2f       	mov	r18, r20
    187e:	33 27       	eor	r19, r19
    1880:	27 fd       	sbrc	r18, 7
    1882:	30 95       	com	r19
    1884:	06 c0       	rjmp	.+12     	; 0x1892 <__vector_8+0xda>
    1886:	1e bc       	out	0x2e, r1	; 46
    1888:	0d b4       	in	r0, 0x2d	; 45
    188a:	07 fe       	sbrs	r0, 7
    188c:	fd cf       	rjmp	.-6      	; 0x1888 <__vector_8+0xd0>
    188e:	6f 5f       	subi	r22, 0xFF	; 255
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	86 2f       	mov	r24, r22
    1894:	99 27       	eor	r25, r25
    1896:	82 17       	cp	r24, r18
    1898:	93 07       	cpc	r25, r19
    189a:	14 f4       	brge	.+4      	; 0x18a0 <__vector_8+0xe8>
    189c:	31 99       	sbic	0x06, 1	; 6
    189e:	f3 cf       	rjmp	.-26     	; 0x1886 <__vector_8+0xce>
    18a0:	40 9a       	sbi	0x08, 0	; 8
    18a2:	40 98       	cbi	0x08, 0	; 8
    18a4:	8f e7       	ldi	r24, 0x7F	; 127
    18a6:	8e bd       	out	0x2e, r24	; 46
    18a8:	0d b4       	in	r0, 0x2d	; 45
    18aa:	07 fe       	sbrs	r0, 7
    18ac:	fd cf       	rjmp	.-6      	; 0x18a8 <__vector_8+0xf0>
    18ae:	1e bc       	out	0x2e, r1	; 46
    18b0:	0d b4       	in	r0, 0x2d	; 45
    18b2:	07 fe       	sbrs	r0, 7
    18b4:	fd cf       	rjmp	.-6      	; 0x18b0 <__vector_8+0xf8>
    18b6:	8e b5       	in	r24, 0x2e	; 46
    18b8:	40 9a       	sbi	0x08, 0	; 8
    18ba:	40 98       	cbi	0x08, 0	; 8
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	8e bd       	out	0x2e, r24	; 46
    18c0:	0d b4       	in	r0, 0x2d	; 45
    18c2:	07 fe       	sbrs	r0, 7
    18c4:	fd cf       	rjmp	.-6      	; 0x18c0 <__vector_8+0x108>
    18c6:	40 9a       	sbi	0x08, 0	; 8
    18c8:	40 98       	cbi	0x08, 0	; 8
    18ca:	88 e0       	ldi	r24, 0x08	; 8
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	0d b4       	in	r0, 0x2d	; 45
    18d0:	07 fe       	sbrs	r0, 7
    18d2:	fd cf       	rjmp	.-6      	; 0x18ce <__vector_8+0x116>
    18d4:	23 c1       	rjmp	.+582    	; 0x1b1c <__vector_8+0x364>
    18d6:	e0 91 b6 06 	lds	r30, 0x06B6
    18da:	f0 91 b7 06 	lds	r31, 0x06B7
    18de:	4c 50       	subi	r20, 0x0C	; 12
    18e0:	43 83       	std	Z+3, r20	; 0x03
    18e2:	40 98       	cbi	0x08, 0	; 8
    18e4:	8f e7       	ldi	r24, 0x7F	; 127
    18e6:	8e bd       	out	0x2e, r24	; 46
    18e8:	0d b4       	in	r0, 0x2d	; 45
    18ea:	07 fe       	sbrs	r0, 7
    18ec:	fd cf       	rjmp	.-6      	; 0x18e8 <__vector_8+0x130>
    18ee:	fe 01       	movw	r30, r28
    18f0:	31 96       	adiw	r30, 0x01	; 1
    18f2:	9e 01       	movw	r18, r28
    18f4:	2d 5f       	subi	r18, 0xFD	; 253
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	1e bc       	out	0x2e, r1	; 46
    18fa:	0d b4       	in	r0, 0x2d	; 45
    18fc:	07 fe       	sbrs	r0, 7
    18fe:	fd cf       	rjmp	.-6      	; 0x18fa <__vector_8+0x142>
    1900:	8e b5       	in	r24, 0x2e	; 46
    1902:	81 93       	st	Z+, r24
    1904:	e2 17       	cp	r30, r18
    1906:	f3 07       	cpc	r31, r19
    1908:	b9 f7       	brne	.-18     	; 0x18f8 <__vector_8+0x140>
    190a:	40 9a       	sbi	0x08, 0	; 8
    190c:	e0 91 b6 06 	lds	r30, 0x06B6
    1910:	f0 91 b7 06 	lds	r31, 0x06B7
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	25 e0       	ldi	r18, 0x05	; 5
    191a:	96 95       	lsr	r25
    191c:	87 95       	ror	r24
    191e:	2a 95       	dec	r18
    1920:	e1 f7       	brne	.-8      	; 0x191a <__vector_8+0x162>
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	87 83       	std	Z+7, r24	; 0x07
    1926:	40 98       	cbi	0x08, 0	; 8
    1928:	8f e7       	ldi	r24, 0x7F	; 127
    192a:	8e bd       	out	0x2e, r24	; 46
    192c:	0d b4       	in	r0, 0x2d	; 45
    192e:	07 fe       	sbrs	r0, 7
    1930:	fd cf       	rjmp	.-6      	; 0x192c <__vector_8+0x174>
    1932:	1e bc       	out	0x2e, r1	; 46
    1934:	0d b4       	in	r0, 0x2d	; 45
    1936:	07 fe       	sbrs	r0, 7
    1938:	fd cf       	rjmp	.-6      	; 0x1934 <__vector_8+0x17c>
    193a:	e0 91 b6 06 	lds	r30, 0x06B6
    193e:	f0 91 b7 06 	lds	r31, 0x06B7
    1942:	8e b5       	in	r24, 0x2e	; 46
    1944:	80 83       	st	Z, r24
    1946:	40 9a       	sbi	0x08, 0	; 8
    1948:	40 98       	cbi	0x08, 0	; 8
    194a:	8f e7       	ldi	r24, 0x7F	; 127
    194c:	8e bd       	out	0x2e, r24	; 46
    194e:	0d b4       	in	r0, 0x2d	; 45
    1950:	07 fe       	sbrs	r0, 7
    1952:	fd cf       	rjmp	.-6      	; 0x194e <__vector_8+0x196>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <__vector_8+0x1ae>
    1958:	1e bc       	out	0x2e, r1	; 46
    195a:	0d b4       	in	r0, 0x2d	; 45
    195c:	07 fe       	sbrs	r0, 7
    195e:	fd cf       	rjmp	.-6      	; 0x195a <__vector_8+0x1a2>
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	11 f0       	breq	.+4      	; 0x196a <__vector_8+0x1b2>
    1966:	31 99       	sbic	0x06, 1	; 6
    1968:	f7 cf       	rjmp	.-18     	; 0x1958 <__vector_8+0x1a0>
    196a:	40 9a       	sbi	0x08, 0	; 8
    196c:	40 98       	cbi	0x08, 0	; 8
    196e:	8f e7       	ldi	r24, 0x7F	; 127
    1970:	8e bd       	out	0x2e, r24	; 46
    1972:	0d b4       	in	r0, 0x2d	; 45
    1974:	07 fe       	sbrs	r0, 7
    1976:	fd cf       	rjmp	.-6      	; 0x1972 <__vector_8+0x1ba>
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	1e bc       	out	0x2e, r1	; 46
    197e:	0d b4       	in	r0, 0x2d	; 45
    1980:	07 fe       	sbrs	r0, 7
    1982:	fd cf       	rjmp	.-6      	; 0x197e <__vector_8+0x1c6>
    1984:	e0 91 b6 06 	lds	r30, 0x06B6
    1988:	f0 91 b7 06 	lds	r31, 0x06B7
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	8e b5       	in	r24, 0x2e	; 46
    1992:	81 83       	std	Z+1, r24	; 0x01
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	79 f7       	brne	.-34     	; 0x197c <__vector_8+0x1c4>
    199e:	40 9a       	sbi	0x08, 0	; 8
    19a0:	40 98       	cbi	0x08, 0	; 8
    19a2:	8f e7       	ldi	r24, 0x7F	; 127
    19a4:	8e bd       	out	0x2e, r24	; 46
    19a6:	0d b4       	in	r0, 0x2d	; 45
    19a8:	07 fe       	sbrs	r0, 7
    19aa:	fd cf       	rjmp	.-6      	; 0x19a6 <__vector_8+0x1ee>
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	11 c0       	rjmp	.+34     	; 0x19d4 <__vector_8+0x21c>
    19b2:	1e bc       	out	0x2e, r1	; 46
    19b4:	0d b4       	in	r0, 0x2d	; 45
    19b6:	07 fe       	sbrs	r0, 7
    19b8:	fd cf       	rjmp	.-6      	; 0x19b4 <__vector_8+0x1fc>
    19ba:	e0 91 b6 06 	lds	r30, 0x06B6
    19be:	f0 91 b7 06 	lds	r31, 0x06B7
    19c2:	05 80       	ldd	r0, Z+5	; 0x05
    19c4:	f6 81       	ldd	r31, Z+6	; 0x06
    19c6:	e0 2d       	mov	r30, r0
    19c8:	e6 0f       	add	r30, r22
    19ca:	f1 1d       	adc	r31, r1
    19cc:	8e b5       	in	r24, 0x2e	; 46
    19ce:	80 83       	st	Z, r24
    19d0:	4f 5f       	subi	r20, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	64 2f       	mov	r22, r20
    19d6:	e0 91 b6 06 	lds	r30, 0x06B6
    19da:	f0 91 b7 06 	lds	r31, 0x06B7
    19de:	24 2f       	mov	r18, r20
    19e0:	33 27       	eor	r19, r19
    19e2:	83 81       	ldd	r24, Z+3	; 0x03
    19e4:	99 27       	eor	r25, r25
    19e6:	87 fd       	sbrc	r24, 7
    19e8:	90 95       	com	r25
    19ea:	28 17       	cp	r18, r24
    19ec:	39 07       	cpc	r19, r25
    19ee:	0c f3       	brlt	.-62     	; 0x19b2 <__vector_8+0x1fa>
    19f0:	40 9a       	sbi	0x08, 0	; 8
    19f2:	40 98       	cbi	0x08, 0	; 8
    19f4:	8f e7       	ldi	r24, 0x7F	; 127
    19f6:	8e bd       	out	0x2e, r24	; 46
    19f8:	0d b4       	in	r0, 0x2d	; 45
    19fa:	07 fc       	sbrc	r0, 7
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <__vector_8+0x25a>
    19fe:	fc cf       	rjmp	.-8      	; 0x19f8 <__vector_8+0x240>
    1a00:	0d b4       	in	r0, 0x2d	; 45
    1a02:	07 fe       	sbrs	r0, 7
    1a04:	fd cf       	rjmp	.-6      	; 0x1a00 <__vector_8+0x248>
    1a06:	5e b5       	in	r21, 0x2e	; 46
    1a08:	40 9a       	sbi	0x08, 0	; 8
    1a0a:	40 98       	cbi	0x08, 0	; 8
    1a0c:	8f e7       	ldi	r24, 0x7F	; 127
    1a0e:	8e bd       	out	0x2e, r24	; 46
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <__vector_8+0x25e>
    1a12:	1e bc       	out	0x2e, r1	; 46
    1a14:	f5 cf       	rjmp	.-22     	; 0x1a00 <__vector_8+0x248>
    1a16:	0d b4       	in	r0, 0x2d	; 45
    1a18:	07 fe       	sbrs	r0, 7
    1a1a:	fd cf       	rjmp	.-6      	; 0x1a16 <__vector_8+0x25e>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	33 96       	adiw	r30, 0x03	; 3
    1a20:	9e 01       	movw	r18, r28
    1a22:	2b 5f       	subi	r18, 0xFB	; 251
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	1e bc       	out	0x2e, r1	; 46
    1a28:	0d b4       	in	r0, 0x2d	; 45
    1a2a:	07 fe       	sbrs	r0, 7
    1a2c:	fd cf       	rjmp	.-6      	; 0x1a28 <__vector_8+0x270>
    1a2e:	8e b5       	in	r24, 0x2e	; 46
    1a30:	81 93       	st	Z+, r24
    1a32:	e2 17       	cp	r30, r18
    1a34:	f3 07       	cpc	r31, r19
    1a36:	b9 f7       	brne	.-18     	; 0x1a26 <__vector_8+0x26e>
    1a38:	40 9a       	sbi	0x08, 0	; 8
    1a3a:	e0 91 b6 06 	lds	r30, 0x06B6
    1a3e:	f0 91 b7 06 	lds	r31, 0x06B7
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	80 87       	std	Z+8, r24	; 0x08
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	0a c0       	rjmp	.+20     	; 0x1a62 <__vector_8+0x2aa>
    1a4e:	e0 91 b6 06 	lds	r30, 0x06B6
    1a52:	f0 91 b7 06 	lds	r31, 0x06B7
    1a56:	85 81       	ldd	r24, Z+5	; 0x05
    1a58:	96 81       	ldd	r25, Z+6	; 0x06
    1a5a:	a8 0f       	add	r26, r24
    1a5c:	b9 1f       	adc	r27, r25
    1a5e:	8c 91       	ld	r24, X
    1a60:	48 0f       	add	r20, r24
    1a62:	82 2f       	mov	r24, r18
    1a64:	e0 91 b6 06 	lds	r30, 0x06B6
    1a68:	f0 91 b7 06 	lds	r31, 0x06B7
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	a8 2f       	mov	r26, r24
    1a72:	bb 27       	eor	r27, r27
    1a74:	83 81       	ldd	r24, Z+3	; 0x03
    1a76:	99 27       	eor	r25, r25
    1a78:	87 fd       	sbrc	r24, 7
    1a7a:	90 95       	com	r25
    1a7c:	a8 17       	cp	r26, r24
    1a7e:	b9 07       	cpc	r27, r25
    1a80:	34 f3       	brlt	.-52     	; 0x1a4e <__vector_8+0x296>
    1a82:	45 17       	cp	r20, r21
    1a84:	d1 f0       	breq	.+52     	; 0x1aba <__vector_8+0x302>
    1a86:	40 98       	cbi	0x08, 0	; 8
    1a88:	8f e7       	ldi	r24, 0x7F	; 127
    1a8a:	8e bd       	out	0x2e, r24	; 46
    1a8c:	0d b4       	in	r0, 0x2d	; 45
    1a8e:	07 fe       	sbrs	r0, 7
    1a90:	fd cf       	rjmp	.-6      	; 0x1a8c <__vector_8+0x2d4>
    1a92:	1e bc       	out	0x2e, r1	; 46
    1a94:	0d b4       	in	r0, 0x2d	; 45
    1a96:	07 fe       	sbrs	r0, 7
    1a98:	fd cf       	rjmp	.-6      	; 0x1a94 <__vector_8+0x2dc>
    1a9a:	8e b5       	in	r24, 0x2e	; 46
    1a9c:	40 9a       	sbi	0x08, 0	; 8
    1a9e:	40 98       	cbi	0x08, 0	; 8
    1aa0:	88 e0       	ldi	r24, 0x08	; 8
    1aa2:	8e bd       	out	0x2e, r24	; 46
    1aa4:	0d b4       	in	r0, 0x2d	; 45
    1aa6:	07 fe       	sbrs	r0, 7
    1aa8:	fd cf       	rjmp	.-6      	; 0x1aa4 <__vector_8+0x2ec>
    1aaa:	40 9a       	sbi	0x08, 0	; 8
    1aac:	40 98       	cbi	0x08, 0	; 8
    1aae:	88 e0       	ldi	r24, 0x08	; 8
    1ab0:	8e bd       	out	0x2e, r24	; 46
    1ab2:	0d b4       	in	r0, 0x2d	; 45
    1ab4:	07 fe       	sbrs	r0, 7
    1ab6:	fd cf       	rjmp	.-6      	; 0x1ab2 <__vector_8+0x2fa>
    1ab8:	31 c0       	rjmp	.+98     	; 0x1b1c <__vector_8+0x364>
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	88 23       	and	r24, r24
    1abe:	a9 f0       	breq	.+42     	; 0x1aea <__vector_8+0x332>
    1ac0:	e0 91 5f 04 	lds	r30, 0x045F
    1ac4:	f0 91 60 04 	lds	r31, 0x0460
    1ac8:	30 97       	sbiw	r30, 0x00	; 0
    1aca:	49 f0       	breq	.+18     	; 0x1ade <__vector_8+0x326>
    1acc:	80 91 b6 06 	lds	r24, 0x06B6
    1ad0:	90 91 b7 06 	lds	r25, 0x06B7
    1ad4:	09 95       	icall
    1ad6:	90 93 b7 06 	sts	0x06B7, r25
    1ada:	80 93 b6 06 	sts	0x06B6, r24
    1ade:	80 91 c7 06 	lds	r24, 0x06C7
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 c7 06 	sts	0x06C7, r24
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <__vector_8+0x366>
    1aea:	40 98       	cbi	0x08, 0	; 8
    1aec:	8f e7       	ldi	r24, 0x7F	; 127
    1aee:	8e bd       	out	0x2e, r24	; 46
    1af0:	0d b4       	in	r0, 0x2d	; 45
    1af2:	07 fe       	sbrs	r0, 7
    1af4:	fd cf       	rjmp	.-6      	; 0x1af0 <__vector_8+0x338>
    1af6:	1e bc       	out	0x2e, r1	; 46
    1af8:	0d b4       	in	r0, 0x2d	; 45
    1afa:	07 fe       	sbrs	r0, 7
    1afc:	fd cf       	rjmp	.-6      	; 0x1af8 <__vector_8+0x340>
    1afe:	8e b5       	in	r24, 0x2e	; 46
    1b00:	40 9a       	sbi	0x08, 0	; 8
    1b02:	40 98       	cbi	0x08, 0	; 8
    1b04:	88 e0       	ldi	r24, 0x08	; 8
    1b06:	8e bd       	out	0x2e, r24	; 46
    1b08:	0d b4       	in	r0, 0x2d	; 45
    1b0a:	07 fe       	sbrs	r0, 7
    1b0c:	fd cf       	rjmp	.-6      	; 0x1b08 <__vector_8+0x350>
    1b0e:	40 9a       	sbi	0x08, 0	; 8
    1b10:	40 98       	cbi	0x08, 0	; 8
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	8e bd       	out	0x2e, r24	; 46
    1b16:	0d b4       	in	r0, 0x2d	; 45
    1b18:	07 fe       	sbrs	r0, 7
    1b1a:	fd cf       	rjmp	.-6      	; 0x1b16 <__vector_8+0x35e>
    1b1c:	40 9a       	sbi	0x08, 0	; 8
    1b1e:	24 96       	adiw	r28, 0x04	; 4
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <rf_carrier_off>:
    1b4c:	80 91 b1 06 	lds	r24, 0x06B1
    1b50:	90 91 b2 06 	lds	r25, 0x06B2
    1b54:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1b58:	40 98       	cbi	0x08, 0	; 8
    1b5a:	86 e0       	ldi	r24, 0x06	; 6
    1b5c:	8e bd       	out	0x2e, r24	; 46
    1b5e:	0d b4       	in	r0, 0x2d	; 45
    1b60:	07 fe       	sbrs	r0, 7
    1b62:	fd cf       	rjmp	.-6      	; 0x1b5e <rf_carrier_off+0x12>
    1b64:	40 9a       	sbi	0x08, 0	; 8
    1b66:	80 91 b1 06 	lds	r24, 0x06B1
    1b6a:	90 91 b2 06 	lds	r25, 0x06B2
    1b6e:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1b72:	08 95       	ret

00001b74 <rf_carrier_on>:
    1b74:	80 91 b1 06 	lds	r24, 0x06B1
    1b78:	90 91 b2 06 	lds	r25, 0x06B2
    1b7c:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1b80:	40 98       	cbi	0x08, 0	; 8
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	8e bd       	out	0x2e, r24	; 46
    1b86:	0d b4       	in	r0, 0x2d	; 45
    1b88:	07 fe       	sbrs	r0, 7
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <rf_carrier_on+0x12>
    1b8c:	40 9a       	sbi	0x08, 0	; 8
    1b8e:	80 91 b1 06 	lds	r24, 0x06B1
    1b92:	90 91 b2 06 	lds	r25, 0x06B2
    1b96:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1b9a:	08 95       	ret

00001b9c <rf_data_mode>:
    1b9c:	80 91 b1 06 	lds	r24, 0x06B1
    1ba0:	90 91 b2 06 	lds	r25, 0x06B2
    1ba4:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1ba8:	40 98       	cbi	0x08, 0	; 8
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	8e bd       	out	0x2e, r24	; 46
    1bae:	0d b4       	in	r0, 0x2d	; 45
    1bb0:	07 fe       	sbrs	r0, 7
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <rf_data_mode+0x12>
    1bb4:	40 9a       	sbi	0x08, 0	; 8
    1bb6:	40 98       	cbi	0x08, 0	; 8
    1bb8:	82 e1       	ldi	r24, 0x12	; 18
    1bba:	8e bd       	out	0x2e, r24	; 46
    1bbc:	0d b4       	in	r0, 0x2d	; 45
    1bbe:	07 fe       	sbrs	r0, 7
    1bc0:	fd cf       	rjmp	.-6      	; 0x1bbc <rf_data_mode+0x20>
    1bc2:	85 e0       	ldi	r24, 0x05	; 5
    1bc4:	8e bd       	out	0x2e, r24	; 46
    1bc6:	0d b4       	in	r0, 0x2d	; 45
    1bc8:	07 fe       	sbrs	r0, 7
    1bca:	fd cf       	rjmp	.-6      	; 0x1bc6 <rf_data_mode+0x2a>
    1bcc:	1e bc       	out	0x2e, r1	; 46
    1bce:	0d b4       	in	r0, 0x2d	; 45
    1bd0:	07 fe       	sbrs	r0, 7
    1bd2:	fd cf       	rjmp	.-6      	; 0x1bce <rf_data_mode+0x32>
    1bd4:	40 9a       	sbi	0x08, 0	; 8
    1bd6:	40 98       	cbi	0x08, 0	; 8
    1bd8:	8e e2       	ldi	r24, 0x2E	; 46
    1bda:	8e bd       	out	0x2e, r24	; 46
    1bdc:	0d b4       	in	r0, 0x2d	; 45
    1bde:	07 fe       	sbrs	r0, 7
    1be0:	fd cf       	rjmp	.-6      	; 0x1bdc <rf_data_mode+0x40>
    1be2:	1e bc       	out	0x2e, r1	; 46
    1be4:	0d b4       	in	r0, 0x2d	; 45
    1be6:	07 fe       	sbrs	r0, 7
    1be8:	fd cf       	rjmp	.-6      	; 0x1be4 <rf_data_mode+0x48>
    1bea:	1e bc       	out	0x2e, r1	; 46
    1bec:	0d b4       	in	r0, 0x2d	; 45
    1bee:	07 fe       	sbrs	r0, 7
    1bf0:	fd cf       	rjmp	.-6      	; 0x1bec <rf_data_mode+0x50>
    1bf2:	40 9a       	sbi	0x08, 0	; 8
    1bf4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <rf_flush_rx_fifo>
    1bf8:	80 91 b1 06 	lds	r24, 0x06B1
    1bfc:	90 91 b2 06 	lds	r25, 0x06B2
    1c00:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1c04:	08 95       	ret

00001c06 <rf_test_mode>:
    1c06:	80 91 b1 06 	lds	r24, 0x06B1
    1c0a:	90 91 b2 06 	lds	r25, 0x06B2
    1c0e:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1c12:	40 98       	cbi	0x08, 0	; 8
    1c14:	86 e0       	ldi	r24, 0x06	; 6
    1c16:	8e bd       	out	0x2e, r24	; 46
    1c18:	0d b4       	in	r0, 0x2d	; 45
    1c1a:	07 fe       	sbrs	r0, 7
    1c1c:	fd cf       	rjmp	.-6      	; 0x1c18 <rf_test_mode+0x12>
    1c1e:	40 9a       	sbi	0x08, 0	; 8
    1c20:	40 98       	cbi	0x08, 0	; 8
    1c22:	82 e1       	ldi	r24, 0x12	; 18
    1c24:	8e bd       	out	0x2e, r24	; 46
    1c26:	0d b4       	in	r0, 0x2d	; 45
    1c28:	07 fe       	sbrs	r0, 7
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <rf_test_mode+0x20>
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	8e bd       	out	0x2e, r24	; 46
    1c30:	0d b4       	in	r0, 0x2d	; 45
    1c32:	07 fe       	sbrs	r0, 7
    1c34:	fd cf       	rjmp	.-6      	; 0x1c30 <rf_test_mode+0x2a>
    1c36:	88 e0       	ldi	r24, 0x08	; 8
    1c38:	8e bd       	out	0x2e, r24	; 46
    1c3a:	0d b4       	in	r0, 0x2d	; 45
    1c3c:	07 fe       	sbrs	r0, 7
    1c3e:	fd cf       	rjmp	.-6      	; 0x1c3a <rf_test_mode+0x34>
    1c40:	40 9a       	sbi	0x08, 0	; 8
    1c42:	40 98       	cbi	0x08, 0	; 8
    1c44:	8e e2       	ldi	r24, 0x2E	; 46
    1c46:	8e bd       	out	0x2e, r24	; 46
    1c48:	0d b4       	in	r0, 0x2d	; 45
    1c4a:	07 fe       	sbrs	r0, 7
    1c4c:	fd cf       	rjmp	.-6      	; 0x1c48 <rf_test_mode+0x42>
    1c4e:	88 e1       	ldi	r24, 0x18	; 24
    1c50:	8e bd       	out	0x2e, r24	; 46
    1c52:	0d b4       	in	r0, 0x2d	; 45
    1c54:	07 fe       	sbrs	r0, 7
    1c56:	fd cf       	rjmp	.-6      	; 0x1c52 <rf_test_mode+0x4c>
    1c58:	1e bc       	out	0x2e, r1	; 46
    1c5a:	0d b4       	in	r0, 0x2d	; 45
    1c5c:	07 fe       	sbrs	r0, 7
    1c5e:	fd cf       	rjmp	.-6      	; 0x1c5a <rf_test_mode+0x54>
    1c60:	40 9a       	sbi	0x08, 0	; 8
    1c62:	0e 94 57 0b 	call	0x16ae	; 0x16ae <rf_flush_rx_fifo>
    1c66:	80 91 b1 06 	lds	r24, 0x06B1
    1c6a:	90 91 b2 06 	lds	r25, 0x06B2
    1c6e:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1c72:	08 95       	ret

00001c74 <rf_set_cca_thresh>:
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	08 2f       	mov	r16, r24
    1c7a:	80 91 b1 06 	lds	r24, 0x06B1
    1c7e:	90 91 b2 06 	lds	r25, 0x06B2
    1c82:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1c86:	11 27       	eor	r17, r17
    1c88:	07 fd       	sbrc	r16, 7
    1c8a:	10 95       	com	r17
    1c8c:	30 2f       	mov	r19, r16
    1c8e:	22 27       	eor	r18, r18
    1c90:	20 68       	ori	r18, 0x80	; 128
    1c92:	40 98       	cbi	0x08, 0	; 8
    1c94:	83 e1       	ldi	r24, 0x13	; 19
    1c96:	8e bd       	out	0x2e, r24	; 46
    1c98:	0d b4       	in	r0, 0x2d	; 45
    1c9a:	07 fe       	sbrs	r0, 7
    1c9c:	fd cf       	rjmp	.-6      	; 0x1c98 <rf_set_cca_thresh+0x24>
    1c9e:	83 2f       	mov	r24, r19
    1ca0:	99 27       	eor	r25, r25
    1ca2:	8e bd       	out	0x2e, r24	; 46
    1ca4:	0d b4       	in	r0, 0x2d	; 45
    1ca6:	07 fe       	sbrs	r0, 7
    1ca8:	fd cf       	rjmp	.-6      	; 0x1ca4 <rf_set_cca_thresh+0x30>
    1caa:	2e bd       	out	0x2e, r18	; 46
    1cac:	0d b4       	in	r0, 0x2d	; 45
    1cae:	07 fe       	sbrs	r0, 7
    1cb0:	fd cf       	rjmp	.-6      	; 0x1cac <rf_set_cca_thresh+0x38>
    1cb2:	40 9a       	sbi	0x08, 0	; 8
    1cb4:	80 91 b1 06 	lds	r24, 0x06B1
    1cb8:	90 91 b2 06 	lds	r25, 0x06B2
    1cbc:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <rf_polling_rx_packet>:
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	24 97       	sbiw	r28, 0x04	; 4
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	80 91 b1 06 	lds	r24, 0x06B1
    1cde:	90 91 b2 06 	lds	r25, 0x06B2
    1ce2:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    1ce6:	67 9b       	sbis	0x0c, 7	; 12
    1ce8:	34 c2       	rjmp	.+1128   	; 0x2152 <rf_polling_rx_packet+0x48c>
    1cea:	10 92 c2 06 	sts	0x06C2, r1
    1cee:	67 9b       	sbis	0x0c, 7	; 12
    1cf0:	25 c0       	rjmp	.+74     	; 0x1d3c <rf_polling_rx_packet+0x76>
    1cf2:	31 99       	sbic	0x06, 1	; 6
    1cf4:	23 c0       	rjmp	.+70     	; 0x1d3c <rf_polling_rx_packet+0x76>
    1cf6:	40 98       	cbi	0x08, 0	; 8
    1cf8:	8f e7       	ldi	r24, 0x7F	; 127
    1cfa:	8e bd       	out	0x2e, r24	; 46
    1cfc:	0d b4       	in	r0, 0x2d	; 45
    1cfe:	07 fe       	sbrs	r0, 7
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <rf_polling_rx_packet+0x36>
    1d02:	1e bc       	out	0x2e, r1	; 46
    1d04:	0d b4       	in	r0, 0x2d	; 45
    1d06:	07 fe       	sbrs	r0, 7
    1d08:	fd cf       	rjmp	.-6      	; 0x1d04 <rf_polling_rx_packet+0x3e>
    1d0a:	8e b5       	in	r24, 0x2e	; 46
    1d0c:	40 9a       	sbi	0x08, 0	; 8
    1d0e:	40 98       	cbi	0x08, 0	; 8
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	8e bd       	out	0x2e, r24	; 46
    1d14:	0d b4       	in	r0, 0x2d	; 45
    1d16:	07 fe       	sbrs	r0, 7
    1d18:	fd cf       	rjmp	.-6      	; 0x1d14 <rf_polling_rx_packet+0x4e>
    1d1a:	40 9a       	sbi	0x08, 0	; 8
    1d1c:	40 98       	cbi	0x08, 0	; 8
    1d1e:	88 e0       	ldi	r24, 0x08	; 8
    1d20:	8e bd       	out	0x2e, r24	; 46
    1d22:	0d b4       	in	r0, 0x2d	; 45
    1d24:	07 fe       	sbrs	r0, 7
    1d26:	fd cf       	rjmp	.-6      	; 0x1d22 <rf_polling_rx_packet+0x5c>
    1d28:	40 9a       	sbi	0x08, 0	; 8
    1d2a:	80 91 b1 06 	lds	r24, 0x06B1
    1d2e:	90 91 b2 06 	lds	r25, 0x06B2
    1d32:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1d36:	8f ef       	ldi	r24, 0xFF	; 255
    1d38:	9f ef       	ldi	r25, 0xFF	; 255
    1d3a:	13 c2       	rjmp	.+1062   	; 0x2162 <rf_polling_rx_packet+0x49c>
    1d3c:	40 98       	cbi	0x08, 0	; 8
    1d3e:	8f e7       	ldi	r24, 0x7F	; 127
    1d40:	8e bd       	out	0x2e, r24	; 46
    1d42:	0d b4       	in	r0, 0x2d	; 45
    1d44:	07 fe       	sbrs	r0, 7
    1d46:	fd cf       	rjmp	.-6      	; 0x1d42 <rf_polling_rx_packet+0x7c>
    1d48:	1e bc       	out	0x2e, r1	; 46
    1d4a:	0d b4       	in	r0, 0x2d	; 45
    1d4c:	07 fe       	sbrs	r0, 7
    1d4e:	fd cf       	rjmp	.-6      	; 0x1d4a <rf_polling_rx_packet+0x84>
    1d50:	4e b5       	in	r20, 0x2e	; 46
    1d52:	40 9a       	sbi	0x08, 0	; 8
    1d54:	4f 77       	andi	r20, 0x7F	; 127
    1d56:	19 f5       	brne	.+70     	; 0x1d9e <rf_polling_rx_packet+0xd8>
    1d58:	40 98       	cbi	0x08, 0	; 8
    1d5a:	8f e7       	ldi	r24, 0x7F	; 127
    1d5c:	8e bd       	out	0x2e, r24	; 46
    1d5e:	0d b4       	in	r0, 0x2d	; 45
    1d60:	07 fe       	sbrs	r0, 7
    1d62:	fd cf       	rjmp	.-6      	; 0x1d5e <rf_polling_rx_packet+0x98>
    1d64:	1e bc       	out	0x2e, r1	; 46
    1d66:	0d b4       	in	r0, 0x2d	; 45
    1d68:	07 fe       	sbrs	r0, 7
    1d6a:	fd cf       	rjmp	.-6      	; 0x1d66 <rf_polling_rx_packet+0xa0>
    1d6c:	8e b5       	in	r24, 0x2e	; 46
    1d6e:	40 9a       	sbi	0x08, 0	; 8
    1d70:	40 98       	cbi	0x08, 0	; 8
    1d72:	88 e0       	ldi	r24, 0x08	; 8
    1d74:	8e bd       	out	0x2e, r24	; 46
    1d76:	0d b4       	in	r0, 0x2d	; 45
    1d78:	07 fe       	sbrs	r0, 7
    1d7a:	fd cf       	rjmp	.-6      	; 0x1d76 <rf_polling_rx_packet+0xb0>
    1d7c:	40 9a       	sbi	0x08, 0	; 8
    1d7e:	40 98       	cbi	0x08, 0	; 8
    1d80:	88 e0       	ldi	r24, 0x08	; 8
    1d82:	8e bd       	out	0x2e, r24	; 46
    1d84:	0d b4       	in	r0, 0x2d	; 45
    1d86:	07 fe       	sbrs	r0, 7
    1d88:	fd cf       	rjmp	.-6      	; 0x1d84 <rf_polling_rx_packet+0xbe>
    1d8a:	40 9a       	sbi	0x08, 0	; 8
    1d8c:	80 91 b1 06 	lds	r24, 0x06B1
    1d90:	90 91 b2 06 	lds	r25, 0x06B2
    1d94:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1d98:	8e ef       	ldi	r24, 0xFE	; 254
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	e2 c1       	rjmp	.+964    	; 0x2162 <rf_polling_rx_packet+0x49c>
    1d9e:	4c 30       	cpi	r20, 0x0C	; 12
    1da0:	8c f0       	brlt	.+34     	; 0x1dc4 <rf_polling_rx_packet+0xfe>
    1da2:	e0 91 b6 06 	lds	r30, 0x06B6
    1da6:	f0 91 b7 06 	lds	r31, 0x06B7
    1daa:	24 2f       	mov	r18, r20
    1dac:	33 27       	eor	r19, r19
    1dae:	27 fd       	sbrc	r18, 7
    1db0:	30 95       	com	r19
    1db2:	2b 50       	subi	r18, 0x0B	; 11
    1db4:	30 40       	sbci	r19, 0x00	; 0
    1db6:	84 81       	ldd	r24, Z+4	; 0x04
    1db8:	99 27       	eor	r25, r25
    1dba:	87 fd       	sbrc	r24, 7
    1dbc:	90 95       	com	r25
    1dbe:	82 17       	cp	r24, r18
    1dc0:	93 07       	cpc	r25, r19
    1dc2:	f4 f5       	brge	.+124    	; 0x1e40 <rf_polling_rx_packet+0x17a>
    1dc4:	40 98       	cbi	0x08, 0	; 8
    1dc6:	8f e7       	ldi	r24, 0x7F	; 127
    1dc8:	8e bd       	out	0x2e, r24	; 46
    1dca:	0d b4       	in	r0, 0x2d	; 45
    1dcc:	07 fe       	sbrs	r0, 7
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <rf_polling_rx_packet+0x104>
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	24 2f       	mov	r18, r20
    1dd6:	33 27       	eor	r19, r19
    1dd8:	27 fd       	sbrc	r18, 7
    1dda:	30 95       	com	r19
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <rf_polling_rx_packet+0x124>
    1dde:	1e bc       	out	0x2e, r1	; 46
    1de0:	0d b4       	in	r0, 0x2d	; 45
    1de2:	07 fe       	sbrs	r0, 7
    1de4:	fd cf       	rjmp	.-6      	; 0x1de0 <rf_polling_rx_packet+0x11a>
    1de6:	6f 5f       	subi	r22, 0xFF	; 255
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	86 2f       	mov	r24, r22
    1dec:	99 27       	eor	r25, r25
    1dee:	82 17       	cp	r24, r18
    1df0:	93 07       	cpc	r25, r19
    1df2:	14 f4       	brge	.+4      	; 0x1df8 <rf_polling_rx_packet+0x132>
    1df4:	31 99       	sbic	0x06, 1	; 6
    1df6:	f3 cf       	rjmp	.-26     	; 0x1dde <rf_polling_rx_packet+0x118>
    1df8:	40 9a       	sbi	0x08, 0	; 8
    1dfa:	40 98       	cbi	0x08, 0	; 8
    1dfc:	8f e7       	ldi	r24, 0x7F	; 127
    1dfe:	8e bd       	out	0x2e, r24	; 46
    1e00:	0d b4       	in	r0, 0x2d	; 45
    1e02:	07 fe       	sbrs	r0, 7
    1e04:	fd cf       	rjmp	.-6      	; 0x1e00 <rf_polling_rx_packet+0x13a>
    1e06:	1e bc       	out	0x2e, r1	; 46
    1e08:	0d b4       	in	r0, 0x2d	; 45
    1e0a:	07 fe       	sbrs	r0, 7
    1e0c:	fd cf       	rjmp	.-6      	; 0x1e08 <rf_polling_rx_packet+0x142>
    1e0e:	8e b5       	in	r24, 0x2e	; 46
    1e10:	40 9a       	sbi	0x08, 0	; 8
    1e12:	40 98       	cbi	0x08, 0	; 8
    1e14:	88 e0       	ldi	r24, 0x08	; 8
    1e16:	8e bd       	out	0x2e, r24	; 46
    1e18:	0d b4       	in	r0, 0x2d	; 45
    1e1a:	07 fe       	sbrs	r0, 7
    1e1c:	fd cf       	rjmp	.-6      	; 0x1e18 <rf_polling_rx_packet+0x152>
    1e1e:	40 9a       	sbi	0x08, 0	; 8
    1e20:	40 98       	cbi	0x08, 0	; 8
    1e22:	88 e0       	ldi	r24, 0x08	; 8
    1e24:	8e bd       	out	0x2e, r24	; 46
    1e26:	0d b4       	in	r0, 0x2d	; 45
    1e28:	07 fe       	sbrs	r0, 7
    1e2a:	fd cf       	rjmp	.-6      	; 0x1e26 <rf_polling_rx_packet+0x160>
    1e2c:	40 9a       	sbi	0x08, 0	; 8
    1e2e:	80 91 b1 06 	lds	r24, 0x06B1
    1e32:	90 91 b2 06 	lds	r25, 0x06B2
    1e36:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    1e3a:	8d ef       	ldi	r24, 0xFD	; 253
    1e3c:	9f ef       	ldi	r25, 0xFF	; 255
    1e3e:	91 c1       	rjmp	.+802    	; 0x2162 <rf_polling_rx_packet+0x49c>
    1e40:	e0 91 b6 06 	lds	r30, 0x06B6
    1e44:	f0 91 b7 06 	lds	r31, 0x06B7
    1e48:	4c 50       	subi	r20, 0x0C	; 12
    1e4a:	43 83       	std	Z+3, r20	; 0x03
    1e4c:	40 98       	cbi	0x08, 0	; 8
    1e4e:	8f e7       	ldi	r24, 0x7F	; 127
    1e50:	8e bd       	out	0x2e, r24	; 46
    1e52:	0d b4       	in	r0, 0x2d	; 45
    1e54:	07 fe       	sbrs	r0, 7
    1e56:	fd cf       	rjmp	.-6      	; 0x1e52 <rf_polling_rx_packet+0x18c>
    1e58:	fe 01       	movw	r30, r28
    1e5a:	31 96       	adiw	r30, 0x01	; 1
    1e5c:	9e 01       	movw	r18, r28
    1e5e:	2d 5f       	subi	r18, 0xFD	; 253
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	1e bc       	out	0x2e, r1	; 46
    1e64:	0d b4       	in	r0, 0x2d	; 45
    1e66:	07 fe       	sbrs	r0, 7
    1e68:	fd cf       	rjmp	.-6      	; 0x1e64 <rf_polling_rx_packet+0x19e>
    1e6a:	8e b5       	in	r24, 0x2e	; 46
    1e6c:	81 93       	st	Z+, r24
    1e6e:	e2 17       	cp	r30, r18
    1e70:	f3 07       	cpc	r31, r19
    1e72:	b9 f7       	brne	.-18     	; 0x1e62 <rf_polling_rx_packet+0x19c>
    1e74:	40 9a       	sbi	0x08, 0	; 8
    1e76:	e0 91 b6 06 	lds	r30, 0x06B6
    1e7a:	f0 91 b7 06 	lds	r31, 0x06B7
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	9a 81       	ldd	r25, Y+2	; 0x02
    1e82:	65 e0       	ldi	r22, 0x05	; 5
    1e84:	96 95       	lsr	r25
    1e86:	87 95       	ror	r24
    1e88:	6a 95       	dec	r22
    1e8a:	e1 f7       	brne	.-8      	; 0x1e84 <rf_polling_rx_packet+0x1be>
    1e8c:	81 70       	andi	r24, 0x01	; 1
    1e8e:	87 83       	std	Z+7, r24	; 0x07
    1e90:	40 98       	cbi	0x08, 0	; 8
    1e92:	8f e7       	ldi	r24, 0x7F	; 127
    1e94:	8e bd       	out	0x2e, r24	; 46
    1e96:	0d b4       	in	r0, 0x2d	; 45
    1e98:	07 fe       	sbrs	r0, 7
    1e9a:	fd cf       	rjmp	.-6      	; 0x1e96 <rf_polling_rx_packet+0x1d0>
    1e9c:	1e bc       	out	0x2e, r1	; 46
    1e9e:	0d b4       	in	r0, 0x2d	; 45
    1ea0:	07 fe       	sbrs	r0, 7
    1ea2:	fd cf       	rjmp	.-6      	; 0x1e9e <rf_polling_rx_packet+0x1d8>
    1ea4:	e0 91 b6 06 	lds	r30, 0x06B6
    1ea8:	f0 91 b7 06 	lds	r31, 0x06B7
    1eac:	8e b5       	in	r24, 0x2e	; 46
    1eae:	80 83       	st	Z, r24
    1eb0:	40 9a       	sbi	0x08, 0	; 8
    1eb2:	40 98       	cbi	0x08, 0	; 8
    1eb4:	8f e7       	ldi	r24, 0x7F	; 127
    1eb6:	8e bd       	out	0x2e, r24	; 46
    1eb8:	0d b4       	in	r0, 0x2d	; 45
    1eba:	07 fe       	sbrs	r0, 7
    1ebc:	fd cf       	rjmp	.-6      	; 0x1eb8 <rf_polling_rx_packet+0x1f2>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <rf_polling_rx_packet+0x20a>
    1ec2:	1e bc       	out	0x2e, r1	; 46
    1ec4:	0d b4       	in	r0, 0x2d	; 45
    1ec6:	07 fe       	sbrs	r0, 7
    1ec8:	fd cf       	rjmp	.-6      	; 0x1ec4 <rf_polling_rx_packet+0x1fe>
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <rf_polling_rx_packet+0x20e>
    1ed0:	31 99       	sbic	0x06, 1	; 6
    1ed2:	f7 cf       	rjmp	.-18     	; 0x1ec2 <rf_polling_rx_packet+0x1fc>
    1ed4:	40 9a       	sbi	0x08, 0	; 8
    1ed6:	40 98       	cbi	0x08, 0	; 8
    1ed8:	8f e7       	ldi	r24, 0x7F	; 127
    1eda:	8e bd       	out	0x2e, r24	; 46
    1edc:	0d b4       	in	r0, 0x2d	; 45
    1ede:	07 fe       	sbrs	r0, 7
    1ee0:	fd cf       	rjmp	.-6      	; 0x1edc <rf_polling_rx_packet+0x216>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	1e bc       	out	0x2e, r1	; 46
    1ee8:	0d b4       	in	r0, 0x2d	; 45
    1eea:	07 fe       	sbrs	r0, 7
    1eec:	fd cf       	rjmp	.-6      	; 0x1ee8 <rf_polling_rx_packet+0x222>
    1eee:	e0 91 b6 06 	lds	r30, 0x06B6
    1ef2:	f0 91 b7 06 	lds	r31, 0x06B7
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	8e b5       	in	r24, 0x2e	; 46
    1efc:	81 83       	std	Z+1, r24	; 0x01
    1efe:	2f 5f       	subi	r18, 0xFF	; 255
    1f00:	3f 4f       	sbci	r19, 0xFF	; 255
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	79 f7       	brne	.-34     	; 0x1ee6 <rf_polling_rx_packet+0x220>
    1f08:	40 9a       	sbi	0x08, 0	; 8
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	83 ff       	sbrs	r24, 3
    1f10:	56 c0       	rjmp	.+172    	; 0x1fbe <rf_polling_rx_packet+0x2f8>
    1f12:	40 98       	cbi	0x08, 0	; 8
    1f14:	8f e7       	ldi	r24, 0x7F	; 127
    1f16:	8e bd       	out	0x2e, r24	; 46
    1f18:	0d b4       	in	r0, 0x2d	; 45
    1f1a:	07 fe       	sbrs	r0, 7
    1f1c:	fd cf       	rjmp	.-6      	; 0x1f18 <rf_polling_rx_packet+0x252>
    1f1e:	ed ea       	ldi	r30, 0xAD	; 173
    1f20:	f6 e0       	ldi	r31, 0x06	; 6
    1f22:	1e bc       	out	0x2e, r1	; 46
    1f24:	0d b4       	in	r0, 0x2d	; 45
    1f26:	07 fe       	sbrs	r0, 7
    1f28:	fd cf       	rjmp	.-6      	; 0x1f24 <rf_polling_rx_packet+0x25e>
    1f2a:	8e b5       	in	r24, 0x2e	; 46
    1f2c:	81 93       	st	Z+, r24
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	e1 3b       	cpi	r30, 0xB1	; 177
    1f32:	f8 07       	cpc	r31, r24
    1f34:	b1 f7       	brne	.-20     	; 0x1f22 <rf_polling_rx_packet+0x25c>
    1f36:	40 9a       	sbi	0x08, 0	; 8
    1f38:	40 98       	cbi	0x08, 0	; 8
    1f3a:	89 e9       	ldi	r24, 0x99	; 153
    1f3c:	8e bd       	out	0x2e, r24	; 46
    1f3e:	0d b4       	in	r0, 0x2d	; 45
    1f40:	07 fe       	sbrs	r0, 7
    1f42:	fd cf       	rjmp	.-6      	; 0x1f3e <rf_polling_rx_packet+0x278>
    1f44:	80 e8       	ldi	r24, 0x80	; 128
    1f46:	8e bd       	out	0x2e, r24	; 46
    1f48:	0d b4       	in	r0, 0x2d	; 45
    1f4a:	07 fe       	sbrs	r0, 7
    1f4c:	fd cf       	rjmp	.-6      	; 0x1f48 <rf_polling_rx_packet+0x282>
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	91 50       	subi	r25, 0x01	; 1
    1f52:	e9 2f       	mov	r30, r25
    1f54:	ff 27       	eor	r31, r31
    1f56:	e3 55       	subi	r30, 0x53	; 83
    1f58:	f9 4f       	sbci	r31, 0xF9	; 249
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8e bd       	out	0x2e, r24	; 46
    1f5e:	0d b4       	in	r0, 0x2d	; 45
    1f60:	07 fe       	sbrs	r0, 7
    1f62:	fd cf       	rjmp	.-6      	; 0x1f5e <rf_polling_rx_packet+0x298>
    1f64:	99 23       	and	r25, r25
    1f66:	a1 f7       	brne	.-24     	; 0x1f50 <rf_polling_rx_packet+0x28a>
    1f68:	40 9a       	sbi	0x08, 0	; 8
    1f6a:	40 98       	cbi	0x08, 0	; 8
    1f6c:	8b e9       	ldi	r24, 0x9B	; 155
    1f6e:	8e bd       	out	0x2e, r24	; 46
    1f70:	0d b4       	in	r0, 0x2d	; 45
    1f72:	07 fe       	sbrs	r0, 7
    1f74:	fd cf       	rjmp	.-6      	; 0x1f70 <rf_polling_rx_packet+0x2aa>
    1f76:	80 e8       	ldi	r24, 0x80	; 128
    1f78:	8e bd       	out	0x2e, r24	; 46
    1f7a:	0d b4       	in	r0, 0x2d	; 45
    1f7c:	07 fe       	sbrs	r0, 7
    1f7e:	fd cf       	rjmp	.-6      	; 0x1f7a <rf_polling_rx_packet+0x2b4>
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	91 50       	subi	r25, 0x01	; 1
    1f84:	e9 2f       	mov	r30, r25
    1f86:	ff 27       	eor	r31, r31
    1f88:	e1 55       	subi	r30, 0x51	; 81
    1f8a:	f9 4f       	sbci	r31, 0xF9	; 249
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8e bd       	out	0x2e, r24	; 46
    1f90:	0d b4       	in	r0, 0x2d	; 45
    1f92:	07 fe       	sbrs	r0, 7
    1f94:	fd cf       	rjmp	.-6      	; 0x1f90 <rf_polling_rx_packet+0x2ca>
    1f96:	99 23       	and	r25, r25
    1f98:	a1 f7       	brne	.-24     	; 0x1f82 <rf_polling_rx_packet+0x2bc>
    1f9a:	40 9a       	sbi	0x08, 0	; 8
    1f9c:	40 98       	cbi	0x08, 0	; 8
    1f9e:	8c e0       	ldi	r24, 0x0C	; 12
    1fa0:	8e bd       	out	0x2e, r24	; 46
    1fa2:	0d b4       	in	r0, 0x2d	; 45
    1fa4:	07 fe       	sbrs	r0, 7
    1fa6:	fd cf       	rjmp	.-6      	; 0x1fa2 <rf_polling_rx_packet+0x2dc>
    1fa8:	40 9a       	sbi	0x08, 0	; 8
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	80 93 c2 06 	sts	0x06C2, r24
    1fb0:	e0 91 b6 06 	lds	r30, 0x06B6
    1fb4:	f0 91 b7 06 	lds	r31, 0x06B7
    1fb8:	83 81       	ldd	r24, Z+3	; 0x03
    1fba:	84 50       	subi	r24, 0x04	; 4
    1fbc:	83 83       	std	Z+3, r24	; 0x03
    1fbe:	40 98       	cbi	0x08, 0	; 8
    1fc0:	8f e7       	ldi	r24, 0x7F	; 127
    1fc2:	8e bd       	out	0x2e, r24	; 46
    1fc4:	0d b4       	in	r0, 0x2d	; 45
    1fc6:	07 fe       	sbrs	r0, 7
    1fc8:	fd cf       	rjmp	.-6      	; 0x1fc4 <rf_polling_rx_packet+0x2fe>
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <rf_polling_rx_packet+0x32c>
    1fd0:	1e bc       	out	0x2e, r1	; 46
    1fd2:	0d b4       	in	r0, 0x2d	; 45
    1fd4:	07 fe       	sbrs	r0, 7
    1fd6:	fd cf       	rjmp	.-6      	; 0x1fd2 <rf_polling_rx_packet+0x30c>
    1fd8:	e0 91 b6 06 	lds	r30, 0x06B6
    1fdc:	f0 91 b7 06 	lds	r31, 0x06B7
    1fe0:	05 80       	ldd	r0, Z+5	; 0x05
    1fe2:	f6 81       	ldd	r31, Z+6	; 0x06
    1fe4:	e0 2d       	mov	r30, r0
    1fe6:	e6 0f       	add	r30, r22
    1fe8:	f1 1d       	adc	r31, r1
    1fea:	8e b5       	in	r24, 0x2e	; 46
    1fec:	80 83       	st	Z, r24
    1fee:	4f 5f       	subi	r20, 0xFF	; 255
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	64 2f       	mov	r22, r20
    1ff4:	e0 91 b6 06 	lds	r30, 0x06B6
    1ff8:	f0 91 b7 06 	lds	r31, 0x06B7
    1ffc:	24 2f       	mov	r18, r20
    1ffe:	33 27       	eor	r19, r19
    2000:	83 81       	ldd	r24, Z+3	; 0x03
    2002:	99 27       	eor	r25, r25
    2004:	87 fd       	sbrc	r24, 7
    2006:	90 95       	com	r25
    2008:	28 17       	cp	r18, r24
    200a:	39 07       	cpc	r19, r25
    200c:	0c f3       	brlt	.-62     	; 0x1fd0 <rf_polling_rx_packet+0x30a>
    200e:	40 9a       	sbi	0x08, 0	; 8
    2010:	40 98       	cbi	0x08, 0	; 8
    2012:	8f e7       	ldi	r24, 0x7F	; 127
    2014:	8e bd       	out	0x2e, r24	; 46
    2016:	0d b4       	in	r0, 0x2d	; 45
    2018:	07 fc       	sbrc	r0, 7
    201a:	0a c0       	rjmp	.+20     	; 0x2030 <rf_polling_rx_packet+0x36a>
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <rf_polling_rx_packet+0x350>
    201e:	0d b4       	in	r0, 0x2d	; 45
    2020:	07 fe       	sbrs	r0, 7
    2022:	fd cf       	rjmp	.-6      	; 0x201e <rf_polling_rx_packet+0x358>
    2024:	5e b5       	in	r21, 0x2e	; 46
    2026:	40 9a       	sbi	0x08, 0	; 8
    2028:	40 98       	cbi	0x08, 0	; 8
    202a:	8f e7       	ldi	r24, 0x7F	; 127
    202c:	8e bd       	out	0x2e, r24	; 46
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <rf_polling_rx_packet+0x36e>
    2030:	1e bc       	out	0x2e, r1	; 46
    2032:	f5 cf       	rjmp	.-22     	; 0x201e <rf_polling_rx_packet+0x358>
    2034:	0d b4       	in	r0, 0x2d	; 45
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <rf_polling_rx_packet+0x36e>
    203a:	fe 01       	movw	r30, r28
    203c:	33 96       	adiw	r30, 0x03	; 3
    203e:	9e 01       	movw	r18, r28
    2040:	2b 5f       	subi	r18, 0xFB	; 251
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	1e bc       	out	0x2e, r1	; 46
    2046:	0d b4       	in	r0, 0x2d	; 45
    2048:	07 fe       	sbrs	r0, 7
    204a:	fd cf       	rjmp	.-6      	; 0x2046 <rf_polling_rx_packet+0x380>
    204c:	8e b5       	in	r24, 0x2e	; 46
    204e:	81 93       	st	Z+, r24
    2050:	e2 17       	cp	r30, r18
    2052:	f3 07       	cpc	r31, r19
    2054:	b9 f7       	brne	.-18     	; 0x2044 <rf_polling_rx_packet+0x37e>
    2056:	40 9a       	sbi	0x08, 0	; 8
    2058:	e0 91 b6 06 	lds	r30, 0x06B6
    205c:	f0 91 b7 06 	lds	r31, 0x06B7
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	80 87       	std	Z+8, r24	; 0x08
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	0a c0       	rjmp	.+20     	; 0x2080 <rf_polling_rx_packet+0x3ba>
    206c:	e0 91 b6 06 	lds	r30, 0x06B6
    2070:	f0 91 b7 06 	lds	r31, 0x06B7
    2074:	85 81       	ldd	r24, Z+5	; 0x05
    2076:	96 81       	ldd	r25, Z+6	; 0x06
    2078:	a8 0f       	add	r26, r24
    207a:	b9 1f       	adc	r27, r25
    207c:	8c 91       	ld	r24, X
    207e:	48 0f       	add	r20, r24
    2080:	82 2f       	mov	r24, r18
    2082:	e0 91 b6 06 	lds	r30, 0x06B6
    2086:	f0 91 b7 06 	lds	r31, 0x06B7
    208a:	2f 5f       	subi	r18, 0xFF	; 255
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	a8 2f       	mov	r26, r24
    2090:	bb 27       	eor	r27, r27
    2092:	83 81       	ldd	r24, Z+3	; 0x03
    2094:	99 27       	eor	r25, r25
    2096:	87 fd       	sbrc	r24, 7
    2098:	90 95       	com	r25
    209a:	a8 17       	cp	r26, r24
    209c:	b9 07       	cpc	r27, r25
    209e:	34 f3       	brlt	.-52     	; 0x206c <rf_polling_rx_packet+0x3a6>
    20a0:	45 17       	cp	r20, r21
    20a2:	19 f1       	breq	.+70     	; 0x20ea <rf_polling_rx_packet+0x424>
    20a4:	40 98       	cbi	0x08, 0	; 8
    20a6:	8f e7       	ldi	r24, 0x7F	; 127
    20a8:	8e bd       	out	0x2e, r24	; 46
    20aa:	0d b4       	in	r0, 0x2d	; 45
    20ac:	07 fe       	sbrs	r0, 7
    20ae:	fd cf       	rjmp	.-6      	; 0x20aa <rf_polling_rx_packet+0x3e4>
    20b0:	1e bc       	out	0x2e, r1	; 46
    20b2:	0d b4       	in	r0, 0x2d	; 45
    20b4:	07 fe       	sbrs	r0, 7
    20b6:	fd cf       	rjmp	.-6      	; 0x20b2 <rf_polling_rx_packet+0x3ec>
    20b8:	8e b5       	in	r24, 0x2e	; 46
    20ba:	40 9a       	sbi	0x08, 0	; 8
    20bc:	40 98       	cbi	0x08, 0	; 8
    20be:	88 e0       	ldi	r24, 0x08	; 8
    20c0:	8e bd       	out	0x2e, r24	; 46
    20c2:	0d b4       	in	r0, 0x2d	; 45
    20c4:	07 fe       	sbrs	r0, 7
    20c6:	fd cf       	rjmp	.-6      	; 0x20c2 <rf_polling_rx_packet+0x3fc>
    20c8:	40 9a       	sbi	0x08, 0	; 8
    20ca:	40 98       	cbi	0x08, 0	; 8
    20cc:	88 e0       	ldi	r24, 0x08	; 8
    20ce:	8e bd       	out	0x2e, r24	; 46
    20d0:	0d b4       	in	r0, 0x2d	; 45
    20d2:	07 fe       	sbrs	r0, 7
    20d4:	fd cf       	rjmp	.-6      	; 0x20d0 <rf_polling_rx_packet+0x40a>
    20d6:	40 9a       	sbi	0x08, 0	; 8
    20d8:	80 91 b1 06 	lds	r24, 0x06B1
    20dc:	90 91 b2 06 	lds	r25, 0x06B2
    20e0:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    20e4:	8c ef       	ldi	r24, 0xFC	; 252
    20e6:	9f ef       	ldi	r25, 0xFF	; 255
    20e8:	3c c0       	rjmp	.+120    	; 0x2162 <rf_polling_rx_packet+0x49c>
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	87 ff       	sbrs	r24, 7
    20ee:	0e c0       	rjmp	.+28     	; 0x210c <rf_polling_rx_packet+0x446>
    20f0:	80 91 c7 06 	lds	r24, 0x06C7
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	80 93 c7 06 	sts	0x06C7, r24
    20fa:	80 91 b1 06 	lds	r24, 0x06B1
    20fe:	90 91 b2 06 	lds	r25, 0x06B2
    2102:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	2b c0       	rjmp	.+86     	; 0x2162 <rf_polling_rx_packet+0x49c>
    210c:	40 98       	cbi	0x08, 0	; 8
    210e:	8f e7       	ldi	r24, 0x7F	; 127
    2110:	8e bd       	out	0x2e, r24	; 46
    2112:	0d b4       	in	r0, 0x2d	; 45
    2114:	07 fe       	sbrs	r0, 7
    2116:	fd cf       	rjmp	.-6      	; 0x2112 <rf_polling_rx_packet+0x44c>
    2118:	1e bc       	out	0x2e, r1	; 46
    211a:	0d b4       	in	r0, 0x2d	; 45
    211c:	07 fe       	sbrs	r0, 7
    211e:	fd cf       	rjmp	.-6      	; 0x211a <rf_polling_rx_packet+0x454>
    2120:	8e b5       	in	r24, 0x2e	; 46
    2122:	40 9a       	sbi	0x08, 0	; 8
    2124:	40 98       	cbi	0x08, 0	; 8
    2126:	88 e0       	ldi	r24, 0x08	; 8
    2128:	8e bd       	out	0x2e, r24	; 46
    212a:	0d b4       	in	r0, 0x2d	; 45
    212c:	07 fe       	sbrs	r0, 7
    212e:	fd cf       	rjmp	.-6      	; 0x212a <rf_polling_rx_packet+0x464>
    2130:	40 9a       	sbi	0x08, 0	; 8
    2132:	40 98       	cbi	0x08, 0	; 8
    2134:	88 e0       	ldi	r24, 0x08	; 8
    2136:	8e bd       	out	0x2e, r24	; 46
    2138:	0d b4       	in	r0, 0x2d	; 45
    213a:	07 fe       	sbrs	r0, 7
    213c:	fd cf       	rjmp	.-6      	; 0x2138 <rf_polling_rx_packet+0x472>
    213e:	40 9a       	sbi	0x08, 0	; 8
    2140:	80 91 b1 06 	lds	r24, 0x06B1
    2144:	90 91 b2 06 	lds	r25, 0x06B2
    2148:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    214c:	8b ef       	ldi	r24, 0xFB	; 251
    214e:	9f ef       	ldi	r25, 0xFF	; 255
    2150:	08 c0       	rjmp	.+16     	; 0x2162 <rf_polling_rx_packet+0x49c>
    2152:	80 91 b1 06 	lds	r24, 0x06B1
    2156:	90 91 b2 06 	lds	r25, 0x06B2
    215a:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	24 96       	adiw	r28, 0x04	; 4
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <rf_rx_off>:
    2174:	80 91 b1 06 	lds	r24, 0x06B1
    2178:	90 91 b2 06 	lds	r25, 0x06B2
    217c:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2180:	10 92 be 06 	sts	0x06BE, r1
    2184:	40 98       	cbi	0x08, 0	; 8
    2186:	86 e0       	ldi	r24, 0x06	; 6
    2188:	8e bd       	out	0x2e, r24	; 46
    218a:	0d b4       	in	r0, 0x2d	; 45
    218c:	07 fe       	sbrs	r0, 7
    218e:	fd cf       	rjmp	.-6      	; 0x218a <rf_rx_off+0x16>
    2190:	40 9a       	sbi	0x08, 0	; 8
    2192:	10 92 c7 06 	sts	0x06C7, r1
    2196:	80 91 b1 06 	lds	r24, 0x06B1
    219a:	90 91 b2 06 	lds	r25, 0x06B2
    219e:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    21a2:	ef 98       	cbi	0x1d, 7	; 29
    21a4:	08 95       	ret

000021a6 <rf_polling_rx_on>:
    21a6:	80 91 b1 06 	lds	r24, 0x06B1
    21aa:	90 91 b2 06 	lds	r25, 0x06B2
    21ae:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 93 be 06 	sts	0x06BE, r24
    21b8:	40 98       	cbi	0x08, 0	; 8
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	8e bd       	out	0x2e, r24	; 46
    21be:	0d b4       	in	r0, 0x2d	; 45
    21c0:	07 fe       	sbrs	r0, 7
    21c2:	fd cf       	rjmp	.-6      	; 0x21be <rf_polling_rx_on+0x18>
    21c4:	40 9a       	sbi	0x08, 0	; 8
    21c6:	40 98       	cbi	0x08, 0	; 8
    21c8:	88 e0       	ldi	r24, 0x08	; 8
    21ca:	8e bd       	out	0x2e, r24	; 46
    21cc:	0d b4       	in	r0, 0x2d	; 45
    21ce:	07 fe       	sbrs	r0, 7
    21d0:	fd cf       	rjmp	.-6      	; 0x21cc <rf_polling_rx_on+0x26>
    21d2:	40 9a       	sbi	0x08, 0	; 8
    21d4:	10 92 c7 06 	sts	0x06C7, r1
    21d8:	80 91 b1 06 	lds	r24, 0x06B1
    21dc:	90 91 b2 06 	lds	r25, 0x06B2
    21e0:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    21e4:	08 95       	ret

000021e6 <rf_rx_on>:
    21e6:	80 91 b1 06 	lds	r24, 0x06B1
    21ea:	90 91 b2 06 	lds	r25, 0x06B2
    21ee:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 be 06 	sts	0x06BE, r24
    21f8:	40 98       	cbi	0x08, 0	; 8
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	8e bd       	out	0x2e, r24	; 46
    21fe:	0d b4       	in	r0, 0x2d	; 45
    2200:	07 fe       	sbrs	r0, 7
    2202:	fd cf       	rjmp	.-6      	; 0x21fe <rf_rx_on+0x18>
    2204:	40 9a       	sbi	0x08, 0	; 8
    2206:	40 98       	cbi	0x08, 0	; 8
    2208:	88 e0       	ldi	r24, 0x08	; 8
    220a:	8e bd       	out	0x2e, r24	; 46
    220c:	0d b4       	in	r0, 0x2d	; 45
    220e:	07 fe       	sbrs	r0, 7
    2210:	fd cf       	rjmp	.-6      	; 0x220c <__stack+0xd>
    2212:	40 9a       	sbi	0x08, 0	; 8
    2214:	10 92 c7 06 	sts	0x06C7, r1
    2218:	80 91 b1 06 	lds	r24, 0x06B1
    221c:	90 91 b2 06 	lds	r25, 0x06B2
    2220:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2224:	80 91 6a 00 	lds	r24, 0x006A
    2228:	80 6c       	ori	r24, 0xC0	; 192
    222a:	80 93 6a 00 	sts	0x006A, r24
    222e:	80 e8       	ldi	r24, 0x80	; 128
    2230:	8c bb       	out	0x1c, r24	; 28
    2232:	ef 9a       	sbi	0x1d, 7	; 29
    2234:	08 95       	ret

00002236 <rf_tx_power>:
    2236:	1f 93       	push	r17
    2238:	18 2f       	mov	r17, r24
    223a:	80 91 b1 06 	lds	r24, 0x06B1
    223e:	90 91 b2 06 	lds	r25, 0x06B2
    2242:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2246:	21 2f       	mov	r18, r17
    2248:	33 27       	eor	r19, r19
    224a:	2f 71       	andi	r18, 0x1F	; 31
    224c:	30 70       	andi	r19, 0x00	; 0
    224e:	20 6e       	ori	r18, 0xE0	; 224
    2250:	30 6a       	ori	r19, 0xA0	; 160
    2252:	40 98       	cbi	0x08, 0	; 8
    2254:	85 e1       	ldi	r24, 0x15	; 21
    2256:	8e bd       	out	0x2e, r24	; 46
    2258:	0d b4       	in	r0, 0x2d	; 45
    225a:	07 fe       	sbrs	r0, 7
    225c:	fd cf       	rjmp	.-6      	; 0x2258 <rf_tx_power+0x22>
    225e:	83 2f       	mov	r24, r19
    2260:	99 27       	eor	r25, r25
    2262:	8e bd       	out	0x2e, r24	; 46
    2264:	0d b4       	in	r0, 0x2d	; 45
    2266:	07 fe       	sbrs	r0, 7
    2268:	fd cf       	rjmp	.-6      	; 0x2264 <rf_tx_power+0x2e>
    226a:	2e bd       	out	0x2e, r18	; 46
    226c:	0d b4       	in	r0, 0x2d	; 45
    226e:	07 fe       	sbrs	r0, 7
    2270:	fd cf       	rjmp	.-6      	; 0x226c <rf_tx_power+0x36>
    2272:	40 9a       	sbi	0x08, 0	; 8
    2274:	80 91 b1 06 	lds	r24, 0x06B1
    2278:	90 91 b2 06 	lds	r25, 0x06B2
    227c:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2280:	1f 91       	pop	r17
    2282:	08 95       	ret

00002284 <rf_tx_packet>:
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	22 97       	sbiw	r28, 0x02	; 2
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	8c 01       	movw	r16, r24
    22a2:	80 91 b1 06 	lds	r24, 0x06B1
    22a6:	90 91 b2 06 	lds	r25, 0x06B2
    22aa:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    22ae:	50 91 b3 06 	lds	r21, 0x06B3
    22b2:	55 23       	and	r21, r21
    22b4:	39 f0       	breq	.+14     	; 0x22c4 <rf_tx_packet+0x40>
    22b6:	40 98       	cbi	0x08, 0	; 8
    22b8:	8d e0       	ldi	r24, 0x0D	; 13
    22ba:	8e bd       	out	0x2e, r24	; 46
    22bc:	0d b4       	in	r0, 0x2d	; 45
    22be:	07 fe       	sbrs	r0, 7
    22c0:	fd cf       	rjmp	.-6      	; 0x22bc <rf_tx_packet+0x38>
    22c2:	40 9a       	sbi	0x08, 0	; 8
    22c4:	f8 01       	movw	r30, r16
    22c6:	42 81       	ldd	r20, Z+2	; 0x02
    22c8:	64 2f       	mov	r22, r20
    22ca:	77 27       	eor	r23, r23
    22cc:	67 fd       	sbrc	r22, 7
    22ce:	70 95       	com	r23
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <rf_tx_packet+0x64>
    22d8:	f8 01       	movw	r30, r16
    22da:	83 81       	ldd	r24, Z+3	; 0x03
    22dc:	94 81       	ldd	r25, Z+4	; 0x04
    22de:	e8 0e       	add	r14, r24
    22e0:	f9 1e       	adc	r15, r25
    22e2:	f7 01       	movw	r30, r14
    22e4:	80 81       	ld	r24, Z
    22e6:	a8 0f       	add	r26, r24
    22e8:	82 2f       	mov	r24, r18
    22ea:	2f 5f       	subi	r18, 0xFF	; 255
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	e8 2e       	mov	r14, r24
    22f0:	ff 24       	eor	r15, r15
    22f2:	e6 16       	cp	r14, r22
    22f4:	f7 06       	cpc	r15, r23
    22f6:	84 f3       	brlt	.-32     	; 0x22d8 <rf_tx_packet+0x54>
    22f8:	94 2f       	mov	r25, r20
    22fa:	94 5f       	subi	r25, 0xF4	; 244
    22fc:	51 11       	cpse	r21, r1
    22fe:	9c 5f       	subi	r25, 0xFC	; 252
    2300:	67 99       	sbic	0x0c, 7	; 12
    2302:	fe cf       	rjmp	.-4      	; 0x2300 <rf_tx_packet+0x7c>
    2304:	4e 99       	sbic	0x09, 6	; 9
    2306:	fc cf       	rjmp	.-8      	; 0x2300 <rf_tx_packet+0x7c>
    2308:	f8 94       	cli
    230a:	40 98       	cbi	0x08, 0	; 8
    230c:	89 e0       	ldi	r24, 0x09	; 9
    230e:	8e bd       	out	0x2e, r24	; 46
    2310:	0d b4       	in	r0, 0x2d	; 45
    2312:	07 fe       	sbrs	r0, 7
    2314:	fd cf       	rjmp	.-6      	; 0x2310 <rf_tx_packet+0x8c>
    2316:	40 9a       	sbi	0x08, 0	; 8
    2318:	40 98       	cbi	0x08, 0	; 8
    231a:	89 e0       	ldi	r24, 0x09	; 9
    231c:	8e bd       	out	0x2e, r24	; 46
    231e:	0d b4       	in	r0, 0x2d	; 45
    2320:	07 fe       	sbrs	r0, 7
    2322:	fd cf       	rjmp	.-6      	; 0x231e <rf_tx_packet+0x9a>
    2324:	40 9a       	sbi	0x08, 0	; 8
    2326:	40 98       	cbi	0x08, 0	; 8
    2328:	8e e3       	ldi	r24, 0x3E	; 62
    232a:	8e bd       	out	0x2e, r24	; 46
    232c:	0d b4       	in	r0, 0x2d	; 45
    232e:	07 fc       	sbrc	r0, 7
    2330:	05 c0       	rjmp	.+10     	; 0x233c <rf_tx_packet+0xb8>
    2332:	fc cf       	rjmp	.-8      	; 0x232c <rf_tx_packet+0xa8>
    2334:	0d b4       	in	r0, 0x2d	; 45
    2336:	07 fc       	sbrc	r0, 7
    2338:	30 c1       	rjmp	.+608    	; 0x259a <rf_tx_packet+0x316>
    233a:	fc cf       	rjmp	.-8      	; 0x2334 <rf_tx_packet+0xb0>
    233c:	9e bd       	out	0x2e, r25	; 46
    233e:	fa cf       	rjmp	.-12     	; 0x2334 <rf_tx_packet+0xb0>
    2340:	81 e6       	ldi	r24, 0x61	; 97
    2342:	98 e8       	ldi	r25, 0x88	; 136
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	55 23       	and	r21, r21
    234a:	29 f0       	breq	.+10     	; 0x2356 <rf_tx_packet+0xd2>
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	88 60       	ori	r24, 0x08	; 8
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	40 98       	cbi	0x08, 0	; 8
    2358:	8e e3       	ldi	r24, 0x3E	; 62
    235a:	8e bd       	out	0x2e, r24	; 46
    235c:	0d b4       	in	r0, 0x2d	; 45
    235e:	07 fe       	sbrs	r0, 7
    2360:	fd cf       	rjmp	.-6      	; 0x235c <rf_tx_packet+0xd8>
    2362:	fe 01       	movw	r30, r28
    2364:	31 96       	adiw	r30, 0x01	; 1
    2366:	9e 01       	movw	r18, r28
    2368:	2d 5f       	subi	r18, 0xFD	; 253
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	8e bd       	out	0x2e, r24	; 46
    2370:	0d b4       	in	r0, 0x2d	; 45
    2372:	07 fe       	sbrs	r0, 7
    2374:	fd cf       	rjmp	.-6      	; 0x2370 <rf_tx_packet+0xec>
    2376:	31 96       	adiw	r30, 0x01	; 1
    2378:	e2 17       	cp	r30, r18
    237a:	f3 07       	cpc	r31, r19
    237c:	b9 f7       	brne	.-18     	; 0x236c <rf_tx_packet+0xe8>
    237e:	40 9a       	sbi	0x08, 0	; 8
    2380:	40 98       	cbi	0x08, 0	; 8
    2382:	8e e3       	ldi	r24, 0x3E	; 62
    2384:	8e bd       	out	0x2e, r24	; 46
    2386:	0d b4       	in	r0, 0x2d	; 45
    2388:	07 fc       	sbrc	r0, 7
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <rf_tx_packet+0x112>
    238c:	fc cf       	rjmp	.-8      	; 0x2386 <rf_tx_packet+0x102>
    238e:	0d b4       	in	r0, 0x2d	; 45
    2390:	07 fc       	sbrc	r0, 7
    2392:	0e c1       	rjmp	.+540    	; 0x25b0 <rf_tx_packet+0x32c>
    2394:	fc cf       	rjmp	.-8      	; 0x238e <rf_tx_packet+0x10a>
    2396:	80 91 b8 06 	lds	r24, 0x06B8
    239a:	8e bd       	out	0x2e, r24	; 46
    239c:	f8 cf       	rjmp	.-16     	; 0x238e <rf_tx_packet+0x10a>
    239e:	0d b4       	in	r0, 0x2d	; 45
    23a0:	07 fe       	sbrs	r0, 7
    23a2:	fd cf       	rjmp	.-6      	; 0x239e <rf_tx_packet+0x11a>
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	e6 54       	subi	r30, 0x46	; 70
    23ac:	f9 4f       	sbci	r31, 0xF9	; 249
    23ae:	80 81       	ld	r24, Z
    23b0:	8e bd       	out	0x2e, r24	; 46
    23b2:	0d b4       	in	r0, 0x2d	; 45
    23b4:	07 fe       	sbrs	r0, 7
    23b6:	fd cf       	rjmp	.-6      	; 0x23b2 <rf_tx_packet+0x12e>
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	22 30       	cpi	r18, 0x02	; 2
    23be:	31 05       	cpc	r19, r1
    23c0:	99 f7       	brne	.-26     	; 0x23a8 <rf_tx_packet+0x124>
    23c2:	40 9a       	sbi	0x08, 0	; 8
    23c4:	40 98       	cbi	0x08, 0	; 8
    23c6:	8e e3       	ldi	r24, 0x3E	; 62
    23c8:	8e bd       	out	0x2e, r24	; 46
    23ca:	0d b4       	in	r0, 0x2d	; 45
    23cc:	07 fe       	sbrs	r0, 7
    23ce:	fd cf       	rjmp	.-6      	; 0x23ca <rf_tx_packet+0x146>
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	f8 01       	movw	r30, r16
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	8e bd       	out	0x2e, r24	; 46
    23de:	0d b4       	in	r0, 0x2d	; 45
    23e0:	07 fe       	sbrs	r0, 7
    23e2:	fd cf       	rjmp	.-6      	; 0x23de <rf_tx_packet+0x15a>
    23e4:	2f 5f       	subi	r18, 0xFF	; 255
    23e6:	3f 4f       	sbci	r19, 0xFF	; 255
    23e8:	22 30       	cpi	r18, 0x02	; 2
    23ea:	31 05       	cpc	r19, r1
    23ec:	99 f7       	brne	.-26     	; 0x23d4 <rf_tx_packet+0x150>
    23ee:	40 9a       	sbi	0x08, 0	; 8
    23f0:	40 98       	cbi	0x08, 0	; 8
    23f2:	8e e3       	ldi	r24, 0x3E	; 62
    23f4:	8e bd       	out	0x2e, r24	; 46
    23f6:	0d b4       	in	r0, 0x2d	; 45
    23f8:	07 fe       	sbrs	r0, 7
    23fa:	fd cf       	rjmp	.-6      	; 0x23f6 <rf_tx_packet+0x172>
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	f9 01       	movw	r30, r18
    2402:	e4 54       	subi	r30, 0x44	; 68
    2404:	f9 4f       	sbci	r31, 0xF9	; 249
    2406:	80 81       	ld	r24, Z
    2408:	8e bd       	out	0x2e, r24	; 46
    240a:	0d b4       	in	r0, 0x2d	; 45
    240c:	07 fe       	sbrs	r0, 7
    240e:	fd cf       	rjmp	.-6      	; 0x240a <rf_tx_packet+0x186>
    2410:	2f 5f       	subi	r18, 0xFF	; 255
    2412:	3f 4f       	sbci	r19, 0xFF	; 255
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	99 f7       	brne	.-26     	; 0x2400 <rf_tx_packet+0x17c>
    241a:	40 9a       	sbi	0x08, 0	; 8
    241c:	55 23       	and	r21, r21
    241e:	99 f0       	breq	.+38     	; 0x2446 <rf_tx_packet+0x1c2>
    2420:	40 98       	cbi	0x08, 0	; 8
    2422:	8e e3       	ldi	r24, 0x3E	; 62
    2424:	8e bd       	out	0x2e, r24	; 46
    2426:	0d b4       	in	r0, 0x2d	; 45
    2428:	07 fe       	sbrs	r0, 7
    242a:	fd cf       	rjmp	.-6      	; 0x2426 <rf_tx_packet+0x1a2>
    242c:	e3 ec       	ldi	r30, 0xC3	; 195
    242e:	f6 e0       	ldi	r31, 0x06	; 6
    2430:	80 81       	ld	r24, Z
    2432:	8e bd       	out	0x2e, r24	; 46
    2434:	0d b4       	in	r0, 0x2d	; 45
    2436:	07 fe       	sbrs	r0, 7
    2438:	fd cf       	rjmp	.-6      	; 0x2434 <rf_tx_packet+0x1b0>
    243a:	31 96       	adiw	r30, 0x01	; 1
    243c:	86 e0       	ldi	r24, 0x06	; 6
    243e:	e7 3c       	cpi	r30, 0xC7	; 199
    2440:	f8 07       	cpc	r31, r24
    2442:	b1 f7       	brne	.-20     	; 0x2430 <rf_tx_packet+0x1ac>
    2444:	40 9a       	sbi	0x08, 0	; 8
    2446:	40 98       	cbi	0x08, 0	; 8
    2448:	8e e3       	ldi	r24, 0x3E	; 62
    244a:	8e bd       	out	0x2e, r24	; 46
    244c:	0d b4       	in	r0, 0x2d	; 45
    244e:	07 fe       	sbrs	r0, 7
    2450:	fd cf       	rjmp	.-6      	; 0x244c <rf_tx_packet+0x1c8>
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	0d c0       	rjmp	.+26     	; 0x2472 <rf_tx_packet+0x1ee>
    2458:	f8 01       	movw	r30, r16
    245a:	83 81       	ldd	r24, Z+3	; 0x03
    245c:	94 81       	ldd	r25, Z+4	; 0x04
    245e:	48 0f       	add	r20, r24
    2460:	59 1f       	adc	r21, r25
    2462:	fa 01       	movw	r30, r20
    2464:	80 81       	ld	r24, Z
    2466:	8e bd       	out	0x2e, r24	; 46
    2468:	0d b4       	in	r0, 0x2d	; 45
    246a:	07 fe       	sbrs	r0, 7
    246c:	fd cf       	rjmp	.-6      	; 0x2468 <rf_tx_packet+0x1e4>
    246e:	2f 5f       	subi	r18, 0xFF	; 255
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	42 2f       	mov	r20, r18
    2474:	55 27       	eor	r21, r21
    2476:	46 17       	cp	r20, r22
    2478:	57 07       	cpc	r21, r23
    247a:	74 f3       	brlt	.-36     	; 0x2458 <rf_tx_packet+0x1d4>
    247c:	40 9a       	sbi	0x08, 0	; 8
    247e:	40 98       	cbi	0x08, 0	; 8
    2480:	8e e3       	ldi	r24, 0x3E	; 62
    2482:	8e bd       	out	0x2e, r24	; 46
    2484:	0d b4       	in	r0, 0x2d	; 45
    2486:	07 fc       	sbrc	r0, 7
    2488:	05 c0       	rjmp	.+10     	; 0x2494 <rf_tx_packet+0x210>
    248a:	fc cf       	rjmp	.-8      	; 0x2484 <rf_tx_packet+0x200>
    248c:	0d b4       	in	r0, 0x2d	; 45
    248e:	07 fc       	sbrc	r0, 7
    2490:	94 c0       	rjmp	.+296    	; 0x25ba <rf_tx_packet+0x336>
    2492:	fc cf       	rjmp	.-8      	; 0x248c <rf_tx_packet+0x208>
    2494:	ae bd       	out	0x2e, r26	; 46
    2496:	fa cf       	rjmp	.-12     	; 0x248c <rf_tx_packet+0x208>
    2498:	80 91 be 06 	lds	r24, 0x06BE
    249c:	88 23       	and	r24, r24
    249e:	39 f4       	brne	.+14     	; 0x24ae <rf_tx_packet+0x22a>
    24a0:	40 98       	cbi	0x08, 0	; 8
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	8e bd       	out	0x2e, r24	; 46
    24a6:	0d b4       	in	r0, 0x2d	; 45
    24a8:	07 fe       	sbrs	r0, 7
    24aa:	fd cf       	rjmp	.-6      	; 0x24a6 <rf_tx_packet+0x222>
    24ac:	40 9a       	sbi	0x08, 0	; 8
    24ae:	40 98       	cbi	0x08, 0	; 8
    24b0:	1e bc       	out	0x2e, r1	; 46
    24b2:	0d b4       	in	r0, 0x2d	; 45
    24b4:	07 fe       	sbrs	r0, 7
    24b6:	fd cf       	rjmp	.-6      	; 0x24b2 <rf_tx_packet+0x22e>
    24b8:	8e b5       	in	r24, 0x2e	; 46
    24ba:	40 9a       	sbi	0x08, 0	; 8
    24bc:	81 ff       	sbrs	r24, 1
    24be:	f7 cf       	rjmp	.-18     	; 0x24ae <rf_tx_packet+0x22a>
    24c0:	00 e0       	ldi	r16, 0x00	; 0
    24c2:	40 98       	cbi	0x08, 0	; 8
    24c4:	85 e0       	ldi	r24, 0x05	; 5
    24c6:	8e bd       	out	0x2e, r24	; 46
    24c8:	0d b4       	in	r0, 0x2d	; 45
    24ca:	07 fe       	sbrs	r0, 7
    24cc:	fd cf       	rjmp	.-6      	; 0x24c8 <rf_tx_packet+0x244>
    24ce:	40 9a       	sbi	0x08, 0	; 8
    24d0:	40 98       	cbi	0x08, 0	; 8
    24d2:	1e bc       	out	0x2e, r1	; 46
    24d4:	0d b4       	in	r0, 0x2d	; 45
    24d6:	07 fe       	sbrs	r0, 7
    24d8:	fd cf       	rjmp	.-6      	; 0x24d4 <rf_tx_packet+0x250>
    24da:	1e b5       	in	r17, 0x2e	; 46
    24dc:	40 9a       	sbi	0x08, 0	; 8
    24de:	0f 5f       	subi	r16, 0xFF	; 255
    24e0:	05 36       	cpi	r16, 0x65	; 101
    24e2:	51 f4       	brne	.+20     	; 0x24f8 <rf_tx_packet+0x274>
    24e4:	78 94       	sei
    24e6:	80 91 b1 06 	lds	r24, 0x06B1
    24ea:	90 91 b2 06 	lds	r25, 0x06B2
    24ee:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	68 c0       	rjmp	.+208    	; 0x25c8 <rf_tx_packet+0x344>
    24f8:	84 e6       	ldi	r24, 0x64	; 100
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    2500:	13 fd       	sbrc	r17, 3
    2502:	08 c0       	rjmp	.+16     	; 0x2514 <rf_tx_packet+0x290>
    2504:	de cf       	rjmp	.-68     	; 0x24c2 <rf_tx_packet+0x23e>
    2506:	40 98       	cbi	0x08, 0	; 8
    2508:	84 e0       	ldi	r24, 0x04	; 4
    250a:	8e bd       	out	0x2e, r24	; 46
    250c:	0d b4       	in	r0, 0x2d	; 45
    250e:	07 fe       	sbrs	r0, 7
    2510:	fd cf       	rjmp	.-6      	; 0x250c <rf_tx_packet+0x288>
    2512:	40 9a       	sbi	0x08, 0	; 8
    2514:	78 94       	sei
    2516:	4e 9b       	sbis	0x09, 6	; 9
    2518:	fe cf       	rjmp	.-4      	; 0x2516 <rf_tx_packet+0x292>
    251a:	4e 99       	sbic	0x09, 6	; 9
    251c:	fe cf       	rjmp	.-4      	; 0x251a <rf_tx_packet+0x296>
    251e:	80 91 c1 06 	lds	r24, 0x06C1
    2522:	88 23       	and	r24, r24
    2524:	91 f0       	breq	.+36     	; 0x254a <rf_tx_packet+0x2c6>
    2526:	84 ea       	ldi	r24, 0xA4	; 164
    2528:	92 e0       	ldi	r25, 0x02	; 2
    252a:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    252e:	31 9b       	sbis	0x06, 1	; 6
    2530:	0e c0       	rjmp	.+28     	; 0x254e <rf_tx_packet+0x2ca>
    2532:	40 98       	cbi	0x08, 0	; 8
    2534:	8f e7       	ldi	r24, 0x7F	; 127
    2536:	8e bd       	out	0x2e, r24	; 46
    2538:	0d b4       	in	r0, 0x2d	; 45
    253a:	07 fe       	sbrs	r0, 7
    253c:	fd cf       	rjmp	.-6      	; 0x2538 <rf_tx_packet+0x2b4>
    253e:	1e bc       	out	0x2e, r1	; 46
    2540:	0d b4       	in	r0, 0x2d	; 45
    2542:	07 fe       	sbrs	r0, 7
    2544:	fd cf       	rjmp	.-6      	; 0x2540 <rf_tx_packet+0x2bc>
    2546:	8e b5       	in	r24, 0x2e	; 46
    2548:	40 9a       	sbi	0x08, 0	; 8
    254a:	11 e0       	ldi	r17, 0x01	; 1
    254c:	0f c0       	rjmp	.+30     	; 0x256c <rf_tx_packet+0x2e8>
    254e:	40 98       	cbi	0x08, 0	; 8
    2550:	88 e0       	ldi	r24, 0x08	; 8
    2552:	8e bd       	out	0x2e, r24	; 46
    2554:	0d b4       	in	r0, 0x2d	; 45
    2556:	07 fe       	sbrs	r0, 7
    2558:	fd cf       	rjmp	.-6      	; 0x2554 <rf_tx_packet+0x2d0>
    255a:	40 9a       	sbi	0x08, 0	; 8
    255c:	40 98       	cbi	0x08, 0	; 8
    255e:	88 e0       	ldi	r24, 0x08	; 8
    2560:	8e bd       	out	0x2e, r24	; 46
    2562:	0d b4       	in	r0, 0x2d	; 45
    2564:	07 fe       	sbrs	r0, 7
    2566:	fd cf       	rjmp	.-6      	; 0x2562 <rf_tx_packet+0x2de>
    2568:	40 9a       	sbi	0x08, 0	; 8
    256a:	10 e0       	ldi	r17, 0x00	; 0
    256c:	f8 94       	cli
    256e:	40 98       	cbi	0x08, 0	; 8
    2570:	86 e0       	ldi	r24, 0x06	; 6
    2572:	8e bd       	out	0x2e, r24	; 46
    2574:	0d b4       	in	r0, 0x2d	; 45
    2576:	07 fe       	sbrs	r0, 7
    2578:	fd cf       	rjmp	.-6      	; 0x2574 <rf_tx_packet+0x2f0>
    257a:	40 9a       	sbi	0x08, 0	; 8
    257c:	78 94       	sei
    257e:	80 91 b8 06 	lds	r24, 0x06B8
    2582:	8f 5f       	subi	r24, 0xFF	; 255
    2584:	80 93 b8 06 	sts	0x06B8, r24
    2588:	80 91 b1 06 	lds	r24, 0x06B1
    258c:	90 91 b2 06 	lds	r25, 0x06B2
    2590:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2594:	81 2f       	mov	r24, r17
    2596:	99 27       	eor	r25, r25
    2598:	17 c0       	rjmp	.+46     	; 0x25c8 <rf_tx_packet+0x344>
    259a:	40 9a       	sbi	0x08, 0	; 8
    259c:	81 e4       	ldi	r24, 0x41	; 65
    259e:	98 e8       	ldi	r25, 0x88	; 136
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	80 91 c1 06 	lds	r24, 0x06C1
    25a8:	88 23       	and	r24, r24
    25aa:	09 f0       	breq	.+2      	; 0x25ae <rf_tx_packet+0x32a>
    25ac:	c9 ce       	rjmp	.-622    	; 0x2340 <rf_tx_packet+0xbc>
    25ae:	cc ce       	rjmp	.-616    	; 0x2348 <rf_tx_packet+0xc4>
    25b0:	40 9a       	sbi	0x08, 0	; 8
    25b2:	40 98       	cbi	0x08, 0	; 8
    25b4:	8e e3       	ldi	r24, 0x3E	; 62
    25b6:	8e bd       	out	0x2e, r24	; 46
    25b8:	f2 ce       	rjmp	.-540    	; 0x239e <rf_tx_packet+0x11a>
    25ba:	40 9a       	sbi	0x08, 0	; 8
    25bc:	f8 01       	movw	r30, r16
    25be:	85 81       	ldd	r24, Z+5	; 0x05
    25c0:	88 23       	and	r24, r24
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <rf_tx_packet+0x342>
    25c4:	69 cf       	rjmp	.-302    	; 0x2498 <rf_tx_packet+0x214>
    25c6:	9f cf       	rjmp	.-194    	; 0x2506 <rf_tx_packet+0x282>
    25c8:	22 96       	adiw	r28, 0x02	; 2
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	08 95       	ret

000025e2 <rf_tx_tdma_packet>:
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	22 97       	sbiw	r28, 0x02	; 2
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	8c 01       	movw	r16, r24
    2606:	6b 01       	movw	r12, r22
    2608:	7a 01       	movw	r14, r20
    260a:	80 91 b1 06 	lds	r24, 0x06B1
    260e:	90 91 b2 06 	lds	r25, 0x06B2
    2612:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2616:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    261a:	40 98       	cbi	0x08, 0	; 8
    261c:	88 e0       	ldi	r24, 0x08	; 8
    261e:	8e bd       	out	0x2e, r24	; 46
    2620:	0d b4       	in	r0, 0x2d	; 45
    2622:	07 fe       	sbrs	r0, 7
    2624:	fd cf       	rjmp	.-6      	; 0x2620 <rf_tx_tdma_packet+0x3e>
    2626:	40 9a       	sbi	0x08, 0	; 8
    2628:	40 98       	cbi	0x08, 0	; 8
    262a:	88 e0       	ldi	r24, 0x08	; 8
    262c:	8e bd       	out	0x2e, r24	; 46
    262e:	0d b4       	in	r0, 0x2d	; 45
    2630:	07 fe       	sbrs	r0, 7
    2632:	fd cf       	rjmp	.-6      	; 0x262e <rf_tx_tdma_packet+0x4c>
    2634:	40 9a       	sbi	0x08, 0	; 8
    2636:	67 99       	sbic	0x0c, 7	; 12
    2638:	fe cf       	rjmp	.-4      	; 0x2636 <rf_tx_tdma_packet+0x54>
    263a:	4e 99       	sbic	0x09, 6	; 9
    263c:	fc cf       	rjmp	.-8      	; 0x2636 <rf_tx_tdma_packet+0x54>
    263e:	f8 94       	cli
    2640:	40 98       	cbi	0x08, 0	; 8
    2642:	89 e0       	ldi	r24, 0x09	; 9
    2644:	8e bd       	out	0x2e, r24	; 46
    2646:	0d b4       	in	r0, 0x2d	; 45
    2648:	07 fe       	sbrs	r0, 7
    264a:	fd cf       	rjmp	.-6      	; 0x2646 <rf_tx_tdma_packet+0x64>
    264c:	40 9a       	sbi	0x08, 0	; 8
    264e:	40 98       	cbi	0x08, 0	; 8
    2650:	89 e0       	ldi	r24, 0x09	; 9
    2652:	8e bd       	out	0x2e, r24	; 46
    2654:	0d b4       	in	r0, 0x2d	; 45
    2656:	07 fe       	sbrs	r0, 7
    2658:	fd cf       	rjmp	.-6      	; 0x2654 <rf_tx_tdma_packet+0x72>
    265a:	40 9a       	sbi	0x08, 0	; 8
    265c:	f8 01       	movw	r30, r16
    265e:	62 81       	ldd	r22, Z+2	; 0x02
    2660:	46 2f       	mov	r20, r22
    2662:	55 27       	eor	r21, r21
    2664:	47 fd       	sbrc	r20, 7
    2666:	50 95       	com	r21
    2668:	bb 24       	eor	r11, r11
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	07 c0       	rjmp	.+14     	; 0x267e <rf_tx_tdma_packet+0x9c>
    2670:	f8 01       	movw	r30, r16
    2672:	83 81       	ldd	r24, Z+3	; 0x03
    2674:	94 81       	ldd	r25, Z+4	; 0x04
    2676:	a8 0f       	add	r26, r24
    2678:	b9 1f       	adc	r27, r25
    267a:	8c 91       	ld	r24, X
    267c:	b8 0e       	add	r11, r24
    267e:	82 2f       	mov	r24, r18
    2680:	2f 5f       	subi	r18, 0xFF	; 255
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	a8 2f       	mov	r26, r24
    2686:	bb 27       	eor	r27, r27
    2688:	a4 17       	cp	r26, r20
    268a:	b5 07       	cpc	r27, r21
    268c:	8c f3       	brlt	.-30     	; 0x2670 <rf_tx_tdma_packet+0x8e>
    268e:	96 2f       	mov	r25, r22
    2690:	94 5f       	subi	r25, 0xF4	; 244
    2692:	40 98       	cbi	0x08, 0	; 8
    2694:	8e e3       	ldi	r24, 0x3E	; 62
    2696:	8e bd       	out	0x2e, r24	; 46
    2698:	0d b4       	in	r0, 0x2d	; 45
    269a:	07 fc       	sbrc	r0, 7
    269c:	05 c0       	rjmp	.+10     	; 0x26a8 <rf_tx_tdma_packet+0xc6>
    269e:	fc cf       	rjmp	.-8      	; 0x2698 <rf_tx_tdma_packet+0xb6>
    26a0:	0d b4       	in	r0, 0x2d	; 45
    26a2:	07 fc       	sbrc	r0, 7
    26a4:	16 c1       	rjmp	.+556    	; 0x28d2 <rf_tx_tdma_packet+0x2f0>
    26a6:	fc cf       	rjmp	.-8      	; 0x26a0 <rf_tx_tdma_packet+0xbe>
    26a8:	9e bd       	out	0x2e, r25	; 46
    26aa:	fa cf       	rjmp	.-12     	; 0x26a0 <rf_tx_tdma_packet+0xbe>
    26ac:	81 e6       	ldi	r24, 0x61	; 97
    26ae:	98 e8       	ldi	r25, 0x88	; 136
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	40 98       	cbi	0x08, 0	; 8
    26b6:	8e e3       	ldi	r24, 0x3E	; 62
    26b8:	8e bd       	out	0x2e, r24	; 46
    26ba:	0d b4       	in	r0, 0x2d	; 45
    26bc:	07 fe       	sbrs	r0, 7
    26be:	fd cf       	rjmp	.-6      	; 0x26ba <rf_tx_tdma_packet+0xd8>
    26c0:	fe 01       	movw	r30, r28
    26c2:	31 96       	adiw	r30, 0x01	; 1
    26c4:	9e 01       	movw	r18, r28
    26c6:	2d 5f       	subi	r18, 0xFD	; 253
    26c8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	8e bd       	out	0x2e, r24	; 46
    26ce:	0d b4       	in	r0, 0x2d	; 45
    26d0:	07 fe       	sbrs	r0, 7
    26d2:	fd cf       	rjmp	.-6      	; 0x26ce <rf_tx_tdma_packet+0xec>
    26d4:	31 96       	adiw	r30, 0x01	; 1
    26d6:	e2 17       	cp	r30, r18
    26d8:	f3 07       	cpc	r31, r19
    26da:	b9 f7       	brne	.-18     	; 0x26ca <rf_tx_tdma_packet+0xe8>
    26dc:	40 9a       	sbi	0x08, 0	; 8
    26de:	40 98       	cbi	0x08, 0	; 8
    26e0:	8e e3       	ldi	r24, 0x3E	; 62
    26e2:	8e bd       	out	0x2e, r24	; 46
    26e4:	0d b4       	in	r0, 0x2d	; 45
    26e6:	07 fc       	sbrc	r0, 7
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <rf_tx_tdma_packet+0x112>
    26ea:	fc cf       	rjmp	.-8      	; 0x26e4 <rf_tx_tdma_packet+0x102>
    26ec:	0d b4       	in	r0, 0x2d	; 45
    26ee:	07 fc       	sbrc	r0, 7
    26f0:	f9 c0       	rjmp	.+498    	; 0x28e4 <rf_tx_tdma_packet+0x302>
    26f2:	fc cf       	rjmp	.-8      	; 0x26ec <rf_tx_tdma_packet+0x10a>
    26f4:	80 91 b8 06 	lds	r24, 0x06B8
    26f8:	8e bd       	out	0x2e, r24	; 46
    26fa:	f8 cf       	rjmp	.-16     	; 0x26ec <rf_tx_tdma_packet+0x10a>
    26fc:	0d b4       	in	r0, 0x2d	; 45
    26fe:	07 fe       	sbrs	r0, 7
    2700:	fd cf       	rjmp	.-6      	; 0x26fc <rf_tx_tdma_packet+0x11a>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	f9 01       	movw	r30, r18
    2708:	e6 54       	subi	r30, 0x46	; 70
    270a:	f9 4f       	sbci	r31, 0xF9	; 249
    270c:	80 81       	ld	r24, Z
    270e:	8e bd       	out	0x2e, r24	; 46
    2710:	0d b4       	in	r0, 0x2d	; 45
    2712:	07 fe       	sbrs	r0, 7
    2714:	fd cf       	rjmp	.-6      	; 0x2710 <rf_tx_tdma_packet+0x12e>
    2716:	2f 5f       	subi	r18, 0xFF	; 255
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	22 30       	cpi	r18, 0x02	; 2
    271c:	31 05       	cpc	r19, r1
    271e:	99 f7       	brne	.-26     	; 0x2706 <rf_tx_tdma_packet+0x124>
    2720:	40 9a       	sbi	0x08, 0	; 8
    2722:	40 98       	cbi	0x08, 0	; 8
    2724:	8e e3       	ldi	r24, 0x3E	; 62
    2726:	8e bd       	out	0x2e, r24	; 46
    2728:	0d b4       	in	r0, 0x2d	; 45
    272a:	07 fe       	sbrs	r0, 7
    272c:	fd cf       	rjmp	.-6      	; 0x2728 <rf_tx_tdma_packet+0x146>
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	f8 01       	movw	r30, r16
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	8e bd       	out	0x2e, r24	; 46
    273c:	0d b4       	in	r0, 0x2d	; 45
    273e:	07 fe       	sbrs	r0, 7
    2740:	fd cf       	rjmp	.-6      	; 0x273c <rf_tx_tdma_packet+0x15a>
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	22 30       	cpi	r18, 0x02	; 2
    2748:	31 05       	cpc	r19, r1
    274a:	99 f7       	brne	.-26     	; 0x2732 <rf_tx_tdma_packet+0x150>
    274c:	40 9a       	sbi	0x08, 0	; 8
    274e:	40 98       	cbi	0x08, 0	; 8
    2750:	8e e3       	ldi	r24, 0x3E	; 62
    2752:	8e bd       	out	0x2e, r24	; 46
    2754:	0d b4       	in	r0, 0x2d	; 45
    2756:	07 fe       	sbrs	r0, 7
    2758:	fd cf       	rjmp	.-6      	; 0x2754 <rf_tx_tdma_packet+0x172>
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	f9 01       	movw	r30, r18
    2760:	e4 54       	subi	r30, 0x44	; 68
    2762:	f9 4f       	sbci	r31, 0xF9	; 249
    2764:	80 81       	ld	r24, Z
    2766:	8e bd       	out	0x2e, r24	; 46
    2768:	0d b4       	in	r0, 0x2d	; 45
    276a:	07 fe       	sbrs	r0, 7
    276c:	fd cf       	rjmp	.-6      	; 0x2768 <rf_tx_tdma_packet+0x186>
    276e:	2f 5f       	subi	r18, 0xFF	; 255
    2770:	3f 4f       	sbci	r19, 0xFF	; 255
    2772:	22 30       	cpi	r18, 0x02	; 2
    2774:	31 05       	cpc	r19, r1
    2776:	99 f7       	brne	.-26     	; 0x275e <rf_tx_tdma_packet+0x17c>
    2778:	40 9a       	sbi	0x08, 0	; 8
    277a:	b7 01       	movw	r22, r14
    277c:	c6 01       	movw	r24, r12
    277e:	0e 94 a0 30 	call	0x6140	; 0x6140 <nrk_high_speed_timer_wait>
    2782:	f8 01       	movw	r30, r16
    2784:	85 81       	ldd	r24, Z+5	; 0x05
    2786:	88 23       	and	r24, r24
    2788:	c1 f1       	breq	.+112    	; 0x27fa <rf_tx_tdma_packet+0x218>
    278a:	80 91 be 06 	lds	r24, 0x06BE
    278e:	88 23       	and	r24, r24
    2790:	39 f4       	brne	.+14     	; 0x27a0 <rf_tx_tdma_packet+0x1be>
    2792:	40 98       	cbi	0x08, 0	; 8
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	8e bd       	out	0x2e, r24	; 46
    2798:	0d b4       	in	r0, 0x2d	; 45
    279a:	07 fe       	sbrs	r0, 7
    279c:	fd cf       	rjmp	.-6      	; 0x2798 <rf_tx_tdma_packet+0x1b6>
    279e:	40 9a       	sbi	0x08, 0	; 8
    27a0:	40 98       	cbi	0x08, 0	; 8
    27a2:	1e bc       	out	0x2e, r1	; 46
    27a4:	0d b4       	in	r0, 0x2d	; 45
    27a6:	07 fe       	sbrs	r0, 7
    27a8:	fd cf       	rjmp	.-6      	; 0x27a4 <rf_tx_tdma_packet+0x1c2>
    27aa:	8e b5       	in	r24, 0x2e	; 46
    27ac:	40 9a       	sbi	0x08, 0	; 8
    27ae:	81 ff       	sbrs	r24, 1
    27b0:	f7 cf       	rjmp	.-18     	; 0x27a0 <rf_tx_tdma_packet+0x1be>
    27b2:	ee 24       	eor	r14, r14
    27b4:	40 98       	cbi	0x08, 0	; 8
    27b6:	85 e0       	ldi	r24, 0x05	; 5
    27b8:	8e bd       	out	0x2e, r24	; 46
    27ba:	0d b4       	in	r0, 0x2d	; 45
    27bc:	07 fe       	sbrs	r0, 7
    27be:	fd cf       	rjmp	.-6      	; 0x27ba <rf_tx_tdma_packet+0x1d8>
    27c0:	40 9a       	sbi	0x08, 0	; 8
    27c2:	40 98       	cbi	0x08, 0	; 8
    27c4:	1e bc       	out	0x2e, r1	; 46
    27c6:	0d b4       	in	r0, 0x2d	; 45
    27c8:	07 fe       	sbrs	r0, 7
    27ca:	fd cf       	rjmp	.-6      	; 0x27c6 <rf_tx_tdma_packet+0x1e4>
    27cc:	fe b4       	in	r15, 0x2e	; 46
    27ce:	40 9a       	sbi	0x08, 0	; 8
    27d0:	e3 94       	inc	r14
    27d2:	f5 e6       	ldi	r31, 0x65	; 101
    27d4:	ef 16       	cp	r14, r31
    27d6:	51 f4       	brne	.+20     	; 0x27ec <rf_tx_tdma_packet+0x20a>
    27d8:	78 94       	sei
    27da:	80 91 b1 06 	lds	r24, 0x06B1
    27de:	90 91 b2 06 	lds	r25, 0x06B2
    27e2:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	83 c0       	rjmp	.+262    	; 0x28f2 <rf_tx_tdma_packet+0x310>
    27ec:	84 e6       	ldi	r24, 0x64	; 100
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    27f4:	f3 fc       	sbrc	r15, 3
    27f6:	08 c0       	rjmp	.+16     	; 0x2808 <rf_tx_tdma_packet+0x226>
    27f8:	dd cf       	rjmp	.-70     	; 0x27b4 <rf_tx_tdma_packet+0x1d2>
    27fa:	40 98       	cbi	0x08, 0	; 8
    27fc:	84 e0       	ldi	r24, 0x04	; 4
    27fe:	8e bd       	out	0x2e, r24	; 46
    2800:	0d b4       	in	r0, 0x2d	; 45
    2802:	07 fe       	sbrs	r0, 7
    2804:	fd cf       	rjmp	.-6      	; 0x2800 <rf_tx_tdma_packet+0x21e>
    2806:	40 9a       	sbi	0x08, 0	; 8
    2808:	40 98       	cbi	0x08, 0	; 8
    280a:	8e e3       	ldi	r24, 0x3E	; 62
    280c:	8e bd       	out	0x2e, r24	; 46
    280e:	0d b4       	in	r0, 0x2d	; 45
    2810:	07 fe       	sbrs	r0, 7
    2812:	fd cf       	rjmp	.-6      	; 0x280e <rf_tx_tdma_packet+0x22c>
    2814:	f8 01       	movw	r30, r16
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	48 2f       	mov	r20, r24
    281a:	55 27       	eor	r21, r21
    281c:	47 fd       	sbrc	r20, 7
    281e:	50 95       	com	r21
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	0c c0       	rjmp	.+24     	; 0x283e <rf_tx_tdma_packet+0x25c>
    2826:	f8 01       	movw	r30, r16
    2828:	83 81       	ldd	r24, Z+3	; 0x03
    282a:	94 81       	ldd	r25, Z+4	; 0x04
    282c:	a8 0f       	add	r26, r24
    282e:	b9 1f       	adc	r27, r25
    2830:	8c 91       	ld	r24, X
    2832:	8e bd       	out	0x2e, r24	; 46
    2834:	0d b4       	in	r0, 0x2d	; 45
    2836:	07 fe       	sbrs	r0, 7
    2838:	fd cf       	rjmp	.-6      	; 0x2834 <rf_tx_tdma_packet+0x252>
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	a2 2f       	mov	r26, r18
    2840:	bb 27       	eor	r27, r27
    2842:	a4 17       	cp	r26, r20
    2844:	b5 07       	cpc	r27, r21
    2846:	7c f3       	brlt	.-34     	; 0x2826 <rf_tx_tdma_packet+0x244>
    2848:	40 9a       	sbi	0x08, 0	; 8
    284a:	40 98       	cbi	0x08, 0	; 8
    284c:	8e e3       	ldi	r24, 0x3E	; 62
    284e:	8e bd       	out	0x2e, r24	; 46
    2850:	0d b4       	in	r0, 0x2d	; 45
    2852:	07 fc       	sbrc	r0, 7
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <rf_tx_tdma_packet+0x27e>
    2856:	fc cf       	rjmp	.-8      	; 0x2850 <rf_tx_tdma_packet+0x26e>
    2858:	0d b4       	in	r0, 0x2d	; 45
    285a:	07 fc       	sbrc	r0, 7
    285c:	48 c0       	rjmp	.+144    	; 0x28ee <rf_tx_tdma_packet+0x30c>
    285e:	fc cf       	rjmp	.-8      	; 0x2858 <rf_tx_tdma_packet+0x276>
    2860:	be bc       	out	0x2e, r11	; 46
    2862:	fa cf       	rjmp	.-12     	; 0x2858 <rf_tx_tdma_packet+0x276>
    2864:	4e 9b       	sbis	0x09, 6	; 9
    2866:	fe cf       	rjmp	.-4      	; 0x2864 <rf_tx_tdma_packet+0x282>
    2868:	f8 94       	cli
    286a:	4e 99       	sbic	0x09, 6	; 9
    286c:	fe cf       	rjmp	.-4      	; 0x286a <rf_tx_tdma_packet+0x288>
    286e:	40 98       	cbi	0x08, 0	; 8
    2870:	88 e0       	ldi	r24, 0x08	; 8
    2872:	8e bd       	out	0x2e, r24	; 46
    2874:	0d b4       	in	r0, 0x2d	; 45
    2876:	07 fe       	sbrs	r0, 7
    2878:	fd cf       	rjmp	.-6      	; 0x2874 <rf_tx_tdma_packet+0x292>
    287a:	40 9a       	sbi	0x08, 0	; 8
    287c:	40 98       	cbi	0x08, 0	; 8
    287e:	88 e0       	ldi	r24, 0x08	; 8
    2880:	8e bd       	out	0x2e, r24	; 46
    2882:	0d b4       	in	r0, 0x2d	; 45
    2884:	07 fe       	sbrs	r0, 7
    2886:	fd cf       	rjmp	.-6      	; 0x2882 <rf_tx_tdma_packet+0x2a0>
    2888:	40 9a       	sbi	0x08, 0	; 8
    288a:	40 98       	cbi	0x08, 0	; 8
    288c:	89 e0       	ldi	r24, 0x09	; 9
    288e:	8e bd       	out	0x2e, r24	; 46
    2890:	0d b4       	in	r0, 0x2d	; 45
    2892:	07 fe       	sbrs	r0, 7
    2894:	fd cf       	rjmp	.-6      	; 0x2890 <rf_tx_tdma_packet+0x2ae>
    2896:	40 9a       	sbi	0x08, 0	; 8
    2898:	40 98       	cbi	0x08, 0	; 8
    289a:	89 e0       	ldi	r24, 0x09	; 9
    289c:	8e bd       	out	0x2e, r24	; 46
    289e:	0d b4       	in	r0, 0x2d	; 45
    28a0:	07 fe       	sbrs	r0, 7
    28a2:	fd cf       	rjmp	.-6      	; 0x289e <rf_tx_tdma_packet+0x2bc>
    28a4:	40 9a       	sbi	0x08, 0	; 8
    28a6:	40 98       	cbi	0x08, 0	; 8
    28a8:	86 e0       	ldi	r24, 0x06	; 6
    28aa:	8e bd       	out	0x2e, r24	; 46
    28ac:	0d b4       	in	r0, 0x2d	; 45
    28ae:	07 fe       	sbrs	r0, 7
    28b0:	fd cf       	rjmp	.-6      	; 0x28ac <rf_tx_tdma_packet+0x2ca>
    28b2:	40 9a       	sbi	0x08, 0	; 8
    28b4:	78 94       	sei
    28b6:	80 91 b8 06 	lds	r24, 0x06B8
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	80 93 b8 06 	sts	0x06B8, r24
    28c0:	80 91 b1 06 	lds	r24, 0x06B1
    28c4:	90 91 b2 06 	lds	r25, 0x06B2
    28c8:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	10 c0       	rjmp	.+32     	; 0x28f2 <rf_tx_tdma_packet+0x310>
    28d2:	40 9a       	sbi	0x08, 0	; 8
    28d4:	f8 01       	movw	r30, r16
    28d6:	86 81       	ldd	r24, Z+6	; 0x06
    28d8:	88 23       	and	r24, r24
    28da:	09 f0       	breq	.+2      	; 0x28de <rf_tx_tdma_packet+0x2fc>
    28dc:	e7 ce       	rjmp	.-562    	; 0x26ac <rf_tx_tdma_packet+0xca>
    28de:	81 e4       	ldi	r24, 0x41	; 65
    28e0:	98 e8       	ldi	r25, 0x88	; 136
    28e2:	e6 ce       	rjmp	.-564    	; 0x26b0 <rf_tx_tdma_packet+0xce>
    28e4:	40 9a       	sbi	0x08, 0	; 8
    28e6:	40 98       	cbi	0x08, 0	; 8
    28e8:	8e e3       	ldi	r24, 0x3E	; 62
    28ea:	8e bd       	out	0x2e, r24	; 46
    28ec:	07 cf       	rjmp	.-498    	; 0x26fc <rf_tx_tdma_packet+0x11a>
    28ee:	40 9a       	sbi	0x08, 0	; 8
    28f0:	b9 cf       	rjmp	.-142    	; 0x2864 <rf_tx_tdma_packet+0x282>
    28f2:	22 96       	adiw	r28, 0x02	; 2
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	08 95       	ret

00002912 <rf_addr_decode_set_my_mac>:
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	22 97       	sbiw	r28, 0x02	; 2
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	90 93 bd 06 	sts	0x06BD, r25
    292e:	80 93 bc 06 	sts	0x06BC, r24
    2932:	84 ef       	ldi	r24, 0xF4	; 244
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    293a:	40 98       	cbi	0x08, 0	; 8
    293c:	8a ee       	ldi	r24, 0xEA	; 234
    293e:	8e bd       	out	0x2e, r24	; 46
    2940:	0d b4       	in	r0, 0x2d	; 45
    2942:	07 fe       	sbrs	r0, 7
    2944:	fd cf       	rjmp	.-6      	; 0x2940 <rf_addr_decode_set_my_mac+0x2e>
    2946:	80 e8       	ldi	r24, 0x80	; 128
    2948:	8e bd       	out	0x2e, r24	; 46
    294a:	0d b4       	in	r0, 0x2d	; 45
    294c:	07 fe       	sbrs	r0, 7
    294e:	fd cf       	rjmp	.-6      	; 0x294a <rf_addr_decode_set_my_mac+0x38>
    2950:	fe 01       	movw	r30, r28
    2952:	31 96       	adiw	r30, 0x01	; 1
    2954:	9e 01       	movw	r18, r28
    2956:	2d 5f       	subi	r18, 0xFD	; 253
    2958:	3f 4f       	sbci	r19, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	8e bd       	out	0x2e, r24	; 46
    295e:	0d b4       	in	r0, 0x2d	; 45
    2960:	07 fe       	sbrs	r0, 7
    2962:	fd cf       	rjmp	.-6      	; 0x295e <rf_addr_decode_set_my_mac+0x4c>
    2964:	31 96       	adiw	r30, 0x01	; 1
    2966:	e2 17       	cp	r30, r18
    2968:	f3 07       	cpc	r31, r19
    296a:	b9 f7       	brne	.-18     	; 0x295a <rf_addr_decode_set_my_mac+0x48>
    296c:	40 9a       	sbi	0x08, 0	; 8
    296e:	84 ef       	ldi	r24, 0xF4	; 244
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    2976:	22 96       	adiw	r28, 0x02	; 2
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

00002988 <rf_security_set_key>:
    2988:	6f 92       	push	r6
    298a:	7f 92       	push	r7
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	22 97       	sbiw	r28, 0x02	; 2
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	8c 01       	movw	r16, r24
    29b6:	84 e6       	ldi	r24, 0x64	; 100
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    29be:	78 01       	movw	r14, r16
    29c0:	c1 2c       	mov	r12, r1
    29c2:	01 e0       	ldi	r16, 0x01	; 1
    29c4:	d0 2e       	mov	r13, r16
    29c6:	3e 01       	movw	r6, r28
    29c8:	08 94       	sec
    29ca:	61 1c       	adc	r6, r1
    29cc:	71 1c       	adc	r7, r1
    29ce:	13 e0       	ldi	r17, 0x03	; 3
    29d0:	81 2e       	mov	r8, r17
    29d2:	91 2c       	mov	r9, r1
    29d4:	8c 0e       	add	r8, r28
    29d6:	9d 1e       	adc	r9, r29
    29d8:	f7 01       	movw	r30, r14
    29da:	80 81       	ld	r24, Z
    29dc:	21 81       	ldd	r18, Z+1	; 0x01
    29de:	33 27       	eor	r19, r19
    29e0:	99 27       	eor	r25, r25
    29e2:	98 2f       	mov	r25, r24
    29e4:	88 27       	eor	r24, r24
    29e6:	28 2b       	or	r18, r24
    29e8:	39 2b       	or	r19, r25
    29ea:	3a 83       	std	Y+2, r19	; 0x02
    29ec:	29 83       	std	Y+1, r18	; 0x01
    29ee:	84 e6       	ldi	r24, 0x64	; 100
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    29f6:	40 98       	cbi	0x08, 0	; 8
    29f8:	8c 2d       	mov	r24, r12
    29fa:	80 68       	ori	r24, 0x80	; 128
    29fc:	8e bd       	out	0x2e, r24	; 46
    29fe:	0d b4       	in	r0, 0x2d	; 45
    2a00:	07 fe       	sbrs	r0, 7
    2a02:	fd cf       	rjmp	.-6      	; 0x29fe <rf_security_set_key+0x76>
    2a04:	c6 01       	movw	r24, r12
    2a06:	95 95       	asr	r25
    2a08:	87 95       	ror	r24
    2a0a:	80 7c       	andi	r24, 0xC0	; 192
    2a0c:	8e bd       	out	0x2e, r24	; 46
    2a0e:	0d b4       	in	r0, 0x2d	; 45
    2a10:	07 fe       	sbrs	r0, 7
    2a12:	fd cf       	rjmp	.-6      	; 0x2a0e <rf_security_set_key+0x86>
    2a14:	83 01       	movw	r16, r6
    2a16:	53 01       	movw	r10, r6
    2a18:	f5 01       	movw	r30, r10
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8e bd       	out	0x2e, r24	; 46
    2a1e:	0d b4       	in	r0, 0x2d	; 45
    2a20:	07 fe       	sbrs	r0, 7
    2a22:	fd cf       	rjmp	.-6      	; 0x2a1e <rf_security_set_key+0x96>
    2a24:	08 94       	sec
    2a26:	a1 1c       	adc	r10, r1
    2a28:	b1 1c       	adc	r11, r1
    2a2a:	a8 14       	cp	r10, r8
    2a2c:	b9 04       	cpc	r11, r9
    2a2e:	a1 f7       	brne	.-24     	; 0x2a18 <rf_security_set_key+0x90>
    2a30:	40 9a       	sbi	0x08, 0	; 8
    2a32:	08 94       	sec
    2a34:	e1 1c       	adc	r14, r1
    2a36:	f1 1c       	adc	r15, r1
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	c8 0e       	add	r12, r24
    2a3e:	d9 1e       	adc	r13, r25
    2a40:	90 e1       	ldi	r25, 0x10	; 16
    2a42:	c9 16       	cp	r12, r25
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	d9 06       	cpc	r13, r25
    2a48:	39 f6       	brne	.-114    	; 0x29d8 <rf_security_set_key+0x50>
    2a4a:	84 e6       	ldi	r24, 0x64	; 100
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    2a52:	20 e1       	ldi	r18, 0x10	; 16
    2a54:	31 e0       	ldi	r19, 0x01	; 1
    2a56:	40 e4       	ldi	r20, 0x40	; 64
    2a58:	51 e0       	ldi	r21, 0x01	; 1
    2a5a:	1a 82       	std	Y+2, r1	; 0x02
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	40 98       	cbi	0x08, 0	; 8
    2a60:	84 2f       	mov	r24, r20
    2a62:	80 68       	ori	r24, 0x80	; 128
    2a64:	8e bd       	out	0x2e, r24	; 46
    2a66:	0d b4       	in	r0, 0x2d	; 45
    2a68:	07 fe       	sbrs	r0, 7
    2a6a:	fd cf       	rjmp	.-6      	; 0x2a66 <rf_security_set_key+0xde>
    2a6c:	ca 01       	movw	r24, r20
    2a6e:	95 95       	asr	r25
    2a70:	87 95       	ror	r24
    2a72:	80 7c       	andi	r24, 0xC0	; 192
    2a74:	8e bd       	out	0x2e, r24	; 46
    2a76:	0d b4       	in	r0, 0x2d	; 45
    2a78:	07 fe       	sbrs	r0, 7
    2a7a:	fd cf       	rjmp	.-6      	; 0x2a76 <rf_security_set_key+0xee>
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	80 81       	ld	r24, Z
    2a80:	8e bd       	out	0x2e, r24	; 46
    2a82:	0d b4       	in	r0, 0x2d	; 45
    2a84:	07 fe       	sbrs	r0, 7
    2a86:	fd cf       	rjmp	.-6      	; 0x2a82 <rf_security_set_key+0xfa>
    2a88:	31 96       	adiw	r30, 0x01	; 1
    2a8a:	ea 15       	cp	r30, r10
    2a8c:	fb 05       	cpc	r31, r11
    2a8e:	b9 f7       	brne	.-18     	; 0x2a7e <rf_security_set_key+0xf6>
    2a90:	40 9a       	sbi	0x08, 0	; 8
    2a92:	40 98       	cbi	0x08, 0	; 8
    2a94:	82 2f       	mov	r24, r18
    2a96:	80 68       	ori	r24, 0x80	; 128
    2a98:	8e bd       	out	0x2e, r24	; 46
    2a9a:	0d b4       	in	r0, 0x2d	; 45
    2a9c:	07 fe       	sbrs	r0, 7
    2a9e:	fd cf       	rjmp	.-6      	; 0x2a9a <rf_security_set_key+0x112>
    2aa0:	c9 01       	movw	r24, r18
    2aa2:	95 95       	asr	r25
    2aa4:	87 95       	ror	r24
    2aa6:	80 7c       	andi	r24, 0xC0	; 192
    2aa8:	8e bd       	out	0x2e, r24	; 46
    2aaa:	0d b4       	in	r0, 0x2d	; 45
    2aac:	07 fe       	sbrs	r0, 7
    2aae:	fd cf       	rjmp	.-6      	; 0x2aaa <rf_security_set_key+0x122>
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8e bd       	out	0x2e, r24	; 46
    2ab6:	0d b4       	in	r0, 0x2d	; 45
    2ab8:	07 fe       	sbrs	r0, 7
    2aba:	fd cf       	rjmp	.-6      	; 0x2ab6 <rf_security_set_key+0x12e>
    2abc:	31 96       	adiw	r30, 0x01	; 1
    2abe:	ea 15       	cp	r30, r10
    2ac0:	fb 05       	cpc	r31, r11
    2ac2:	b9 f7       	brne	.-18     	; 0x2ab2 <rf_security_set_key+0x12a>
    2ac4:	40 9a       	sbi	0x08, 0	; 8
    2ac6:	2e 5f       	subi	r18, 0xFE	; 254
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	4e 5f       	subi	r20, 0xFE	; 254
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	e1 e0       	ldi	r30, 0x01	; 1
    2ad0:	2e 31       	cpi	r18, 0x1E	; 30
    2ad2:	3e 07       	cpc	r19, r30
    2ad4:	11 f6       	brne	.-124    	; 0x2a5a <rf_security_set_key+0xd2>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	40 98       	cbi	0x08, 0	; 8
    2ae0:	8e ec       	ldi	r24, 0xCE	; 206
    2ae2:	8e bd       	out	0x2e, r24	; 46
    2ae4:	0d b4       	in	r0, 0x2d	; 45
    2ae6:	07 fe       	sbrs	r0, 7
    2ae8:	fd cf       	rjmp	.-6      	; 0x2ae4 <rf_security_set_key+0x15c>
    2aea:	80 e8       	ldi	r24, 0x80	; 128
    2aec:	8e bd       	out	0x2e, r24	; 46
    2aee:	0d b4       	in	r0, 0x2d	; 45
    2af0:	07 fe       	sbrs	r0, 7
    2af2:	fd cf       	rjmp	.-6      	; 0x2aee <rf_security_set_key+0x166>
    2af4:	f8 01       	movw	r30, r16
    2af6:	80 81       	ld	r24, Z
    2af8:	8e bd       	out	0x2e, r24	; 46
    2afa:	0d b4       	in	r0, 0x2d	; 45
    2afc:	07 fe       	sbrs	r0, 7
    2afe:	fd cf       	rjmp	.-6      	; 0x2afa <rf_security_set_key+0x172>
    2b00:	31 96       	adiw	r30, 0x01	; 1
    2b02:	ea 15       	cp	r30, r10
    2b04:	fb 05       	cpc	r31, r11
    2b06:	b9 f7       	brne	.-18     	; 0x2af6 <rf_security_set_key+0x16e>
    2b08:	40 9a       	sbi	0x08, 0	; 8
    2b0a:	40 98       	cbi	0x08, 0	; 8
    2b0c:	8e e9       	ldi	r24, 0x9E	; 158
    2b0e:	8e bd       	out	0x2e, r24	; 46
    2b10:	0d b4       	in	r0, 0x2d	; 45
    2b12:	07 fe       	sbrs	r0, 7
    2b14:	fd cf       	rjmp	.-6      	; 0x2b10 <rf_security_set_key+0x188>
    2b16:	80 e8       	ldi	r24, 0x80	; 128
    2b18:	8e bd       	out	0x2e, r24	; 46
    2b1a:	0d b4       	in	r0, 0x2d	; 45
    2b1c:	07 fe       	sbrs	r0, 7
    2b1e:	fd cf       	rjmp	.-6      	; 0x2b1a <rf_security_set_key+0x192>
    2b20:	f8 01       	movw	r30, r16
    2b22:	80 81       	ld	r24, Z
    2b24:	8e bd       	out	0x2e, r24	; 46
    2b26:	0d b4       	in	r0, 0x2d	; 45
    2b28:	07 fe       	sbrs	r0, 7
    2b2a:	fd cf       	rjmp	.-6      	; 0x2b26 <rf_security_set_key+0x19e>
    2b2c:	0f 5f       	subi	r16, 0xFF	; 255
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	0a 15       	cp	r16, r10
    2b32:	1b 05       	cpc	r17, r11
    2b34:	a9 f7       	brne	.-22     	; 0x2b20 <rf_security_set_key+0x198>
    2b36:	40 9a       	sbi	0x08, 0	; 8
    2b38:	22 96       	adiw	r28, 0x02	; 2
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	bf 90       	pop	r11
    2b56:	af 90       	pop	r10
    2b58:	9f 90       	pop	r9
    2b5a:	8f 90       	pop	r8
    2b5c:	7f 90       	pop	r7
    2b5e:	6f 90       	pop	r6
    2b60:	08 95       	ret

00002b62 <rf_power_up>:
    2b62:	f8 94       	cli
    2b64:	40 98       	cbi	0x08, 0	; 8
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	8e bd       	out	0x2e, r24	; 46
    2b6a:	0d b4       	in	r0, 0x2d	; 45
    2b6c:	07 fe       	sbrs	r0, 7
    2b6e:	fd cf       	rjmp	.-6      	; 0x2b6a <rf_power_up+0x8>
    2b70:	40 9a       	sbi	0x08, 0	; 8
    2b72:	88 ee       	ldi	r24, 0xE8	; 232
    2b74:	93 e0       	ldi	r25, 0x03	; 3
    2b76:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    2b7a:	78 94       	sei
    2b7c:	08 95       	ret

00002b7e <rf_set_rx>:
    2b7e:	1f 93       	push	r17
    2b80:	cf 93       	push	r28
    2b82:	df 93       	push	r29
    2b84:	ec 01       	movw	r28, r24
    2b86:	16 2f       	mov	r17, r22
    2b88:	80 91 b1 06 	lds	r24, 0x06B1
    2b8c:	90 91 b2 06 	lds	r25, 0x06B2
    2b90:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2b94:	40 98       	cbi	0x08, 0	; 8
    2b96:	88 e0       	ldi	r24, 0x08	; 8
    2b98:	8e bd       	out	0x2e, r24	; 46
    2b9a:	0d b4       	in	r0, 0x2d	; 45
    2b9c:	07 fe       	sbrs	r0, 7
    2b9e:	fd cf       	rjmp	.-6      	; 0x2b9a <rf_set_rx+0x1c>
    2ba0:	40 9a       	sbi	0x08, 0	; 8
    2ba2:	40 98       	cbi	0x08, 0	; 8
    2ba4:	88 e0       	ldi	r24, 0x08	; 8
    2ba6:	8e bd       	out	0x2e, r24	; 46
    2ba8:	0d b4       	in	r0, 0x2d	; 45
    2baa:	07 fe       	sbrs	r0, 7
    2bac:	fd cf       	rjmp	.-6      	; 0x2ba8 <rf_set_rx+0x2a>
    2bae:	40 9a       	sbi	0x08, 0	; 8
    2bb0:	81 2f       	mov	r24, r17
    2bb2:	0e 94 ef 09 	call	0x13de	; 0x13de <halRfSetChannel>
    2bb6:	d0 93 b7 06 	sts	0x06B7, r29
    2bba:	c0 93 b6 06 	sts	0x06B6, r28
    2bbe:	80 91 b1 06 	lds	r24, 0x06B1
    2bc2:	90 91 b2 06 	lds	r25, 0x06B2
    2bc6:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	08 95       	ret

00002bd2 <rf_set_channel>:
    2bd2:	1f 93       	push	r17
    2bd4:	18 2f       	mov	r17, r24
    2bd6:	80 91 b1 06 	lds	r24, 0x06B1
    2bda:	90 91 b2 06 	lds	r25, 0x06B2
    2bde:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2be2:	81 2f       	mov	r24, r17
    2be4:	0e 94 ef 09 	call	0x13de	; 0x13de <halRfSetChannel>
    2be8:	80 91 b1 06 	lds	r24, 0x06B1
    2bec:	90 91 b2 06 	lds	r25, 0x06B2
    2bf0:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2bf4:	1f 91       	pop	r17
    2bf6:	08 95       	ret

00002bf8 <rf_init>:
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	22 97       	sbiw	r28, 0x02	; 2
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	8c 01       	movw	r16, r24
    2c18:	d6 2e       	mov	r13, r22
    2c1a:	5a 83       	std	Y+2, r21	; 0x02
    2c1c:	49 83       	std	Y+1, r20	; 0x01
    2c1e:	79 01       	movw	r14, r18
    2c20:	64 e1       	ldi	r22, 0x14	; 20
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <nrk_sem_create>
    2c28:	90 93 b2 06 	sts	0x06B2, r25
    2c2c:	80 93 b1 06 	sts	0x06B1, r24
    2c30:	89 2b       	or	r24, r25
    2c32:	31 f4       	brne	.+12     	; 0x2c40 <rf_init+0x48>
    2c34:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <nrk_get_pid>
    2c38:	68 2f       	mov	r22, r24
    2c3a:	8f e0       	ldi	r24, 0x0F	; 15
    2c3c:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    2c40:	80 91 b1 06 	lds	r24, 0x06B1
    2c44:	90 91 b2 06 	lds	r25, 0x06B2
    2c48:	0e 94 a1 24 	call	0x4942	; 0x4942 <nrk_sem_pend>
    2c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4e:	21 f4       	brne	.+8      	; 0x2c58 <rf_init+0x60>
    2c50:	82 e6       	ldi	r24, 0x62	; 98
    2c52:	92 e0       	ldi	r25, 0x02	; 2
    2c54:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
    2c58:	15 9a       	sbi	0x02, 5	; 2
    2c5a:	88 ee       	ldi	r24, 0xE8	; 232
    2c5c:	93 e0       	ldi	r25, 0x03	; 3
    2c5e:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    2c62:	16 98       	cbi	0x02, 6	; 2
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    2c6c:	16 9a       	sbi	0x02, 6	; 2
    2c6e:	84 e6       	ldi	r24, 0x64	; 100
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e 94 34 1c 	call	0x3868	; 0x3868 <halWait>
    2c76:	f8 94       	cli
    2c78:	40 98       	cbi	0x08, 0	; 8
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	8e bd       	out	0x2e, r24	; 46
    2c7e:	0d b4       	in	r0, 0x2d	; 45
    2c80:	07 fe       	sbrs	r0, 7
    2c82:	fd cf       	rjmp	.-6      	; 0x2c7e <rf_init+0x86>
    2c84:	40 9a       	sbi	0x08, 0	; 8
    2c86:	82 ee       	ldi	r24, 0xE2	; 226
    2c88:	92 e0       	ldi	r25, 0x02	; 2
    2c8a:	90 93 b5 06 	sts	0x06B5, r25
    2c8e:	80 93 b4 06 	sts	0x06B4, r24
    2c92:	40 98       	cbi	0x08, 0	; 8
    2c94:	81 e1       	ldi	r24, 0x11	; 17
    2c96:	8e bd       	out	0x2e, r24	; 46
    2c98:	0d b4       	in	r0, 0x2d	; 45
    2c9a:	07 fe       	sbrs	r0, 7
    2c9c:	fd cf       	rjmp	.-6      	; 0x2c98 <rf_init+0xa0>
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	8e bd       	out	0x2e, r24	; 46
    2ca2:	0d b4       	in	r0, 0x2d	; 45
    2ca4:	07 fe       	sbrs	r0, 7
    2ca6:	fd cf       	rjmp	.-6      	; 0x2ca2 <rf_init+0xaa>
    2ca8:	82 ee       	ldi	r24, 0xE2	; 226
    2caa:	8e bd       	out	0x2e, r24	; 46
    2cac:	0d b4       	in	r0, 0x2d	; 45
    2cae:	07 fe       	sbrs	r0, 7
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <rf_init+0xb4>
    2cb2:	40 9a       	sbi	0x08, 0	; 8
    2cb4:	40 98       	cbi	0x08, 0	; 8
    2cb6:	82 e1       	ldi	r24, 0x12	; 18
    2cb8:	8e bd       	out	0x2e, r24	; 46
    2cba:	0d b4       	in	r0, 0x2d	; 45
    2cbc:	07 fe       	sbrs	r0, 7
    2cbe:	fd cf       	rjmp	.-6      	; 0x2cba <rf_init+0xc2>
    2cc0:	85 e0       	ldi	r24, 0x05	; 5
    2cc2:	8e bd       	out	0x2e, r24	; 46
    2cc4:	0d b4       	in	r0, 0x2d	; 45
    2cc6:	07 fe       	sbrs	r0, 7
    2cc8:	fd cf       	rjmp	.-6      	; 0x2cc4 <rf_init+0xcc>
    2cca:	1e bc       	out	0x2e, r1	; 46
    2ccc:	0d b4       	in	r0, 0x2d	; 45
    2cce:	07 fe       	sbrs	r0, 7
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <rf_init+0xd4>
    2cd2:	40 9a       	sbi	0x08, 0	; 8
    2cd4:	40 98       	cbi	0x08, 0	; 8
    2cd6:	8c e1       	ldi	r24, 0x1C	; 28
    2cd8:	8e bd       	out	0x2e, r24	; 46
    2cda:	0d b4       	in	r0, 0x2d	; 45
    2cdc:	07 fe       	sbrs	r0, 7
    2cde:	fd cf       	rjmp	.-6      	; 0x2cda <rf_init+0xe2>
    2ce0:	1e bc       	out	0x2e, r1	; 46
    2ce2:	0d b4       	in	r0, 0x2d	; 45
    2ce4:	07 fe       	sbrs	r0, 7
    2ce6:	fd cf       	rjmp	.-6      	; 0x2ce2 <rf_init+0xea>
    2ce8:	8f e7       	ldi	r24, 0x7F	; 127
    2cea:	8e bd       	out	0x2e, r24	; 46
    2cec:	0d b4       	in	r0, 0x2d	; 45
    2cee:	07 fe       	sbrs	r0, 7
    2cf0:	fd cf       	rjmp	.-6      	; 0x2cec <rf_init+0xf4>
    2cf2:	40 9a       	sbi	0x08, 0	; 8
    2cf4:	40 98       	cbi	0x08, 0	; 8
    2cf6:	89 e1       	ldi	r24, 0x19	; 25
    2cf8:	8e bd       	out	0x2e, r24	; 46
    2cfa:	0d b4       	in	r0, 0x2d	; 45
    2cfc:	07 fe       	sbrs	r0, 7
    2cfe:	fd cf       	rjmp	.-6      	; 0x2cfa <rf_init+0x102>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	8e bd       	out	0x2e, r24	; 46
    2d04:	0d b4       	in	r0, 0x2d	; 45
    2d06:	07 fe       	sbrs	r0, 7
    2d08:	fd cf       	rjmp	.-6      	; 0x2d04 <rf_init+0x10c>
    2d0a:	84 ec       	ldi	r24, 0xC4	; 196
    2d0c:	8e bd       	out	0x2e, r24	; 46
    2d0e:	0d b4       	in	r0, 0x2d	; 45
    2d10:	07 fe       	sbrs	r0, 7
    2d12:	fd cf       	rjmp	.-6      	; 0x2d0e <rf_init+0x116>
    2d14:	40 9a       	sbi	0x08, 0	; 8
    2d16:	40 98       	cbi	0x08, 0	; 8
    2d18:	87 e1       	ldi	r24, 0x17	; 23
    2d1a:	8e bd       	out	0x2e, r24	; 46
    2d1c:	0d b4       	in	r0, 0x2d	; 45
    2d1e:	07 fe       	sbrs	r0, 7
    2d20:	fd cf       	rjmp	.-6      	; 0x2d1c <rf_init+0x124>
    2d22:	8a e1       	ldi	r24, 0x1A	; 26
    2d24:	8e bd       	out	0x2e, r24	; 46
    2d26:	0d b4       	in	r0, 0x2d	; 45
    2d28:	07 fe       	sbrs	r0, 7
    2d2a:	fd cf       	rjmp	.-6      	; 0x2d26 <rf_init+0x12e>
    2d2c:	86 e5       	ldi	r24, 0x56	; 86
    2d2e:	8e bd       	out	0x2e, r24	; 46
    2d30:	0d b4       	in	r0, 0x2d	; 45
    2d32:	07 fe       	sbrs	r0, 7
    2d34:	fd cf       	rjmp	.-6      	; 0x2d30 <rf_init+0x138>
    2d36:	40 9a       	sbi	0x08, 0	; 8
    2d38:	84 ef       	ldi	r24, 0xF4	; 244
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    2d40:	40 98       	cbi	0x08, 0	; 8
    2d42:	88 ee       	ldi	r24, 0xE8	; 232
    2d44:	8e bd       	out	0x2e, r24	; 46
    2d46:	0d b4       	in	r0, 0x2d	; 45
    2d48:	07 fe       	sbrs	r0, 7
    2d4a:	fd cf       	rjmp	.-6      	; 0x2d46 <rf_init+0x14e>
    2d4c:	80 e8       	ldi	r24, 0x80	; 128
    2d4e:	8e bd       	out	0x2e, r24	; 46
    2d50:	0d b4       	in	r0, 0x2d	; 45
    2d52:	07 fe       	sbrs	r0, 7
    2d54:	fd cf       	rjmp	.-6      	; 0x2d50 <rf_init+0x158>
    2d56:	fe 01       	movw	r30, r28
    2d58:	31 96       	adiw	r30, 0x01	; 1
    2d5a:	9e 01       	movw	r18, r28
    2d5c:	2d 5f       	subi	r18, 0xFD	; 253
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	80 81       	ld	r24, Z
    2d62:	8e bd       	out	0x2e, r24	; 46
    2d64:	0d b4       	in	r0, 0x2d	; 45
    2d66:	07 fe       	sbrs	r0, 7
    2d68:	fd cf       	rjmp	.-6      	; 0x2d64 <rf_init+0x16c>
    2d6a:	31 96       	adiw	r30, 0x01	; 1
    2d6c:	e2 17       	cp	r30, r18
    2d6e:	f3 07       	cpc	r31, r19
    2d70:	b9 f7       	brne	.-18     	; 0x2d60 <rf_init+0x168>
    2d72:	40 9a       	sbi	0x08, 0	; 8
    2d74:	84 ef       	ldi	r24, 0xF4	; 244
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    2d7c:	78 94       	sei
    2d7e:	8d 2d       	mov	r24, r13
    2d80:	0e 94 ef 09 	call	0x13de	; 0x13de <halRfSetChannel>
    2d84:	78 94       	sei
    2d86:	10 93 b7 06 	sts	0x06B7, r17
    2d8a:	00 93 b6 06 	sts	0x06B6, r16
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	90 93 bb 06 	sts	0x06BB, r25
    2d96:	80 93 ba 06 	sts	0x06BA, r24
    2d9a:	f0 92 bd 06 	sts	0x06BD, r15
    2d9e:	e0 92 bc 06 	sts	0x06BC, r14
    2da2:	10 92 b8 06 	sts	0x06B8, r1
    2da6:	10 92 be 06 	sts	0x06BE, r1
    2daa:	0e 94 0e 0a 	call	0x141c	; 0x141c <halRfWaitForCrystalOscillator>
    2dae:	80 91 b1 06 	lds	r24, 0x06B1
    2db2:	90 91 b2 06 	lds	r25, 0x06B2
    2db6:	0e 94 4f 23 	call	0x469e	; 0x469e <nrk_sem_post>
    2dba:	8f 3f       	cpi	r24, 0xFF	; 255
    2dbc:	39 f4       	brne	.+14     	; 0x2dcc <rf_init+0x1d4>
    2dbe:	85 e3       	ldi	r24, 0x35	; 53
    2dc0:	92 e0       	ldi	r25, 0x02	; 2
    2dc2:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    2dcc:	10 92 c1 06 	sts	0x06C1, r1
    2dd0:	10 92 b3 06 	sts	0x06B3, r1
    2dd4:	10 92 c2 06 	sts	0x06C2, r1
    2dd8:	22 96       	adiw	r28, 0x02	; 2
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	08 95       	ret

00002df4 <cc259x_tx>:
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();

    2df4:	80 91 2c 02 	lds	r24, 0x022C
    2df8:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <nrk_gpio_set>
} // rfSetChannel
    2dfc:	80 91 2b 02 	lds	r24, 0x022B
    2e00:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <nrk_gpio_set>
    2e04:	08 95       	ret

00002e06 <cc259x_rx>:
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    2e06:	80 91 2c 02 	lds	r24, 0x022C
    2e0a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <nrk_gpio_set>
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    2e0e:	80 91 2b 02 	lds	r24, 0x022B
    2e12:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <nrk_gpio_clr>
    2e16:	08 95       	ret

00002e18 <getc1>:
    2e18:	20 91 61 04 	lds	r18, 0x0461
    2e1c:	80 91 62 04 	lds	r24, 0x0462
    2e20:	28 17       	cp	r18, r24
    2e22:	81 f0       	breq	.+32     	; 0x2e44 <getc1+0x2c>
    2e24:	e2 2f       	mov	r30, r18
    2e26:	ff 27       	eor	r31, r31
    2e28:	ed 59       	subi	r30, 0x9D	; 157
    2e2a:	fb 4f       	sbci	r31, 0xFB	; 251
    2e2c:	e0 81       	ld	r30, Z
    2e2e:	82 2f       	mov	r24, r18
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	80 93 61 04 	sts	0x0461, r24
    2e36:	80 31       	cpi	r24, 0x10	; 16
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <getc1+0x26>
    2e3a:	10 92 61 04 	sts	0x0461, r1
    2e3e:	8e 2f       	mov	r24, r30
    2e40:	99 27       	eor	r25, r25
    2e42:	08 95       	ret
    2e44:	80 91 c8 00 	lds	r24, 0x00C8
    2e48:	87 ff       	sbrs	r24, 7
    2e4a:	fc cf       	rjmp	.-8      	; 0x2e44 <getc1+0x2c>
    2e4c:	80 91 c8 00 	lds	r24, 0x00C8
    2e50:	8f 77       	andi	r24, 0x7F	; 127
    2e52:	80 93 c8 00 	sts	0x00C8, r24
    2e56:	80 91 ce 00 	lds	r24, 0x00CE
    2e5a:	99 27       	eor	r25, r25
    2e5c:	08 95       	ret

00002e5e <nrk_uart_data_ready>:
    2e5e:	88 23       	and	r24, r24
    2e60:	51 f4       	brne	.+20     	; 0x2e76 <nrk_uart_data_ready+0x18>
    2e62:	80 91 c0 00 	lds	r24, 0x00C0
    2e66:	99 27       	eor	r25, r25
    2e68:	87 fd       	sbrc	r24, 7
    2e6a:	90 95       	com	r25
    2e6c:	88 27       	eor	r24, r24
    2e6e:	99 0f       	add	r25, r25
    2e70:	88 1f       	adc	r24, r24
    2e72:	99 27       	eor	r25, r25
    2e74:	08 95       	ret
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	19 f0       	breq	.+6      	; 0x2e80 <nrk_uart_data_ready+0x22>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	08 95       	ret
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	90 91 61 04 	lds	r25, 0x0461
    2e88:	80 91 62 04 	lds	r24, 0x0462
    2e8c:	98 17       	cp	r25, r24
    2e8e:	11 f0       	breq	.+4      	; 0x2e94 <nrk_uart_data_ready+0x36>
    2e90:	21 e0       	ldi	r18, 0x01	; 1
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	c9 01       	movw	r24, r18
    2e96:	08 95       	ret

00002e98 <PORT_INIT>:
    2e98:	85 b7       	in	r24, 0x35	; 53
    2e9a:	80 61       	ori	r24, 0x10	; 16
    2e9c:	85 bf       	out	0x35, r24	; 53
    2e9e:	86 e0       	ldi	r24, 0x06	; 6
    2ea0:	84 b9       	out	0x04, r24	; 4
    2ea2:	85 b9       	out	0x05, r24	; 5
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	87 b9       	out	0x07, r24	; 7
    2ea8:	88 b9       	out	0x08, r24	; 8
    2eaa:	8c e3       	ldi	r24, 0x3C	; 60
    2eac:	8d b9       	out	0x0d, r24	; 13
    2eae:	8b e0       	ldi	r24, 0x0B	; 11
    2eb0:	8a b9       	out	0x0a, r24	; 10
    2eb2:	8e e3       	ldi	r24, 0x3E	; 62
    2eb4:	8e b9       	out	0x0e, r24	; 14
    2eb6:	88 e7       	ldi	r24, 0x78	; 120
    2eb8:	81 b9       	out	0x01, r24	; 1
    2eba:	16 9a       	sbi	0x02, 6	; 2
    2ebc:	08 95       	ret

00002ebe <nrk_setup_ports>:
    2ebe:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <PORT_INIT>
    2ec2:	80 e5       	ldi	r24, 0x50	; 80
    2ec4:	8c bd       	out	0x2c, r24	; 44
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	8d bd       	out	0x2d, r24	; 45
    2eca:	08 95       	ret

00002ecc <nrk_gpio_set>:
    2ecc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ece:	09 f4       	brne	.+2      	; 0x2ed2 <nrk_gpio_set+0x6>
    2ed0:	7f c0       	rjmp	.+254    	; 0x2fd0 <nrk_gpio_set+0x104>
    2ed2:	48 2f       	mov	r20, r24
    2ed4:	55 27       	eor	r21, r21
    2ed6:	9a 01       	movw	r18, r20
    2ed8:	27 70       	andi	r18, 0x07	; 7
    2eda:	30 70       	andi	r19, 0x00	; 0
    2edc:	22 30       	cpi	r18, 0x02	; 2
    2ede:	31 05       	cpc	r19, r1
    2ee0:	a9 f1       	breq	.+106    	; 0x2f4c <nrk_gpio_set+0x80>
    2ee2:	23 30       	cpi	r18, 0x03	; 3
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	44 f4       	brge	.+16     	; 0x2ef8 <nrk_gpio_set+0x2c>
    2ee8:	21 15       	cp	r18, r1
    2eea:	31 05       	cpc	r19, r1
    2eec:	89 f0       	breq	.+34     	; 0x2f10 <nrk_gpio_set+0x44>
    2eee:	21 30       	cpi	r18, 0x01	; 1
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	09 f0       	breq	.+2      	; 0x2ef6 <nrk_gpio_set+0x2a>
    2ef4:	6d c0       	rjmp	.+218    	; 0x2fd0 <nrk_gpio_set+0x104>
    2ef6:	1c c0       	rjmp	.+56     	; 0x2f30 <nrk_gpio_set+0x64>
    2ef8:	24 30       	cpi	r18, 0x04	; 4
    2efa:	31 05       	cpc	r19, r1
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <nrk_gpio_set+0x34>
    2efe:	46 c0       	rjmp	.+140    	; 0x2f8c <nrk_gpio_set+0xc0>
    2f00:	24 30       	cpi	r18, 0x04	; 4
    2f02:	31 05       	cpc	r19, r1
    2f04:	9c f1       	brlt	.+102    	; 0x2f6c <nrk_gpio_set+0xa0>
    2f06:	25 30       	cpi	r18, 0x05	; 5
    2f08:	31 05       	cpc	r19, r1
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <nrk_gpio_set+0x42>
    2f0c:	61 c0       	rjmp	.+194    	; 0x2fd0 <nrk_gpio_set+0x104>
    2f0e:	4e c0       	rjmp	.+156    	; 0x2fac <nrk_gpio_set+0xe0>
    2f10:	22 b1       	in	r18, 0x02	; 2
    2f12:	a3 e0       	ldi	r26, 0x03	; 3
    2f14:	56 95       	lsr	r21
    2f16:	47 95       	ror	r20
    2f18:	aa 95       	dec	r26
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <nrk_gpio_set+0x48>
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <nrk_gpio_set+0x5a>
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	4a 95       	dec	r20
    2f28:	e2 f7       	brpl	.-8      	; 0x2f22 <nrk_gpio_set+0x56>
    2f2a:	28 2b       	or	r18, r24
    2f2c:	22 b9       	out	0x02, r18	; 2
    2f2e:	4d c0       	rjmp	.+154    	; 0x2fca <nrk_gpio_set+0xfe>
    2f30:	85 b1       	in	r24, 0x05	; 5
    2f32:	f3 e0       	ldi	r31, 0x03	; 3
    2f34:	56 95       	lsr	r21
    2f36:	47 95       	ror	r20
    2f38:	fa 95       	dec	r31
    2f3a:	e1 f7       	brne	.-8      	; 0x2f34 <nrk_gpio_set+0x68>
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <nrk_gpio_set+0x76>
    2f3e:	22 0f       	add	r18, r18
    2f40:	33 1f       	adc	r19, r19
    2f42:	4a 95       	dec	r20
    2f44:	e2 f7       	brpl	.-8      	; 0x2f3e <nrk_gpio_set+0x72>
    2f46:	82 2b       	or	r24, r18
    2f48:	85 b9       	out	0x05, r24	; 5
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <nrk_gpio_set+0xfe>
    2f4c:	28 b1       	in	r18, 0x08	; 8
    2f4e:	e3 e0       	ldi	r30, 0x03	; 3
    2f50:	56 95       	lsr	r21
    2f52:	47 95       	ror	r20
    2f54:	ea 95       	dec	r30
    2f56:	e1 f7       	brne	.-8      	; 0x2f50 <nrk_gpio_set+0x84>
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <nrk_gpio_set+0x96>
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	4a 95       	dec	r20
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <nrk_gpio_set+0x92>
    2f66:	28 2b       	or	r18, r24
    2f68:	28 b9       	out	0x08, r18	; 8
    2f6a:	2f c0       	rjmp	.+94     	; 0x2fca <nrk_gpio_set+0xfe>
    2f6c:	2b b1       	in	r18, 0x0b	; 11
    2f6e:	73 e0       	ldi	r23, 0x03	; 3
    2f70:	56 95       	lsr	r21
    2f72:	47 95       	ror	r20
    2f74:	7a 95       	dec	r23
    2f76:	e1 f7       	brne	.-8      	; 0x2f70 <nrk_gpio_set+0xa4>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <nrk_gpio_set+0xb6>
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	4a 95       	dec	r20
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <nrk_gpio_set+0xb2>
    2f86:	28 2b       	or	r18, r24
    2f88:	2b b9       	out	0x0b, r18	; 11
    2f8a:	1f c0       	rjmp	.+62     	; 0x2fca <nrk_gpio_set+0xfe>
    2f8c:	2e b1       	in	r18, 0x0e	; 14
    2f8e:	63 e0       	ldi	r22, 0x03	; 3
    2f90:	56 95       	lsr	r21
    2f92:	47 95       	ror	r20
    2f94:	6a 95       	dec	r22
    2f96:	e1 f7       	brne	.-8      	; 0x2f90 <nrk_gpio_set+0xc4>
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <nrk_gpio_set+0xd6>
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	4a 95       	dec	r20
    2fa4:	e2 f7       	brpl	.-8      	; 0x2f9e <nrk_gpio_set+0xd2>
    2fa6:	28 2b       	or	r18, r24
    2fa8:	2e b9       	out	0x0e, r18	; 14
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <nrk_gpio_set+0xfe>
    2fac:	21 b3       	in	r18, 0x11	; 17
    2fae:	33 e0       	ldi	r19, 0x03	; 3
    2fb0:	56 95       	lsr	r21
    2fb2:	47 95       	ror	r20
    2fb4:	3a 95       	dec	r19
    2fb6:	e1 f7       	brne	.-8      	; 0x2fb0 <nrk_gpio_set+0xe4>
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <nrk_gpio_set+0xf6>
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	4a 95       	dec	r20
    2fc4:	e2 f7       	brpl	.-8      	; 0x2fbe <nrk_gpio_set+0xf2>
    2fc6:	28 2b       	or	r18, r24
    2fc8:	21 bb       	out	0x11, r18	; 17
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	08 95       	ret
    2fd0:	8f ef       	ldi	r24, 0xFF	; 255
    2fd2:	9f ef       	ldi	r25, 0xFF	; 255
    2fd4:	08 95       	ret

00002fd6 <nrk_gpio_clr>:
    2fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <nrk_gpio_clr+0x6>
    2fda:	86 c0       	rjmp	.+268    	; 0x30e8 <nrk_gpio_clr+0x112>
    2fdc:	48 2f       	mov	r20, r24
    2fde:	55 27       	eor	r21, r21
    2fe0:	9a 01       	movw	r18, r20
    2fe2:	27 70       	andi	r18, 0x07	; 7
    2fe4:	30 70       	andi	r19, 0x00	; 0
    2fe6:	22 30       	cpi	r18, 0x02	; 2
    2fe8:	31 05       	cpc	r19, r1
    2fea:	c1 f1       	breq	.+112    	; 0x305c <nrk_gpio_clr+0x86>
    2fec:	23 30       	cpi	r18, 0x03	; 3
    2fee:	31 05       	cpc	r19, r1
    2ff0:	44 f4       	brge	.+16     	; 0x3002 <nrk_gpio_clr+0x2c>
    2ff2:	21 15       	cp	r18, r1
    2ff4:	31 05       	cpc	r19, r1
    2ff6:	89 f0       	breq	.+34     	; 0x301a <nrk_gpio_clr+0x44>
    2ff8:	21 30       	cpi	r18, 0x01	; 1
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <nrk_gpio_clr+0x2a>
    2ffe:	74 c0       	rjmp	.+232    	; 0x30e8 <nrk_gpio_clr+0x112>
    3000:	1d c0       	rjmp	.+58     	; 0x303c <nrk_gpio_clr+0x66>
    3002:	24 30       	cpi	r18, 0x04	; 4
    3004:	31 05       	cpc	r19, r1
    3006:	09 f4       	brne	.+2      	; 0x300a <nrk_gpio_clr+0x34>
    3008:	4b c0       	rjmp	.+150    	; 0x30a0 <nrk_gpio_clr+0xca>
    300a:	24 30       	cpi	r18, 0x04	; 4
    300c:	31 05       	cpc	r19, r1
    300e:	bc f1       	brlt	.+110    	; 0x307e <nrk_gpio_clr+0xa8>
    3010:	25 30       	cpi	r18, 0x05	; 5
    3012:	31 05       	cpc	r19, r1
    3014:	09 f0       	breq	.+2      	; 0x3018 <nrk_gpio_clr+0x42>
    3016:	68 c0       	rjmp	.+208    	; 0x30e8 <nrk_gpio_clr+0x112>
    3018:	54 c0       	rjmp	.+168    	; 0x30c2 <nrk_gpio_clr+0xec>
    301a:	22 b1       	in	r18, 0x02	; 2
    301c:	73 e0       	ldi	r23, 0x03	; 3
    301e:	56 95       	lsr	r21
    3020:	47 95       	ror	r20
    3022:	7a 95       	dec	r23
    3024:	e1 f7       	brne	.-8      	; 0x301e <nrk_gpio_clr+0x48>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <nrk_gpio_clr+0x5a>
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	4a 95       	dec	r20
    3032:	e2 f7       	brpl	.-8      	; 0x302c <nrk_gpio_clr+0x56>
    3034:	80 95       	com	r24
    3036:	82 23       	and	r24, r18
    3038:	82 b9       	out	0x02, r24	; 2
    303a:	53 c0       	rjmp	.+166    	; 0x30e2 <nrk_gpio_clr+0x10c>
    303c:	95 b1       	in	r25, 0x05	; 5
    303e:	63 e0       	ldi	r22, 0x03	; 3
    3040:	56 95       	lsr	r21
    3042:	47 95       	ror	r20
    3044:	6a 95       	dec	r22
    3046:	e1 f7       	brne	.-8      	; 0x3040 <nrk_gpio_clr+0x6a>
    3048:	02 c0       	rjmp	.+4      	; 0x304e <nrk_gpio_clr+0x78>
    304a:	22 0f       	add	r18, r18
    304c:	33 1f       	adc	r19, r19
    304e:	4a 95       	dec	r20
    3050:	e2 f7       	brpl	.-8      	; 0x304a <nrk_gpio_clr+0x74>
    3052:	82 2f       	mov	r24, r18
    3054:	80 95       	com	r24
    3056:	89 23       	and	r24, r25
    3058:	85 b9       	out	0x05, r24	; 5
    305a:	43 c0       	rjmp	.+134    	; 0x30e2 <nrk_gpio_clr+0x10c>
    305c:	28 b1       	in	r18, 0x08	; 8
    305e:	33 e0       	ldi	r19, 0x03	; 3
    3060:	56 95       	lsr	r21
    3062:	47 95       	ror	r20
    3064:	3a 95       	dec	r19
    3066:	e1 f7       	brne	.-8      	; 0x3060 <nrk_gpio_clr+0x8a>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <nrk_gpio_clr+0x9c>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	4a 95       	dec	r20
    3074:	e2 f7       	brpl	.-8      	; 0x306e <nrk_gpio_clr+0x98>
    3076:	80 95       	com	r24
    3078:	82 23       	and	r24, r18
    307a:	88 b9       	out	0x08, r24	; 8
    307c:	32 c0       	rjmp	.+100    	; 0x30e2 <nrk_gpio_clr+0x10c>
    307e:	2b b1       	in	r18, 0x0b	; 11
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	56 95       	lsr	r21
    3084:	47 95       	ror	r20
    3086:	9a 95       	dec	r25
    3088:	e1 f7       	brne	.-8      	; 0x3082 <nrk_gpio_clr+0xac>
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <nrk_gpio_clr+0xbe>
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	4a 95       	dec	r20
    3096:	e2 f7       	brpl	.-8      	; 0x3090 <nrk_gpio_clr+0xba>
    3098:	80 95       	com	r24
    309a:	82 23       	and	r24, r18
    309c:	8b b9       	out	0x0b, r24	; 11
    309e:	21 c0       	rjmp	.+66     	; 0x30e2 <nrk_gpio_clr+0x10c>
    30a0:	2e b1       	in	r18, 0x0e	; 14
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	56 95       	lsr	r21
    30a6:	47 95       	ror	r20
    30a8:	8a 95       	dec	r24
    30aa:	e1 f7       	brne	.-8      	; 0x30a4 <nrk_gpio_clr+0xce>
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <nrk_gpio_clr+0xe0>
    30b2:	88 0f       	add	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	4a 95       	dec	r20
    30b8:	e2 f7       	brpl	.-8      	; 0x30b2 <nrk_gpio_clr+0xdc>
    30ba:	80 95       	com	r24
    30bc:	82 23       	and	r24, r18
    30be:	8e b9       	out	0x0e, r24	; 14
    30c0:	10 c0       	rjmp	.+32     	; 0x30e2 <nrk_gpio_clr+0x10c>
    30c2:	21 b3       	in	r18, 0x11	; 17
    30c4:	b3 e0       	ldi	r27, 0x03	; 3
    30c6:	56 95       	lsr	r21
    30c8:	47 95       	ror	r20
    30ca:	ba 95       	dec	r27
    30cc:	e1 f7       	brne	.-8      	; 0x30c6 <nrk_gpio_clr+0xf0>
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <nrk_gpio_clr+0x102>
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	4a 95       	dec	r20
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <nrk_gpio_clr+0xfe>
    30dc:	80 95       	com	r24
    30de:	82 23       	and	r24, r18
    30e0:	81 bb       	out	0x11, r24	; 17
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	08 95       	ret
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	9f ef       	ldi	r25, 0xFF	; 255
    30ec:	08 95       	ret

000030ee <nrk_gpio_get>:
    30ee:	8f 3f       	cpi	r24, 0xFF	; 255
    30f0:	a9 f1       	breq	.+106    	; 0x315c <nrk_gpio_get+0x6e>
    30f2:	28 2f       	mov	r18, r24
    30f4:	33 27       	eor	r19, r19
    30f6:	c9 01       	movw	r24, r18
    30f8:	87 70       	andi	r24, 0x07	; 7
    30fa:	90 70       	andi	r25, 0x00	; 0
    30fc:	82 30       	cpi	r24, 0x02	; 2
    30fe:	91 05       	cpc	r25, r1
    3100:	a9 f0       	breq	.+42     	; 0x312c <nrk_gpio_get+0x3e>
    3102:	83 30       	cpi	r24, 0x03	; 3
    3104:	91 05       	cpc	r25, r1
    3106:	2c f4       	brge	.+10     	; 0x3112 <nrk_gpio_get+0x24>
    3108:	00 97       	sbiw	r24, 0x00	; 0
    310a:	61 f0       	breq	.+24     	; 0x3124 <nrk_gpio_get+0x36>
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	31 f5       	brne	.+76     	; 0x315c <nrk_gpio_get+0x6e>
    3110:	0b c0       	rjmp	.+22     	; 0x3128 <nrk_gpio_get+0x3a>
    3112:	84 30       	cpi	r24, 0x04	; 4
    3114:	91 05       	cpc	r25, r1
    3116:	71 f0       	breq	.+28     	; 0x3134 <nrk_gpio_get+0x46>
    3118:	84 30       	cpi	r24, 0x04	; 4
    311a:	91 05       	cpc	r25, r1
    311c:	4c f0       	brlt	.+18     	; 0x3130 <nrk_gpio_get+0x42>
    311e:	05 97       	sbiw	r24, 0x05	; 5
    3120:	e9 f4       	brne	.+58     	; 0x315c <nrk_gpio_get+0x6e>
    3122:	0a c0       	rjmp	.+20     	; 0x3138 <nrk_gpio_get+0x4a>
    3124:	80 b1       	in	r24, 0x00	; 0
    3126:	09 c0       	rjmp	.+18     	; 0x313a <nrk_gpio_get+0x4c>
    3128:	83 b1       	in	r24, 0x03	; 3
    312a:	07 c0       	rjmp	.+14     	; 0x313a <nrk_gpio_get+0x4c>
    312c:	86 b1       	in	r24, 0x06	; 6
    312e:	05 c0       	rjmp	.+10     	; 0x313a <nrk_gpio_get+0x4c>
    3130:	89 b1       	in	r24, 0x09	; 9
    3132:	03 c0       	rjmp	.+6      	; 0x313a <nrk_gpio_get+0x4c>
    3134:	8c b1       	in	r24, 0x0c	; 12
    3136:	01 c0       	rjmp	.+2      	; 0x313a <nrk_gpio_get+0x4c>
    3138:	8f b1       	in	r24, 0x0f	; 15
    313a:	99 27       	eor	r25, r25
    313c:	e3 e0       	ldi	r30, 0x03	; 3
    313e:	36 95       	lsr	r19
    3140:	27 95       	ror	r18
    3142:	ea 95       	dec	r30
    3144:	e1 f7       	brne	.-8      	; 0x313e <nrk_gpio_get+0x50>
    3146:	02 c0       	rjmp	.+4      	; 0x314c <nrk_gpio_get+0x5e>
    3148:	95 95       	asr	r25
    314a:	87 95       	ror	r24
    314c:	2a 95       	dec	r18
    314e:	e2 f7       	brpl	.-8      	; 0x3148 <nrk_gpio_get+0x5a>
    3150:	99 27       	eor	r25, r25
    3152:	87 fd       	sbrc	r24, 7
    3154:	90 95       	com	r25
    3156:	81 70       	andi	r24, 0x01	; 1
    3158:	90 70       	andi	r25, 0x00	; 0
    315a:	08 95       	ret
    315c:	8f ef       	ldi	r24, 0xFF	; 255
    315e:	9f ef       	ldi	r25, 0xFF	; 255
    3160:	08 95       	ret

00003162 <nrk_gpio_toggle>:
    3162:	8f 3f       	cpi	r24, 0xFF	; 255
    3164:	09 f4       	brne	.+2      	; 0x3168 <nrk_gpio_toggle+0x6>
    3166:	03 c1       	rjmp	.+518    	; 0x336e <nrk_gpio_toggle+0x20c>
    3168:	28 2f       	mov	r18, r24
    316a:	33 27       	eor	r19, r19
    316c:	a9 01       	movw	r20, r18
    316e:	47 70       	andi	r20, 0x07	; 7
    3170:	50 70       	andi	r21, 0x00	; 0
    3172:	42 30       	cpi	r20, 0x02	; 2
    3174:	51 05       	cpc	r21, r1
    3176:	09 f4       	brne	.+2      	; 0x317a <nrk_gpio_toggle+0x18>
    3178:	5c c0       	rjmp	.+184    	; 0x3232 <nrk_gpio_toggle+0xd0>
    317a:	43 30       	cpi	r20, 0x03	; 3
    317c:	51 05       	cpc	r21, r1
    317e:	44 f4       	brge	.+16     	; 0x3190 <nrk_gpio_toggle+0x2e>
    3180:	41 15       	cp	r20, r1
    3182:	51 05       	cpc	r21, r1
    3184:	91 f0       	breq	.+36     	; 0x31aa <nrk_gpio_toggle+0x48>
    3186:	41 30       	cpi	r20, 0x01	; 1
    3188:	51 05       	cpc	r21, r1
    318a:	09 f0       	breq	.+2      	; 0x318e <nrk_gpio_toggle+0x2c>
    318c:	f0 c0       	rjmp	.+480    	; 0x336e <nrk_gpio_toggle+0x20c>
    318e:	34 c0       	rjmp	.+104    	; 0x31f8 <nrk_gpio_toggle+0x96>
    3190:	44 30       	cpi	r20, 0x04	; 4
    3192:	51 05       	cpc	r21, r1
    3194:	09 f4       	brne	.+2      	; 0x3198 <nrk_gpio_toggle+0x36>
    3196:	9b c0       	rjmp	.+310    	; 0x32ce <nrk_gpio_toggle+0x16c>
    3198:	44 30       	cpi	r20, 0x04	; 4
    319a:	51 05       	cpc	r21, r1
    319c:	0c f4       	brge	.+2      	; 0x31a0 <nrk_gpio_toggle+0x3e>
    319e:	70 c0       	rjmp	.+224    	; 0x3280 <nrk_gpio_toggle+0x11e>
    31a0:	45 30       	cpi	r20, 0x05	; 5
    31a2:	51 05       	cpc	r21, r1
    31a4:	09 f0       	breq	.+2      	; 0x31a8 <nrk_gpio_toggle+0x46>
    31a6:	e3 c0       	rjmp	.+454    	; 0x336e <nrk_gpio_toggle+0x20c>
    31a8:	b9 c0       	rjmp	.+370    	; 0x331c <nrk_gpio_toggle+0x1ba>
    31aa:	80 b1       	in	r24, 0x00	; 0
    31ac:	a9 01       	movw	r20, r18
    31ae:	73 e0       	ldi	r23, 0x03	; 3
    31b0:	56 95       	lsr	r21
    31b2:	47 95       	ror	r20
    31b4:	7a 95       	dec	r23
    31b6:	e1 f7       	brne	.-8      	; 0x31b0 <nrk_gpio_toggle+0x4e>
    31b8:	99 27       	eor	r25, r25
    31ba:	04 2e       	mov	r0, r20
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <nrk_gpio_toggle+0x60>
    31be:	95 95       	asr	r25
    31c0:	87 95       	ror	r24
    31c2:	0a 94       	dec	r0
    31c4:	e2 f7       	brpl	.-8      	; 0x31be <nrk_gpio_toggle+0x5c>
    31c6:	80 fd       	sbrc	r24, 0
    31c8:	0b c0       	rjmp	.+22     	; 0x31e0 <nrk_gpio_toggle+0x7e>
    31ca:	22 b1       	in	r18, 0x02	; 2
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <nrk_gpio_toggle+0x74>
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	4a 95       	dec	r20
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <nrk_gpio_toggle+0x70>
    31da:	28 2b       	or	r18, r24
    31dc:	22 b9       	out	0x02, r18	; 2
    31de:	c4 c0       	rjmp	.+392    	; 0x3368 <nrk_gpio_toggle+0x206>
    31e0:	22 b1       	in	r18, 0x02	; 2
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <nrk_gpio_toggle+0x8a>
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	4a 95       	dec	r20
    31ee:	e2 f7       	brpl	.-8      	; 0x31e8 <nrk_gpio_toggle+0x86>
    31f0:	80 95       	com	r24
    31f2:	82 23       	and	r24, r18
    31f4:	82 b9       	out	0x02, r24	; 2
    31f6:	b8 c0       	rjmp	.+368    	; 0x3368 <nrk_gpio_toggle+0x206>
    31f8:	83 b1       	in	r24, 0x03	; 3
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	36 95       	lsr	r19
    31fe:	27 95       	ror	r18
    3200:	6a 95       	dec	r22
    3202:	e1 f7       	brne	.-8      	; 0x31fc <nrk_gpio_toggle+0x9a>
    3204:	99 27       	eor	r25, r25
    3206:	02 2e       	mov	r0, r18
    3208:	02 c0       	rjmp	.+4      	; 0x320e <nrk_gpio_toggle+0xac>
    320a:	95 95       	asr	r25
    320c:	87 95       	ror	r24
    320e:	0a 94       	dec	r0
    3210:	e2 f7       	brpl	.-8      	; 0x320a <nrk_gpio_toggle+0xa8>
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <nrk_gpio_toggle+0xb6>
    3214:	44 0f       	add	r20, r20
    3216:	55 1f       	adc	r21, r21
    3218:	2a 95       	dec	r18
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <nrk_gpio_toggle+0xb2>
    321c:	80 fd       	sbrc	r24, 0
    321e:	03 c0       	rjmp	.+6      	; 0x3226 <nrk_gpio_toggle+0xc4>
    3220:	85 b1       	in	r24, 0x05	; 5
    3222:	84 2b       	or	r24, r20
    3224:	04 c0       	rjmp	.+8      	; 0x322e <nrk_gpio_toggle+0xcc>
    3226:	95 b1       	in	r25, 0x05	; 5
    3228:	84 2f       	mov	r24, r20
    322a:	80 95       	com	r24
    322c:	89 23       	and	r24, r25
    322e:	85 b9       	out	0x05, r24	; 5
    3230:	9b c0       	rjmp	.+310    	; 0x3368 <nrk_gpio_toggle+0x206>
    3232:	86 b1       	in	r24, 0x06	; 6
    3234:	a9 01       	movw	r20, r18
    3236:	93 e0       	ldi	r25, 0x03	; 3
    3238:	56 95       	lsr	r21
    323a:	47 95       	ror	r20
    323c:	9a 95       	dec	r25
    323e:	e1 f7       	brne	.-8      	; 0x3238 <nrk_gpio_toggle+0xd6>
    3240:	99 27       	eor	r25, r25
    3242:	04 2e       	mov	r0, r20
    3244:	02 c0       	rjmp	.+4      	; 0x324a <nrk_gpio_toggle+0xe8>
    3246:	95 95       	asr	r25
    3248:	87 95       	ror	r24
    324a:	0a 94       	dec	r0
    324c:	e2 f7       	brpl	.-8      	; 0x3246 <nrk_gpio_toggle+0xe4>
    324e:	80 fd       	sbrc	r24, 0
    3250:	0b c0       	rjmp	.+22     	; 0x3268 <nrk_gpio_toggle+0x106>
    3252:	28 b1       	in	r18, 0x08	; 8
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	02 c0       	rjmp	.+4      	; 0x325e <nrk_gpio_toggle+0xfc>
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	4a 95       	dec	r20
    3260:	e2 f7       	brpl	.-8      	; 0x325a <nrk_gpio_toggle+0xf8>
    3262:	28 2b       	or	r18, r24
    3264:	28 b9       	out	0x08, r18	; 8
    3266:	80 c0       	rjmp	.+256    	; 0x3368 <nrk_gpio_toggle+0x206>
    3268:	28 b1       	in	r18, 0x08	; 8
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <nrk_gpio_toggle+0x112>
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	4a 95       	dec	r20
    3276:	e2 f7       	brpl	.-8      	; 0x3270 <nrk_gpio_toggle+0x10e>
    3278:	80 95       	com	r24
    327a:	82 23       	and	r24, r18
    327c:	88 b9       	out	0x08, r24	; 8
    327e:	74 c0       	rjmp	.+232    	; 0x3368 <nrk_gpio_toggle+0x206>
    3280:	89 b1       	in	r24, 0x09	; 9
    3282:	a9 01       	movw	r20, r18
    3284:	b3 e0       	ldi	r27, 0x03	; 3
    3286:	56 95       	lsr	r21
    3288:	47 95       	ror	r20
    328a:	ba 95       	dec	r27
    328c:	e1 f7       	brne	.-8      	; 0x3286 <nrk_gpio_toggle+0x124>
    328e:	99 27       	eor	r25, r25
    3290:	04 2e       	mov	r0, r20
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <nrk_gpio_toggle+0x136>
    3294:	95 95       	asr	r25
    3296:	87 95       	ror	r24
    3298:	0a 94       	dec	r0
    329a:	e2 f7       	brpl	.-8      	; 0x3294 <nrk_gpio_toggle+0x132>
    329c:	80 fd       	sbrc	r24, 0
    329e:	0b c0       	rjmp	.+22     	; 0x32b6 <nrk_gpio_toggle+0x154>
    32a0:	2b b1       	in	r18, 0x0b	; 11
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <nrk_gpio_toggle+0x14a>
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	4a 95       	dec	r20
    32ae:	e2 f7       	brpl	.-8      	; 0x32a8 <nrk_gpio_toggle+0x146>
    32b0:	28 2b       	or	r18, r24
    32b2:	2b b9       	out	0x0b, r18	; 11
    32b4:	59 c0       	rjmp	.+178    	; 0x3368 <nrk_gpio_toggle+0x206>
    32b6:	2b b1       	in	r18, 0x0b	; 11
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	02 c0       	rjmp	.+4      	; 0x32c2 <nrk_gpio_toggle+0x160>
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	4a 95       	dec	r20
    32c4:	e2 f7       	brpl	.-8      	; 0x32be <nrk_gpio_toggle+0x15c>
    32c6:	80 95       	com	r24
    32c8:	82 23       	and	r24, r18
    32ca:	8b b9       	out	0x0b, r24	; 11
    32cc:	4d c0       	rjmp	.+154    	; 0x3368 <nrk_gpio_toggle+0x206>
    32ce:	8c b1       	in	r24, 0x0c	; 12
    32d0:	a9 01       	movw	r20, r18
    32d2:	a3 e0       	ldi	r26, 0x03	; 3
    32d4:	56 95       	lsr	r21
    32d6:	47 95       	ror	r20
    32d8:	aa 95       	dec	r26
    32da:	e1 f7       	brne	.-8      	; 0x32d4 <nrk_gpio_toggle+0x172>
    32dc:	99 27       	eor	r25, r25
    32de:	04 2e       	mov	r0, r20
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <nrk_gpio_toggle+0x184>
    32e2:	95 95       	asr	r25
    32e4:	87 95       	ror	r24
    32e6:	0a 94       	dec	r0
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <nrk_gpio_toggle+0x180>
    32ea:	80 fd       	sbrc	r24, 0
    32ec:	0b c0       	rjmp	.+22     	; 0x3304 <nrk_gpio_toggle+0x1a2>
    32ee:	2e b1       	in	r18, 0x0e	; 14
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <nrk_gpio_toggle+0x198>
    32f6:	88 0f       	add	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	4a 95       	dec	r20
    32fc:	e2 f7       	brpl	.-8      	; 0x32f6 <nrk_gpio_toggle+0x194>
    32fe:	28 2b       	or	r18, r24
    3300:	2e b9       	out	0x0e, r18	; 14
    3302:	32 c0       	rjmp	.+100    	; 0x3368 <nrk_gpio_toggle+0x206>
    3304:	2e b1       	in	r18, 0x0e	; 14
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <nrk_gpio_toggle+0x1ae>
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	4a 95       	dec	r20
    3312:	e2 f7       	brpl	.-8      	; 0x330c <nrk_gpio_toggle+0x1aa>
    3314:	80 95       	com	r24
    3316:	82 23       	and	r24, r18
    3318:	8e b9       	out	0x0e, r24	; 14
    331a:	26 c0       	rjmp	.+76     	; 0x3368 <nrk_gpio_toggle+0x206>
    331c:	8f b1       	in	r24, 0x0f	; 15
    331e:	a9 01       	movw	r20, r18
    3320:	f3 e0       	ldi	r31, 0x03	; 3
    3322:	56 95       	lsr	r21
    3324:	47 95       	ror	r20
    3326:	fa 95       	dec	r31
    3328:	e1 f7       	brne	.-8      	; 0x3322 <nrk_gpio_toggle+0x1c0>
    332a:	99 27       	eor	r25, r25
    332c:	04 2e       	mov	r0, r20
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <nrk_gpio_toggle+0x1d2>
    3330:	95 95       	asr	r25
    3332:	87 95       	ror	r24
    3334:	0a 94       	dec	r0
    3336:	e2 f7       	brpl	.-8      	; 0x3330 <nrk_gpio_toggle+0x1ce>
    3338:	80 fd       	sbrc	r24, 0
    333a:	0b c0       	rjmp	.+22     	; 0x3352 <nrk_gpio_toggle+0x1f0>
    333c:	21 b3       	in	r18, 0x11	; 17
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <nrk_gpio_toggle+0x1e6>
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	4a 95       	dec	r20
    334a:	e2 f7       	brpl	.-8      	; 0x3344 <nrk_gpio_toggle+0x1e2>
    334c:	28 2b       	or	r18, r24
    334e:	21 bb       	out	0x11, r18	; 17
    3350:	0b c0       	rjmp	.+22     	; 0x3368 <nrk_gpio_toggle+0x206>
    3352:	21 b3       	in	r18, 0x11	; 17
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	02 c0       	rjmp	.+4      	; 0x335e <nrk_gpio_toggle+0x1fc>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	4a 95       	dec	r20
    3360:	e2 f7       	brpl	.-8      	; 0x335a <nrk_gpio_toggle+0x1f8>
    3362:	80 95       	com	r24
    3364:	82 23       	and	r24, r18
    3366:	81 bb       	out	0x11, r24	; 17
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	08 95       	ret
    336e:	8f ef       	ldi	r24, 0xFF	; 255
    3370:	9f ef       	ldi	r25, 0xFF	; 255
    3372:	08 95       	ret

00003374 <nrk_gpio_direction>:
    3374:	8f 3f       	cpi	r24, 0xFF	; 255
    3376:	09 f4       	brne	.+2      	; 0x337a <nrk_gpio_direction+0x6>
    3378:	1b c1       	rjmp	.+566    	; 0x35b0 <nrk_gpio_direction+0x23c>
    337a:	48 2f       	mov	r20, r24
    337c:	55 27       	eor	r21, r21
    337e:	66 23       	and	r22, r22
    3380:	09 f0       	breq	.+2      	; 0x3384 <nrk_gpio_direction+0x10>
    3382:	99 c0       	rjmp	.+306    	; 0x34b6 <nrk_gpio_direction+0x142>
    3384:	ca 01       	movw	r24, r20
    3386:	87 70       	andi	r24, 0x07	; 7
    3388:	90 70       	andi	r25, 0x00	; 0
    338a:	82 30       	cpi	r24, 0x02	; 2
    338c:	91 05       	cpc	r25, r1
    338e:	09 f4       	brne	.+2      	; 0x3392 <nrk_gpio_direction+0x1e>
    3390:	3e c0       	rjmp	.+124    	; 0x340e <nrk_gpio_direction+0x9a>
    3392:	83 30       	cpi	r24, 0x03	; 3
    3394:	91 05       	cpc	r25, r1
    3396:	3c f4       	brge	.+14     	; 0x33a6 <nrk_gpio_direction+0x32>
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	89 f0       	breq	.+34     	; 0x33be <nrk_gpio_direction+0x4a>
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	91 05       	cpc	r25, r1
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <nrk_gpio_direction+0x30>
    33a2:	06 c1       	rjmp	.+524    	; 0x35b0 <nrk_gpio_direction+0x23c>
    33a4:	21 c0       	rjmp	.+66     	; 0x33e8 <nrk_gpio_direction+0x74>
    33a6:	84 30       	cpi	r24, 0x04	; 4
    33a8:	91 05       	cpc	r25, r1
    33aa:	09 f4       	brne	.+2      	; 0x33ae <nrk_gpio_direction+0x3a>
    33ac:	5a c0       	rjmp	.+180    	; 0x3462 <nrk_gpio_direction+0xee>
    33ae:	84 30       	cpi	r24, 0x04	; 4
    33b0:	91 05       	cpc	r25, r1
    33b2:	0c f4       	brge	.+2      	; 0x33b6 <nrk_gpio_direction+0x42>
    33b4:	41 c0       	rjmp	.+130    	; 0x3438 <nrk_gpio_direction+0xc4>
    33b6:	05 97       	sbiw	r24, 0x05	; 5
    33b8:	09 f0       	breq	.+2      	; 0x33bc <nrk_gpio_direction+0x48>
    33ba:	fa c0       	rjmp	.+500    	; 0x35b0 <nrk_gpio_direction+0x23c>
    33bc:	67 c0       	rjmp	.+206    	; 0x348c <nrk_gpio_direction+0x118>
    33be:	31 b1       	in	r19, 0x01	; 1
    33c0:	b3 e0       	ldi	r27, 0x03	; 3
    33c2:	56 95       	lsr	r21
    33c4:	47 95       	ror	r20
    33c6:	ba 95       	dec	r27
    33c8:	e1 f7       	brne	.-8      	; 0x33c2 <nrk_gpio_direction+0x4e>
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <nrk_gpio_direction+0x60>
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	4a 95       	dec	r20
    33d6:	e2 f7       	brpl	.-8      	; 0x33d0 <nrk_gpio_direction+0x5c>
    33d8:	28 2f       	mov	r18, r24
    33da:	20 95       	com	r18
    33dc:	23 23       	and	r18, r19
    33de:	21 b9       	out	0x01, r18	; 1
    33e0:	22 b1       	in	r18, 0x02	; 2
    33e2:	82 2b       	or	r24, r18
    33e4:	82 b9       	out	0x02, r24	; 2
    33e6:	e1 c0       	rjmp	.+450    	; 0x35aa <nrk_gpio_direction+0x236>
    33e8:	24 b1       	in	r18, 0x04	; 4
    33ea:	a3 e0       	ldi	r26, 0x03	; 3
    33ec:	56 95       	lsr	r21
    33ee:	47 95       	ror	r20
    33f0:	aa 95       	dec	r26
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <nrk_gpio_direction+0x78>
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <nrk_gpio_direction+0x86>
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	4a 95       	dec	r20
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <nrk_gpio_direction+0x82>
    33fe:	98 2f       	mov	r25, r24
    3400:	80 95       	com	r24
    3402:	82 23       	and	r24, r18
    3404:	84 b9       	out	0x04, r24	; 4
    3406:	85 b1       	in	r24, 0x05	; 5
    3408:	98 2b       	or	r25, r24
    340a:	95 b9       	out	0x05, r25	; 5
    340c:	ce c0       	rjmp	.+412    	; 0x35aa <nrk_gpio_direction+0x236>
    340e:	37 b1       	in	r19, 0x07	; 7
    3410:	f3 e0       	ldi	r31, 0x03	; 3
    3412:	56 95       	lsr	r21
    3414:	47 95       	ror	r20
    3416:	fa 95       	dec	r31
    3418:	e1 f7       	brne	.-8      	; 0x3412 <nrk_gpio_direction+0x9e>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <nrk_gpio_direction+0xb0>
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	4a 95       	dec	r20
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <nrk_gpio_direction+0xac>
    3428:	28 2f       	mov	r18, r24
    342a:	20 95       	com	r18
    342c:	23 23       	and	r18, r19
    342e:	27 b9       	out	0x07, r18	; 7
    3430:	28 b1       	in	r18, 0x08	; 8
    3432:	82 2b       	or	r24, r18
    3434:	88 b9       	out	0x08, r24	; 8
    3436:	b9 c0       	rjmp	.+370    	; 0x35aa <nrk_gpio_direction+0x236>
    3438:	3a b1       	in	r19, 0x0a	; 10
    343a:	e3 e0       	ldi	r30, 0x03	; 3
    343c:	56 95       	lsr	r21
    343e:	47 95       	ror	r20
    3440:	ea 95       	dec	r30
    3442:	e1 f7       	brne	.-8      	; 0x343c <nrk_gpio_direction+0xc8>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	02 c0       	rjmp	.+4      	; 0x344e <nrk_gpio_direction+0xda>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	4a 95       	dec	r20
    3450:	e2 f7       	brpl	.-8      	; 0x344a <nrk_gpio_direction+0xd6>
    3452:	28 2f       	mov	r18, r24
    3454:	20 95       	com	r18
    3456:	23 23       	and	r18, r19
    3458:	2a b9       	out	0x0a, r18	; 10
    345a:	2b b1       	in	r18, 0x0b	; 11
    345c:	82 2b       	or	r24, r18
    345e:	8b b9       	out	0x0b, r24	; 11
    3460:	a4 c0       	rjmp	.+328    	; 0x35aa <nrk_gpio_direction+0x236>
    3462:	3d b1       	in	r19, 0x0d	; 13
    3464:	73 e0       	ldi	r23, 0x03	; 3
    3466:	56 95       	lsr	r21
    3468:	47 95       	ror	r20
    346a:	7a 95       	dec	r23
    346c:	e1 f7       	brne	.-8      	; 0x3466 <nrk_gpio_direction+0xf2>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <nrk_gpio_direction+0x104>
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	4a 95       	dec	r20
    347a:	e2 f7       	brpl	.-8      	; 0x3474 <nrk_gpio_direction+0x100>
    347c:	28 2f       	mov	r18, r24
    347e:	20 95       	com	r18
    3480:	23 23       	and	r18, r19
    3482:	2d b9       	out	0x0d, r18	; 13
    3484:	2e b1       	in	r18, 0x0e	; 14
    3486:	82 2b       	or	r24, r18
    3488:	8e b9       	out	0x0e, r24	; 14
    348a:	8f c0       	rjmp	.+286    	; 0x35aa <nrk_gpio_direction+0x236>
    348c:	30 b3       	in	r19, 0x10	; 16
    348e:	63 e0       	ldi	r22, 0x03	; 3
    3490:	56 95       	lsr	r21
    3492:	47 95       	ror	r20
    3494:	6a 95       	dec	r22
    3496:	e1 f7       	brne	.-8      	; 0x3490 <nrk_gpio_direction+0x11c>
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <nrk_gpio_direction+0x12e>
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	4a 95       	dec	r20
    34a4:	e2 f7       	brpl	.-8      	; 0x349e <nrk_gpio_direction+0x12a>
    34a6:	28 2f       	mov	r18, r24
    34a8:	20 95       	com	r18
    34aa:	23 23       	and	r18, r19
    34ac:	20 bb       	out	0x10, r18	; 16
    34ae:	21 b3       	in	r18, 0x11	; 17
    34b0:	82 2b       	or	r24, r18
    34b2:	81 bb       	out	0x11, r24	; 17
    34b4:	7a c0       	rjmp	.+244    	; 0x35aa <nrk_gpio_direction+0x236>
    34b6:	9a 01       	movw	r18, r20
    34b8:	27 70       	andi	r18, 0x07	; 7
    34ba:	30 70       	andi	r19, 0x00	; 0
    34bc:	22 30       	cpi	r18, 0x02	; 2
    34be:	31 05       	cpc	r19, r1
    34c0:	a9 f1       	breq	.+106    	; 0x352c <nrk_gpio_direction+0x1b8>
    34c2:	23 30       	cpi	r18, 0x03	; 3
    34c4:	31 05       	cpc	r19, r1
    34c6:	44 f4       	brge	.+16     	; 0x34d8 <nrk_gpio_direction+0x164>
    34c8:	21 15       	cp	r18, r1
    34ca:	31 05       	cpc	r19, r1
    34cc:	89 f0       	breq	.+34     	; 0x34f0 <nrk_gpio_direction+0x17c>
    34ce:	21 30       	cpi	r18, 0x01	; 1
    34d0:	31 05       	cpc	r19, r1
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <nrk_gpio_direction+0x162>
    34d4:	6d c0       	rjmp	.+218    	; 0x35b0 <nrk_gpio_direction+0x23c>
    34d6:	1c c0       	rjmp	.+56     	; 0x3510 <nrk_gpio_direction+0x19c>
    34d8:	24 30       	cpi	r18, 0x04	; 4
    34da:	31 05       	cpc	r19, r1
    34dc:	09 f4       	brne	.+2      	; 0x34e0 <nrk_gpio_direction+0x16c>
    34de:	46 c0       	rjmp	.+140    	; 0x356c <nrk_gpio_direction+0x1f8>
    34e0:	24 30       	cpi	r18, 0x04	; 4
    34e2:	31 05       	cpc	r19, r1
    34e4:	9c f1       	brlt	.+102    	; 0x354c <nrk_gpio_direction+0x1d8>
    34e6:	25 30       	cpi	r18, 0x05	; 5
    34e8:	31 05       	cpc	r19, r1
    34ea:	09 f0       	breq	.+2      	; 0x34ee <nrk_gpio_direction+0x17a>
    34ec:	61 c0       	rjmp	.+194    	; 0x35b0 <nrk_gpio_direction+0x23c>
    34ee:	4e c0       	rjmp	.+156    	; 0x358c <nrk_gpio_direction+0x218>
    34f0:	21 b1       	in	r18, 0x01	; 1
    34f2:	33 e0       	ldi	r19, 0x03	; 3
    34f4:	56 95       	lsr	r21
    34f6:	47 95       	ror	r20
    34f8:	3a 95       	dec	r19
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <nrk_gpio_direction+0x180>
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <nrk_gpio_direction+0x192>
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	4a 95       	dec	r20
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <nrk_gpio_direction+0x18e>
    350a:	28 2b       	or	r18, r24
    350c:	21 b9       	out	0x01, r18	; 1
    350e:	4d c0       	rjmp	.+154    	; 0x35aa <nrk_gpio_direction+0x236>
    3510:	84 b1       	in	r24, 0x04	; 4
    3512:	93 e0       	ldi	r25, 0x03	; 3
    3514:	56 95       	lsr	r21
    3516:	47 95       	ror	r20
    3518:	9a 95       	dec	r25
    351a:	e1 f7       	brne	.-8      	; 0x3514 <nrk_gpio_direction+0x1a0>
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <nrk_gpio_direction+0x1ae>
    351e:	22 0f       	add	r18, r18
    3520:	33 1f       	adc	r19, r19
    3522:	4a 95       	dec	r20
    3524:	e2 f7       	brpl	.-8      	; 0x351e <nrk_gpio_direction+0x1aa>
    3526:	82 2b       	or	r24, r18
    3528:	84 b9       	out	0x04, r24	; 4
    352a:	3f c0       	rjmp	.+126    	; 0x35aa <nrk_gpio_direction+0x236>
    352c:	27 b1       	in	r18, 0x07	; 7
    352e:	b3 e0       	ldi	r27, 0x03	; 3
    3530:	56 95       	lsr	r21
    3532:	47 95       	ror	r20
    3534:	ba 95       	dec	r27
    3536:	e1 f7       	brne	.-8      	; 0x3530 <nrk_gpio_direction+0x1bc>
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <nrk_gpio_direction+0x1ce>
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	4a 95       	dec	r20
    3544:	e2 f7       	brpl	.-8      	; 0x353e <nrk_gpio_direction+0x1ca>
    3546:	28 2b       	or	r18, r24
    3548:	27 b9       	out	0x07, r18	; 7
    354a:	2f c0       	rjmp	.+94     	; 0x35aa <nrk_gpio_direction+0x236>
    354c:	2a b1       	in	r18, 0x0a	; 10
    354e:	a3 e0       	ldi	r26, 0x03	; 3
    3550:	56 95       	lsr	r21
    3552:	47 95       	ror	r20
    3554:	aa 95       	dec	r26
    3556:	e1 f7       	brne	.-8      	; 0x3550 <nrk_gpio_direction+0x1dc>
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	02 c0       	rjmp	.+4      	; 0x3562 <nrk_gpio_direction+0x1ee>
    355e:	88 0f       	add	r24, r24
    3560:	99 1f       	adc	r25, r25
    3562:	4a 95       	dec	r20
    3564:	e2 f7       	brpl	.-8      	; 0x355e <nrk_gpio_direction+0x1ea>
    3566:	28 2b       	or	r18, r24
    3568:	2a b9       	out	0x0a, r18	; 10
    356a:	1f c0       	rjmp	.+62     	; 0x35aa <nrk_gpio_direction+0x236>
    356c:	2d b1       	in	r18, 0x0d	; 13
    356e:	f3 e0       	ldi	r31, 0x03	; 3
    3570:	56 95       	lsr	r21
    3572:	47 95       	ror	r20
    3574:	fa 95       	dec	r31
    3576:	e1 f7       	brne	.-8      	; 0x3570 <nrk_gpio_direction+0x1fc>
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <nrk_gpio_direction+0x20e>
    357e:	88 0f       	add	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	4a 95       	dec	r20
    3584:	e2 f7       	brpl	.-8      	; 0x357e <nrk_gpio_direction+0x20a>
    3586:	28 2b       	or	r18, r24
    3588:	2d b9       	out	0x0d, r18	; 13
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <nrk_gpio_direction+0x236>
    358c:	20 b3       	in	r18, 0x10	; 16
    358e:	e3 e0       	ldi	r30, 0x03	; 3
    3590:	56 95       	lsr	r21
    3592:	47 95       	ror	r20
    3594:	ea 95       	dec	r30
    3596:	e1 f7       	brne	.-8      	; 0x3590 <nrk_gpio_direction+0x21c>
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <nrk_gpio_direction+0x22e>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	4a 95       	dec	r20
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <nrk_gpio_direction+0x22a>
    35a6:	28 2b       	or	r18, r24
    35a8:	20 bb       	out	0x10, r18	; 16
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	08 95       	ret
    35b0:	8f ef       	ldi	r24, 0xFF	; 255
    35b2:	9f ef       	ldi	r25, 0xFF	; 255
    35b4:	08 95       	ret

000035b6 <nrk_get_button>:
    35b6:	88 23       	and	r24, r24
    35b8:	19 f0       	breq	.+6      	; 0x35c0 <nrk_get_button+0xa>
    35ba:	8f ef       	ldi	r24, 0xFF	; 255
    35bc:	9f ef       	ldi	r25, 0xFF	; 255
    35be:	08 95       	ret
    35c0:	80 b1       	in	r24, 0x00	; 0
    35c2:	99 27       	eor	r25, r25
    35c4:	87 fd       	sbrc	r24, 7
    35c6:	90 95       	com	r25
    35c8:	80 95       	com	r24
    35ca:	90 95       	com	r25
    35cc:	88 27       	eor	r24, r24
    35ce:	99 0f       	add	r25, r25
    35d0:	88 1f       	adc	r24, r24
    35d2:	99 27       	eor	r25, r25
    35d4:	08 95       	ret

000035d6 <nrk_led_toggle>:
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	11 f4       	brne	.+4      	; 0x35de <nrk_led_toggle+0x8>
    35da:	84 e1       	ldi	r24, 0x14	; 20
    35dc:	09 c0       	rjmp	.+18     	; 0x35f0 <nrk_led_toggle+0x1a>
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	91 05       	cpc	r25, r1
    35e2:	11 f4       	brne	.+4      	; 0x35e8 <nrk_led_toggle+0x12>
    35e4:	8c e1       	ldi	r24, 0x1C	; 28
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <nrk_led_toggle+0x1a>
    35e8:	82 30       	cpi	r24, 0x02	; 2
    35ea:	91 05       	cpc	r25, r1
    35ec:	31 f4       	brne	.+12     	; 0x35fa <nrk_led_toggle+0x24>
    35ee:	84 e2       	ldi	r24, 0x24	; 36
    35f0:	0e 94 b1 18 	call	0x3162	; 0x3162 <nrk_gpio_toggle>
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	08 95       	ret
    35fa:	03 97       	sbiw	r24, 0x03	; 3
    35fc:	19 f0       	breq	.+6      	; 0x3604 <nrk_led_toggle+0x2e>
    35fe:	8f ef       	ldi	r24, 0xFF	; 255
    3600:	9f ef       	ldi	r25, 0xFF	; 255
    3602:	08 95       	ret
    3604:	8c e2       	ldi	r24, 0x2C	; 44
    3606:	0e 94 b1 18 	call	0x3162	; 0x3162 <nrk_gpio_toggle>
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	08 95       	ret

00003610 <nrk_led_clr>:
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	11 f4       	brne	.+4      	; 0x3618 <nrk_led_clr+0x8>
    3614:	84 e1       	ldi	r24, 0x14	; 20
    3616:	09 c0       	rjmp	.+18     	; 0x362a <nrk_led_clr+0x1a>
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	91 05       	cpc	r25, r1
    361c:	11 f4       	brne	.+4      	; 0x3622 <nrk_led_clr+0x12>
    361e:	8c e1       	ldi	r24, 0x1C	; 28
    3620:	04 c0       	rjmp	.+8      	; 0x362a <nrk_led_clr+0x1a>
    3622:	82 30       	cpi	r24, 0x02	; 2
    3624:	91 05       	cpc	r25, r1
    3626:	31 f4       	brne	.+12     	; 0x3634 <nrk_led_clr+0x24>
    3628:	84 e2       	ldi	r24, 0x24	; 36
    362a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <nrk_gpio_set>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	08 95       	ret
    3634:	03 97       	sbiw	r24, 0x03	; 3
    3636:	19 f0       	breq	.+6      	; 0x363e <nrk_led_clr+0x2e>
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	9f ef       	ldi	r25, 0xFF	; 255
    363c:	08 95       	ret
    363e:	8c e2       	ldi	r24, 0x2C	; 44
    3640:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <nrk_gpio_set>
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	08 95       	ret

0000364a <nrk_led_set>:
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	11 f4       	brne	.+4      	; 0x3652 <nrk_led_set+0x8>
    364e:	84 e1       	ldi	r24, 0x14	; 20
    3650:	09 c0       	rjmp	.+18     	; 0x3664 <nrk_led_set+0x1a>
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	91 05       	cpc	r25, r1
    3656:	11 f4       	brne	.+4      	; 0x365c <nrk_led_set+0x12>
    3658:	8c e1       	ldi	r24, 0x1C	; 28
    365a:	04 c0       	rjmp	.+8      	; 0x3664 <nrk_led_set+0x1a>
    365c:	82 30       	cpi	r24, 0x02	; 2
    365e:	91 05       	cpc	r25, r1
    3660:	31 f4       	brne	.+12     	; 0x366e <nrk_led_set+0x24>
    3662:	84 e2       	ldi	r24, 0x24	; 36
    3664:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <nrk_gpio_clr>
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	08 95       	ret
    366e:	03 97       	sbiw	r24, 0x03	; 3
    3670:	19 f0       	breq	.+6      	; 0x3678 <nrk_led_set+0x2e>
    3672:	8f ef       	ldi	r24, 0xFF	; 255
    3674:	9f ef       	ldi	r25, 0xFF	; 255
    3676:	08 95       	ret
    3678:	8c e2       	ldi	r24, 0x2C	; 44
    367a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <nrk_gpio_clr>
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	08 95       	ret

00003684 <nrk_gpio_pullups>:
    3684:	88 23       	and	r24, r24
    3686:	19 f0       	breq	.+6      	; 0x368e <nrk_gpio_pullups+0xa>
    3688:	85 b7       	in	r24, 0x35	; 53
    368a:	8f 7e       	andi	r24, 0xEF	; 239
    368c:	02 c0       	rjmp	.+4      	; 0x3692 <nrk_gpio_pullups+0xe>
    368e:	85 b7       	in	r24, 0x35	; 53
    3690:	80 61       	ori	r24, 0x10	; 16
    3692:	85 bf       	out	0x35, r24	; 53
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	08 95       	ret

0000369a <putc0>:
    369a:	98 2f       	mov	r25, r24
    369c:	80 91 c0 00 	lds	r24, 0x00C0
    36a0:	85 ff       	sbrs	r24, 5
    36a2:	fc cf       	rjmp	.-8      	; 0x369c <putc0+0x2>
    36a4:	80 91 c0 00 	lds	r24, 0x00C0
    36a8:	8f 7d       	andi	r24, 0xDF	; 223
    36aa:	80 93 c0 00 	sts	0x00C0, r24
    36ae:	90 93 c6 00 	sts	0x00C6, r25
    36b2:	08 95       	ret

000036b4 <putc1>:
    36b4:	98 2f       	mov	r25, r24
    36b6:	80 91 c8 00 	lds	r24, 0x00C8
    36ba:	85 ff       	sbrs	r24, 5
    36bc:	fc cf       	rjmp	.-8      	; 0x36b6 <putc1+0x2>
    36be:	90 93 ce 00 	sts	0x00CE, r25
    36c2:	08 95       	ret

000036c4 <setup_uart0>:
    36c4:	29 2f       	mov	r18, r25
    36c6:	33 27       	eor	r19, r19
    36c8:	20 93 c5 00 	sts	0x00C5, r18
    36cc:	80 93 c4 00 	sts	0x00C4, r24
    36d0:	86 e0       	ldi	r24, 0x06	; 6
    36d2:	80 93 c2 00 	sts	0x00C2, r24
    36d6:	e1 ec       	ldi	r30, 0xC1	; 193
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	8b 7f       	andi	r24, 0xFB	; 251
    36de:	80 83       	st	Z, r24
    36e0:	a0 ec       	ldi	r26, 0xC0	; 192
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	8c 91       	ld	r24, X
    36e6:	82 60       	ori	r24, 0x02	; 2
    36e8:	8c 93       	st	X, r24
    36ea:	80 81       	ld	r24, Z
    36ec:	88 61       	ori	r24, 0x18	; 24
    36ee:	80 83       	st	Z, r24
    36f0:	08 95       	ret

000036f2 <setup_uart1>:
    36f2:	29 2f       	mov	r18, r25
    36f4:	33 27       	eor	r19, r19
    36f6:	20 93 cd 00 	sts	0x00CD, r18
    36fa:	80 93 cc 00 	sts	0x00CC, r24
    36fe:	86 e0       	ldi	r24, 0x06	; 6
    3700:	80 93 ca 00 	sts	0x00CA, r24
    3704:	e9 ec       	ldi	r30, 0xC9	; 201
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	8b 7f       	andi	r24, 0xFB	; 251
    370c:	80 83       	st	Z, r24
    370e:	a8 ec       	ldi	r26, 0xC8	; 200
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	8c 91       	ld	r24, X
    3714:	82 60       	ori	r24, 0x02	; 2
    3716:	8c 93       	st	X, r24
    3718:	80 81       	ld	r24, Z
    371a:	88 61       	ori	r24, 0x18	; 24
    371c:	80 83       	st	Z, r24
    371e:	08 95       	ret

00003720 <getc0>:
    3720:	80 91 c0 00 	lds	r24, 0x00C0
    3724:	87 ff       	sbrs	r24, 7
    3726:	fc cf       	rjmp	.-8      	; 0x3720 <getc0>
    3728:	80 91 c0 00 	lds	r24, 0x00C0
    372c:	8f 77       	andi	r24, 0x7F	; 127
    372e:	80 93 c0 00 	sts	0x00C0, r24
    3732:	80 91 c6 00 	lds	r24, 0x00C6
    3736:	99 27       	eor	r25, r25
    3738:	08 95       	ret

0000373a <nrk_setup_uart>:
    373a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <setup_uart1>
    373e:	6c e0       	ldi	r22, 0x0C	; 12
    3740:	77 e1       	ldi	r23, 0x17	; 23
    3742:	8a e5       	ldi	r24, 0x5A	; 90
    3744:	9b e1       	ldi	r25, 0x1B	; 27
    3746:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <fdevopen>
    374a:	90 93 95 07 	sts	0x0795, r25
    374e:	80 93 94 07 	sts	0x0794, r24
    3752:	6c e0       	ldi	r22, 0x0C	; 12
    3754:	77 e1       	ldi	r23, 0x17	; 23
    3756:	8a e5       	ldi	r24, 0x5A	; 90
    3758:	9b e1       	ldi	r25, 0x1B	; 27
    375a:	0e 94 e0 3b 	call	0x77c0	; 0x77c0 <fdevopen>
    375e:	90 93 93 07 	sts	0x0793, r25
    3762:	80 93 92 07 	sts	0x0792, r24
    3766:	0e 94 12 22 	call	0x4424	; 0x4424 <nrk_signal_create>
    376a:	80 93 73 04 	sts	0x0473, r24
    376e:	8f 3f       	cpi	r24, 0xFF	; 255
    3770:	19 f4       	brne	.+6      	; 0x3778 <nrk_setup_uart+0x3e>
    3772:	8e e0       	ldi	r24, 0x0E	; 14
    3774:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
    3778:	10 92 61 04 	sts	0x0461, r1
    377c:	10 92 62 04 	sts	0x0462, r1
    3780:	80 91 c9 00 	lds	r24, 0x00C9
    3784:	80 68       	ori	r24, 0x80	; 128
    3786:	80 93 c9 00 	sts	0x00C9, r24
    378a:	08 95       	ret

0000378c <nrk_uart_rx_signal_get>:
    378c:	80 91 73 04 	lds	r24, 0x0473
    3790:	8f 3f       	cpi	r24, 0xFF	; 255
    3792:	19 f4       	brne	.+6      	; 0x379a <nrk_uart_rx_signal_get+0xe>
    3794:	8e e0       	ldi	r24, 0x0E	; 14
    3796:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
    379a:	80 91 73 04 	lds	r24, 0x0473
    379e:	99 27       	eor	r25, r25
    37a0:	87 fd       	sbrc	r24, 7
    37a2:	90 95       	com	r25
    37a4:	08 95       	ret

000037a6 <nrk_kprintf>:
    37a6:	cf 93       	push	r28
    37a8:	df 93       	push	r29
    37aa:	ec 01       	movw	r28, r24
    37ac:	07 c0       	rjmp	.+14     	; 0x37bc <nrk_kprintf+0x16>
    37ae:	60 91 94 07 	lds	r22, 0x0794
    37b2:	70 91 95 07 	lds	r23, 0x0795
    37b6:	99 27       	eor	r25, r25
    37b8:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
    37bc:	fe 01       	movw	r30, r28
    37be:	21 96       	adiw	r28, 0x01	; 1
    37c0:	84 91       	lpm	r24, Z
    37c2:	88 23       	and	r24, r24
    37c4:	a1 f7       	brne	.-24     	; 0x37ae <nrk_kprintf+0x8>
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	08 95       	ret

000037cc <__vector_36>:
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();

    37cc:	1f 92       	push	r1
    37ce:	0f 92       	push	r0
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	0f 92       	push	r0
    37d4:	11 24       	eor	r1, r1
    37d6:	2f 93       	push	r18
    37d8:	3f 93       	push	r19
    37da:	4f 93       	push	r20
    37dc:	5f 93       	push	r21
    37de:	6f 93       	push	r22
    37e0:	7f 93       	push	r23
    37e2:	8f 93       	push	r24
    37e4:	9f 93       	push	r25
    37e6:	af 93       	push	r26
    37e8:	bf 93       	push	r27
    37ea:	ef 93       	push	r30
    37ec:	ff 93       	push	r31
} // rfSetChannel


    37ee:	80 91 c9 00 	lds	r24, 0x00C9
    37f2:	8f 77       	andi	r24, 0x7F	; 127
    37f4:	80 93 c9 00 	sts	0x00C9, r24
    37f8:	80 91 c8 00 	lds	r24, 0x00C8
    37fc:	87 ff       	sbrs	r24, 7
    37fe:	fc cf       	rjmp	.-8      	; 0x37f8 <__vector_36+0x2c>
    3800:	80 91 c8 00 	lds	r24, 0x00C8
    3804:	8f 77       	andi	r24, 0x7F	; 127
    3806:	80 93 c8 00 	sts	0x00C8, r24
    380a:	90 91 ce 00 	lds	r25, 0x00CE
    380e:	80 91 62 04 	lds	r24, 0x0462
    3812:	e8 2f       	mov	r30, r24
    3814:	ff 27       	eor	r31, r31
    3816:	ed 59       	subi	r30, 0x9D	; 157
    3818:	fb 4f       	sbci	r31, 0xFB	; 251
    381a:	90 83       	st	Z, r25
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	80 93 62 04 	sts	0x0462, r24
    3822:	80 31       	cpi	r24, 0x10	; 16
    3824:	11 f4       	brne	.+4      	; 0x382a <__vector_36+0x5e>
    3826:	10 92 62 04 	sts	0x0462, r1
    382a:	80 91 73 04 	lds	r24, 0x0473
    382e:	0e 94 a3 23 	call	0x4746	; 0x4746 <nrk_event_signal>
    3832:	80 91 c8 00 	lds	r24, 0x00C8
    3836:	8f 77       	andi	r24, 0x7F	; 127
    3838:	80 93 c8 00 	sts	0x00C8, r24
    383c:	80 91 c9 00 	lds	r24, 0x00C9
    3840:	80 68       	ori	r24, 0x80	; 128
    3842:	80 93 c9 00 	sts	0x00C9, r24
    3846:	ff 91       	pop	r31
    3848:	ef 91       	pop	r30
    384a:	bf 91       	pop	r27
    384c:	af 91       	pop	r26
    384e:	9f 91       	pop	r25
    3850:	8f 91       	pop	r24
    3852:	7f 91       	pop	r23
    3854:	6f 91       	pop	r22
    3856:	5f 91       	pop	r21
    3858:	4f 91       	pop	r20
    385a:	3f 91       	pop	r19
    385c:	2f 91       	pop	r18
    385e:	0f 90       	pop	r0
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	0f 90       	pop	r0
    3864:	1f 90       	pop	r1
    3866:	18 95       	reti

00003868 <halWait>:
	...
    do { \
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	d1 f7       	brne	.-12     	; 0x3868 <halWait>
    3874:	08 95       	ret

00003876 <read_eeprom_current_image_checksum>:
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    3876:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    3878:	a7 e0       	ldi	r26, 0x07	; 7
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    3880:	80 2d       	mov	r24, r0

    3882:	80 83       	st	Z, r24
// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	08 95       	ret

0000388a <write_eeprom_current_image_checksum>:
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

#define ADC_SAMPLE_SINGLE() \
    388a:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    388c:	80 81       	ld	r24, Z
    388e:	a7 e0       	ldi	r26, 0x07	; 7
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	08 2e       	mov	r0, r24
    3894:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__eeprom_write_byte_1F2021>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	08 95       	ret

0000389e <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    389e:	dc 01       	movw	r26, r24
    38a0:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38a4:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    38a6:	99 27       	eor	r25, r25
    38a8:	08 95       	ret

000038aa <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    38aa:	fc 01       	movw	r30, r24
    38ac:	a0 e0       	ldi	r26, 0x00	; 0
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38b4:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Anthony Rowe
    38b6:	43 83       	std	Z+3, r20	; 0x03
    38b8:	a1 e0       	ldi	r26, 0x01	; 1
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38c0:	80 2d       	mov	r24, r0
*  Zane Starr
    38c2:	82 83       	std	Z+2, r24	; 0x02
    38c4:	a2 e0       	ldi	r26, 0x02	; 2
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38cc:	30 2d       	mov	r19, r0
*******************************************************************************/
    38ce:	31 83       	std	Z+1, r19	; 0x01
    38d0:	a3 e0       	ldi	r26, 0x03	; 3
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38d8:	90 2d       	mov	r25, r0

    38da:	90 83       	st	Z, r25
    38dc:	a4 e0       	ldi	r26, 0x04	; 4
    38de:	b0 e0       	ldi	r27, 0x00	; 0
    38e0:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    38e4:	20 2d       	mov	r18, r0

#include <nrk_driver_list.h>
#include <nrk_driver.h>
    38e6:	83 0f       	add	r24, r19
#include <ff_basic_sensor.h>
    38e8:	84 0f       	add	r24, r20
#include <include.h>
#include <stdio.h>
    38ea:	89 0f       	add	r24, r25
    38ec:	28 17       	cp	r18, r24
    38ee:	19 f4       	brne	.+6      	; 0x38f6 <read_eeprom_mac_address+0x4c>
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	08 95       	ret
    38f6:	8f ef       	ldi	r24, 0xFF	; 255
    38f8:	9f ef       	ldi	r25, 0xFF	; 255
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
    38fa:	08 95       	ret

000038fc <read_eeprom_channel>:
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>
    38fc:	fc 01       	movw	r30, r24
    38fe:	a5 e0       	ldi	r26, 0x05	; 5
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    3906:	80 2d       	mov	r24, r0

    3908:	80 83       	st	Z, r24
#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	08 95       	ret

00003910 <read_eeprom_load_img_pages>:

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    3910:	fc 01       	movw	r30, r24
    3912:	a6 e0       	ldi	r26, 0x06	; 6
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    391a:	80 2d       	mov	r24, r0
} while (0)
    391c:	80 83       	st	Z, r24

#define ADC_VREF_VCC() \
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	08 95       	ret

00003924 <read_eeprom_aes_key>:
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
    3924:	ac 01       	movw	r20, r24
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	d9 01       	movw	r26, r18
    392c:	18 96       	adiw	r26, 0x08	; 8
    392e:	0e 94 b5 3e 	call	0x7d6a	; 0x7d6a <__eeprom_read_byte_1F2021>
    3932:	80 2d       	mov	r24, r0
} while(0)


    3934:	fa 01       	movw	r30, r20
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	80 83       	st	Z, r24
    393c:	2f 5f       	subi	r18, 0xFF	; 255
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    3940:	20 31       	cpi	r18, 0x10	; 16
    3942:	31 05       	cpc	r19, r1
    3944:	91 f7       	brne	.-28     	; 0x392a <read_eeprom_aes_key+0x6>

#define ADC_VREF_1_1() \
   do { \
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	08 95       	ret

0000394c <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    394c:	dc 01       	movw	r26, r24
    394e:	06 2e       	mov	r0, r22
    3950:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__eeprom_write_byte_1F2021>
    3954:	08 95       	ret

00003956 <write_eeprom_load_img_pages>:

#define ADC_STARTUP_DELAY  1000
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;
    3956:	fc 01       	movw	r30, r24
    3958:	80 81       	ld	r24, Z
    395a:	a6 e0       	ldi	r26, 0x06	; 6
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	08 2e       	mov	r0, r24
    3960:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__eeprom_write_byte_1F2021>

// VREF is set to VCC by default
#define ADC_INIT() \
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	08 95       	ret

0000396a <write_eeprom_aes_key>:

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    396a:	ac 01       	movw	r20, r24
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	d9 01       	movw	r26, r18
    3972:	18 96       	adiw	r26, 0x08	; 8
    3974:	fa 01       	movw	r30, r20
    3976:	e2 0f       	add	r30, r18
    3978:	f3 1f       	adc	r31, r19
    397a:	80 81       	ld	r24, Z
    397c:	08 2e       	mov	r0, r24
    397e:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__eeprom_write_byte_1F2021>
    3982:	2f 5f       	subi	r18, 0xFF	; 255
    3984:	3f 4f       	sbci	r19, 0xFF	; 255


    3986:	20 31       	cpi	r18, 0x10	; 16
    3988:	31 05       	cpc	r19, r1
    398a:	91 f7       	brne	.-28     	; 0x3970 <write_eeprom_aes_key+0x6>
#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	08 95       	ret

00003992 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3992:	f8 94       	cli
    3994:	08 95       	ret

00003996 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    3996:	78 94       	sei
    3998:	08 95       	ret

0000399a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    399a:	85 e6       	ldi	r24, 0x65	; 101
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	08 95       	ret

000039a0 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    39a0:	0e 94 38 2c 	call	0x5870	; 0x5870 <_nrk_scheduler>
    39a4:	08 95       	ret

000039a6 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
    39b4:	8b 01       	movw	r16, r22
    39b6:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    39b8:	89 85       	ldd	r24, Y+9	; 0x09
    39ba:	82 30       	cpi	r24, 0x02	; 2
    39bc:	21 f0       	breq	.+8      	; 0x39c6 <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    39be:	80 91 56 07 	lds	r24, 0x0756
    39c2:	88 83       	st	Y, r24
    39c4:	01 c0       	rjmp	.+2      	; 0x39c8 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    39c6:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    39c8:	80 91 56 07 	lds	r24, 0x0756
    39cc:	84 30       	cpi	r24, 0x04	; 4
    39ce:	20 f0       	brcs	.+8      	; 0x39d8 <nrk_TCB_init+0x32>
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	87 e0       	ldi	r24, 0x07	; 7
    39d4:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	29 f0       	breq	.+10     	; 0x39e8 <nrk_TCB_init+0x42>
    39de:	80 91 56 07 	lds	r24, 0x0756
    39e2:	8f 5f       	subi	r24, 0xFF	; 255
    39e4:	80 93 56 07 	sts	0x0756, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    39e8:	80 91 56 07 	lds	r24, 0x0756
    39ec:	88 23       	and	r24, r24
    39ee:	19 f4       	brne	.+6      	; 0x39f6 <nrk_TCB_init+0x50>
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	80 93 56 07 	sts	0x0756, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    39f6:	88 81       	ld	r24, Y
    39f8:	99 27       	eor	r25, r25
    39fa:	87 fd       	sbrc	r24, 7
    39fc:	90 95       	com	r25
    39fe:	fc 01       	movw	r30, r24
    3a00:	45 e0       	ldi	r20, 0x05	; 5
    3a02:	ee 0f       	add	r30, r30
    3a04:	ff 1f       	adc	r31, r31
    3a06:	4a 95       	dec	r20
    3a08:	e1 f7       	brne	.-8      	; 0x3a02 <nrk_TCB_init+0x5c>
    3a0a:	e8 0f       	add	r30, r24
    3a0c:	f9 1f       	adc	r31, r25
    3a0e:	e6 53       	subi	r30, 0x36	; 54
    3a10:	f9 4f       	sbci	r31, 0xF9	; 249
    3a12:	11 83       	std	Z+1, r17	; 0x01
    3a14:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    3a16:	88 81       	ld	r24, Y
    3a18:	99 27       	eor	r25, r25
    3a1a:	87 fd       	sbrc	r24, 7
    3a1c:	90 95       	com	r25
    3a1e:	fc 01       	movw	r30, r24
    3a20:	35 e0       	ldi	r19, 0x05	; 5
    3a22:	ee 0f       	add	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	3a 95       	dec	r19
    3a28:	e1 f7       	brne	.-8      	; 0x3a22 <nrk_TCB_init+0x7c>
    3a2a:	e8 0f       	add	r30, r24
    3a2c:	f9 1f       	adc	r31, r25
    3a2e:	e6 53       	subi	r30, 0x36	; 54
    3a30:	f9 4f       	sbci	r31, 0xF9	; 249
    3a32:	88 85       	ldd	r24, Y+8	; 0x08
    3a34:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    3a36:	88 81       	ld	r24, Y
    3a38:	99 27       	eor	r25, r25
    3a3a:	87 fd       	sbrc	r24, 7
    3a3c:	90 95       	com	r25
    3a3e:	fc 01       	movw	r30, r24
    3a40:	25 e0       	ldi	r18, 0x05	; 5
    3a42:	ee 0f       	add	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	2a 95       	dec	r18
    3a48:	e1 f7       	brne	.-8      	; 0x3a42 <nrk_TCB_init+0x9c>
    3a4a:	e8 0f       	add	r30, r24
    3a4c:	f9 1f       	adc	r31, r25
    3a4e:	e6 53       	subi	r30, 0x36	; 54
    3a50:	f9 4f       	sbci	r31, 0xF9	; 249
    3a52:	83 e0       	ldi	r24, 0x03	; 3
    3a54:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    3a56:	28 81       	ld	r18, Y
    3a58:	82 2f       	mov	r24, r18
    3a5a:	99 27       	eor	r25, r25
    3a5c:	87 fd       	sbrc	r24, 7
    3a5e:	90 95       	com	r25
    3a60:	fc 01       	movw	r30, r24
    3a62:	05 e0       	ldi	r16, 0x05	; 5
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	0a 95       	dec	r16
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <nrk_TCB_init+0xbe>
    3a6c:	e8 0f       	add	r30, r24
    3a6e:	f9 1f       	adc	r31, r25
    3a70:	e6 53       	subi	r30, 0x36	; 54
    3a72:	f9 4f       	sbci	r31, 0xF9	; 249
    3a74:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    3a76:	88 81       	ld	r24, Y
    3a78:	99 27       	eor	r25, r25
    3a7a:	87 fd       	sbrc	r24, 7
    3a7c:	90 95       	com	r25
    3a7e:	fc 01       	movw	r30, r24
    3a80:	15 e0       	ldi	r17, 0x05	; 5
    3a82:	ee 0f       	add	r30, r30
    3a84:	ff 1f       	adc	r31, r31
    3a86:	1a 95       	dec	r17
    3a88:	e1 f7       	brne	.-8      	; 0x3a82 <nrk_TCB_init+0xdc>
    3a8a:	e8 0f       	add	r30, r24
    3a8c:	f9 1f       	adc	r31, r25
    3a8e:	e6 53       	subi	r30, 0x36	; 54
    3a90:	f9 4f       	sbci	r31, 0xF9	; 249
    3a92:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    3a94:	08 81       	ld	r16, Y
    3a96:	11 27       	eor	r17, r17
    3a98:	07 fd       	sbrc	r16, 7
    3a9a:	10 95       	com	r17
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	0b 96       	adiw	r24, 0x0b	; 11
    3aa0:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
    3aa4:	f8 01       	movw	r30, r16
    3aa6:	b5 e0       	ldi	r27, 0x05	; 5
    3aa8:	ee 0f       	add	r30, r30
    3aaa:	ff 1f       	adc	r31, r31
    3aac:	ba 95       	dec	r27
    3aae:	e1 f7       	brne	.-8      	; 0x3aa8 <nrk_TCB_init+0x102>
    3ab0:	e0 0f       	add	r30, r16
    3ab2:	f1 1f       	adc	r31, r17
    3ab4:	e6 53       	subi	r30, 0x36	; 54
    3ab6:	f9 4f       	sbci	r31, 0xF9	; 249
    3ab8:	94 8f       	std	Z+28, r25	; 0x1c
    3aba:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    3abc:	08 81       	ld	r16, Y
    3abe:	11 27       	eor	r17, r17
    3ac0:	07 fd       	sbrc	r16, 7
    3ac2:	10 95       	com	r17
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	4b 96       	adiw	r24, 0x1b	; 27
    3ac8:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
    3acc:	f8 01       	movw	r30, r16
    3ace:	a5 e0       	ldi	r26, 0x05	; 5
    3ad0:	ee 0f       	add	r30, r30
    3ad2:	ff 1f       	adc	r31, r31
    3ad4:	aa 95       	dec	r26
    3ad6:	e1 f7       	brne	.-8      	; 0x3ad0 <nrk_TCB_init+0x12a>
    3ad8:	e0 0f       	add	r30, r16
    3ada:	f1 1f       	adc	r31, r17
    3adc:	e6 53       	subi	r30, 0x36	; 54
    3ade:	f9 4f       	sbci	r31, 0xF9	; 249
    3ae0:	96 8b       	std	Z+22, r25	; 0x16
    3ae2:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    3ae4:	88 81       	ld	r24, Y
    3ae6:	99 27       	eor	r25, r25
    3ae8:	87 fd       	sbrc	r24, 7
    3aea:	90 95       	com	r25
    3aec:	fc 01       	movw	r30, r24
    3aee:	75 e0       	ldi	r23, 0x05	; 5
    3af0:	ee 0f       	add	r30, r30
    3af2:	ff 1f       	adc	r31, r31
    3af4:	7a 95       	dec	r23
    3af6:	e1 f7       	brne	.-8      	; 0x3af0 <nrk_TCB_init+0x14a>
    3af8:	e8 0f       	add	r30, r24
    3afa:	f9 1f       	adc	r31, r25
    3afc:	e6 53       	subi	r30, 0x36	; 54
    3afe:	f9 4f       	sbci	r31, 0xF9	; 249
    3b00:	85 89       	ldd	r24, Z+21	; 0x15
    3b02:	96 89       	ldd	r25, Z+22	; 0x16
    3b04:	23 8d       	ldd	r18, Z+27	; 0x1b
    3b06:	34 8d       	ldd	r19, Z+28	; 0x1c
    3b08:	82 0f       	add	r24, r18
    3b0a:	93 1f       	adc	r25, r19
    3b0c:	90 8f       	std	Z+24, r25	; 0x18
    3b0e:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    3b10:	08 81       	ld	r16, Y
    3b12:	11 27       	eor	r17, r17
    3b14:	07 fd       	sbrc	r16, 7
    3b16:	10 95       	com	r17
    3b18:	ce 01       	movw	r24, r28
    3b1a:	43 96       	adiw	r24, 0x13	; 19
    3b1c:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
    3b20:	f8 01       	movw	r30, r16
    3b22:	65 e0       	ldi	r22, 0x05	; 5
    3b24:	ee 0f       	add	r30, r30
    3b26:	ff 1f       	adc	r31, r31
    3b28:	6a 95       	dec	r22
    3b2a:	e1 f7       	brne	.-8      	; 0x3b24 <nrk_TCB_init+0x17e>
    3b2c:	e0 0f       	add	r30, r16
    3b2e:	f1 1f       	adc	r31, r17
    3b30:	e6 53       	subi	r30, 0x36	; 54
    3b32:	f9 4f       	sbci	r31, 0xF9	; 249
    3b34:	96 8f       	std	Z+30, r25	; 0x1e
    3b36:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    3b38:	88 81       	ld	r24, Y
    3b3a:	99 27       	eor	r25, r25
    3b3c:	87 fd       	sbrc	r24, 7
    3b3e:	90 95       	com	r25
    3b40:	fc 01       	movw	r30, r24
    3b42:	55 e0       	ldi	r21, 0x05	; 5
    3b44:	ee 0f       	add	r30, r30
    3b46:	ff 1f       	adc	r31, r31
    3b48:	5a 95       	dec	r21
    3b4a:	e1 f7       	brne	.-8      	; 0x3b44 <nrk_TCB_init+0x19e>
    3b4c:	e8 0f       	add	r30, r24
    3b4e:	f9 1f       	adc	r31, r25
    3b50:	e6 53       	subi	r30, 0x36	; 54
    3b52:	f9 4f       	sbci	r31, 0xF9	; 249
    3b54:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b56:	96 8d       	ldd	r25, Z+30	; 0x1e
    3b58:	92 8f       	std	Z+26, r25	; 0x1a
    3b5a:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3b5c:	88 81       	ld	r24, Y
    3b5e:	99 27       	eor	r25, r25
    3b60:	87 fd       	sbrc	r24, 7
    3b62:	90 95       	com	r25
    3b64:	fc 01       	movw	r30, r24
    3b66:	45 e0       	ldi	r20, 0x05	; 5
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	4a 95       	dec	r20
    3b6e:	e1 f7       	brne	.-8      	; 0x3b68 <nrk_TCB_init+0x1c2>
    3b70:	e8 0f       	add	r30, r24
    3b72:	f9 1f       	adc	r31, r25
    3b74:	e6 53       	subi	r30, 0x36	; 54
    3b76:	f9 4f       	sbci	r31, 0xF9	; 249
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	90 a3       	std	Z+32, r25	; 0x20
    3b7e:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3b80:	88 81       	ld	r24, Y
    3b82:	99 27       	eor	r25, r25
    3b84:	87 fd       	sbrc	r24, 7
    3b86:	90 95       	com	r25
    3b88:	fc 01       	movw	r30, r24
    3b8a:	35 e0       	ldi	r19, 0x05	; 5
    3b8c:	ee 0f       	add	r30, r30
    3b8e:	ff 1f       	adc	r31, r31
    3b90:	3a 95       	dec	r19
    3b92:	e1 f7       	brne	.-8      	; 0x3b8c <nrk_TCB_init+0x1e6>
    3b94:	e8 0f       	add	r30, r24
    3b96:	f9 1f       	adc	r31, r25
    3b98:	e6 53       	subi	r30, 0x36	; 54
    3b9a:	f9 4f       	sbci	r31, 0xF9	; 249
    3b9c:	f3 82       	std	Z+3, r15	; 0x03
    3b9e:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3ba0:	88 81       	ld	r24, Y
    3ba2:	99 27       	eor	r25, r25
    3ba4:	87 fd       	sbrc	r24, 7
    3ba6:	90 95       	com	r25
    3ba8:	fc 01       	movw	r30, r24
    3baa:	25 e0       	ldi	r18, 0x05	; 5
    3bac:	ee 0f       	add	r30, r30
    3bae:	ff 1f       	adc	r31, r31
    3bb0:	2a 95       	dec	r18
    3bb2:	e1 f7       	brne	.-8      	; 0x3bac <nrk_TCB_init+0x206>
    3bb4:	e8 0f       	add	r30, r24
    3bb6:	f9 1f       	adc	r31, r25
    3bb8:	e6 53       	subi	r30, 0x36	; 54
    3bba:	f9 4f       	sbci	r31, 0xF9	; 249
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	df 91       	pop	r29
    3bc6:	cf 91       	pop	r28
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	08 95       	ret

00003bd2 <nrk_start>:




void nrk_start (void)
{
    3bd2:	8f 92       	push	r8
    3bd4:	9f 92       	push	r9
    3bd6:	af 92       	push	r10
    3bd8:	bf 92       	push	r11
    3bda:	cf 92       	push	r12
    3bdc:	df 92       	push	r13
    3bde:	ef 92       	push	r14
    3be0:	ff 92       	push	r15
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	62 ed       	ldi	r22, 0xD2	; 210
    3bec:	a6 2e       	mov	r10, r22
    3bee:	66 e0       	ldi	r22, 0x06	; 6
    3bf0:	b6 2e       	mov	r11, r22
    3bf2:	cc 24       	eor	r12, r12
    3bf4:	dd 24       	eor	r13, r13
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    3bf6:	45 01       	movw	r8, r10




void nrk_start (void)
{
    3bf8:	ec 2c       	mov	r14, r12
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3bfa:	f5 01       	movw	r30, r10
    3bfc:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    3bfe:	ff ef       	ldi	r31, 0xFF	; 255
    3c00:	ff 16       	cp	r15, r31
    3c02:	91 f0       	breq	.+36     	; 0x3c28 <nrk_start+0x56>
    3c04:	e4 01       	movw	r28, r8
    3c06:	00 e0       	ldi	r16, 0x00	; 0
    3c08:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    3c0a:	e0 16       	cp	r14, r16
    3c0c:	39 f0       	breq	.+14     	; 0x3c1c <nrk_start+0x4a>
    3c0e:	88 81       	ld	r24, Y
    3c10:	f8 16       	cp	r15, r24
    3c12:	21 f4       	brne	.+8      	; 0x3c1c <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    3c14:	6f 2d       	mov	r22, r15
    3c16:	85 e0       	ldi	r24, 0x05	; 5
    3c18:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    3c1c:	0f 5f       	subi	r16, 0xFF	; 255
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	a1 96       	adiw	r28, 0x21	; 33
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3c22:	04 30       	cpi	r16, 0x04	; 4
    3c24:	11 05       	cpc	r17, r1
    3c26:	89 f7       	brne	.-30     	; 0x3c0a <nrk_start+0x38>
    3c28:	08 94       	sec
    3c2a:	c1 1c       	adc	r12, r1
    3c2c:	d1 1c       	adc	r13, r1
    3c2e:	81 e2       	ldi	r24, 0x21	; 33
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	a8 0e       	add	r10, r24
    3c34:	b9 1e       	adc	r11, r25
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3c36:	94 e0       	ldi	r25, 0x04	; 4
    3c38:	c9 16       	cp	r12, r25
    3c3a:	d1 04       	cpc	r13, r1
    3c3c:	e9 f6       	brne	.-70     	; 0x3bf8 <nrk_start+0x26>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3c3e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3c42:	28 2f       	mov	r18, r24
    3c44:	33 27       	eor	r19, r19
    3c46:	27 fd       	sbrc	r18, 7
    3c48:	30 95       	com	r19
    3c4a:	f9 01       	movw	r30, r18
    3c4c:	55 e0       	ldi	r21, 0x05	; 5
    3c4e:	ee 0f       	add	r30, r30
    3c50:	ff 1f       	adc	r31, r31
    3c52:	5a 95       	dec	r21
    3c54:	e1 f7       	brne	.-8      	; 0x3c4e <nrk_start+0x7c>
    3c56:	e2 0f       	add	r30, r18
    3c58:	f3 1f       	adc	r31, r19
    3c5a:	e6 53       	subi	r30, 0x36	; 54
    3c5c:	f9 4f       	sbci	r31, 0xF9	; 249
    3c5e:	32 85       	ldd	r19, Z+10	; 0x0a
    3c60:	30 93 69 07 	sts	0x0769, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3c64:	21 e2       	ldi	r18, 0x21	; 33
    3c66:	82 02       	muls	r24, r18
    3c68:	c0 01       	movw	r24, r0
    3c6a:	11 24       	eor	r1, r1
    3c6c:	86 53       	subi	r24, 0x36	; 54
    3c6e:	99 4f       	sbci	r25, 0xF9	; 249
    3c70:	90 93 68 07 	sts	0x0768, r25
    3c74:	80 93 67 07 	sts	0x0767, r24
    3c78:	90 93 59 07 	sts	0x0759, r25
    3c7c:	80 93 58 07 	sts	0x0758, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    3c80:	30 93 5a 07 	sts	0x075A, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3c84:	0e 94 62 33 	call	0x66c4	; 0x66c4 <nrk_target_start>
    nrk_stack_pointer_init(); 
    3c88:	0e 94 48 33 	call	0x6690	; 0x6690 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    3c8c:	0e 94 86 33 	call	0x670c	; 0x670c <nrk_start_high_ready_task>
    3c90:	ff cf       	rjmp	.-2      	; 0x3c90 <nrk_start+0xbe>

00003c92 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	cf 93       	push	r28
    3c98:	df 93       	push	r29
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
    3c9e:	a3 97       	sbiw	r28, 0x23	; 35
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    3caa:	0e 94 12 22 	call	0x4424	; 0x4424 <nrk_signal_create>
    3cae:	80 93 57 07 	sts	0x0757, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb4:	21 f4       	brne	.+8      	; 0x3cbe <nrk_init+0x2c>
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	8e e0       	ldi	r24, 0x0E	; 14
    3cba:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    3cbe:	0e 94 21 31 	call	0x6242	; 0x6242 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3cc2:	08 2f       	mov	r16, r24
    3cc4:	11 27       	eor	r17, r17
    3cc6:	00 ff       	sbrs	r16, 0
    3cc8:	04 c0       	rjmp	.+8      	; 0x3cd2 <nrk_init+0x40>
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	86 e0       	ldi	r24, 0x06	; 6
    3cce:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3cd2:	01 ff       	sbrs	r16, 1
    3cd4:	04 c0       	rjmp	.+8      	; 0x3cde <nrk_init+0x4c>
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	84 e1       	ldi	r24, 0x14	; 20
    3cda:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    3cde:	02 ff       	sbrs	r16, 2
    3ce0:	04 c0       	rjmp	.+8      	; 0x3cea <nrk_init+0x58>
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	83 e1       	ldi	r24, 0x13	; 19
    3ce6:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    3cea:	10 92 5a 07 	sts	0x075A, r1
    nrk_cur_task_TCB = NULL;
    3cee:	10 92 68 07 	sts	0x0768, r1
    3cf2:	10 92 67 07 	sts	0x0767, r1
    
    nrk_high_ready_TCB = NULL;
    3cf6:	10 92 59 07 	sts	0x0759, r1
    3cfa:	10 92 58 07 	sts	0x0758, r1
    nrk_high_ready_prio = 0; 
    3cfe:	10 92 69 07 	sts	0x0769, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    3d02:	10 92 66 07 	sts	0x0766, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3d06:	8f ef       	ldi	r24, 0xFF	; 255
    3d08:	80 93 50 07 	sts	0x0750, r24
    nrk_sem_list[i].value=-1;
    3d0c:	80 93 52 07 	sts	0x0752, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3d10:	80 93 51 07 	sts	0x0751, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3d14:	80 93 53 07 	sts	0x0753, r24
    nrk_sem_list[i].value=-1;
    3d18:	80 93 55 07 	sts	0x0755, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3d1c:	80 93 54 07 	sts	0x0754, r24
    3d20:	ea ec       	ldi	r30, 0xCA	; 202
    3d22:	f6 e0       	ldi	r31, 0x06	; 6
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3d24:	83 e6       	ldi	r24, 0x63	; 99
    3d26:	82 87       	std	Z+10, r24	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    3d28:	8f ef       	ldi	r24, 0xFF	; 255
    3d2a:	80 87       	std	Z+8, r24	; 0x08
    3d2c:	b1 96       	adiw	r30, 0x21	; 33
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    3d2e:	27 e0       	ldi	r18, 0x07	; 7
    3d30:	ee 34       	cpi	r30, 0x4E	; 78
    3d32:	f2 07       	cpc	r31, r18
    3d34:	b9 f7       	brne	.-18     	; 0x3d24 <nrk_init+0x92>
    3d36:	ea e6       	ldi	r30, 0x6A	; 106
    3d38:	f7 e0       	ldi	r31, 0x07	; 7
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3d3a:	cf 01       	movw	r24, r30
    3d3c:	05 96       	adiw	r24, 0x05	; 5
    3d3e:	94 83       	std	Z+4, r25	; 0x04
    3d40:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3d42:	f7 83       	std	Z+7, r31	; 0x07
    3d44:	e6 83       	std	Z+6, r30	; 0x06
    3d46:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    3d48:	27 e0       	ldi	r18, 0x07	; 7
    3d4a:	8e 37       	cpi	r24, 0x7E	; 126
    3d4c:	92 07       	cpc	r25, r18
    3d4e:	a9 f7       	brne	.-22     	; 0x3d3a <nrk_init+0xa8>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3d50:	10 92 6c 07 	sts	0x076C, r1
    3d54:	10 92 6b 07 	sts	0x076B, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    3d58:	10 92 82 07 	sts	0x0782, r1
    3d5c:	10 92 81 07 	sts	0x0781, r1
	_head_node = NULL;
    3d60:	10 92 5d 07 	sts	0x075D, r1
    3d64:	10 92 5c 07 	sts	0x075C, r1
	_free_node = &_nrk_readyQ[0];
    3d68:	44 97       	sbiw	r24, 0x14	; 20
    3d6a:	90 93 c9 06 	sts	0x06C9, r25
    3d6e:	80 93 c8 06 	sts	0x06C8, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3d72:	64 e1       	ldi	r22, 0x14	; 20
    3d74:	7c e2       	ldi	r23, 0x2C	; 44
    3d76:	8e 01       	movw	r16, r28
    3d78:	0f 5f       	subi	r16, 0xFF	; 255
    3d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7c:	c8 01       	movw	r24, r16
    3d7e:	0e 94 06 33 	call	0x660c	; 0x660c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3d82:	40 e8       	ldi	r20, 0x80	; 128
    3d84:	50 e0       	ldi	r21, 0x00	; 0
    3d86:	65 e2       	ldi	r22, 0x25	; 37
    3d88:	76 e0       	ldi	r23, 0x06	; 6
    3d8a:	c8 01       	movw	r24, r16
    3d8c:	0e 94 67 33 	call	0x66ce	; 0x66ce <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3d90:	85 e5       	ldi	r24, 0x55	; 85
    3d92:	80 93 25 06 	sts	0x0625, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3d96:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    3d98:	1c 86       	std	Y+12, r1	; 0x0c
    3d9a:	1d 86       	std	Y+13, r1	; 0x0d
    3d9c:	1e 86       	std	Y+14, r1	; 0x0e
    3d9e:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    3da0:	18 8a       	std	Y+16, r1	; 0x10
    3da2:	19 8a       	std	Y+17, r1	; 0x11
    3da4:	1a 8a       	std	Y+18, r1	; 0x12
    3da6:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    3da8:	1c 8a       	std	Y+20, r1	; 0x14
    3daa:	1d 8a       	std	Y+21, r1	; 0x15
    3dac:	1e 8a       	std	Y+22, r1	; 0x16
    3dae:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    3db0:	18 8e       	std	Y+24, r1	; 0x18
    3db2:	19 8e       	std	Y+25, r1	; 0x19
    3db4:	1a 8e       	std	Y+26, r1	; 0x1a
    3db6:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    3db8:	1c 8e       	std	Y+28, r1	; 0x1c
    3dba:	1d 8e       	std	Y+29, r1	; 0x1d
    3dbc:	1e 8e       	std	Y+30, r1	; 0x1e
    3dbe:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    3dc0:	18 a2       	std	Y+32, r1	; 0x20
    3dc2:	19 a2       	std	Y+33, r1	; 0x21
    3dc4:	1a a2       	std	Y+34, r1	; 0x22
    3dc6:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    3dd0:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    3dd2:	c8 01       	movw	r24, r16
    3dd4:	0e 94 0d 28 	call	0x501a	; 0x501a <nrk_activate_task>
    3dd8:	a3 96       	adiw	r28, 0x23	; 35
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3dee:	f8 94       	cli
    3df0:	ff cf       	rjmp	.-2      	; 0x3df0 <nrk_halt+0x2>

00003df2 <_nrk_errno_set>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    3df2:	e0 91 67 07 	lds	r30, 0x0767
    3df6:	f0 91 68 07 	lds	r31, 0x0768
    3dfa:	84 87       	std	Z+12, r24	; 0x0c
    3dfc:	08 95       	ret

00003dfe <nrk_errno_get>:

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    3dfe:	e0 91 67 07 	lds	r30, 0x0767
    3e02:	f0 91 68 07 	lds	r31, 0x0768
    3e06:	84 85       	ldd	r24, Z+12	; 0x0c

inline void nrk_int_enable(void) {
    3e08:	99 27       	eor	r25, r25
    3e0a:	08 95       	ret

00003e0c <nrk_error_get>:
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	fb 01       	movw	r30, r22

    3e10:	80 91 24 06 	lds	r24, 0x0624
    3e14:	88 23       	and	r24, r24
    3e16:	19 f4       	brne	.+6      	; 0x3e1e <nrk_error_get+0x12>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	08 95       	ret
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    3e1e:	80 83       	st	Z, r24
    _nrk_reserve_init();
    3e20:	80 91 74 05 	lds	r24, 0x0574
    3e24:	8c 93       	st	X, r24
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    #endif

    3e2a:	08 95       	ret

00003e2c <pause>:
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	21 97       	sbiw	r28, 0x01	; 1
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	19 82       	std	Y+1, r1	; 0x01
    3e42:	07 c0       	rjmp	.+14     	; 0x3e52 <pause+0x26>
    3e44:	80 ed       	ldi	r24, 0xD0	; 208
    3e46:	97 e0       	ldi	r25, 0x07	; 7
    3e48:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	8f 5f       	subi	r24, 0xFF	; 255
    3e50:	89 83       	std	Y+1, r24	; 0x01
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	84 36       	cpi	r24, 0x64	; 100
    3e56:	b0 f3       	brcs	.-20     	; 0x3e44 <pause+0x18>
    3e58:	21 96       	adiw	r28, 0x01	; 1
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	df 91       	pop	r29
    3e66:	cf 91       	pop	r28
    3e68:	08 95       	ret

00003e6a <blink_dot>:
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
    3e72:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    3e7e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3e82:	08 95       	ret

00003e84 <blink_dash>:
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
    3e8c:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3e90:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3e94:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    3ea0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3ea4:	08 95       	ret

00003ea6 <blink_morse_code_error>:
    3ea6:	ef 92       	push	r14
    3ea8:	ff 92       	push	r15
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	23 97       	sbiw	r28, 0x03	; 3
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	99 27       	eor	r25, r25
    3ec4:	9f 93       	push	r25
    3ec6:	8f 93       	push	r24
    3ec8:	8c e4       	ldi	r24, 0x4C	; 76
    3eca:	92 e0       	ldi	r25, 0x02	; 2
    3ecc:	9f 93       	push	r25
    3ece:	8f 93       	push	r24
    3ed0:	8e 01       	movw	r16, r28
    3ed2:	0f 5f       	subi	r16, 0xFF	; 255
    3ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed6:	1f 93       	push	r17
    3ed8:	0f 93       	push	r16
    3eda:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <sprintf>
    3ede:	ee 24       	eor	r14, r14
    3ee0:	ff 24       	eor	r15, r15
    3ee2:	8d b7       	in	r24, 0x3d	; 61
    3ee4:	9e b7       	in	r25, 0x3e	; 62
    3ee6:	06 96       	adiw	r24, 0x06	; 6
    3ee8:	0f b6       	in	r0, 0x3f	; 63
    3eea:	f8 94       	cli
    3eec:	9e bf       	out	0x3e, r25	; 62
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	8d bf       	out	0x3d, r24	; 61
    3ef2:	73 c0       	rjmp	.+230    	; 0x3fda <blink_morse_code_error+0x134>
    3ef4:	a0 0f       	add	r26, r16
    3ef6:	b1 1f       	adc	r27, r17
    3ef8:	8c 91       	ld	r24, X
    3efa:	84 33       	cpi	r24, 0x34	; 52
    3efc:	d1 f1       	breq	.+116    	; 0x3f72 <blink_morse_code_error+0xcc>
    3efe:	85 33       	cpi	r24, 0x35	; 53
    3f00:	70 f4       	brcc	.+28     	; 0x3f1e <blink_morse_code_error+0x78>
    3f02:	81 33       	cpi	r24, 0x31	; 49
    3f04:	f9 f0       	breq	.+62     	; 0x3f44 <blink_morse_code_error+0x9e>
    3f06:	82 33       	cpi	r24, 0x32	; 50
    3f08:	20 f4       	brcc	.+8      	; 0x3f12 <blink_morse_code_error+0x6c>
    3f0a:	80 33       	cpi	r24, 0x30	; 48
    3f0c:	09 f0       	breq	.+2      	; 0x3f10 <blink_morse_code_error+0x6a>
    3f0e:	5c c0       	rjmp	.+184    	; 0x3fc8 <blink_morse_code_error+0x122>
    3f10:	16 c0       	rjmp	.+44     	; 0x3f3e <blink_morse_code_error+0x98>
    3f12:	82 33       	cpi	r24, 0x32	; 50
    3f14:	11 f1       	breq	.+68     	; 0x3f5a <blink_morse_code_error+0xb4>
    3f16:	83 33       	cpi	r24, 0x33	; 51
    3f18:	09 f0       	breq	.+2      	; 0x3f1c <blink_morse_code_error+0x76>
    3f1a:	56 c0       	rjmp	.+172    	; 0x3fc8 <blink_morse_code_error+0x122>
    3f1c:	23 c0       	rjmp	.+70     	; 0x3f64 <blink_morse_code_error+0xbe>
    3f1e:	87 33       	cpi	r24, 0x37	; 55
    3f20:	c9 f1       	breq	.+114    	; 0x3f94 <blink_morse_code_error+0xee>
    3f22:	88 33       	cpi	r24, 0x38	; 56
    3f24:	30 f4       	brcc	.+12     	; 0x3f32 <blink_morse_code_error+0x8c>
    3f26:	85 33       	cpi	r24, 0x35	; 53
    3f28:	69 f1       	breq	.+90     	; 0x3f84 <blink_morse_code_error+0xde>
    3f2a:	86 33       	cpi	r24, 0x36	; 54
    3f2c:	09 f0       	breq	.+2      	; 0x3f30 <blink_morse_code_error+0x8a>
    3f2e:	4c c0       	rjmp	.+152    	; 0x3fc8 <blink_morse_code_error+0x122>
    3f30:	2c c0       	rjmp	.+88     	; 0x3f8a <blink_morse_code_error+0xe4>
    3f32:	88 33       	cpi	r24, 0x38	; 56
    3f34:	b1 f1       	breq	.+108    	; 0x3fa2 <blink_morse_code_error+0xfc>
    3f36:	89 33       	cpi	r24, 0x39	; 57
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <blink_morse_code_error+0x96>
    3f3a:	46 c0       	rjmp	.+140    	; 0x3fc8 <blink_morse_code_error+0x122>
    3f3c:	3b c0       	rjmp	.+118    	; 0x3fb4 <blink_morse_code_error+0x10e>
    3f3e:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <blink_morse_code_error+0xa2>
    3f44:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f48:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f4c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f50:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f54:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f58:	37 c0       	rjmp	.+110    	; 0x3fc8 <blink_morse_code_error+0x122>
    3f5a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f5e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f62:	f4 cf       	rjmp	.-24     	; 0x3f4c <blink_morse_code_error+0xa6>
    3f64:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f68:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f6c:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f70:	ef cf       	rjmp	.-34     	; 0x3f50 <blink_morse_code_error+0xaa>
    3f72:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f76:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f7a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f7e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f82:	e8 cf       	rjmp	.-48     	; 0x3f54 <blink_morse_code_error+0xae>
    3f84:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <blink_morse_code_error+0xe8>
    3f8a:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f8e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3f92:	04 c0       	rjmp	.+8      	; 0x3f9c <blink_morse_code_error+0xf6>
    3f94:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f98:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3f9c:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3fa0:	06 c0       	rjmp	.+12     	; 0x3fae <blink_morse_code_error+0x108>
    3fa2:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fa6:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3faa:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fae:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3fb2:	08 c0       	rjmp	.+16     	; 0x3fc4 <blink_morse_code_error+0x11e>
    3fb4:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fb8:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fbc:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fc0:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <blink_dash>
    3fc4:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <blink_dot>
    3fc8:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3fcc:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3fd0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pause>
    3fd4:	08 94       	sec
    3fd6:	e1 1c       	adc	r14, r1
    3fd8:	f1 1c       	adc	r15, r1
    3fda:	ae 2d       	mov	r26, r14
    3fdc:	bb 27       	eor	r27, r27
    3fde:	f8 01       	movw	r30, r16
    3fe0:	01 90       	ld	r0, Z+
    3fe2:	00 20       	and	r0, r0
    3fe4:	e9 f7       	brne	.-6      	; 0x3fe0 <blink_morse_code_error+0x13a>
    3fe6:	31 97       	sbiw	r30, 0x01	; 1
    3fe8:	e0 1b       	sub	r30, r16
    3fea:	f1 0b       	sbc	r31, r17
    3fec:	ae 17       	cp	r26, r30
    3fee:	bf 07       	cpc	r27, r31
    3ff0:	08 f4       	brcc	.+2      	; 0x3ff4 <blink_morse_code_error+0x14e>
    3ff2:	80 cf       	rjmp	.-256    	; 0x3ef4 <blink_morse_code_error+0x4e>
    3ff4:	23 96       	adiw	r28, 0x03	; 3
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	f8 94       	cli
    3ffa:	de bf       	out	0x3e, r29	; 62
    3ffc:	0f be       	out	0x3f, r0	; 63
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	df 91       	pop	r29
    4002:	cf 91       	pop	r28
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	08 95       	ret

0000400e <nrk_error_print>:
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
{
    nrk_sem_list[i].count=-1;
    4012:	80 91 24 06 	lds	r24, 0x0624
    4016:	88 23       	and	r24, r24
    4018:	09 f4       	brne	.+2      	; 0x401c <nrk_error_print+0xe>
    401a:	be c0       	rjmp	.+380    	; 0x4198 <nrk_error_print+0x18a>
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    401c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    4020:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
    4024:	8e e7       	ldi	r24, 0x7E	; 126
    4026:	94 e0       	ldi	r25, 0x04	; 4
    4028:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
	
    402c:	80 91 74 05 	lds	r24, 0x0574
    4030:	99 27       	eor	r25, r25
    4032:	9f 93       	push	r25
    4034:	8f 93       	push	r24
    4036:	8c e4       	ldi	r24, 0x4C	; 76
    4038:	92 e0       	ldi	r25, 0x02	; 2
    403a:	9f 93       	push	r25
    403c:	8f 93       	push	r24
    403e:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>

    4042:	8a e7       	ldi	r24, 0x7A	; 122
    4044:	94 e0       	ldi	r25, 0x04	; 4
    4046:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    404a:	0f 90       	pop	r0
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	80 91 24 06 	lds	r24, 0x0624
    4056:	87 31       	cpi	r24, 0x17	; 23
    4058:	10 f0       	brcs	.+4      	; 0x405e <nrk_error_print+0x50>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    405a:	10 92 24 06 	sts	0x0624, r1
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    405e:	80 91 24 06 	lds	r24, 0x0624
    4062:	99 27       	eor	r25, r25
    4064:	aa 27       	eor	r26, r26
    4066:	bb 27       	eor	r27, r27
    4068:	fc 01       	movw	r30, r24
    406a:	31 97       	sbiw	r30, 0x01	; 1
    406c:	e5 31       	cpi	r30, 0x15	; 21
    406e:	f1 05       	cpc	r31, r1
    4070:	08 f0       	brcs	.+2      	; 0x4074 <nrk_error_print+0x66>
    4072:	47 c0       	rjmp	.+142    	; 0x4102 <nrk_error_print+0xf4>
    4074:	ea 59       	subi	r30, 0x9A	; 154
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	ee 0f       	add	r30, r30
    407a:	ff 1f       	adc	r31, r31
    407c:	05 90       	lpm	r0, Z+
    407e:	f4 91       	lpm	r31, Z
    4080:	e0 2d       	mov	r30, r0
    4082:	09 94       	ijmp
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
    4084:	83 e5       	ldi	r24, 0x53	; 83
    4086:	94 e0       	ldi	r25, 0x04	; 4
    4088:	3e c0       	rjmp	.+124    	; 0x4106 <nrk_error_print+0xf8>
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    408a:	8f e3       	ldi	r24, 0x3F	; 63
    408c:	94 e0       	ldi	r25, 0x04	; 4
    408e:	3b c0       	rjmp	.+118    	; 0x4106 <nrk_error_print+0xf8>
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    4090:	89 e2       	ldi	r24, 0x29	; 41
    4092:	94 e0       	ldi	r25, 0x04	; 4
    4094:	38 c0       	rjmp	.+112    	; 0x4106 <nrk_error_print+0xf8>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
    4096:	8e e0       	ldi	r24, 0x0E	; 14
    4098:	94 e0       	ldi	r25, 0x04	; 4
    409a:	35 c0       	rjmp	.+106    	; 0x4106 <nrk_error_print+0xf8>
	
}

    409c:	88 ef       	ldi	r24, 0xF8	; 248
    409e:	93 e0       	ldi	r25, 0x03	; 3
    40a0:	32 c0       	rjmp	.+100    	; 0x4106 <nrk_error_print+0xf8>



    40a2:	80 ee       	ldi	r24, 0xE0	; 224
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	2f c0       	rjmp	.+94     	; 0x4106 <nrk_error_print+0xf8>



    40a8:	8d ec       	ldi	r24, 0xCD	; 205
    40aa:	93 e0       	ldi	r25, 0x03	; 3
    40ac:	2c c0       	rjmp	.+88     	; 0x4106 <nrk_error_print+0xf8>

void nrk_start (void)
{
    40ae:	8a eb       	ldi	r24, 0xBA	; 186
    40b0:	93 e0       	ldi	r25, 0x03	; 3
    40b2:	29 c0       	rjmp	.+82     	; 0x4106 <nrk_error_print+0xf8>
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    40b4:	8c e9       	ldi	r24, 0x9C	; 156
    40b6:	93 e0       	ldi	r25, 0x03	; 3
    40b8:	26 c0       	rjmp	.+76     	; 0x4106 <nrk_error_print+0xf8>
//	unsigned char *stkc;

	/*
    40ba:	87 e7       	ldi	r24, 0x77	; 119
    40bc:	93 e0       	ldi	r25, 0x03	; 3
    40be:	23 c0       	rjmp	.+70     	; 0x4106 <nrk_error_print+0xf8>
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    40c0:	8b e6       	ldi	r24, 0x6B	; 107
    40c2:	93 e0       	ldi	r25, 0x03	; 3
    40c4:	20 c0       	rjmp	.+64     	; 0x4106 <nrk_error_print+0xf8>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
    40c6:	80 e5       	ldi	r24, 0x50	; 80
    40c8:	93 e0       	ldi	r25, 0x03	; 3
    40ca:	1d c0       	rjmp	.+58     	; 0x4106 <nrk_error_print+0xf8>
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    40cc:	81 e4       	ldi	r24, 0x41	; 65
    40ce:	93 e0       	ldi	r25, 0x03	; 3
    40d0:	1a c0       	rjmp	.+52     	; 0x4106 <nrk_error_print+0xf8>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
    40d2:	8d e2       	ldi	r24, 0x2D	; 45
    40d4:	93 e0       	ldi	r25, 0x03	; 3
    40d6:	17 c0       	rjmp	.+46     	; 0x4106 <nrk_error_print+0xf8>
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    40d8:	8c e1       	ldi	r24, 0x1C	; 28
    40da:	93 e0       	ldi	r25, 0x03	; 3
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <nrk_error_print+0xf8>

			}
		}
    40de:	88 e0       	ldi	r24, 0x08	; 8
    40e0:	93 e0       	ldi	r25, 0x03	; 3
    40e2:	11 c0       	rjmp	.+34     	; 0x4106 <nrk_error_print+0xf8>
	}

    }
    40e4:	88 ee       	ldi	r24, 0xE8	; 232
    40e6:	92 e0       	ldi	r25, 0x02	; 2
    40e8:	0e c0       	rjmp	.+28     	; 0x4106 <nrk_error_print+0xf8>

    task_ID = nrk_get_high_ready_task_ID();	
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    40ea:	80 ed       	ldi	r24, 0xD0	; 208
    40ec:	92 e0       	ldi	r25, 0x02	; 2
    40ee:	0b c0       	rjmp	.+22     	; 0x4106 <nrk_error_print+0xf8>
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
    40f0:	85 eb       	ldi	r24, 0xB5	; 181
    40f2:	92 e0       	ldi	r25, 0x02	; 2
    40f4:	08 c0       	rjmp	.+16     	; 0x4106 <nrk_error_print+0xf8>
//    nrk_stack_pointer_restore();

    /*
    40f6:	84 ea       	ldi	r24, 0xA4	; 164
    40f8:	92 e0       	ldi	r25, 0x02	; 2
    40fa:	05 c0       	rjmp	.+10     	; 0x4106 <nrk_error_print+0xf8>
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    40fc:	85 e9       	ldi	r24, 0x95	; 149
    40fe:	92 e0       	ldi	r25, 0x02	; 2
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <nrk_error_print+0xf8>
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4102:	8e e8       	ldi	r24, 0x8E	; 142
    4104:	92 e0       	ldi	r25, 0x02	; 2
    4106:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    410a:	60 91 94 07 	lds	r22, 0x0794
    410e:	70 91 95 07 	lds	r23, 0x0795
    4112:	8d e0       	ldi	r24, 0x0D	; 13
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
    //TODO: this way on msp
    411a:	60 91 94 07 	lds	r22, 0x0794
    411e:	70 91 95 07 	lds	r23, 0x0795
    4122:	8a e0       	ldi	r24, 0x0A	; 10
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
    412a:	00 e0       	ldi	r16, 0x00	; 0
    412c:	21 c0       	rjmp	.+66     	; 0x4170 <nrk_error_print+0x162>
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    413e:	10 e0       	ldi	r17, 0x00	; 0
    4140:	88 ee       	ldi	r24, 0xE8	; 232
    4142:	93 e0       	ldi	r25, 0x03	; 3
    4144:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    4148:	1f 5f       	subi	r17, 0xFF	; 255
    414a:	14 36       	cpi	r17, 0x64	; 100
    414c:	c9 f7       	brne	.-14     	; 0x4140 <nrk_error_print+0x132>
    414e:	83 e0       	ldi	r24, 0x03	; 3
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
    4156:	82 e0       	ldi	r24, 0x02	; 2
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    415e:	10 e0       	ldi	r17, 0x00	; 0
    4160:	88 ee       	ldi	r24, 0xE8	; 232
    4162:	93 e0       	ldi	r25, 0x03	; 3
    4164:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
    4168:	1f 5f       	subi	r17, 0xFF	; 255
    416a:	14 36       	cpi	r17, 0x64	; 100
    416c:	c9 f7       	brne	.-14     	; 0x4160 <nrk_error_print+0x152>
    416e:	0f 5f       	subi	r16, 0xFF	; 255
    4170:	04 31       	cpi	r16, 0x14	; 20
    4172:	ec f2       	brlt	.-70     	; 0x412e <nrk_error_print+0x120>
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    4184:	80 91 74 05 	lds	r24, 0x0574
    4188:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <blink_morse_code_error>
    418c:	80 91 24 06 	lds	r24, 0x0624
    4190:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <blink_morse_code_error>
    4194:	00 e0       	ldi	r16, 0x00	; 0
    4196:	cb cf       	rjmp	.-106    	; 0x412e <nrk_error_print+0x120>
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	08 95       	ret

000041a2 <nrk_kernel_error_add>:
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    41a2:	ef 92       	push	r14
    41a4:	ff 92       	push	r15
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	e8 2e       	mov	r14, r24
    41ac:	f6 2e       	mov	r15, r22
#endif
    41ae:	80 93 24 06 	sts	0x0624, r24
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    41b2:	60 93 74 05 	sts	0x0574, r22

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif


    41b6:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_error_print>
    41ba:	00 e0       	ldi	r16, 0x00	; 0
    41bc:	21 c0       	rjmp	.+66     	; 0x4200 <nrk_kernel_error_add+0x5e>
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    41be:	82 e0       	ldi	r24, 0x02	; 2
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    41c6:	83 e0       	ldi	r24, 0x03	; 3
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    41ce:	10 e0       	ldi	r17, 0x00	; 0
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    41d0:	88 ee       	ldi	r24, 0xE8	; 232
    41d2:	93 e0       	ldi	r25, 0x03	; 3
    41d4:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    41d8:	1f 5f       	subi	r17, 0xFF	; 255
    41da:	14 36       	cpi	r17, 0x64	; 100
    41dc:	c9 f7       	brne	.-14     	; 0x41d0 <nrk_kernel_error_add+0x2e>
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    41de:	83 e0       	ldi	r24, 0x03	; 3
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	0e 94 25 1b 	call	0x364a	; 0x364a <nrk_led_set>
    	*stkc = STK_CANARY_VAL;
    41e6:	82 e0       	ldi	r24, 0x02	; 2
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    41ee:	10 e0       	ldi	r17, 0x00	; 0
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    41f0:	88 ee       	ldi	r24, 0xE8	; 232
    41f2:	93 e0       	ldi	r25, 0x03	; 3
    41f4:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    41f8:	1f 5f       	subi	r17, 0xFF	; 255
    41fa:	14 36       	cpi	r17, 0x64	; 100
    41fc:	c9 f7       	brne	.-14     	; 0x41f0 <nrk_kernel_error_add+0x4e>
	}
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    41fe:	0f 5f       	subi	r16, 0xFF	; 255
    4200:	04 31       	cpi	r16, 0x14	; 20
    4202:	e8 f2       	brcs	.-70     	; 0x41be <nrk_kernel_error_add+0x1c>
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4204:	83 e0       	ldi	r24, 0x03	; 3
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    420c:	82 e0       	ldi	r24, 0x02	; 2
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	0e 94 08 1b 	call	0x3610	; 0x3610 <nrk_led_clr>
*/	
    4214:	8f 2d       	mov	r24, r15
    4216:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <blink_morse_code_error>
 
    421a:	8e 2d       	mov	r24, r14
    421c:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <blink_morse_code_error>
    4220:	00 e0       	ldi	r16, 0x00	; 0
    4222:	cd cf       	rjmp	.-102    	; 0x41be <nrk_kernel_error_add+0x1c>

00004224 <nrk_error_add>:
 */
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
    4224:	80 93 24 06 	sts	0x0624, r24
	
    4228:	e0 91 67 07 	lds	r30, 0x0767
    422c:	f0 91 68 07 	lds	r31, 0x0768
    4230:	80 85       	ldd	r24, Z+8	; 0x08
    4232:	80 93 74 05 	sts	0x0574, r24
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    4236:	0e 94 07 20 	call	0x400e	; 0x400e <nrk_error_print>
    423a:	08 95       	ret

0000423c <nrk_stack_check_pid>:
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    423c:	99 27       	eor	r25, r25
    423e:	87 fd       	sbrc	r24, 7
    4240:	90 95       	com	r25
    4242:	fc 01       	movw	r30, r24
    4244:	25 e0       	ldi	r18, 0x05	; 5
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	2a 95       	dec	r18
    424c:	e1 f7       	brne	.-8      	; 0x4246 <nrk_stack_check_pid+0xa>
    424e:	e8 0f       	add	r30, r24
    4250:	f9 1f       	adc	r31, r25
    4252:	e6 53       	subi	r30, 0x36	; 54
    4254:	f9 4f       	sbci	r31, 0xF9	; 249
    4256:	a2 81       	ldd	r26, Z+2	; 0x02
    4258:	b3 81       	ldd	r27, Z+3	; 0x03

   #ifdef NRK_WATCHDOG
    425a:	8c 91       	ld	r24, X
    425c:	85 35       	cpi	r24, 0x55	; 85
    425e:	29 f0       	breq	.+10     	; 0x426a <nrk_stack_check_pid+0x2e>
    if(nrk_watchdog_check()==NRK_ERROR) 
    4260:	85 e5       	ldi	r24, 0x55	; 85
    4262:	8c 93       	st	X, r24
    4264:	8f ef       	ldi	r24, 0xFF	; 255
    4266:	9f ef       	ldi	r25, 0xFF	; 255
    4268:	08 95       	ret
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	80 50       	subi	r24, 0x00	; 0
    4270:	92 42       	sbci	r25, 0x22	; 34
    4272:	18 f4       	brcc	.+6      	; 0x427a <nrk_stack_check_pid+0x3e>
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	08 95       	ret
    #endif
    427a:	82 e1       	ldi	r24, 0x12	; 18
    427c:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
    4280:	8f ef       	ldi	r24, 0xFF	; 255
    4282:	9f ef       	ldi	r25, 0xFF	; 255
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    4284:	08 95       	ret

00004286 <dump_stack_info>:
#include <stdio.h>
#include <nrk_includes.h> 
#include <ulib.h>
#include <nrk.h>
#include <nrk_task.h>
#include <nrk_idle_task.h>
    4286:	6f 92       	push	r6
    4288:	7f 92       	push	r7
    428a:	8f 92       	push	r8
    428c:	9f 92       	push	r9
    428e:	af 92       	push	r10
    4290:	bf 92       	push	r11
    4292:	cf 92       	push	r12
    4294:	df 92       	push	r13
    4296:	ef 92       	push	r14
    4298:	ff 92       	push	r15
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
    42a2:	8a e8       	ldi	r24, 0x8A	; 138
    42a4:	94 e0       	ldi	r25, 0x04	; 4
    42a6:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <nrk_kprintf>
#include <nrk_stack_check.h>
#include <nrk_status.h>
    42aa:	e0 91 67 07 	lds	r30, 0x0767
    42ae:	f0 91 68 07 	lds	r31, 0x0768
    42b2:	80 85       	ldd	r24, Z+8	; 0x08
    42b4:	99 27       	eor	r25, r25
    42b6:	87 fd       	sbrc	r24, 7
    42b8:	90 95       	com	r25
    42ba:	9f 93       	push	r25
    42bc:	8f 93       	push	r24
    42be:	8f e4       	ldi	r24, 0x4F	; 79
    42c0:	92 e0       	ldi	r25, 0x02	; 2
    42c2:	9f 93       	push	r25
    42c4:	8f 93       	push	r24
    42c6:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
#include <nrk_watchdog.h>
    42ca:	e0 91 67 07 	lds	r30, 0x0767
    42ce:	f0 91 68 07 	lds	r31, 0x0768
    42d2:	02 81       	ldd	r16, Z+2	; 0x02
    42d4:	13 81       	ldd	r17, Z+3	; 0x03
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
    42d6:	1f 93       	push	r17
    42d8:	0f 93       	push	r16
    42da:	88 e5       	ldi	r24, 0x58	; 88
    42dc:	92 e0       	ldi	r25, 0x02	; 2
    42de:	9f 93       	push	r25
    42e0:	8f 93       	push	r24
    42e2:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
#include <nrk_cfg.h>
    42e6:	f8 01       	movw	r30, r16
    42e8:	80 81       	ld	r24, Z
    42ea:	99 27       	eor	r25, r25
    42ec:	9f 93       	push	r25
    42ee:	8f 93       	push	r24
    42f0:	55 e6       	ldi	r21, 0x65	; 101
    42f2:	c5 2e       	mov	r12, r21
    42f4:	52 e0       	ldi	r21, 0x02	; 2
    42f6:	d5 2e       	mov	r13, r21
    42f8:	df 92       	push	r13
    42fa:	cf 92       	push	r12
    42fc:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
    4300:	e0 91 67 07 	lds	r30, 0x0767
    4304:	f0 91 68 07 	lds	r31, 0x0768
    4308:	80 81       	ld	r24, Z
    430a:	91 81       	ldd	r25, Z+1	; 0x01
    430c:	9f 93       	push	r25
    430e:	8f 93       	push	r24
    4310:	42 e7       	ldi	r20, 0x72	; 114
    4312:	e4 2e       	mov	r14, r20
    4314:	42 e0       	ldi	r20, 0x02	; 2
    4316:	f4 2e       	mov	r15, r20
    4318:	ff 92       	push	r15
    431a:	ef 92       	push	r14
    431c:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
  DISABLE_GLOBAL_INT();
    4320:	80 91 67 07 	lds	r24, 0x0767
    4324:	90 91 68 07 	lds	r25, 0x0768
    4328:	9f 93       	push	r25
    432a:	8f 93       	push	r24
    432c:	0c e7       	ldi	r16, 0x7C	; 124
    432e:	12 e0       	ldi	r17, 0x02	; 2
    4330:	1f 93       	push	r17
    4332:	0f 93       	push	r16
    4334:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
    4338:	ca ec       	ldi	r28, 0xCA	; 202
    433a:	d6 e0       	ldi	r29, 0x06	; 6
    433c:	aa 24       	eor	r10, r10
    433e:	bb 24       	eor	r11, r11
    4340:	8d b7       	in	r24, 0x3d	; 61
    4342:	9e b7       	in	r25, 0x3e	; 62
    4344:	44 96       	adiw	r24, 0x14	; 20
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	9e bf       	out	0x3e, r25	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	8d bf       	out	0x3d, r24	; 61
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    4350:	3c e8       	ldi	r19, 0x8C	; 140
    4352:	63 2e       	mov	r6, r19
    4354:	32 e0       	ldi	r19, 0x02	; 2
    4356:	73 2e       	mov	r7, r19
uint8_t nrk_task_init_cnt;
    4358:	46 01       	movw	r8, r12


void nrk_halt()
    435a:	67 01       	movw	r12, r14
{
    435c:	78 01       	movw	r14, r16
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    435e:	0a 81       	ldd	r16, Y+2	; 0x02
    4360:	1b 81       	ldd	r17, Y+3	; 0x03
};

    4362:	1f 93       	push	r17
    4364:	0f 93       	push	r16
    4366:	bf 92       	push	r11
    4368:	af 92       	push	r10
    436a:	7f 92       	push	r7
    436c:	6f 92       	push	r6
    436e:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
uint8_t nrk_task_init_cnt;
    4372:	f8 01       	movw	r30, r16
    4374:	80 81       	ld	r24, Z
    4376:	99 27       	eor	r25, r25
    4378:	9f 93       	push	r25
    437a:	8f 93       	push	r24
    437c:	9f 92       	push	r9
    437e:	8f 92       	push	r8
    4380:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>


void nrk_halt()
    4384:	88 81       	ld	r24, Y
    4386:	99 81       	ldd	r25, Y+1	; 0x01
    4388:	9f 93       	push	r25
    438a:	8f 93       	push	r24
    438c:	df 92       	push	r13
    438e:	cf 92       	push	r12
    4390:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
{
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	ff 92       	push	r15
    439a:	ef 92       	push	r14
    439c:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <printf>
    43a0:	08 94       	sec
    43a2:	a1 1c       	adc	r10, r1
    43a4:	b1 1c       	adc	r11, r1
    43a6:	a1 96       	adiw	r28, 0x21	; 33
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    43a8:	8d b7       	in	r24, 0x3d	; 61
    43aa:	9e b7       	in	r25, 0x3e	; 62
    43ac:	42 96       	adiw	r24, 0x12	; 18
    43ae:	0f b6       	in	r0, 0x3f	; 63
    43b0:	f8 94       	cli
    43b2:	9e bf       	out	0x3e, r25	; 62
    43b4:	0f be       	out	0x3f, r0	; 63
    43b6:	8d bf       	out	0x3d, r24	; 61
    43b8:	94 e0       	ldi	r25, 0x04	; 4
    43ba:	a9 16       	cp	r10, r25
    43bc:	b1 04       	cpc	r11, r1
    43be:	79 f6       	brne	.-98     	; 0x435e <dump_stack_info+0xd8>
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	ff 90       	pop	r15
    43ca:	ef 90       	pop	r14
    43cc:	df 90       	pop	r13
    43ce:	cf 90       	pop	r12
    43d0:	bf 90       	pop	r11
    43d2:	af 90       	pop	r10
    43d4:	9f 90       	pop	r9
    43d6:	8f 90       	pop	r8
    43d8:	7f 90       	pop	r7
    43da:	6f 90       	pop	r6
    43dc:	08 95       	ret

000043de <nrk_stack_check>:
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
	
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    43e2:	e0 91 67 07 	lds	r30, 0x0767
    43e6:	f0 91 68 07 	lds	r31, 0x0768
    43ea:	c2 81       	ldd	r28, Z+2	; 0x02
    43ec:	d3 81       	ldd	r29, Z+3	; 0x03
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    43ee:	88 81       	ld	r24, Y
    43f0:	85 35       	cpi	r24, 0x55	; 85
    43f2:	39 f0       	breq	.+14     	; 0x4402 <nrk_stack_check+0x24>
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    43f4:	0e 94 43 21 	call	0x4286	; 0x4286 <dump_stack_info>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
#endif
    43fe:	85 e5       	ldi	r24, 0x55	; 85
    4400:	88 83       	st	Y, r24
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    4402:	e0 91 67 07 	lds	r30, 0x0767
    4406:	f0 91 68 07 	lds	r31, 0x0768
    440a:	80 81       	ld	r24, Z
    440c:	91 81       	ldd	r25, Z+1	; 0x01
    440e:	80 50       	subi	r24, 0x00	; 0
    4410:	92 42       	sbci	r25, 0x22	; 34
    4412:	28 f0       	brcs	.+10     	; 0x441e <nrk_stack_check+0x40>
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif
    4414:	0e 94 43 21 	call	0x4286	; 0x4286 <dump_stack_info>

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
    4418:	82 e1       	ldi	r24, 0x12	; 18
    441a:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	08 95       	ret

00004424 <nrk_signal_create>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    4424:	40 91 7d 05 	lds	r20, 0x057D
    4428:	50 91 7e 05 	lds	r21, 0x057E
    442c:	60 91 7f 05 	lds	r22, 0x057F
    4430:	70 91 80 05 	lds	r23, 0x0580
    4434:	20 e0       	ldi	r18, 0x00	; 0
    4436:	30 e0       	ldi	r19, 0x00	; 0
    4438:	db 01       	movw	r26, r22
    443a:	ca 01       	movw	r24, r20
    443c:	02 2e       	mov	r0, r18
    443e:	04 c0       	rjmp	.+8      	; 0x4448 <nrk_signal_create+0x24>
    4440:	b6 95       	lsr	r27
    4442:	a7 95       	ror	r26
    4444:	97 95       	ror	r25
    4446:	87 95       	ror	r24
    4448:	0a 94       	dec	r0
    444a:	d2 f7       	brpl	.-12     	; 0x4440 <nrk_signal_create+0x1c>
    444c:	81 70       	andi	r24, 0x01	; 1
    444e:	90 70       	andi	r25, 0x00	; 0
    4450:	89 2b       	or	r24, r25
    4452:	e9 f4       	brne	.+58     	; 0x448e <nrk_signal_create+0x6a>

inline void nrk_int_disable(void) {
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	a0 e0       	ldi	r26, 0x00	; 0
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	02 2e       	mov	r0, r18
    445e:	04 c0       	rjmp	.+8      	; 0x4468 <nrk_signal_create+0x44>
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	aa 1f       	adc	r26, r26
    4466:	bb 1f       	adc	r27, r27
    4468:	0a 94       	dec	r0
    446a:	d2 f7       	brpl	.-12     	; 0x4460 <nrk_signal_create+0x3c>
    446c:	84 2b       	or	r24, r20
    446e:	95 2b       	or	r25, r21
    4470:	a6 2b       	or	r26, r22
    4472:	b7 2b       	or	r27, r23
    4474:	80 93 7d 05 	sts	0x057D, r24
    4478:	90 93 7e 05 	sts	0x057E, r25
    447c:	a0 93 7f 05 	sts	0x057F, r26
    4480:	b0 93 80 05 	sts	0x0580, r27
  DISABLE_GLOBAL_INT();
    4484:	82 2f       	mov	r24, r18
    4486:	99 27       	eor	r25, r25
    4488:	87 fd       	sbrc	r24, 7
    448a:	90 95       	com	r25
    448c:	08 95       	ret
    448e:	2f 5f       	subi	r18, 0xFF	; 255
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
    4492:	20 32       	cpi	r18, 0x20	; 32
    4494:	31 05       	cpc	r19, r1
    4496:	81 f6       	brne	.-96     	; 0x4438 <nrk_signal_create+0x14>
    4498:	8f ef       	ldi	r24, 0xFF	; 255
    449a:	9f ef       	ldi	r25, 0xFF	; 255
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    449c:	08 95       	ret

0000449e <nrk_signal_get_registered_mask>:
uint8_t nrk_task_init_cnt;


    449e:	e0 91 67 07 	lds	r30, 0x0767
    44a2:	f0 91 68 07 	lds	r31, 0x0768
    44a6:	65 85       	ldd	r22, Z+13	; 0x0d
    44a8:	76 85       	ldd	r23, Z+14	; 0x0e
    44aa:	87 85       	ldd	r24, Z+15	; 0x0f
    44ac:	90 89       	ldd	r25, Z+16	; 0x10
    44ae:	08 95       	ret

000044b0 <nrk_signal_unregister>:
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif
    44b0:	ef 92       	push	r14
    44b2:	ff 92       	push	r15
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17



    44b8:	21 e0       	ldi	r18, 0x01	; 1
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	40 e0       	ldi	r20, 0x00	; 0
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	04 c0       	rjmp	.+8      	; 0x44ca <nrk_signal_unregister+0x1a>
    44c2:	22 0f       	add	r18, r18
    44c4:	33 1f       	adc	r19, r19
    44c6:	44 1f       	adc	r20, r20
    44c8:	55 1f       	adc	r21, r21
    44ca:	8a 95       	dec	r24
    44cc:	d2 f7       	brpl	.-12     	; 0x44c2 <nrk_signal_unregister+0x12>

   #ifdef NRK_REBOOT_ON_ERROR
    44ce:	e0 91 67 07 	lds	r30, 0x0767
    44d2:	f0 91 68 07 	lds	r31, 0x0768
    44d6:	e5 84       	ldd	r14, Z+13	; 0x0d
    44d8:	f6 84       	ldd	r15, Z+14	; 0x0e
    44da:	07 85       	ldd	r16, Z+15	; 0x0f
    44dc:	10 89       	ldd	r17, Z+16	; 0x10
    44de:	da 01       	movw	r26, r20
    44e0:	c9 01       	movw	r24, r18
    44e2:	8e 21       	and	r24, r14
    44e4:	9f 21       	and	r25, r15
    44e6:	a0 23       	and	r26, r16
    44e8:	b1 23       	and	r27, r17
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	a1 05       	cpc	r26, r1
    44ee:	b1 05       	cpc	r27, r1
    44f0:	19 f4       	brne	.+6      	; 0x44f8 <nrk_signal_unregister+0x48>
    44f2:	8f ef       	ldi	r24, 0xFF	; 255
    44f4:	9f ef       	ldi	r25, 0xFF	; 255
    44f6:	1a c0       	rjmp	.+52     	; 0x452c <nrk_signal_unregister+0x7c>
   #ifndef NRK_WATCHDOG
   while(1)
    44f8:	20 95       	com	r18
    44fa:	30 95       	com	r19
    44fc:	40 95       	com	r20
    44fe:	50 95       	com	r21
    4500:	e2 22       	and	r14, r18
    4502:	f3 22       	and	r15, r19
    4504:	04 23       	and	r16, r20
    4506:	15 23       	and	r17, r21
    4508:	e5 86       	std	Z+13, r14	; 0x0d
    450a:	f6 86       	std	Z+14, r15	; 0x0e
    450c:	07 87       	std	Z+15, r16	; 0x0f
    450e:	10 8b       	std	Z+16, r17	; 0x10
	   {
    4510:	81 89       	ldd	r24, Z+17	; 0x11
    4512:	92 89       	ldd	r25, Z+18	; 0x12
    4514:	a3 89       	ldd	r26, Z+19	; 0x13
    4516:	b4 89       	ldd	r27, Z+20	; 0x14
    4518:	82 23       	and	r24, r18
    451a:	93 23       	and	r25, r19
    451c:	a4 23       	and	r26, r20
    451e:	b5 23       	and	r27, r21
    4520:	81 8b       	std	Z+17, r24	; 0x11
    4522:	92 8b       	std	Z+18, r25	; 0x12
    4524:	a3 8b       	std	Z+19, r26	; 0x13
    4526:	b4 8b       	std	Z+20, r27	; 0x14
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	08 95       	ret

00004536 <nrk_signal_register>:
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
    4536:	68 2f       	mov	r22, r24
    4538:	77 27       	eor	r23, r23
    453a:	67 fd       	sbrc	r22, 7
    453c:	70 95       	com	r23
    453e:	80 91 7d 05 	lds	r24, 0x057D
    4542:	90 91 7e 05 	lds	r25, 0x057E
    4546:	a0 91 7f 05 	lds	r26, 0x057F
    454a:	b0 91 80 05 	lds	r27, 0x0580
    454e:	06 2e       	mov	r0, r22
    4550:	04 c0       	rjmp	.+8      	; 0x455a <nrk_signal_register+0x24>
    4552:	b6 95       	lsr	r27
    4554:	a7 95       	ror	r26
    4556:	97 95       	ror	r25
    4558:	87 95       	ror	r24
    455a:	0a 94       	dec	r0
    455c:	d2 f7       	brpl	.-12     	; 0x4552 <nrk_signal_register+0x1c>
    455e:	81 70       	andi	r24, 0x01	; 1
    4560:	90 70       	andi	r25, 0x00	; 0
    4562:	89 2b       	or	r24, r25
    4564:	19 f4       	brne	.+6      	; 0x456c <nrk_signal_register+0x36>
    4566:	8f ef       	ldi	r24, 0xFF	; 255
    4568:	9f ef       	ldi	r25, 0xFF	; 255
    456a:	08 95       	ret
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    456c:	e0 91 67 07 	lds	r30, 0x0767
    4570:	f0 91 68 07 	lds	r31, 0x0768
    4574:	21 e0       	ldi	r18, 0x01	; 1
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	04 c0       	rjmp	.+8      	; 0x4586 <nrk_signal_register+0x50>
    457e:	22 0f       	add	r18, r18
    4580:	33 1f       	adc	r19, r19
    4582:	44 1f       	adc	r20, r20
    4584:	55 1f       	adc	r21, r21
    4586:	6a 95       	dec	r22
    4588:	d2 f7       	brpl	.-12     	; 0x457e <nrk_signal_register+0x48>
    458a:	85 85       	ldd	r24, Z+13	; 0x0d
    458c:	96 85       	ldd	r25, Z+14	; 0x0e
    458e:	a7 85       	ldd	r26, Z+15	; 0x0f
    4590:	b0 89       	ldd	r27, Z+16	; 0x10
    4592:	82 2b       	or	r24, r18
    4594:	93 2b       	or	r25, r19
    4596:	a4 2b       	or	r26, r20
    4598:	b5 2b       	or	r27, r21
    459a:	85 87       	std	Z+13, r24	; 0x0d
    459c:	96 87       	std	Z+14, r25	; 0x0e
    459e:	a7 87       	std	Z+15, r26	; 0x0f
    45a0:	b0 8b       	std	Z+16, r27	; 0x10
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    45a6:	08 95       	ret

000045a8 <nrk_sem_create>:
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    45a8:	38 2f       	mov	r19, r24
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    45aa:	80 91 66 07 	lds	r24, 0x0766
    45ae:	88 23       	and	r24, r24
    45b0:	19 f0       	breq	.+6      	; 0x45b8 <nrk_sem_create+0x10>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	08 95       	ret
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    45b8:	80 91 50 07 	lds	r24, 0x0750
    45bc:	8f 3f       	cpi	r24, 0xFF	; 255
    45be:	11 f4       	brne	.+4      	; 0x45c4 <nrk_sem_create+0x1c>
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	07 c0       	rjmp	.+14     	; 0x45d2 <nrk_sem_create+0x2a>
    45c4:	80 91 53 07 	lds	r24, 0x0753
    45c8:	8f 3f       	cpi	r24, 0xFF	; 255
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <nrk_sem_create+0x28>
    45cc:	22 e0       	ldi	r18, 0x02	; 2
    45ce:	01 c0       	rjmp	.+2      	; 0x45d2 <nrk_sem_create+0x2a>
    45d0:	21 e0       	ldi	r18, 0x01	; 1
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    45d2:	82 2f       	mov	r24, r18
    45d4:	99 27       	eor	r25, r25
    45d6:	fc 01       	movw	r30, r24
    45d8:	ee 0f       	add	r30, r30
    45da:	ff 1f       	adc	r31, r31
    45dc:	e8 0f       	add	r30, r24
    45de:	f9 1f       	adc	r31, r25
    45e0:	e0 5b       	subi	r30, 0xB0	; 176
    45e2:	f8 4f       	sbci	r31, 0xF8	; 248
    45e4:	32 83       	std	Z+2, r19	; 0x02
 
    45e6:	30 83       	st	Z, r19
	
    45e8:	61 83       	std	Z+1, r22	; 0x01
	         
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	80 93 66 07 	sts	0x0766, r24

    45f0:	83 e0       	ldi	r24, 0x03	; 3
    45f2:	28 9f       	mul	r18, r24
    45f4:	c0 01       	movw	r24, r0
    45f6:	11 24       	eor	r1, r1
    45f8:	80 5b       	subi	r24, 0xB0	; 176
    45fa:	98 4f       	sbci	r25, 0xF8	; 248
			
    45fc:	08 95       	ret

000045fe <nrk_get_resource_index>:
    return NRK_OK;

}


/*
    45fe:	27 e0       	ldi	r18, 0x07	; 7
    4600:	80 35       	cpi	r24, 0x50	; 80
    4602:	92 07       	cpc	r25, r18
    4604:	11 f4       	brne	.+4      	; 0x460a <nrk_get_resource_index+0xc>
    4606:	80 e0       	ldi	r24, 0x00	; 0
    4608:	07 c0       	rjmp	.+14     	; 0x4618 <nrk_get_resource_index+0x1a>
    460a:	83 55       	subi	r24, 0x53	; 83
    460c:	97 40       	sbci	r25, 0x07	; 7
    460e:	19 f0       	breq	.+6      	; 0x4616 <nrk_get_resource_index+0x18>
    4610:	8f ef       	ldi	r24, 0xFF	; 255
    4612:	9f ef       	ldi	r25, 0xFF	; 255
    4614:	08 95       	ret
    4616:	81 e0       	ldi	r24, 0x01	; 1
 * _nrk_timer_tick() 
    4618:	99 27       	eor	r25, r25
    461a:	87 fd       	sbrc	r24, 7
    461c:	90 95       	com	r25
 *
 * This function is called by the interrupt timer0.
    461e:	08 95       	ret

00004620 <nrk_sem_delete>:


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
	
    //  Already in critical section so no needenter critical section
    4620:	0e 94 ff 22 	call	0x45fe	; 0x45fe <nrk_get_resource_index>
    if(Task->Type!=IDLE_TASK)
    	Task->task_ID=nrk_task_init_cnt;
    4624:	8f 3f       	cpi	r24, 0xFF	; 255
    4626:	11 f4       	brne	.+4      	; 0x462c <nrk_sem_delete+0xc>
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	02 c0       	rjmp	.+4      	; 0x4630 <nrk_sem_delete+0x10>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    462c:	82 30       	cpi	r24, 0x02	; 2
    462e:	29 f4       	brne	.+10     	; 0x463a <nrk_sem_delete+0x1a>
    4630:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    4634:	8f ef       	ldi	r24, 0xFF	; 255
    4636:	9f ef       	ldi	r25, 0xFF	; 255
    4638:	08 95       	ret

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    463a:	99 27       	eor	r25, r25
    463c:	87 fd       	sbrc	r24, 7
    463e:	90 95       	com	r25
    4640:	fc 01       	movw	r30, r24
    4642:	ee 0f       	add	r30, r30
    4644:	ff 1f       	adc	r31, r31
    4646:	e8 0f       	add	r30, r24
    4648:	f9 1f       	adc	r31, r25
    464a:	e0 5b       	subi	r30, 0xB0	; 176
    464c:	f8 4f       	sbci	r31, 0xF8	; 248
    464e:	8f ef       	ldi	r24, 0xFF	; 255
    4650:	80 83       	st	Z, r24
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    4652:	82 83       	std	Z+2, r24	; 0x02
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    4654:	81 83       	std	Z+1, r24	; 0x01
    //initialize member of TCB structure
    4656:	80 91 66 07 	lds	r24, 0x0766
    465a:	81 50       	subi	r24, 0x01	; 1
    465c:	80 93 66 07 	sts	0x0766, r24
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    4664:	08 95       	ret

00004666 <nrk_sem_query>:
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}

    4666:	0e 94 ff 22 	call	0x45fe	; 0x45fe <nrk_get_resource_index>

    466a:	8f 3f       	cpi	r24, 0xFF	; 255
    466c:	11 f4       	brne	.+4      	; 0x4672 <nrk_sem_query+0xc>
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	02 c0       	rjmp	.+4      	; 0x4676 <nrk_sem_query+0x10>

    4672:	82 30       	cpi	r24, 0x02	; 2
    4674:	29 f4       	brne	.+10     	; 0x4680 <nrk_sem_query+0x1a>
    4676:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    467a:	8f ef       	ldi	r24, 0xFF	; 255
    467c:	9f ef       	ldi	r25, 0xFF	; 255
    467e:	08 95       	ret


    4680:	99 27       	eor	r25, r25
    4682:	87 fd       	sbrc	r24, 7
    4684:	90 95       	com	r25
    4686:	fc 01       	movw	r30, r24
    4688:	ee 0f       	add	r30, r30
    468a:	ff 1f       	adc	r31, r31
    468c:	e8 0f       	add	r30, r24
    468e:	f9 1f       	adc	r31, r25
    4690:	e0 5b       	subi	r30, 0xB0	; 176
    4692:	f8 4f       	sbci	r31, 0xF8	; 248
    4694:	82 81       	ldd	r24, Z+2	; 0x02
    4696:	99 27       	eor	r25, r25
    4698:	87 fd       	sbrc	r24, 7
    469a:	90 95       	com	r25

    469c:	08 95       	ret

0000469e <nrk_sem_post>:
			}
		}
	}

    }

    469e:	1f 93       	push	r17
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
    task_ID = nrk_get_high_ready_task_ID();	
    46a4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <nrk_get_resource_index>
    46a8:	18 2f       	mov	r17, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    46aa:	8f 3f       	cpi	r24, 0xFF	; 255
    46ac:	11 f4       	brne	.+4      	; 0x46b2 <nrk_sem_post+0x14>
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	03 c0       	rjmp	.+6      	; 0x46b8 <nrk_sem_post+0x1a>
    nrk_cur_task_prio = nrk_high_ready_prio;
    46b2:	82 30       	cpi	r24, 0x02	; 2
    46b4:	31 f4       	brne	.+12     	; 0x46c2 <nrk_sem_post+0x24>
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    46bc:	8f ef       	ldi	r24, 0xFF	; 255
    46be:	9f ef       	ldi	r25, 0xFF	; 255
    46c0:	3e c0       	rjmp	.+124    	; 0x473e <nrk_sem_post+0xa0>
		
//    nrk_stack_pointer_restore();
    46c2:	99 27       	eor	r25, r25
    46c4:	87 fd       	sbrc	r24, 7
    46c6:	90 95       	com	r25
    46c8:	ec 01       	movw	r28, r24
    46ca:	cc 0f       	add	r28, r28
    46cc:	dd 1f       	adc	r29, r29
    46ce:	c8 0f       	add	r28, r24
    46d0:	d9 1f       	adc	r29, r25
    46d2:	c0 5b       	subi	r28, 0xB0	; 176
    46d4:	d8 4f       	sbci	r29, 0xF8	; 248
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	88 81       	ld	r24, Y
    46da:	98 17       	cp	r25, r24
    46dc:	74 f5       	brge	.+92     	; 0x473a <nrk_sem_post+0x9c>

    /*
    #ifdef KERNEL_STK_ARRAY
    46de:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    46e2:	8a 81       	ldd	r24, Y+2	; 0x02
    46e4:	8f 5f       	subi	r24, 0xFF	; 255
    46e6:	8a 83       	std	Y+2, r24	; 0x02
    	stkc = NRK_KERNEL_STK_TOP;
    46e8:	e0 91 67 07 	lds	r30, 0x0767
    46ec:	f0 91 68 07 	lds	r31, 0x0768
    46f0:	14 82       	std	Z+4, r1	; 0x04
    46f2:	e1 ed       	ldi	r30, 0xD1	; 209
    46f4:	f6 e0       	ldi	r31, 0x06	; 6
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    46f6:	21 2f       	mov	r18, r17
    46f8:	33 27       	eor	r19, r19
    46fa:	27 fd       	sbrc	r18, 7
    46fc:	30 95       	com	r19
    46fe:	43 2f       	mov	r20, r19
    4700:	53 2f       	mov	r21, r19
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    4702:	80 81       	ld	r24, Z
    4704:	82 30       	cpi	r24, 0x02	; 2
    4706:	91 f4       	brne	.+36     	; 0x472c <nrk_sem_post+0x8e>
    
    4708:	82 85       	ldd	r24, Z+10	; 0x0a
    470a:	93 85       	ldd	r25, Z+11	; 0x0b
    470c:	a4 85       	ldd	r26, Z+12	; 0x0c
    470e:	b5 85       	ldd	r27, Z+13	; 0x0d
    4710:	82 17       	cp	r24, r18
    4712:	93 07       	cpc	r25, r19
    4714:	a4 07       	cpc	r26, r20
    4716:	b5 07       	cpc	r27, r21
    4718:	49 f4       	brne	.+18     	; 0x472c <nrk_sem_post+0x8e>
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    471a:	83 e0       	ldi	r24, 0x03	; 3
    471c:	82 83       	std	Z+2, r24	; 0x02
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    471e:	17 86       	std	Z+15, r1	; 0x0f
    4720:	16 86       	std	Z+14, r1	; 0x0e
*/
    4722:	10 82       	st	Z, r1
    nrk_target_start();
    4724:	12 86       	std	Z+10, r1	; 0x0a
    4726:	13 86       	std	Z+11, r1	; 0x0b
    4728:	14 86       	std	Z+12, r1	; 0x0c
    472a:	15 86       	std	Z+13, r1	; 0x0d
    472c:	b1 96       	adiw	r30, 0x21	; 33
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    472e:	87 e0       	ldi	r24, 0x07	; 7
    4730:	e5 35       	cpi	r30, 0x55	; 85
    4732:	f8 07       	cpc	r31, r24
    4734:	31 f7       	brne	.-52     	; 0x4702 <nrk_sem_post+0x64>
*/
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    4736:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	1f 91       	pop	r17
    4744:	08 95       	ret

00004746 <nrk_event_signal>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    4746:	df 92       	push	r13
    4748:	ef 92       	push	r14
    474a:	ff 92       	push	r15
    474c:	0f 93       	push	r16
    474e:	1f 93       	push	r17
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    4750:	e1 e0       	ldi	r30, 0x01	; 1
    4752:	ee 2e       	mov	r14, r30
    4754:	f1 2c       	mov	r15, r1
    4756:	01 2d       	mov	r16, r1
    4758:	11 2d       	mov	r17, r1
    475a:	04 c0       	rjmp	.+8      	; 0x4764 <nrk_event_signal+0x1e>
    475c:	ee 0c       	add	r14, r14
    475e:	ff 1c       	adc	r15, r15
    4760:	00 1f       	adc	r16, r16
    4762:	11 1f       	adc	r17, r17
    4764:	8a 95       	dec	r24
    4766:	d2 f7       	brpl	.-12     	; 0x475c <nrk_event_signal+0x16>
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    4768:	80 91 7d 05 	lds	r24, 0x057D
    476c:	90 91 7e 05 	lds	r25, 0x057E
    4770:	a0 91 7f 05 	lds	r26, 0x057F
    4774:	b0 91 80 05 	lds	r27, 0x0580
    4778:	8e 21       	and	r24, r14
    477a:	9f 21       	and	r25, r15
    477c:	a0 23       	and	r26, r16
    477e:	b1 23       	and	r27, r17
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	a1 05       	cpc	r26, r1
    4784:	b1 05       	cpc	r27, r1
    4786:	11 f4       	brne	.+4      	; 0x478c <nrk_event_signal+0x46>
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	43 c0       	rjmp	.+134    	; 0x4812 <nrk_event_signal+0xcc>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    478c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4790:	e1 ed       	ldi	r30, 0xD1	; 209
    4792:	f6 e0       	ldi	r31, 0x06	; 6
    4794:	dd 24       	eor	r13, r13
    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    4796:	80 81       	ld	r24, Z
    4798:	81 30       	cpi	r24, 0x01	; 1
    479a:	b9 f4       	brne	.+46     	; 0x47ca <nrk_event_signal+0x84>

    479c:	82 85       	ldd	r24, Z+10	; 0x0a
    479e:	93 85       	ldd	r25, Z+11	; 0x0b
    47a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    47a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    47a4:	8e 21       	and	r24, r14
    47a6:	9f 21       	and	r25, r15
    47a8:	a0 23       	and	r26, r16
    47aa:	b1 23       	and	r27, r17
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	a1 05       	cpc	r26, r1
    47b0:	b1 05       	cpc	r27, r1
    47b2:	59 f0       	breq	.+22     	; 0x47ca <nrk_event_signal+0x84>
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    47b4:	83 e0       	ldi	r24, 0x03	; 3
    47b6:	82 83       	std	Z+2, r24	; 0x02
   #endif
    47b8:	17 86       	std	Z+15, r1	; 0x0f
    47ba:	16 86       	std	Z+14, r1	; 0x0e

    47bc:	10 82       	st	Z, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    47be:	e2 86       	std	Z+10, r14	; 0x0a
    47c0:	f3 86       	std	Z+11, r15	; 0x0b
    47c2:	04 87       	std	Z+12, r16	; 0x0c
    47c4:	15 87       	std	Z+13, r17	; 0x0d
    47c6:	dd 24       	eor	r13, r13
    47c8:	d3 94       	inc	r13
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

    47ca:	80 81       	ld	r24, Z
    47cc:	82 30       	cpi	r24, 0x02	; 2
    47ce:	a1 f4       	brne	.+40     	; 0x47f8 <nrk_event_signal+0xb2>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    47d0:	82 85       	ldd	r24, Z+10	; 0x0a
    47d2:	93 85       	ldd	r25, Z+11	; 0x0b
    47d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    47d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    47d8:	8e 15       	cp	r24, r14
    47da:	9f 05       	cpc	r25, r15
    47dc:	a0 07       	cpc	r26, r16
    47de:	b1 07       	cpc	r27, r17
    47e0:	59 f4       	brne	.+22     	; 0x47f8 <nrk_event_signal+0xb2>
{
    nrk_sem_list[i].count=-1;
    47e2:	83 e0       	ldi	r24, 0x03	; 3
    47e4:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].value=-1;
    47e6:	17 86       	std	Z+15, r1	; 0x0f
    47e8:	16 86       	std	Z+14, r1	; 0x0e
    nrk_sem_list[i].resource_ceiling=-1;
    47ea:	10 82       	st	Z, r1
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    47ec:	12 86       	std	Z+10, r1	; 0x0a
    47ee:	13 86       	std	Z+11, r1	; 0x0b
    47f0:	14 86       	std	Z+12, r1	; 0x0c
    47f2:	15 86       	std	Z+13, r1	; 0x0d
    47f4:	dd 24       	eor	r13, r13
    47f6:	d3 94       	inc	r13
    47f8:	b1 96       	adiw	r30, 0x21	; 33
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    47fa:	87 e0       	ldi	r24, 0x07	; 7
    47fc:	e5 35       	cpi	r30, 0x55	; 85
    47fe:	f8 07       	cpc	r31, r24
    4800:	51 f6       	brne	.-108    	; 0x4796 <nrk_event_signal+0x50>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    4802:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
        }
    4806:	dd 20       	and	r13, r13
    4808:	19 f0       	breq	.+6      	; 0x4810 <nrk_event_signal+0xca>
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	05 c0       	rjmp	.+10     	; 0x481a <nrk_event_signal+0xd4>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    4810:	82 e0       	ldi	r24, 0x02	; 2
    4812:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    4816:	8f ef       	ldi	r24, 0xFF	; 255
    4818:	9f ef       	ldi	r25, 0xFF	; 255
    481a:	1f 91       	pop	r17
    481c:	0f 91       	pop	r16
    481e:	ff 90       	pop	r15
    4820:	ef 90       	pop	r14
    4822:	df 90       	pop	r13
    4824:	08 95       	ret

00004826 <nrk_signal_delete>:
void nrk_halt()
{
nrk_int_disable();
while(1);
}

    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    4832:	c8 2f       	mov	r28, r24
    4834:	dd 27       	eor	r29, r29
    4836:	c7 fd       	sbrc	r28, 7
    4838:	d0 95       	com	r29
    483a:	f1 e0       	ldi	r31, 0x01	; 1
    483c:	ef 2e       	mov	r14, r31
    483e:	f1 2c       	mov	r15, r1
    4840:	01 2d       	mov	r16, r1
    4842:	11 2d       	mov	r17, r1
    4844:	0c 2e       	mov	r0, r28
    4846:	04 c0       	rjmp	.+8      	; 0x4850 <nrk_signal_delete+0x2a>
    4848:	ee 0c       	add	r14, r14
    484a:	ff 1c       	adc	r15, r15
    484c:	00 1f       	adc	r16, r16
    484e:	11 1f       	adc	r17, r17
    4850:	0a 94       	dec	r0
    4852:	d2 f7       	brpl	.-12     	; 0x4848 <nrk_signal_delete+0x22>
 *  - Init event list
 *  - Create idle task
    4854:	80 91 7d 05 	lds	r24, 0x057D
    4858:	90 91 7e 05 	lds	r25, 0x057E
    485c:	a0 91 7f 05 	lds	r26, 0x057F
    4860:	b0 91 80 05 	lds	r27, 0x0580
    4864:	8e 21       	and	r24, r14
    4866:	9f 21       	and	r25, r15
    4868:	a0 23       	and	r26, r16
    486a:	b1 23       	and	r27, r17
    486c:	00 97       	sbiw	r24, 0x00	; 0
    486e:	a1 05       	cpc	r26, r1
    4870:	b1 05       	cpc	r27, r1
    4872:	19 f4       	brne	.+6      	; 0x487a <nrk_signal_delete+0x54>
    4874:	8f ef       	ldi	r24, 0xFF	; 255
    4876:	9f ef       	ldi	r25, 0xFF	; 255
    4878:	5d c0       	rjmp	.+186    	; 0x4934 <nrk_signal_delete+0x10e>
 */
void nrk_init()
    487a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    487e:	ea ec       	ldi	r30, 0xCA	; 202
    4880:	f6 e0       	ldi	r31, 0x06	; 6
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    4882:	a8 01       	movw	r20, r16
    4884:	97 01       	movw	r18, r14
    4886:	20 95       	com	r18
    4888:	30 95       	com	r19
    488a:	40 95       	com	r20
    488c:	50 95       	com	r21
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
	
    488e:	80 85       	ldd	r24, Z+8	; 0x08
    4890:	8f 3f       	cpi	r24, 0xFF	; 255
    4892:	41 f1       	breq	.+80     	; 0x48e4 <nrk_signal_delete+0xbe>
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    4894:	85 85       	ldd	r24, Z+13	; 0x0d
    4896:	96 85       	ldd	r25, Z+14	; 0x0e
    4898:	a7 85       	ldd	r26, Z+15	; 0x0f
    489a:	b0 89       	ldd	r27, Z+16	; 0x10
    489c:	8e 15       	cp	r24, r14
    489e:	9f 05       	cpc	r25, r15
    48a0:	a0 07       	cpc	r26, r16
    48a2:	b1 07       	cpc	r27, r17
    48a4:	39 f4       	brne	.+14     	; 0x48b4 <nrk_signal_delete+0x8e>
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    48a6:	11 8a       	std	Z+17, r1	; 0x11
    48a8:	12 8a       	std	Z+18, r1	; 0x12
    48aa:	13 8a       	std	Z+19, r1	; 0x13
    48ac:	14 8a       	std	Z+20, r1	; 0x14
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    48ae:	17 82       	std	Z+7, r1	; 0x07
   i=_nrk_startup_error();
    48b0:	83 e0       	ldi	r24, 0x03	; 3
    48b2:	81 87       	std	Z+9, r24	; 0x09
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    48b4:	85 85       	ldd	r24, Z+13	; 0x0d
    48b6:	96 85       	ldd	r25, Z+14	; 0x0e
    48b8:	a7 85       	ldd	r26, Z+15	; 0x0f
    48ba:	b0 89       	ldd	r27, Z+16	; 0x10
    48bc:	82 23       	and	r24, r18
    48be:	93 23       	and	r25, r19
    48c0:	a4 23       	and	r26, r20
    48c2:	b5 23       	and	r27, r21
    48c4:	85 87       	std	Z+13, r24	; 0x0d
    48c6:	96 87       	std	Z+14, r25	; 0x0e
    48c8:	a7 87       	std	Z+15, r26	; 0x0f
    48ca:	b0 8b       	std	Z+16, r27	; 0x10
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    48cc:	81 89       	ldd	r24, Z+17	; 0x11
    48ce:	92 89       	ldd	r25, Z+18	; 0x12
    48d0:	a3 89       	ldd	r26, Z+19	; 0x13
    48d2:	b4 89       	ldd	r27, Z+20	; 0x14
    48d4:	82 23       	and	r24, r18
    48d6:	93 23       	and	r25, r19
    48d8:	a4 23       	and	r26, r20
    48da:	b5 23       	and	r27, r21
    48dc:	81 8b       	std	Z+17, r24	; 0x11
    48de:	92 8b       	std	Z+18, r25	; 0x12
    48e0:	a3 8b       	std	Z+19, r26	; 0x13
    48e2:	b4 8b       	std	Z+20, r27	; 0x14
    48e4:	b1 96       	adiw	r30, 0x21	; 33
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    48e6:	87 e0       	ldi	r24, 0x07	; 7
    48e8:	ee 34       	cpi	r30, 0x4E	; 78
    48ea:	f8 07       	cpc	r31, r24
    48ec:	81 f6       	brne	.-96     	; 0x488e <nrk_signal_delete+0x68>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    48ee:	2e ef       	ldi	r18, 0xFE	; 254
    48f0:	3f ef       	ldi	r19, 0xFF	; 255
    48f2:	4f ef       	ldi	r20, 0xFF	; 255
    48f4:	5f ef       	ldi	r21, 0xFF	; 255
    48f6:	04 c0       	rjmp	.+8      	; 0x4900 <nrk_signal_delete+0xda>
    48f8:	22 0f       	add	r18, r18
    48fa:	33 1f       	adc	r19, r19
    48fc:	44 1f       	adc	r20, r20
    48fe:	55 1f       	adc	r21, r21
    4900:	ca 95       	dec	r28
    4902:	d2 f7       	brpl	.-12     	; 0x48f8 <nrk_signal_delete+0xd2>
    4904:	80 91 7d 05 	lds	r24, 0x057D
    4908:	90 91 7e 05 	lds	r25, 0x057E
    490c:	a0 91 7f 05 	lds	r26, 0x057F
    4910:	b0 91 80 05 	lds	r27, 0x0580
    4914:	82 23       	and	r24, r18
    4916:	93 23       	and	r25, r19
    4918:	a4 23       	and	r26, r20
    491a:	b5 23       	and	r27, r21
    491c:	80 93 7d 05 	sts	0x057D, r24
    4920:	90 93 7e 05 	sts	0x057E, r25
    4924:	a0 93 7f 05 	sts	0x057F, r26
    4928:	b0 93 80 05 	sts	0x0580, r27
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    492c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	1f 91       	pop	r17
    493a:	0f 91       	pop	r16
    493c:	ff 90       	pop	r15
    493e:	ef 90       	pop	r14
    4940:	08 95       	ret

00004942 <nrk_sem_pend>:



void nrk_start (void)
{
	int8_t task_ID;
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
	uint8_t i,j;
//	NRK_STK *x;
    4948:	0e 94 ff 22 	call	0x45fe	; 0x45fe <nrk_get_resource_index>
    494c:	18 2f       	mov	r17, r24
//	unsigned char *stkc;
    494e:	8f 3f       	cpi	r24, 0xFF	; 255
    4950:	11 f4       	brne	.+4      	; 0x4956 <nrk_sem_pend+0x14>
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	03 c0       	rjmp	.+6      	; 0x495c <nrk_sem_pend+0x1a>

    4956:	82 30       	cpi	r24, 0x02	; 2
    4958:	31 f4       	brne	.+12     	; 0x4966 <nrk_sem_pend+0x24>
    495a:	82 e0       	ldi	r24, 0x02	; 2
    495c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    4960:	8f ef       	ldi	r24, 0xFF	; 255
    4962:	9f ef       	ldi	r25, 0xFF	; 255
    4964:	3e c0       	rjmp	.+124    	; 0x49e2 <nrk_sem_pend+0xa0>
	/*
		- Get highest priority task from rdy list
    4966:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
		- set cur prio and start the task 
    496a:	81 2f       	mov	r24, r17
    496c:	99 27       	eor	r25, r25
    496e:	87 fd       	sbrc	r24, 7
    4970:	90 95       	com	r25
    4972:	ec 01       	movw	r28, r24
    4974:	cc 0f       	add	r28, r28
    4976:	dd 1f       	adc	r29, r29
    4978:	c8 0f       	add	r28, r24
    497a:	d9 1f       	adc	r29, r25
    497c:	c0 5b       	subi	r28, 0xB0	; 176
    497e:	d8 4f       	sbci	r29, 0xF8	; 248
    4980:	8a 81       	ldd	r24, Y+2	; 0x02
    4982:	88 23       	and	r24, r24
    4984:	d9 f4       	brne	.+54     	; 0x49bc <nrk_sem_pend+0x7a>
	*/
    // Check to make sure all tasks unique
    4986:	e0 91 67 07 	lds	r30, 0x0767
    498a:	f0 91 68 07 	lds	r31, 0x0768
    498e:	87 81       	ldd	r24, Z+7	; 0x07
    4990:	82 60       	ori	r24, 0x02	; 2
    4992:	87 83       	std	Z+7, r24	; 0x07
    for(i=0; i<NRK_MAX_TASKS; i++ )
    4994:	e0 91 67 07 	lds	r30, 0x0767
    4998:	f0 91 68 07 	lds	r31, 0x0768
    499c:	81 2f       	mov	r24, r17
    499e:	99 27       	eor	r25, r25
    49a0:	87 fd       	sbrc	r24, 7
    49a2:	90 95       	com	r25
    49a4:	a9 2f       	mov	r26, r25
    49a6:	b9 2f       	mov	r27, r25
    49a8:	81 8b       	std	Z+17, r24	; 0x11
    49aa:	92 8b       	std	Z+18, r25	; 0x12
    49ac:	a3 8b       	std	Z+19, r26	; 0x13
    49ae:	b4 8b       	std	Z+20, r27	; 0x14
    {
	task_ID = nrk_task_TCB[i].task_ID;
    49b0:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
	// only check activated tasks
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <nrk_wait_until_ticks>
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    49bc:	8a 81       	ldd	r24, Y+2	; 0x02
    49be:	81 50       	subi	r24, 0x01	; 1
    49c0:	8a 83       	std	Y+2, r24	; 0x02
		{
    49c2:	e0 91 67 07 	lds	r30, 0x0767
    49c6:	f0 91 68 07 	lds	r31, 0x0768
    49ca:	89 81       	ldd	r24, Y+1	; 0x01
    49cc:	83 87       	std	Z+11, r24	; 0x0b
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    49ce:	e0 91 67 07 	lds	r30, 0x0767
    49d2:	f0 91 68 07 	lds	r31, 0x0768
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	84 83       	std	Z+4, r24	; 0x04
			{
    49da:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	08 95       	ret

000049ea <nrk_event_wait>:
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    49ea:	9b 01       	movw	r18, r22
    49ec:	ac 01       	movw	r20, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
    49ee:	e0 91 67 07 	lds	r30, 0x0767
    49f2:	f0 91 68 07 	lds	r31, 0x0768
    49f6:	85 85       	ldd	r24, Z+13	; 0x0d
    49f8:	96 85       	ldd	r25, Z+14	; 0x0e
    49fa:	a7 85       	ldd	r26, Z+15	; 0x0f
    49fc:	b0 89       	ldd	r27, Z+16	; 0x10
    49fe:	82 23       	and	r24, r18
    4a00:	93 23       	and	r25, r19
    4a02:	a4 23       	and	r26, r20
    4a04:	b5 23       	and	r27, r21
    4a06:	00 97       	sbiw	r24, 0x00	; 0
    4a08:	a1 05       	cpc	r26, r1
    4a0a:	b1 05       	cpc	r27, r1
    4a0c:	29 f4       	brne	.+10     	; 0x4a18 <nrk_event_wait+0x2e>
    4a0e:	60 e0       	ldi	r22, 0x00	; 0
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	08 95       	ret
	
	
    4a18:	21 8b       	std	Z+17, r18	; 0x11
    4a1a:	32 8b       	std	Z+18, r19	; 0x12
    4a1c:	43 8b       	std	Z+19, r20	; 0x13
    4a1e:	54 8b       	std	Z+20, r21	; 0x14

    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	87 83       	std	Z+7, r24	; 0x07
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    4a24:	00 90 57 07 	lds	r0, 0x0757
    4a28:	04 c0       	rjmp	.+8      	; 0x4a32 <nrk_event_wait+0x48>
    4a2a:	56 95       	lsr	r21
    4a2c:	47 95       	ror	r20
    4a2e:	37 95       	ror	r19
    4a30:	27 95       	ror	r18
    4a32:	0a 94       	dec	r0
    4a34:	d2 f7       	brpl	.-12     	; 0x4a2a <nrk_event_wait+0x40>
    4a36:	c9 01       	movw	r24, r18
    4a38:	81 70       	andi	r24, 0x01	; 1
    4a3a:	90 70       	andi	r25, 0x00	; 0
    4a3c:	89 2b       	or	r24, r25
    4a3e:	19 f0       	breq	.+6      	; 0x4a46 <nrk_event_wait+0x5c>
	IdleTask.cpu_reserve.secs = 0;
    4a40:	0e 94 db 26 	call	0x4db6	; 0x4db6 <nrk_wait_until_nw>
    4a44:	04 c0       	rjmp	.+8      	; 0x4a4e <nrk_event_wait+0x64>
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <nrk_wait_until_ticks>
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    4a4e:	e0 91 67 07 	lds	r30, 0x0767
    4a52:	f0 91 68 07 	lds	r31, 0x0768
    4a56:	61 89       	ldd	r22, Z+17	; 0x11
    4a58:	72 89       	ldd	r23, Z+18	; 0x12
    4a5a:	83 89       	ldd	r24, Z+19	; 0x13
    4a5c:	94 89       	ldd	r25, Z+20	; 0x14
	IdleTask.Type = IDLE_TASK;
    4a5e:	08 95       	ret

00004a60 <nrk_get_high_ready_task_ID>:
#include <nrk_error.h>
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
    4a60:	e0 91 5c 07 	lds	r30, 0x075C
    4a64:	f0 91 5d 07 	lds	r31, 0x075D
    4a68:	80 81       	ld	r24, Z
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    4a6a:	99 27       	eor	r25, r25
    4a6c:	08 95       	ret

00004a6e <nrk_print_readyQ>:
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    4a6e:	e0 91 5c 07 	lds	r30, 0x075C
    4a72:	f0 91 5d 07 	lds	r31, 0x075D
    4a76:	03 c0       	rjmp	.+6      	; 0x4a7e <nrk_print_readyQ+0x10>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};
    4a78:	03 80       	ldd	r0, Z+3	; 0x03
    4a7a:	f4 81       	ldd	r31, Z+4	; 0x04
    4a7c:	e0 2d       	mov	r30, r0

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

inline void nrk_int_enable(void) {
    4a7e:	30 97       	sbiw	r30, 0x00	; 0
    4a80:	d9 f7       	brne	.-10     	; 0x4a78 <nrk_print_readyQ+0xa>
    4a82:	08 95       	ret

00004a84 <nrk_add_to_readyQ>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29
    4a88:	48 2f       	mov	r20, r24
while(1);
}

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    4a8a:	c0 91 c8 06 	lds	r28, 0x06C8
    4a8e:	d0 91 c9 06 	lds	r29, 0x06C9
    4a92:	20 97       	sbiw	r28, 0x00	; 0
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <nrk_add_to_readyQ+0x14>
    4a96:	7a c0       	rjmp	.+244    	; 0x4b8c <nrk_add_to_readyQ+0x108>
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    4a98:	a0 91 5c 07 	lds	r26, 0x075C
    4a9c:	b0 91 5d 07 	lds	r27, 0x075D
{
	
    uint8_t i;	
    4aa0:	10 97       	sbiw	r26, 0x00	; 0
    4aa2:	b9 f1       	breq	.+110    	; 0x4b12 <nrk_add_to_readyQ+0x8e>
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    4aa4:	99 27       	eor	r25, r25
    4aa6:	87 fd       	sbrc	r24, 7
    4aa8:	90 95       	com	r25
    4aaa:	9c 01       	movw	r18, r24
    4aac:	65 e0       	ldi	r22, 0x05	; 5
    4aae:	22 0f       	add	r18, r18
    4ab0:	33 1f       	adc	r19, r19
    4ab2:	6a 95       	dec	r22
    4ab4:	e1 f7       	brne	.-8      	; 0x4aae <nrk_add_to_readyQ+0x2a>
    4ab6:	28 0f       	add	r18, r24
    4ab8:	39 1f       	adc	r19, r25
    4aba:	26 53       	subi	r18, 0x36	; 54
    4abc:	39 4f       	sbci	r19, 0xF9	; 249
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    4abe:	8c 91       	ld	r24, X
    4ac0:	99 27       	eor	r25, r25
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	55 e0       	ldi	r21, 0x05	; 5
    4ac6:	66 0f       	add	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	5a 95       	dec	r21
    4acc:	e1 f7       	brne	.-8      	; 0x4ac6 <nrk_add_to_readyQ+0x42>
    4ace:	68 0f       	add	r22, r24
    4ad0:	79 1f       	adc	r23, r25
    4ad2:	66 53       	subi	r22, 0x36	; 54
    4ad4:	79 4f       	sbci	r23, 0xF9	; 249
    4ad6:	fb 01       	movw	r30, r22
    4ad8:	84 81       	ldd	r24, Z+4	; 0x04
    4ada:	88 23       	and	r24, r24
    4adc:	29 f0       	breq	.+10     	; 0x4ae8 <nrk_add_to_readyQ+0x64>
   nrk_wakeup_signal = nrk_signal_create();
    4ade:	93 85       	ldd	r25, Z+11	; 0x0b
    4ae0:	f9 01       	movw	r30, r18
    4ae2:	82 85       	ldd	r24, Z+10	; 0x0a
    4ae4:	98 17       	cp	r25, r24
    4ae6:	a8 f0       	brcs	.+42     	; 0x4b12 <nrk_add_to_readyQ+0x8e>
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    4ae8:	f9 01       	movw	r30, r18
    4aea:	84 81       	ldd	r24, Z+4	; 0x04
    4aec:	88 23       	and	r24, r24
    4aee:	31 f0       	breq	.+12     	; 0x4afc <nrk_add_to_readyQ+0x78>
   i=_nrk_startup_error();
    4af0:	fb 01       	movw	r30, r22
    4af2:	92 85       	ldd	r25, Z+10	; 0x0a
    4af4:	f9 01       	movw	r30, r18
    4af6:	83 85       	ldd	r24, Z+11	; 0x0b
    4af8:	98 17       	cp	r25, r24
    4afa:	58 f0       	brcs	.+22     	; 0x4b12 <nrk_add_to_readyQ+0x8e>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    4afc:	fb 01       	movw	r30, r22
    4afe:	92 85       	ldd	r25, Z+10	; 0x0a
    4b00:	f9 01       	movw	r30, r18
    4b02:	82 85       	ldd	r24, Z+10	; 0x0a
    4b04:	98 17       	cp	r25, r24
    4b06:	28 f0       	brcs	.+10     	; 0x4b12 <nrk_add_to_readyQ+0x8e>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    4b08:	fd 01       	movw	r30, r26
    4b0a:	a3 81       	ldd	r26, Z+3	; 0x03
    4b0c:	b4 81       	ldd	r27, Z+4	; 0x04
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
    4b0e:	10 97       	sbiw	r26, 0x00	; 0
    4b10:	b1 f6       	brne	.-84     	; 0x4abe <nrk_add_to_readyQ+0x3a>
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif




    4b12:	48 83       	st	Y, r20
   #ifdef NRK_REBOOT_ON_ERROR
    4b14:	e0 91 c8 06 	lds	r30, 0x06C8
    4b18:	f0 91 c9 06 	lds	r31, 0x06C9
    4b1c:	23 81       	ldd	r18, Z+3	; 0x03
    4b1e:	34 81       	ldd	r19, Z+4	; 0x04
    4b20:	30 93 c9 06 	sts	0x06C9, r19
    4b24:	20 93 c8 06 	sts	0x06C8, r18
   #ifndef NRK_WATCHDOG
   while(1)
    4b28:	80 91 5c 07 	lds	r24, 0x075C
    4b2c:	90 91 5d 07 	lds	r25, 0x075D
    4b30:	a8 17       	cp	r26, r24
    4b32:	b9 07       	cpc	r27, r25
    4b34:	a1 f4       	brne	.+40     	; 0x4b5e <nrk_add_to_readyQ+0xda>
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    4b36:	10 97       	sbiw	r26, 0x00	; 0
    4b38:	31 f0       	breq	.+12     	; 0x4b46 <nrk_add_to_readyQ+0xc2>
    		for (i = 0; i < 100; i++)
    4b3a:	bc 83       	std	Y+4, r27	; 0x04
    4b3c:	ab 83       	std	Y+3, r26	; 0x03
      			nrk_spin_wait_us (1000);
    4b3e:	1a 82       	std	Y+2, r1	; 0x02
    4b40:	19 82       	std	Y+1, r1	; 0x01
	   }
    4b42:	fd 01       	movw	r30, r26
    4b44:	05 c0       	rjmp	.+10     	; 0x4b50 <nrk_add_to_readyQ+0xcc>
   #endif
   #endif

    4b46:	1c 82       	std	Y+4, r1	; 0x04
    4b48:	1b 82       	std	Y+3, r1	; 0x03
   #ifdef NRK_WATCHDOG
    4b4a:	1a 82       	std	Y+2, r1	; 0x02
    4b4c:	19 82       	std	Y+1, r1	; 0x01
    if(nrk_watchdog_check()==NRK_ERROR) 
    4b4e:	f9 01       	movw	r30, r18
    4b50:	d2 83       	std	Z+2, r29	; 0x02
    4b52:	c1 83       	std	Z+1, r28	; 0x01
	{
    	nrk_watchdog_disable();
    4b54:	d0 93 5d 07 	sts	0x075D, r29
    4b58:	c0 93 5c 07 	sts	0x075C, r28
    4b5c:	17 c0       	rjmp	.+46     	; 0x4b8c <nrk_add_to_readyQ+0x108>
    4b5e:	fd 01       	movw	r30, r26
    4b60:	81 81       	ldd	r24, Z+1	; 0x01
    4b62:	92 81       	ldd	r25, Z+2	; 0x02
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    #endif
    4b64:	a2 17       	cp	r26, r18
    4b66:	b3 07       	cpc	r27, r19
    4b68:	51 f0       	breq	.+20     	; 0x4b7e <nrk_add_to_readyQ+0xfa>
  
  // nrk_stack_pointer_init(); 
/* 
    4b6a:	9a 83       	std	Y+2, r25	; 0x02
    4b6c:	89 83       	std	Y+1, r24	; 0x01
    #ifdef KERNEL_STK_ARRAY
    4b6e:	bc 83       	std	Y+4, r27	; 0x04
    4b70:	ab 83       	std	Y+3, r26	; 0x03
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    4b72:	81 81       	ldd	r24, Z+1	; 0x01
    4b74:	92 81       	ldd	r25, Z+2	; 0x02
    4b76:	fc 01       	movw	r30, r24
    4b78:	d4 83       	std	Z+4, r29	; 0x04
    4b7a:	c3 83       	std	Z+3, r28	; 0x03
    4b7c:	04 c0       	rjmp	.+8      	; 0x4b86 <nrk_add_to_readyQ+0x102>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    4b7e:	1c 82       	std	Y+4, r1	; 0x04
    4b80:	1b 82       	std	Y+3, r1	; 0x03
    	stkc = NRK_KERNEL_STK_TOP;
    4b82:	9a 83       	std	Y+2, r25	; 0x02
    4b84:	89 83       	std	Y+1, r24	; 0x01
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    4b86:	fd 01       	movw	r30, r26
    4b88:	d2 83       	std	Z+2, r29	; 0x02
    4b8a:	c1 83       	std	Z+1, r28	; 0x01
    4b8c:	df 91       	pop	r29
    4b8e:	cf 91       	pop	r28
    4b90:	08 95       	ret

00004b92 <nrk_rem_from_readyQ>:
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
    4b96:	a0 91 5c 07 	lds	r26, 0x075C
    4b9a:	b0 91 5d 07 	lds	r27, 0x075D
    4b9e:	10 97       	sbiw	r26, 0x00	; 0
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <nrk_rem_from_readyQ+0x12>
    4ba2:	46 c0       	rjmp	.+140    	; 0x4c30 <nrk_rem_from_readyQ+0x9e>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    4ba4:	48 2f       	mov	r20, r24
    4ba6:	55 27       	eor	r21, r21
    4ba8:	47 fd       	sbrc	r20, 7
    4baa:	50 95       	com	r21
    4bac:	8c 91       	ld	r24, X
    4bae:	99 27       	eor	r25, r25
    4bb0:	84 17       	cp	r24, r20
    4bb2:	95 07       	cpc	r25, r21
    4bb4:	69 f4       	brne	.+26     	; 0x4bd0 <nrk_rem_from_readyQ+0x3e>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    4bb6:	ed 01       	movw	r28, r26
    4bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    4bba:	fc 81       	ldd	r31, Y+4	; 0x04
    4bbc:	f0 93 5d 07 	sts	0x075D, r31
    4bc0:	e0 93 5c 07 	sts	0x075C, r30
	}
    4bc4:	12 82       	std	Z+2, r1	; 0x02
    4bc6:	11 82       	std	Z+1, r1	; 0x01
    4bc8:	16 c0       	rjmp	.+44     	; 0x4bf6 <nrk_rem_from_readyQ+0x64>
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    4bca:	d9 01       	movw	r26, r18
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    4bcc:	23 2b       	or	r18, r19
    4bce:	81 f1       	breq	.+96     	; 0x4c30 <nrk_rem_from_readyQ+0x9e>
    4bd0:	8c 91       	ld	r24, X
    4bd2:	99 27       	eor	r25, r25
    4bd4:	fd 01       	movw	r30, r26
    4bd6:	23 81       	ldd	r18, Z+3	; 0x03
    4bd8:	34 81       	ldd	r19, Z+4	; 0x04
    4bda:	84 17       	cp	r24, r20
    4bdc:	95 07       	cpc	r25, r21
    4bde:	a9 f7       	brne	.-22     	; 0x4bca <nrk_rem_from_readyQ+0x38>
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	

    4be0:	c1 81       	ldd	r28, Z+1	; 0x01
    4be2:	d2 81       	ldd	r29, Z+2	; 0x02
    4be4:	3c 83       	std	Y+4, r19	; 0x04
    4be6:	2b 83       	std	Y+3, r18	; 0x03
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    4be8:	83 81       	ldd	r24, Z+3	; 0x03
    4bea:	94 81       	ldd	r25, Z+4	; 0x04
    4bec:	00 97       	sbiw	r24, 0x00	; 0
    4bee:	19 f0       	breq	.+6      	; 0x4bf6 <nrk_rem_from_readyQ+0x64>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	d2 83       	std	Z+2, r29	; 0x02
    4bf4:	c1 83       	std	Z+1, r28	; 0x01
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    4bf6:	e0 91 c8 06 	lds	r30, 0x06C8
    4bfa:	f0 91 c9 06 	lds	r31, 0x06C9
    4bfe:	30 97       	sbiw	r30, 0x00	; 0
    4c00:	41 f4       	brne	.+16     	; 0x4c12 <nrk_rem_from_readyQ+0x80>
	IdleTask.offset.secs = 0;
    4c02:	b0 93 c9 06 	sts	0x06C9, r27
    4c06:	a0 93 c8 06 	sts	0x06C8, r26
	IdleTask.offset.nano_secs = 0;
    4c0a:	ed 01       	movw	r28, r26
    4c0c:	1c 82       	std	Y+4, r1	; 0x04
    4c0e:	1b 82       	std	Y+3, r1	; 0x03
    4c10:	09 c0       	rjmp	.+18     	; 0x4c24 <nrk_rem_from_readyQ+0x92>
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    4c12:	ed 01       	movw	r28, r26
    4c14:	fc 83       	std	Y+4, r31	; 0x04
    4c16:	eb 83       	std	Y+3, r30	; 0x03
	nrk_activate_task(&IdleTask);
    4c18:	b2 83       	std	Z+2, r27	; 0x02
    4c1a:	a1 83       	std	Z+1, r26	; 0x01
	
    4c1c:	b0 93 c9 06 	sts	0x06C9, r27
    4c20:	a0 93 c8 06 	sts	0x06C8, r26
}

    4c24:	e0 91 c8 06 	lds	r30, 0x06C8
    4c28:	f0 91 c9 06 	lds	r31, 0x06C9
    4c2c:	12 82       	std	Z+2, r1	; 0x02
    4c2e:	11 82       	std	Z+1, r1	; 0x01
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	08 95       	ret

00004c36 <nrk_get_pid>:
    4c36:	e0 91 67 07 	lds	r30, 0x0767
    4c3a:	f0 91 68 07 	lds	r31, 0x0768
    4c3e:	80 85       	ldd	r24, Z+8	; 0x08
    4c40:	99 27       	eor	r25, r25
    4c42:	08 95       	ret

00004c44 <_nrk_wait_for_scheduler>:
    4c44:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <nrk_idle>
    4c48:	e0 91 67 07 	lds	r30, 0x0767
    4c4c:	f0 91 68 07 	lds	r31, 0x0768
    4c50:	85 81       	ldd	r24, Z+5	; 0x05
    4c52:	88 23       	and	r24, r24
    4c54:	b9 f7       	brne	.-18     	; 0x4c44 <_nrk_wait_for_scheduler>
    4c56:	08 95       	ret

00004c58 <nrk_wait>:
    4c58:	ff 92       	push	r15
    4c5a:	0f 93       	push	r16
    4c5c:	1f 93       	push	r17
    4c5e:	cf 93       	push	r28
    4c60:	df 93       	push	r29
    4c62:	cd b7       	in	r28, 0x3d	; 61
    4c64:	de b7       	in	r29, 0x3e	; 62
    4c66:	28 97       	sbiw	r28, 0x08	; 8
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	f8 94       	cli
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	cd bf       	out	0x3d, r28	; 61
    4c72:	29 83       	std	Y+1, r18	; 0x01
    4c74:	3a 83       	std	Y+2, r19	; 0x02
    4c76:	4b 83       	std	Y+3, r20	; 0x03
    4c78:	5c 83       	std	Y+4, r21	; 0x04
    4c7a:	6d 83       	std	Y+5, r22	; 0x05
    4c7c:	7e 83       	std	Y+6, r23	; 0x06
    4c7e:	8f 83       	std	Y+7, r24	; 0x07
    4c80:	98 87       	std	Y+8, r25	; 0x08
    4c82:	0e 94 ef 21 	call	0x43de	; 0x43de <nrk_stack_check>
    4c86:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4c8a:	e0 91 67 07 	lds	r30, 0x0767
    4c8e:	f0 91 68 07 	lds	r31, 0x0768
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	85 83       	std	Z+5, r24	; 0x05
    4c96:	81 e0       	ldi	r24, 0x01	; 1
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	90 a3       	std	Z+32, r25	; 0x20
    4c9c:	87 8f       	std	Z+31, r24	; 0x1f
    4c9e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4ca2:	f8 2e       	mov	r15, r24
    4ca4:	ce 01       	movw	r24, r28
    4ca6:	01 96       	adiw	r24, 0x01	; 1
    4ca8:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
    4cac:	e0 91 67 07 	lds	r30, 0x0767
    4cb0:	f0 91 68 07 	lds	r31, 0x0768
    4cb4:	0f 2d       	mov	r16, r15
    4cb6:	11 27       	eor	r17, r17
    4cb8:	80 0f       	add	r24, r16
    4cba:	91 1f       	adc	r25, r17
    4cbc:	96 8b       	std	Z+22, r25	; 0x16
    4cbe:	85 8b       	std	Z+21, r24	; 0x15
    4cc0:	87 ef       	ldi	r24, 0xF7	; 247
    4cc2:	8f 15       	cp	r24, r15
    4cc4:	70 f0       	brcs	.+28     	; 0x4ce2 <nrk_wait+0x8a>
    4cc6:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4cca:	0e 5f       	subi	r16, 0xFE	; 254
    4ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cce:	99 27       	eor	r25, r25
    4cd0:	80 17       	cp	r24, r16
    4cd2:	91 07       	cpc	r25, r17
    4cd4:	34 f0       	brlt	.+12     	; 0x4ce2 <nrk_wait+0x8a>
    4cd6:	8f 2d       	mov	r24, r15
    4cd8:	8e 5f       	subi	r24, 0xFE	; 254
    4cda:	80 93 aa 06 	sts	0x06AA, r24
    4cde:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    4ce2:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4ce6:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	28 96       	adiw	r28, 0x08	; 8
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	cd bf       	out	0x3d, r28	; 61
    4cfa:	df 91       	pop	r29
    4cfc:	cf 91       	pop	r28
    4cfe:	1f 91       	pop	r17
    4d00:	0f 91       	pop	r16
    4d02:	ff 90       	pop	r15
    4d04:	08 95       	ret

00004d06 <nrk_wait_until>:
    4d06:	8f 92       	push	r8
    4d08:	9f 92       	push	r9
    4d0a:	af 92       	push	r10
    4d0c:	bf 92       	push	r11
    4d0e:	cf 92       	push	r12
    4d10:	df 92       	push	r13
    4d12:	ef 92       	push	r14
    4d14:	ff 92       	push	r15
    4d16:	0f 93       	push	r16
    4d18:	1f 93       	push	r17
    4d1a:	cf 93       	push	r28
    4d1c:	df 93       	push	r29
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
    4d22:	60 97       	sbiw	r28, 0x10	; 16
    4d24:	0f b6       	in	r0, 0x3f	; 63
    4d26:	f8 94       	cli
    4d28:	de bf       	out	0x3e, r29	; 62
    4d2a:	0f be       	out	0x3f, r0	; 63
    4d2c:	cd bf       	out	0x3d, r28	; 61
    4d2e:	29 87       	std	Y+9, r18	; 0x09
    4d30:	3a 87       	std	Y+10, r19	; 0x0a
    4d32:	4b 87       	std	Y+11, r20	; 0x0b
    4d34:	5c 87       	std	Y+12, r21	; 0x0c
    4d36:	6d 87       	std	Y+13, r22	; 0x0d
    4d38:	7e 87       	std	Y+14, r23	; 0x0e
    4d3a:	8f 87       	std	Y+15, r24	; 0x0f
    4d3c:	98 8b       	std	Y+16, r25	; 0x10
    4d3e:	ce 01       	movw	r24, r28
    4d40:	01 96       	adiw	r24, 0x01	; 1
    4d42:	0e 94 b9 2b 	call	0x5772	; 0x5772 <nrk_time_get>
    4d46:	89 80       	ldd	r8, Y+1	; 0x01
    4d48:	9a 80       	ldd	r9, Y+2	; 0x02
    4d4a:	ab 80       	ldd	r10, Y+3	; 0x03
    4d4c:	bc 80       	ldd	r11, Y+4	; 0x04
    4d4e:	cd 80       	ldd	r12, Y+5	; 0x05
    4d50:	de 80       	ldd	r13, Y+6	; 0x06
    4d52:	ef 80       	ldd	r14, Y+7	; 0x07
    4d54:	f8 84       	ldd	r15, Y+8	; 0x08
    4d56:	09 85       	ldd	r16, Y+9	; 0x09
    4d58:	1a 85       	ldd	r17, Y+10	; 0x0a
    4d5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4d5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d5e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4d60:	5e 85       	ldd	r21, Y+14	; 0x0e
    4d62:	6f 85       	ldd	r22, Y+15	; 0x0f
    4d64:	78 89       	ldd	r23, Y+16	; 0x10
    4d66:	ce 01       	movw	r24, r28
    4d68:	09 96       	adiw	r24, 0x09	; 9
    4d6a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <nrk_time_sub>
    4d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d70:	19 f4       	brne	.+6      	; 0x4d78 <nrk_wait_until+0x72>
    4d72:	8f ef       	ldi	r24, 0xFF	; 255
    4d74:	9f ef       	ldi	r25, 0xFF	; 255
    4d76:	0c c0       	rjmp	.+24     	; 0x4d90 <nrk_wait_until+0x8a>
    4d78:	29 85       	ldd	r18, Y+9	; 0x09
    4d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d80:	6d 85       	ldd	r22, Y+13	; 0x0d
    4d82:	7e 85       	ldd	r23, Y+14	; 0x0e
    4d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d86:	98 89       	ldd	r25, Y+16	; 0x10
    4d88:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <nrk_wait>
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	60 96       	adiw	r28, 0x10	; 16
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	de bf       	out	0x3e, r29	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	cd bf       	out	0x3d, r28	; 61
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	df 90       	pop	r13
    4daa:	cf 90       	pop	r12
    4dac:	bf 90       	pop	r11
    4dae:	af 90       	pop	r10
    4db0:	9f 90       	pop	r9
    4db2:	8f 90       	pop	r8
    4db4:	08 95       	ret

00004db6 <nrk_wait_until_nw>:
    4db6:	1f 93       	push	r17
    4db8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4dbc:	e0 91 67 07 	lds	r30, 0x0767
    4dc0:	f0 91 68 07 	lds	r31, 0x0768
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	85 83       	std	Z+5, r24	; 0x05
    4dc8:	86 83       	std	Z+6, r24	; 0x06
    4dca:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4dce:	18 2f       	mov	r17, r24
    4dd0:	88 3f       	cpi	r24, 0xF8	; 248
    4dd2:	80 f4       	brcc	.+32     	; 0x4df4 <nrk_wait_until_nw+0x3e>
    4dd4:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4dd8:	21 2f       	mov	r18, r17
    4dda:	33 27       	eor	r19, r19
    4ddc:	2e 5f       	subi	r18, 0xFE	; 254
    4dde:	3f 4f       	sbci	r19, 0xFF	; 255
    4de0:	99 27       	eor	r25, r25
    4de2:	82 17       	cp	r24, r18
    4de4:	93 07       	cpc	r25, r19
    4de6:	34 f0       	brlt	.+12     	; 0x4df4 <nrk_wait_until_nw+0x3e>
    4de8:	81 2f       	mov	r24, r17
    4dea:	8e 5f       	subi	r24, 0xFE	; 254
    4dec:	80 93 aa 06 	sts	0x06AA, r24
    4df0:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    4df4:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4df8:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	1f 91       	pop	r17
    4e02:	08 95       	ret

00004e04 <nrk_set_next_wakeup>:
    4e04:	1f 93       	push	r17
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62
    4e0e:	28 97       	sbiw	r28, 0x08	; 8
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	29 83       	std	Y+1, r18	; 0x01
    4e1c:	3a 83       	std	Y+2, r19	; 0x02
    4e1e:	4b 83       	std	Y+3, r20	; 0x03
    4e20:	5c 83       	std	Y+4, r21	; 0x04
    4e22:	6d 83       	std	Y+5, r22	; 0x05
    4e24:	7e 83       	std	Y+6, r23	; 0x06
    4e26:	8f 83       	std	Y+7, r24	; 0x07
    4e28:	98 87       	std	Y+8, r25	; 0x08
    4e2a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4e2e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4e32:	18 2f       	mov	r17, r24
    4e34:	ce 01       	movw	r24, r28
    4e36:	01 96       	adiw	r24, 0x01	; 1
    4e38:	0e 94 82 29 	call	0x5304	; 0x5304 <_nrk_time_to_ticks>
    4e3c:	83 30       	cpi	r24, 0x03	; 3
    4e3e:	91 05       	cpc	r25, r1
    4e40:	18 f4       	brcc	.+6      	; 0x4e48 <nrk_set_next_wakeup+0x44>
    4e42:	8f ef       	ldi	r24, 0xFF	; 255
    4e44:	9f ef       	ldi	r25, 0xFF	; 255
    4e46:	0c c0       	rjmp	.+24     	; 0x4e60 <nrk_set_next_wakeup+0x5c>
    4e48:	e0 91 67 07 	lds	r30, 0x0767
    4e4c:	f0 91 68 07 	lds	r31, 0x0768
    4e50:	81 0f       	add	r24, r17
    4e52:	91 1d       	adc	r25, r1
    4e54:	96 8b       	std	Z+22, r25	; 0x16
    4e56:	85 8b       	std	Z+21, r24	; 0x15
    4e58:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	28 96       	adiw	r28, 0x08	; 8
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	df 91       	pop	r29
    4e6e:	cf 91       	pop	r28
    4e70:	1f 91       	pop	r17
    4e72:	08 95       	ret

00004e74 <nrk_wait_until_ticks>:
    4e74:	0f 93       	push	r16
    4e76:	1f 93       	push	r17
    4e78:	8c 01       	movw	r16, r24
    4e7a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4e7e:	e0 91 67 07 	lds	r30, 0x0767
    4e82:	f0 91 68 07 	lds	r31, 0x0768
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	85 83       	std	Z+5, r24	; 0x05
    4e8a:	16 8b       	std	Z+22, r17	; 0x16
    4e8c:	05 8b       	std	Z+21, r16	; 0x15
    4e8e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4e92:	08 2f       	mov	r16, r24
    4e94:	88 3f       	cpi	r24, 0xF8	; 248
    4e96:	80 f4       	brcc	.+32     	; 0x4eb8 <nrk_wait_until_ticks+0x44>
    4e98:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4e9c:	20 2f       	mov	r18, r16
    4e9e:	33 27       	eor	r19, r19
    4ea0:	2e 5f       	subi	r18, 0xFE	; 254
    4ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ea4:	99 27       	eor	r25, r25
    4ea6:	82 17       	cp	r24, r18
    4ea8:	93 07       	cpc	r25, r19
    4eaa:	34 f0       	brlt	.+12     	; 0x4eb8 <nrk_wait_until_ticks+0x44>
    4eac:	80 2f       	mov	r24, r16
    4eae:	8e 5f       	subi	r24, 0xFE	; 254
    4eb0:	80 93 aa 06 	sts	0x06AA, r24
    4eb4:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    4eb8:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4ebc:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	1f 91       	pop	r17
    4ec6:	0f 91       	pop	r16
    4ec8:	08 95       	ret

00004eca <nrk_wait_ticks>:
    return (NRK_VERSION);
}


    4eca:	ff 92       	push	r15
    4ecc:	0f 93       	push	r16
    4ece:	1f 93       	push	r17
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	8c 01       	movw	r16, r24
    4ed6:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    4eda:	e0 91 67 07 	lds	r30, 0x0767
    4ede:	f0 91 68 07 	lds	r31, 0x0768
    4ee2:	81 e0       	ldi	r24, 0x01	; 1
    4ee4:	85 83       	std	Z+5, r24	; 0x05
    4ee6:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4eea:	f8 2e       	mov	r15, r24
    4eec:	e0 91 67 07 	lds	r30, 0x0767
    4ef0:	f0 91 68 07 	lds	r31, 0x0768
    4ef4:	c8 2f       	mov	r28, r24
    4ef6:	dd 27       	eor	r29, r29
    4ef8:	0c 0f       	add	r16, r28
    4efa:	1d 1f       	adc	r17, r29
    4efc:	16 8b       	std	Z+22, r17	; 0x16
    4efe:	05 8b       	std	Z+21, r16	; 0x15
    4f00:	87 ef       	ldi	r24, 0xF7	; 247
    4f02:	8f 15       	cp	r24, r15
    4f04:	68 f0       	brcs	.+26     	; 0x4f20 <nrk_wait_ticks+0x56>
    4f06:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4f0a:	22 96       	adiw	r28, 0x02	; 2
    4f0c:	99 27       	eor	r25, r25
    4f0e:	8c 17       	cp	r24, r28
    4f10:	9d 07       	cpc	r25, r29
    4f12:	34 f0       	brlt	.+12     	; 0x4f20 <nrk_wait_ticks+0x56>
    4f14:	8f 2d       	mov	r24, r15
    4f16:	8e 5f       	subi	r24, 0xFE	; 254
    4f18:	80 93 aa 06 	sts	0x06AA, r24
    4f1c:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    4f20:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    4f24:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	df 91       	pop	r29
    4f2e:	cf 91       	pop	r28
    4f30:	1f 91       	pop	r17
    4f32:	0f 91       	pop	r16
    4f34:	ff 90       	pop	r15
    4f36:	08 95       	ret

00004f38 <nrk_wait_until_next_n_periods>:
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    4f38:	1f 93       	push	r17
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	ec 01       	movw	r28, r24
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 
    4f40:	0e 94 ef 21 	call	0x43de	; 0x43de <nrk_stack_check>
	
	         
    4f44:	20 97       	sbiw	r28, 0x00	; 0
    4f46:	11 f4       	brne	.+4      	; 0x4f4c <nrk_wait_until_next_n_periods+0x14>
    4f48:	c1 e0       	ldi	r28, 0x01	; 1
    4f4a:	d0 e0       	ldi	r29, 0x00	; 0

			
    return NRK_OK;
    4f4c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>

    4f50:	e0 91 67 07 	lds	r30, 0x0767
    4f54:	f0 91 68 07 	lds	r31, 0x0768
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	85 83       	std	Z+5, r24	; 0x05
}
    4f5c:	d0 a3       	std	Z+32, r29	; 0x20
    4f5e:	c7 8f       	std	Z+31, r28	; 0x1f

    4f60:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4f64:	18 2f       	mov	r17, r24

/*
 * _nrk_timer_tick() 
 *
 * This function is called by the interrupt timer0.
    4f66:	88 3f       	cpi	r24, 0xF8	; 248
    4f68:	80 f4       	brcc	.+32     	; 0x4f8a <nrk_wait_until_next_n_periods+0x52>
 * It calls the scheduler.
    4f6a:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4f6e:	21 2f       	mov	r18, r17
    4f70:	33 27       	eor	r19, r19
    4f72:	2e 5f       	subi	r18, 0xFE	; 254
    4f74:	3f 4f       	sbci	r19, 0xFF	; 255
    4f76:	99 27       	eor	r25, r25
    4f78:	82 17       	cp	r24, r18
    4f7a:	93 07       	cpc	r25, r19
    4f7c:	34 f0       	brlt	.+12     	; 0x4f8a <nrk_wait_until_next_n_periods+0x52>
 */
    4f7e:	81 2f       	mov	r24, r17
    4f80:	8e 5f       	subi	r24, 0xFE	; 254
void _nrk_timer_tick(void)
    4f82:	80 93 aa 06 	sts	0x06AA, r24
{
    4f86:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

    4f8a:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
	_nrk_scheduler();
    4f8e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>

  	return;
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	df 91       	pop	r29
    4f98:	cf 91       	pop	r28
    4f9a:	1f 91       	pop	r17
    4f9c:	08 95       	ret

00004f9e <nrk_wait_until_next_period>:
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
}

    4f9e:	1f 93       	push	r17

int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    4fa0:	0e 94 ef 21 	call	0x43de	; 0x43de <nrk_stack_check>
	
    //  Already in critical section so no needenter critical section
    4fa4:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
    if(Task->Type!=IDLE_TASK)
    4fa8:	e0 91 67 07 	lds	r30, 0x0767
    4fac:	f0 91 68 07 	lds	r31, 0x0768
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	90 a3       	std	Z+32, r25	; 0x20
    4fb6:	87 8f       	std	Z+31, r24	; 0x1f
    	Task->task_ID=nrk_task_init_cnt;
    4fb8:	81 e0       	ldi	r24, 0x01	; 1
    4fba:	85 83       	std	Z+5, r24	; 0x05
    else Task->task_ID=NRK_IDLE_TASK_ID;
    4fbc:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4fc0:	18 2f       	mov	r17, r24

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    4fc2:	88 3f       	cpi	r24, 0xF8	; 248
    4fc4:	80 f4       	brcc	.+32     	; 0x4fe6 <nrk_wait_until_next_period+0x48>
    //initialize member of TCB structure
    4fc6:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    4fca:	21 2f       	mov	r18, r17
    4fcc:	33 27       	eor	r19, r19
    4fce:	2e 5f       	subi	r18, 0xFE	; 254
    4fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd2:	99 27       	eor	r25, r25
    4fd4:	82 17       	cp	r24, r18
    4fd6:	93 07       	cpc	r25, r19
    4fd8:	34 f0       	brlt	.+12     	; 0x4fe6 <nrk_wait_until_next_period+0x48>
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    4fda:	81 2f       	mov	r24, r17
    4fdc:	8e 5f       	subi	r24, 0xFE	; 254
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    4fde:	80 93 aa 06 	sts	0x06AA, r24
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    4fe2:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    4fe6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    4fea:	0e 94 22 26 	call	0x4c44	; 0x4c44 <_nrk_wait_for_scheduler>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	1f 91       	pop	r17
    4ff4:	08 95       	ret

00004ff6 <nrk_terminate_task>:
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    4ff6:	e0 91 67 07 	lds	r30, 0x0767
    4ffa:	f0 91 68 07 	lds	r31, 0x0768
    4ffe:	80 85       	ldd	r24, Z+8	; 0x08
    5000:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <nrk_rem_from_readyQ>
*/
    5004:	e0 91 67 07 	lds	r30, 0x0767
    5008:	f0 91 68 07 	lds	r31, 0x0768
    500c:	84 e0       	ldi	r24, 0x04	; 4
    500e:	81 87       	std	Z+9, r24	; 0x09
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	
    5010:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <nrk_wait_until_next_period>

    // you should never get here    
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	08 95       	ret

0000501a <nrk_activate_task>:





void nrk_start (void)
    501a:	ef 92       	push	r14
    501c:	ff 92       	push	r15
    501e:	0f 93       	push	r16
    5020:	1f 93       	push	r17
    5022:	cf 93       	push	r28
    5024:	df 93       	push	r29
    5026:	ec 01       	movw	r28, r24
{
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    5028:	4b 81       	ldd	r20, Y+3	; 0x03
    502a:	5c 81       	ldd	r21, Y+4	; 0x04
    502c:	69 81       	ldd	r22, Y+1	; 0x01
    502e:	7a 81       	ldd	r23, Y+2	; 0x02
    5030:	8d 81       	ldd	r24, Y+5	; 0x05
    5032:	9e 81       	ldd	r25, Y+6	; 0x06
    5034:	0e 94 0a 33 	call	0x6614	; 0x6614 <nrk_task_stk_init>
    5038:	bc 01       	movw	r22, r24
//	unsigned char *stkc;

	/*
		- Get highest priority task from rdy list
    503a:	8f 81       	ldd	r24, Y+7	; 0x07
    503c:	88 23       	and	r24, r24
    503e:	69 f0       	breq	.+26     	; 0x505a <nrk_activate_task+0x40>
		- set cur prio and start the task 
    5040:	4b 81       	ldd	r20, Y+3	; 0x03
    5042:	5c 81       	ldd	r21, Y+4	; 0x04
    5044:	ee 24       	eor	r14, r14
    5046:	ff 24       	eor	r15, r15
    5048:	00 e0       	ldi	r16, 0x00	; 0
    504a:	10 e0       	ldi	r17, 0x00	; 0
    504c:	20 e0       	ldi	r18, 0x00	; 0
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	ce 01       	movw	r24, r28
    5052:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_TCB_init>
	*/
    5056:	1f 82       	std	Y+7, r1	; 0x07
    5058:	16 c0       	rjmp	.+44     	; 0x5086 <nrk_activate_task+0x6c>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    505a:	88 81       	ld	r24, Y
    505c:	99 27       	eor	r25, r25
    505e:	87 fd       	sbrc	r24, 7
    5060:	90 95       	com	r25
    5062:	fc 01       	movw	r30, r24
    5064:	a5 e0       	ldi	r26, 0x05	; 5
    5066:	ee 0f       	add	r30, r30
    5068:	ff 1f       	adc	r31, r31
    506a:	aa 95       	dec	r26
    506c:	e1 f7       	brne	.-8      	; 0x5066 <nrk_activate_task+0x4c>
    506e:	e8 0f       	add	r30, r24
    5070:	f9 1f       	adc	r31, r25
    5072:	e6 53       	subi	r30, 0x36	; 54
    5074:	f9 4f       	sbci	r31, 0xF9	; 249
    5076:	81 85       	ldd	r24, Z+9	; 0x09
    5078:	83 30       	cpi	r24, 0x03	; 3
    507a:	19 f0       	breq	.+6      	; 0x5082 <nrk_activate_task+0x68>
    507c:	8f ef       	ldi	r24, 0xFF	; 255
    507e:	9f ef       	ldi	r25, 0xFF	; 255
    5080:	1b c0       	rjmp	.+54     	; 0x50b8 <nrk_activate_task+0x9e>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    5082:	71 83       	std	Z+1, r23	; 0x01
    5084:	60 83       	st	Z, r22
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
//    nrk_stack_pointer_restore();

    5086:	88 81       	ld	r24, Y
    5088:	99 27       	eor	r25, r25
    508a:	87 fd       	sbrc	r24, 7
    508c:	90 95       	com	r25
    508e:	fc 01       	movw	r30, r24
    5090:	75 e0       	ldi	r23, 0x05	; 5
    5092:	ee 0f       	add	r30, r30
    5094:	ff 1f       	adc	r31, r31
    5096:	7a 95       	dec	r23
    5098:	e1 f7       	brne	.-8      	; 0x5092 <nrk_activate_task+0x78>
    509a:	e8 0f       	add	r30, r24
    509c:	f9 1f       	adc	r31, r25
    509e:	e6 53       	subi	r30, 0x36	; 54
    50a0:	f9 4f       	sbci	r31, 0xF9	; 249
    50a2:	85 89       	ldd	r24, Z+21	; 0x15
    50a4:	96 89       	ldd	r25, Z+22	; 0x16
    50a6:	89 2b       	or	r24, r25
    50a8:	29 f4       	brne	.+10     	; 0x50b4 <nrk_activate_task+0x9a>
    /*
    50aa:	82 e0       	ldi	r24, 0x02	; 2
    50ac:	81 87       	std	Z+9, r24	; 0x09
    #ifdef KERNEL_STK_ARRAY
    50ae:	88 81       	ld	r24, Y
    50b0:	0e 94 42 25 	call	0x4a84	; 0x4a84 <nrk_add_to_readyQ>
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	df 91       	pop	r29
    50ba:	cf 91       	pop	r28
    50bc:	1f 91       	pop	r17
    50be:	0f 91       	pop	r16
    50c0:	ff 90       	pop	r15
    50c2:	ef 90       	pop	r14
    50c4:	08 95       	ret

000050c6 <nrk_time_sub>:

void nrk_halt()
{
nrk_int_disable();
while(1);
}
    50c6:	8f 92       	push	r8
    50c8:	9f 92       	push	r9
    50ca:	af 92       	push	r10
    50cc:	bf 92       	push	r11
    50ce:	cf 92       	push	r12
    50d0:	df 92       	push	r13
    50d2:	ef 92       	push	r14
    50d4:	ff 92       	push	r15
    50d6:	0f 93       	push	r16
    50d8:	1f 93       	push	r17
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
    50de:	cd b7       	in	r28, 0x3d	; 61
    50e0:	de b7       	in	r29, 0x3e	; 62
    50e2:	60 97       	sbiw	r28, 0x10	; 16
    50e4:	0f b6       	in	r0, 0x3f	; 63
    50e6:	f8 94       	cli
    50e8:	de bf       	out	0x3e, r29	; 62
    50ea:	0f be       	out	0x3f, r0	; 63
    50ec:	cd bf       	out	0x3d, r28	; 61
    50ee:	fc 01       	movw	r30, r24
    50f0:	09 83       	std	Y+1, r16	; 0x01
    50f2:	1a 83       	std	Y+2, r17	; 0x02
    50f4:	2b 83       	std	Y+3, r18	; 0x03
    50f6:	3c 83       	std	Y+4, r19	; 0x04
    50f8:	4d 83       	std	Y+5, r20	; 0x05
    50fa:	5e 83       	std	Y+6, r21	; 0x06
    50fc:	6f 83       	std	Y+7, r22	; 0x07
    50fe:	78 87       	std	Y+8, r23	; 0x08
    5100:	89 86       	std	Y+9, r8	; 0x09
    5102:	9a 86       	std	Y+10, r9	; 0x0a
    5104:	ab 86       	std	Y+11, r10	; 0x0b
    5106:	bc 86       	std	Y+12, r11	; 0x0c
    5108:	cd 86       	std	Y+13, r12	; 0x0d
    510a:	de 86       	std	Y+14, r13	; 0x0e
    510c:	ef 86       	std	Y+15, r14	; 0x0f
    510e:	f8 8a       	std	Y+16, r15	; 0x10
    5110:	2d 81       	ldd	r18, Y+5	; 0x05
    5112:	3e 81       	ldd	r19, Y+6	; 0x06
    5114:	4f 81       	ldd	r20, Y+7	; 0x07
    5116:	58 85       	ldd	r21, Y+8	; 0x08
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	9a 81       	ldd	r25, Y+2	; 0x02
    511c:	ab 81       	ldd	r26, Y+3	; 0x03
    511e:	bc 81       	ldd	r27, Y+4	; 0x04
    5120:	ad 84       	ldd	r10, Y+13	; 0x0d
    5122:	be 84       	ldd	r11, Y+14	; 0x0e
    5124:	cf 84       	ldd	r12, Y+15	; 0x0f
    5126:	d8 88       	ldd	r13, Y+16	; 0x10
    5128:	e9 84       	ldd	r14, Y+9	; 0x09
    512a:	fa 84       	ldd	r15, Y+10	; 0x0a
    512c:	0b 85       	ldd	r16, Y+11	; 0x0b
    512e:	1c 85       	ldd	r17, Y+12	; 0x0c

    5130:	8e 15       	cp	r24, r14
    5132:	9f 05       	cpc	r25, r15
    5134:	a0 07       	cpc	r26, r16
    5136:	b1 07       	cpc	r27, r17
    5138:	08 f4       	brcc	.+2      	; 0x513c <nrk_time_sub+0x76>
    513a:	3f c0       	rjmp	.+126    	; 0x51ba <nrk_time_sub+0xf4>
/**
    513c:	e8 16       	cp	r14, r24
    513e:	f9 06       	cpc	r15, r25
    5140:	0a 07       	cpc	r16, r26
    5142:	1b 07       	cpc	r17, r27
    5144:	91 f4       	brne	.+36     	; 0x516a <nrk_time_sub+0xa4>
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    5146:	2a 15       	cp	r18, r10
    5148:	3b 05       	cpc	r19, r11
    514a:	4c 05       	cpc	r20, r12
    514c:	5d 05       	cpc	r21, r13
    514e:	a8 f1       	brcs	.+106    	; 0x51ba <nrk_time_sub+0xf4>
 *  - Init global variables
    5150:	2a 19       	sub	r18, r10
    5152:	3b 09       	sbc	r19, r11
    5154:	4c 09       	sbc	r20, r12
    5156:	5d 09       	sbc	r21, r13
    5158:	24 83       	std	Z+4, r18	; 0x04
    515a:	35 83       	std	Z+5, r19	; 0x05
    515c:	46 83       	std	Z+6, r20	; 0x06
    515e:	57 83       	std	Z+7, r21	; 0x07
 *  - Init event list
    5160:	10 82       	st	Z, r1
    5162:	11 82       	std	Z+1, r1	; 0x01
    5164:	12 82       	std	Z+2, r1	; 0x02
    5166:	13 82       	std	Z+3, r1	; 0x03
    5168:	1c c0       	rjmp	.+56     	; 0x51a2 <nrk_time_sub+0xdc>
 *  - Create idle task
 */
void nrk_init()
    516a:	2a 15       	cp	r18, r10
    516c:	3b 05       	cpc	r19, r11
    516e:	4c 05       	cpc	r20, r12
    5170:	5d 05       	cpc	r21, r13
    5172:	d0 f4       	brcc	.+52     	; 0x51a8 <nrk_time_sub+0xe2>
{
	
    uint8_t i;	
//    unsigned char *stkc;
    5174:	01 97       	sbiw	r24, 0x01	; 1
    5176:	a1 09       	sbc	r26, r1
    5178:	b1 09       	sbc	r27, r1
    517a:	8e 19       	sub	r24, r14
    517c:	9f 09       	sbc	r25, r15
    517e:	a0 0b       	sbc	r26, r16
    5180:	b1 0b       	sbc	r27, r17
    5182:	80 83       	st	Z, r24
    5184:	91 83       	std	Z+1, r25	; 0x01
    5186:	a2 83       	std	Z+2, r26	; 0x02
    5188:	b3 83       	std	Z+3, r27	; 0x03
	
    518a:	20 50       	subi	r18, 0x00	; 0
    518c:	36 43       	sbci	r19, 0x36	; 54
    518e:	45 46       	sbci	r20, 0x65	; 101
    5190:	54 4c       	sbci	r21, 0xC4	; 196
    5192:	2a 19       	sub	r18, r10
    5194:	3b 09       	sbc	r19, r11
    5196:	4c 09       	sbc	r20, r12
    5198:	5d 09       	sbc	r21, r13
    519a:	24 83       	std	Z+4, r18	; 0x04
    519c:	35 83       	std	Z+5, r19	; 0x05
    519e:	46 83       	std	Z+6, r20	; 0x06
    51a0:	57 83       	std	Z+7, r21	; 0x07
    51a2:	81 e0       	ldi	r24, 0x01	; 1
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	0b c0       	rjmp	.+22     	; 0x51be <nrk_time_sub+0xf8>
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    51a8:	8e 19       	sub	r24, r14
    51aa:	9f 09       	sbc	r25, r15
    51ac:	a0 0b       	sbc	r26, r16
    51ae:	b1 0b       	sbc	r27, r17
    51b0:	80 83       	st	Z, r24
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	a2 83       	std	Z+2, r26	; 0x02
    51b6:	b3 83       	std	Z+3, r27	; 0x03
    51b8:	ec cf       	rjmp	.-40     	; 0x5192 <nrk_time_sub+0xcc>
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    51ba:	8f ef       	ldi	r24, 0xFF	; 255
    51bc:	9f ef       	ldi	r25, 0xFF	; 255
    51be:	60 96       	adiw	r28, 0x10	; 16
    51c0:	0f b6       	in	r0, 0x3f	; 63
    51c2:	f8 94       	cli
    51c4:	de bf       	out	0x3e, r29	; 62
    51c6:	0f be       	out	0x3f, r0	; 63
    51c8:	cd bf       	out	0x3d, r28	; 61
    51ca:	df 91       	pop	r29
    51cc:	cf 91       	pop	r28
    51ce:	1f 91       	pop	r17
    51d0:	0f 91       	pop	r16
    51d2:	ff 90       	pop	r15
    51d4:	ef 90       	pop	r14
    51d6:	df 90       	pop	r13
    51d8:	cf 90       	pop	r12
    51da:	bf 90       	pop	r11
    51dc:	af 90       	pop	r10
    51de:	9f 90       	pop	r9
    51e0:	8f 90       	pop	r8
    51e2:	08 95       	ret

000051e4 <nrk_time_compact_nanos>:
   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
    51e4:	fc 01       	movw	r30, r24
    51e6:	13 c0       	rjmp	.+38     	; 0x520e <nrk_time_compact_nanos+0x2a>
      			nrk_spin_wait_us (1000);
	   }
   #endif
    51e8:	80 50       	subi	r24, 0x00	; 0
    51ea:	9a 4c       	sbci	r25, 0xCA	; 202
    51ec:	aa 49       	sbci	r26, 0x9A	; 154
    51ee:	bb 43       	sbci	r27, 0x3B	; 59
    51f0:	84 83       	std	Z+4, r24	; 0x04
    51f2:	95 83       	std	Z+5, r25	; 0x05
    51f4:	a6 83       	std	Z+6, r26	; 0x06
    51f6:	b7 83       	std	Z+7, r27	; 0x07
   #endif
    51f8:	80 81       	ld	r24, Z
    51fa:	91 81       	ldd	r25, Z+1	; 0x01
    51fc:	a2 81       	ldd	r26, Z+2	; 0x02
    51fe:	b3 81       	ldd	r27, Z+3	; 0x03
    5200:	01 96       	adiw	r24, 0x01	; 1
    5202:	a1 1d       	adc	r26, r1
    5204:	b1 1d       	adc	r27, r1
    5206:	80 83       	st	Z, r24
    5208:	91 83       	std	Z+1, r25	; 0x01
    520a:	a2 83       	std	Z+2, r26	; 0x02
    520c:	b3 83       	std	Z+3, r27	; 0x03
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
    520e:	84 81       	ldd	r24, Z+4	; 0x04
    5210:	95 81       	ldd	r25, Z+5	; 0x05
    5212:	a6 81       	ldd	r26, Z+6	; 0x06
    5214:	b7 81       	ldd	r27, Z+7	; 0x07
    5216:	80 30       	cpi	r24, 0x00	; 0
    5218:	2a ec       	ldi	r18, 0xCA	; 202
    521a:	92 07       	cpc	r25, r18
    521c:	2a e9       	ldi	r18, 0x9A	; 154
    521e:	a2 07       	cpc	r26, r18
    5220:	2b e3       	ldi	r18, 0x3B	; 59
    5222:	b2 07       	cpc	r27, r18
    5224:	08 f7       	brcc	.-62     	; 0x51e8 <nrk_time_compact_nanos+0x4>
    5226:	08 95       	ret

00005228 <nrk_time_add>:
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    5228:	8f 92       	push	r8
    522a:	9f 92       	push	r9
    522c:	af 92       	push	r10
    522e:	bf 92       	push	r11
    5230:	cf 92       	push	r12
    5232:	df 92       	push	r13
    5234:	ef 92       	push	r14
    5236:	ff 92       	push	r15
    5238:	0f 93       	push	r16
    523a:	1f 93       	push	r17
    523c:	cf 93       	push	r28
    523e:	df 93       	push	r29
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	60 97       	sbiw	r28, 0x10	; 16
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	de bf       	out	0x3e, r29	; 62
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	cd bf       	out	0x3d, r28	; 61
    5250:	fc 01       	movw	r30, r24
    5252:	09 83       	std	Y+1, r16	; 0x01
    5254:	1a 83       	std	Y+2, r17	; 0x02
    5256:	2b 83       	std	Y+3, r18	; 0x03
    5258:	3c 83       	std	Y+4, r19	; 0x04
    525a:	4d 83       	std	Y+5, r20	; 0x05
    525c:	5e 83       	std	Y+6, r21	; 0x06
    525e:	6f 83       	std	Y+7, r22	; 0x07
    5260:	78 87       	std	Y+8, r23	; 0x08
    5262:	89 86       	std	Y+9, r8	; 0x09
    5264:	9a 86       	std	Y+10, r9	; 0x0a
    5266:	ab 86       	std	Y+11, r10	; 0x0b
    5268:	bc 86       	std	Y+12, r11	; 0x0c
    526a:	cd 86       	std	Y+13, r12	; 0x0d
    526c:	de 86       	std	Y+14, r13	; 0x0e
    526e:	ef 86       	std	Y+15, r14	; 0x0f
    5270:	f8 8a       	std	Y+16, r15	; 0x10
    5272:	ad 80       	ldd	r10, Y+5	; 0x05
    5274:	be 80       	ldd	r11, Y+6	; 0x06
    5276:	cf 80       	ldd	r12, Y+7	; 0x07
    5278:	d8 84       	ldd	r13, Y+8	; 0x08
    527a:	ed 84       	ldd	r14, Y+13	; 0x0d
    527c:	fe 84       	ldd	r15, Y+14	; 0x0e
    527e:	0f 85       	ldd	r16, Y+15	; 0x0f
    5280:	18 89       	ldd	r17, Y+16	; 0x10
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    5282:	89 85       	ldd	r24, Y+9	; 0x09
    5284:	9a 85       	ldd	r25, Y+10	; 0x0a
    5286:	ab 85       	ldd	r26, Y+11	; 0x0b
    5288:	bc 85       	ldd	r27, Y+12	; 0x0c
    528a:	29 81       	ldd	r18, Y+1	; 0x01
    528c:	3a 81       	ldd	r19, Y+2	; 0x02
    528e:	4b 81       	ldd	r20, Y+3	; 0x03
    5290:	5c 81       	ldd	r21, Y+4	; 0x04
    5292:	82 0f       	add	r24, r18
    5294:	93 1f       	adc	r25, r19
    5296:	a4 1f       	adc	r26, r20
    5298:	b5 1f       	adc	r27, r21
    529a:	80 83       	st	Z, r24
    529c:	91 83       	std	Z+1, r25	; 0x01
    529e:	a2 83       	std	Z+2, r26	; 0x02
    52a0:	b3 83       	std	Z+3, r27	; 0x03
#endif
    52a2:	ea 0c       	add	r14, r10
    52a4:	fb 1c       	adc	r15, r11
    52a6:	0c 1d       	adc	r16, r12
    52a8:	1d 1d       	adc	r17, r13
    52aa:	e4 82       	std	Z+4, r14	; 0x04
    52ac:	f5 82       	std	Z+5, r15	; 0x05
    52ae:	06 83       	std	Z+6, r16	; 0x06
    52b0:	17 83       	std	Z+7, r17	; 0x07

    52b2:	cf 01       	movw	r24, r30
    52b4:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <nrk_time_compact_nanos>
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	60 96       	adiw	r28, 0x10	; 16
    52be:	0f b6       	in	r0, 0x3f	; 63
    52c0:	f8 94       	cli
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	0f be       	out	0x3f, r0	; 63
    52c6:	cd bf       	out	0x3d, r28	; 61
    52c8:	df 91       	pop	r29
    52ca:	cf 91       	pop	r28
    52cc:	1f 91       	pop	r17
    52ce:	0f 91       	pop	r16
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	bf 90       	pop	r11
    52da:	af 90       	pop	r10
    52dc:	9f 90       	pop	r9
    52de:	8f 90       	pop	r8
    52e0:	08 95       	ret

000052e2 <nrk_time_set>:
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    52e2:	60 93 5e 07 	sts	0x075E, r22
    52e6:	70 93 5f 07 	sts	0x075F, r23
    52ea:	80 93 60 07 	sts	0x0760, r24
    52ee:	90 93 61 07 	sts	0x0761, r25
    #endif
    52f2:	20 93 62 07 	sts	0x0762, r18
    52f6:	30 93 63 07 	sts	0x0763, r19
    52fa:	40 93 64 07 	sts	0x0764, r20
    52fe:	50 93 65 07 	sts	0x0765, r21
    5302:	08 95       	ret

00005304 <_nrk_time_to_ticks>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
    5304:	2f 92       	push	r2
    5306:	3f 92       	push	r3
    5308:	4f 92       	push	r4
    530a:	5f 92       	push	r5
    530c:	6f 92       	push	r6
    530e:	7f 92       	push	r7
    5310:	8f 92       	push	r8
    5312:	9f 92       	push	r9
    5314:	af 92       	push	r10
    5316:	bf 92       	push	r11
    5318:	cf 92       	push	r12
    531a:	df 92       	push	r13
    531c:	ef 92       	push	r14
    531e:	ff 92       	push	r15
    5320:	0f 93       	push	r16
    5322:	1f 93       	push	r17
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	cd b7       	in	r28, 0x3d	; 61
    532a:	de b7       	in	r29, 0x3e	; 62
    532c:	28 97       	sbiw	r28, 0x08	; 8
    532e:	0f b6       	in	r0, 0x3f	; 63
    5330:	f8 94       	cli
    5332:	de bf       	out	0x3e, r29	; 62
    5334:	0f be       	out	0x3f, r0	; 63
    5336:	cd bf       	out	0x3d, r28	; 61
    5338:	fc 01       	movw	r30, r24
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    533a:	c0 80       	ld	r12, Z
    533c:	d1 80       	ldd	r13, Z+1	; 0x01
    533e:	e2 80       	ldd	r14, Z+2	; 0x02
    5340:	f3 80       	ldd	r15, Z+3	; 0x03
    5342:	64 81       	ldd	r22, Z+4	; 0x04
    5344:	75 81       	ldd	r23, Z+5	; 0x05
    5346:	86 81       	ldd	r24, Z+6	; 0x06
    5348:	97 81       	ldd	r25, Z+7	; 0x07
    534a:	c1 14       	cp	r12, r1
    534c:	d1 04       	cpc	r13, r1
    534e:	e1 04       	cpc	r14, r1
    5350:	f1 04       	cpc	r15, r1
    5352:	09 f4       	brne	.+2      	; 0x5356 <_nrk_time_to_ticks+0x52>
    5354:	a6 c0       	rjmp	.+332    	; 0x54a2 <_nrk_time_to_ticks+0x19e>
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    5356:	22 e4       	ldi	r18, 0x42	; 66
    5358:	c2 16       	cp	r12, r18
    535a:	d1 04       	cpc	r13, r1
    535c:	e1 04       	cpc	r14, r1
    535e:	f1 04       	cpc	r15, r1
    5360:	18 f0       	brcs	.+6      	; 0x5368 <_nrk_time_to_ticks+0x64>
    5362:	80 e0       	ldi	r24, 0x00	; 0
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	a4 c0       	rjmp	.+328    	; 0x54b0 <_nrk_time_to_ticks+0x1ac>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    5368:	1b 01       	movw	r2, r22
    536a:	2c 01       	movw	r4, r24
    536c:	66 24       	eor	r6, r6
    536e:	77 24       	eor	r7, r7
    5370:	88 24       	eor	r8, r8
    5372:	99 24       	eor	r9, r9
    5374:	aa 24       	eor	r10, r10
    5376:	bb 24       	eor	r11, r11
    5378:	6e c0       	rjmp	.+220    	; 0x5456 <_nrk_time_to_ticks+0x152>
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    537a:	19 82       	std	Y+1, r1	; 0x01
    537c:	8a ec       	ldi	r24, 0xCA	; 202
    537e:	8a 83       	std	Y+2, r24	; 0x02
    5380:	ea e9       	ldi	r30, 0x9A	; 154
    5382:	eb 83       	std	Y+3, r30	; 0x03
    5384:	fb e3       	ldi	r31, 0x3B	; 59
    5386:	fc 83       	std	Y+4, r31	; 0x04
    5388:	1d 82       	std	Y+5, r1	; 0x05
    538a:	1e 82       	std	Y+6, r1	; 0x06
    538c:	1f 82       	std	Y+7, r1	; 0x07
    538e:	18 86       	std	Y+8, r1	; 0x08
    5390:	00 e0       	ldi	r16, 0x00	; 0
    5392:	02 0d       	add	r16, r2
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	02 15       	cp	r16, r2
    5398:	08 f0       	brcs	.+2      	; 0x539c <_nrk_time_to_ticks+0x98>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	1a 81       	ldd	r17, Y+2	; 0x02
    539e:	13 0d       	add	r17, r3
    53a0:	a1 e0       	ldi	r26, 0x01	; 1
    53a2:	13 15       	cp	r17, r3
    53a4:	08 f0       	brcs	.+2      	; 0x53a8 <_nrk_time_to_ticks+0xa4>
    53a6:	a0 e0       	ldi	r26, 0x00	; 0
    53a8:	81 0f       	add	r24, r17
    53aa:	91 e0       	ldi	r25, 0x01	; 1
    53ac:	81 17       	cp	r24, r17
    53ae:	08 f0       	brcs	.+2      	; 0x53b2 <_nrk_time_to_ticks+0xae>
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	a9 2b       	or	r26, r25
    53b4:	18 2f       	mov	r17, r24
    53b6:	2b 81       	ldd	r18, Y+3	; 0x03
    53b8:	24 0d       	add	r18, r4
    53ba:	b1 e0       	ldi	r27, 0x01	; 1
    53bc:	24 15       	cp	r18, r4
    53be:	08 f0       	brcs	.+2      	; 0x53c2 <_nrk_time_to_ticks+0xbe>
    53c0:	b0 e0       	ldi	r27, 0x00	; 0
    53c2:	8a 2f       	mov	r24, r26
    53c4:	82 0f       	add	r24, r18
    53c6:	91 e0       	ldi	r25, 0x01	; 1
    53c8:	82 17       	cp	r24, r18
    53ca:	08 f0       	brcs	.+2      	; 0x53ce <_nrk_time_to_ticks+0xca>
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	b9 2b       	or	r27, r25
    53d0:	28 2f       	mov	r18, r24
    53d2:	3c 81       	ldd	r19, Y+4	; 0x04
    53d4:	35 0d       	add	r19, r5
    53d6:	a1 e0       	ldi	r26, 0x01	; 1
    53d8:	35 15       	cp	r19, r5
    53da:	08 f0       	brcs	.+2      	; 0x53de <_nrk_time_to_ticks+0xda>
    53dc:	a0 e0       	ldi	r26, 0x00	; 0
    53de:	8b 2f       	mov	r24, r27
    53e0:	83 0f       	add	r24, r19
    53e2:	91 e0       	ldi	r25, 0x01	; 1
    53e4:	83 17       	cp	r24, r19
    53e6:	08 f0       	brcs	.+2      	; 0x53ea <_nrk_time_to_ticks+0xe6>
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	a9 2b       	or	r26, r25
    53ec:	38 2f       	mov	r19, r24
    53ee:	4d 81       	ldd	r20, Y+5	; 0x05
    53f0:	46 0d       	add	r20, r6
    53f2:	b1 e0       	ldi	r27, 0x01	; 1
    53f4:	46 15       	cp	r20, r6
    53f6:	08 f0       	brcs	.+2      	; 0x53fa <_nrk_time_to_ticks+0xf6>
    53f8:	b0 e0       	ldi	r27, 0x00	; 0
    53fa:	8a 2f       	mov	r24, r26
    53fc:	84 0f       	add	r24, r20
    53fe:	91 e0       	ldi	r25, 0x01	; 1
    5400:	84 17       	cp	r24, r20
    5402:	08 f0       	brcs	.+2      	; 0x5406 <_nrk_time_to_ticks+0x102>
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	b9 2b       	or	r27, r25
    5408:	48 2f       	mov	r20, r24
    540a:	5e 81       	ldd	r21, Y+6	; 0x06
    540c:	57 0d       	add	r21, r7
    540e:	a1 e0       	ldi	r26, 0x01	; 1
    5410:	57 15       	cp	r21, r7
    5412:	08 f0       	brcs	.+2      	; 0x5416 <_nrk_time_to_ticks+0x112>
    5414:	a0 e0       	ldi	r26, 0x00	; 0
    5416:	8b 2f       	mov	r24, r27
    5418:	85 0f       	add	r24, r21
    541a:	91 e0       	ldi	r25, 0x01	; 1
    541c:	85 17       	cp	r24, r21
    541e:	08 f0       	brcs	.+2      	; 0x5422 <_nrk_time_to_ticks+0x11e>
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	a9 2b       	or	r26, r25
    5424:	58 2f       	mov	r21, r24
    5426:	6f 81       	ldd	r22, Y+7	; 0x07
    5428:	68 0d       	add	r22, r8
    542a:	f1 e0       	ldi	r31, 0x01	; 1
    542c:	68 15       	cp	r22, r8
    542e:	08 f0       	brcs	.+2      	; 0x5432 <_nrk_time_to_ticks+0x12e>
    5430:	f0 e0       	ldi	r31, 0x00	; 0
    5432:	9a 2f       	mov	r25, r26
    5434:	96 0f       	add	r25, r22
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	96 17       	cp	r25, r22
    543a:	08 f0       	brcs	.+2      	; 0x543e <_nrk_time_to_ticks+0x13a>
    543c:	80 e0       	ldi	r24, 0x00	; 0
    543e:	8f 2b       	or	r24, r31
    5440:	78 85       	ldd	r23, Y+8	; 0x08
    5442:	79 0d       	add	r23, r9
    5444:	87 0f       	add	r24, r23
    5446:	20 2e       	mov	r2, r16
    5448:	31 2e       	mov	r3, r17
    544a:	42 2e       	mov	r4, r18
    544c:	53 2e       	mov	r5, r19
    544e:	64 2e       	mov	r6, r20
    5450:	75 2e       	mov	r7, r21
    5452:	89 2e       	mov	r8, r25
    5454:	98 2e       	mov	r9, r24
    5456:	8a 2d       	mov	r24, r10
    5458:	99 27       	eor	r25, r25
    545a:	aa 27       	eor	r26, r26
    545c:	bb 27       	eor	r27, r27
    545e:	08 94       	sec
    5460:	a1 1c       	adc	r10, r1
    5462:	b1 1c       	adc	r11, r1
    5464:	8c 15       	cp	r24, r12
    5466:	9d 05       	cpc	r25, r13
    5468:	ae 05       	cpc	r26, r14
    546a:	bf 05       	cpc	r27, r15
    546c:	08 f4       	brcc	.+2      	; 0x5470 <_nrk_time_to_ticks+0x16c>
    546e:	85 cf       	rjmp	.-246    	; 0x537a <_nrk_time_to_ticks+0x76>
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5470:	23 eb       	ldi	r18, 0xB3	; 179
    5472:	a2 2e       	mov	r10, r18
    5474:	96 ee       	ldi	r25, 0xE6	; 230
    5476:	b9 2e       	mov	r11, r25
    5478:	8e e0       	ldi	r24, 0x0E	; 14
    547a:	c8 2e       	mov	r12, r24
    547c:	dd 24       	eor	r13, r13
    547e:	ee 24       	eor	r14, r14
    5480:	ff 24       	eor	r15, r15
    5482:	00 e0       	ldi	r16, 0x00	; 0
    5484:	10 e0       	ldi	r17, 0x00	; 0
    5486:	22 2d       	mov	r18, r2
    5488:	33 2d       	mov	r19, r3
    548a:	44 2d       	mov	r20, r4
    548c:	55 2d       	mov	r21, r5
    548e:	66 2d       	mov	r22, r6
    5490:	77 2d       	mov	r23, r7
    5492:	88 2d       	mov	r24, r8
    5494:	99 2d       	mov	r25, r9
    5496:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <__udivdi3>
    549a:	a2 2e       	mov	r10, r18
    549c:	b3 2e       	mov	r11, r19
    549e:	c5 01       	movw	r24, r10
    54a0:	07 c0       	rjmp	.+14     	; 0x54b0 <_nrk_time_to_ticks+0x1ac>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    54a2:	23 eb       	ldi	r18, 0xB3	; 179
    54a4:	36 ee       	ldi	r19, 0xE6	; 230
    54a6:	4e e0       	ldi	r20, 0x0E	; 14
    54a8:	50 e0       	ldi	r21, 0x00	; 0
    54aa:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    54ae:	c9 01       	movw	r24, r18
    54b0:	28 96       	adiw	r28, 0x08	; 8
    54b2:	0f b6       	in	r0, 0x3f	; 63
    54b4:	f8 94       	cli
    54b6:	de bf       	out	0x3e, r29	; 62
    54b8:	0f be       	out	0x3f, r0	; 63
    54ba:	cd bf       	out	0x3d, r28	; 61
    54bc:	df 91       	pop	r29
    54be:	cf 91       	pop	r28
    54c0:	1f 91       	pop	r17
    54c2:	0f 91       	pop	r16
    54c4:	ff 90       	pop	r15
    54c6:	ef 90       	pop	r14
    54c8:	df 90       	pop	r13
    54ca:	cf 90       	pop	r12
    54cc:	bf 90       	pop	r11
    54ce:	af 90       	pop	r10
    54d0:	9f 90       	pop	r9
    54d2:	8f 90       	pop	r8
    54d4:	7f 90       	pop	r7
    54d6:	6f 90       	pop	r6
    54d8:	5f 90       	pop	r5
    54da:	4f 90       	pop	r4
    54dc:	3f 90       	pop	r3
    54de:	2f 90       	pop	r2
    54e0:	08 95       	ret

000054e2 <_nrk_ticks_to_time>:
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
  
    54e2:	2f 92       	push	r2
    54e4:	3f 92       	push	r3
    54e6:	4f 92       	push	r4
    54e8:	5f 92       	push	r5
    54ea:	6f 92       	push	r6
    54ec:	7f 92       	push	r7
    54ee:	8f 92       	push	r8
    54f0:	9f 92       	push	r9
    54f2:	af 92       	push	r10
    54f4:	bf 92       	push	r11
    54f6:	cf 92       	push	r12
    54f8:	df 92       	push	r13
    54fa:	ef 92       	push	r14
    54fc:	ff 92       	push	r15
    54fe:	0f 93       	push	r16
    5500:	1f 93       	push	r17
    5502:	cf 93       	push	r28
    5504:	df 93       	push	r29
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
    550a:	28 97       	sbiw	r28, 0x08	; 8
    550c:	0f b6       	in	r0, 0x3f	; 63
    550e:	f8 94       	cli
    5510:	de bf       	out	0x3e, r29	; 62
    5512:	0f be       	out	0x3f, r0	; 63
    5514:	cd bf       	out	0x3d, r28	; 61
    5516:	7b 01       	movw	r14, r22
    5518:	8c 01       	movw	r16, r24
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    551a:	73 70       	andi	r23, 0x03	; 3
    551c:	80 70       	andi	r24, 0x00	; 0
    551e:	90 70       	andi	r25, 0x00	; 0
    5520:	23 eb       	ldi	r18, 0xB3	; 179
    5522:	36 ee       	ldi	r19, 0xE6	; 230
    5524:	4e e0       	ldi	r20, 0x0E	; 14
    5526:	50 e0       	ldi	r21, 0x00	; 0
    5528:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    552c:	6d 83       	std	Y+5, r22	; 0x05
    552e:	7e 83       	std	Y+6, r23	; 0x06
    5530:	8f 83       	std	Y+7, r24	; 0x07
    5532:	98 87       	std	Y+8, r25	; 0x08
    5534:	3a e0       	ldi	r19, 0x0A	; 10
    5536:	16 95       	lsr	r17
    5538:	07 95       	ror	r16
    553a:	f7 94       	ror	r15
    553c:	e7 94       	ror	r14
    553e:	3a 95       	dec	r19
    5540:	d1 f7       	brne	.-12     	; 0x5536 <_nrk_ticks_to_time+0x54>
    5542:	e9 82       	std	Y+1, r14	; 0x01
    5544:	fa 82       	std	Y+2, r15	; 0x02
    5546:	0b 83       	std	Y+3, r16	; 0x03
    5548:	1c 83       	std	Y+4, r17	; 0x04
    554a:	98 85       	ldd	r25, Y+8	; 0x08
    554c:	29 80       	ldd	r2, Y+1	; 0x01
    554e:	3a 80       	ldd	r3, Y+2	; 0x02
    5550:	4b 80       	ldd	r4, Y+3	; 0x03
    5552:	5c 80       	ldd	r5, Y+4	; 0x04
    5554:	6d 80       	ldd	r6, Y+5	; 0x05
    5556:	7e 80       	ldd	r7, Y+6	; 0x06
    5558:	8f 80       	ldd	r8, Y+7	; 0x07
	}
    555a:	22 2d       	mov	r18, r2
    555c:	33 2d       	mov	r19, r3
    555e:	44 2d       	mov	r20, r4
    5560:	55 2d       	mov	r21, r5
    5562:	66 2d       	mov	r22, r6
    5564:	77 2d       	mov	r23, r7
    5566:	88 2d       	mov	r24, r8
    5568:	28 96       	adiw	r28, 0x08	; 8
    556a:	0f b6       	in	r0, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	de bf       	out	0x3e, r29	; 62
    5570:	0f be       	out	0x3f, r0	; 63
    5572:	cd bf       	out	0x3d, r28	; 61
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	1f 91       	pop	r17
    557a:	0f 91       	pop	r16
    557c:	ff 90       	pop	r15
    557e:	ef 90       	pop	r14
    5580:	df 90       	pop	r13
    5582:	cf 90       	pop	r12
    5584:	bf 90       	pop	r11
    5586:	af 90       	pop	r10
    5588:	9f 90       	pop	r9
    558a:	8f 90       	pop	r8
    558c:	7f 90       	pop	r7
    558e:	6f 90       	pop	r6
    5590:	5f 90       	pop	r5
    5592:	4f 90       	pop	r4
    5594:	3f 90       	pop	r3
    5596:	2f 90       	pop	r2
    5598:	08 95       	ret

0000559a <_nrk_time_to_ticks_long>:
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    559a:	2f 92       	push	r2
    559c:	3f 92       	push	r3
    559e:	4f 92       	push	r4
    55a0:	5f 92       	push	r5
    55a2:	6f 92       	push	r6
    55a4:	7f 92       	push	r7
    55a6:	8f 92       	push	r8
    55a8:	9f 92       	push	r9
    55aa:	af 92       	push	r10
    55ac:	bf 92       	push	r11
    55ae:	cf 92       	push	r12
    55b0:	df 92       	push	r13
    55b2:	ef 92       	push	r14
    55b4:	ff 92       	push	r15
    55b6:	0f 93       	push	r16
    55b8:	1f 93       	push	r17
    55ba:	cf 93       	push	r28
    55bc:	df 93       	push	r29
    55be:	cd b7       	in	r28, 0x3d	; 61
    55c0:	de b7       	in	r29, 0x3e	; 62
    55c2:	28 97       	sbiw	r28, 0x08	; 8
    55c4:	0f b6       	in	r0, 0x3f	; 63
    55c6:	f8 94       	cli
    55c8:	de bf       	out	0x3e, r29	; 62
    55ca:	0f be       	out	0x3f, r0	; 63
    55cc:	cd bf       	out	0x3d, r28	; 61
    55ce:	fc 01       	movw	r30, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	
    55d0:	c0 80       	ld	r12, Z
    55d2:	d1 80       	ldd	r13, Z+1	; 0x01
    55d4:	e2 80       	ldd	r14, Z+2	; 0x02
    55d6:	f3 80       	ldd	r15, Z+3	; 0x03
    55d8:	c1 14       	cp	r12, r1
    55da:	d1 04       	cpc	r13, r1
    55dc:	e1 04       	cpc	r14, r1
    55de:	f1 04       	cpc	r15, r1
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <_nrk_time_to_ticks_long+0x4a>
    55e2:	a2 c0       	rjmp	.+324    	; 0x5728 <_nrk_time_to_ticks_long+0x18e>

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    55e4:	24 80       	ldd	r2, Z+4	; 0x04
    55e6:	35 80       	ldd	r3, Z+5	; 0x05
    55e8:	46 80       	ldd	r4, Z+6	; 0x06
    55ea:	57 80       	ldd	r5, Z+7	; 0x07
    55ec:	66 24       	eor	r6, r6
    55ee:	77 24       	eor	r7, r7
    55f0:	88 24       	eor	r8, r8
    55f2:	99 24       	eor	r9, r9
    55f4:	aa 24       	eor	r10, r10
    55f6:	bb 24       	eor	r11, r11
    55f8:	6e c0       	rjmp	.+220    	; 0x56d6 <_nrk_time_to_ticks_long+0x13c>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    55fa:	19 82       	std	Y+1, r1	; 0x01
    55fc:	8a ec       	ldi	r24, 0xCA	; 202
    55fe:	8a 83       	std	Y+2, r24	; 0x02
    5600:	ea e9       	ldi	r30, 0x9A	; 154
    5602:	eb 83       	std	Y+3, r30	; 0x03
    5604:	fb e3       	ldi	r31, 0x3B	; 59
    5606:	fc 83       	std	Y+4, r31	; 0x04
    5608:	1d 82       	std	Y+5, r1	; 0x05
    560a:	1e 82       	std	Y+6, r1	; 0x06
    560c:	1f 82       	std	Y+7, r1	; 0x07
    560e:	18 86       	std	Y+8, r1	; 0x08
    5610:	00 e0       	ldi	r16, 0x00	; 0
    5612:	02 0d       	add	r16, r2
    5614:	81 e0       	ldi	r24, 0x01	; 1
    5616:	02 15       	cp	r16, r2
    5618:	08 f0       	brcs	.+2      	; 0x561c <_nrk_time_to_ticks_long+0x82>
    561a:	80 e0       	ldi	r24, 0x00	; 0
    561c:	1a 81       	ldd	r17, Y+2	; 0x02
    561e:	13 0d       	add	r17, r3
    5620:	a1 e0       	ldi	r26, 0x01	; 1
    5622:	13 15       	cp	r17, r3
    5624:	08 f0       	brcs	.+2      	; 0x5628 <_nrk_time_to_ticks_long+0x8e>
    5626:	a0 e0       	ldi	r26, 0x00	; 0
    5628:	81 0f       	add	r24, r17
    562a:	91 e0       	ldi	r25, 0x01	; 1
    562c:	81 17       	cp	r24, r17
    562e:	08 f0       	brcs	.+2      	; 0x5632 <_nrk_time_to_ticks_long+0x98>
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	a9 2b       	or	r26, r25
    5634:	18 2f       	mov	r17, r24
    5636:	2b 81       	ldd	r18, Y+3	; 0x03
    5638:	24 0d       	add	r18, r4
    563a:	b1 e0       	ldi	r27, 0x01	; 1
    563c:	24 15       	cp	r18, r4
    563e:	08 f0       	brcs	.+2      	; 0x5642 <_nrk_time_to_ticks_long+0xa8>
    5640:	b0 e0       	ldi	r27, 0x00	; 0
    5642:	8a 2f       	mov	r24, r26
    5644:	82 0f       	add	r24, r18
    5646:	91 e0       	ldi	r25, 0x01	; 1
    5648:	82 17       	cp	r24, r18
    564a:	08 f0       	brcs	.+2      	; 0x564e <_nrk_time_to_ticks_long+0xb4>
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	b9 2b       	or	r27, r25
    5650:	28 2f       	mov	r18, r24
    5652:	3c 81       	ldd	r19, Y+4	; 0x04
    5654:	35 0d       	add	r19, r5
    5656:	a1 e0       	ldi	r26, 0x01	; 1
    5658:	35 15       	cp	r19, r5
    565a:	08 f0       	brcs	.+2      	; 0x565e <_nrk_time_to_ticks_long+0xc4>
    565c:	a0 e0       	ldi	r26, 0x00	; 0
    565e:	8b 2f       	mov	r24, r27
    5660:	83 0f       	add	r24, r19
    5662:	91 e0       	ldi	r25, 0x01	; 1
    5664:	83 17       	cp	r24, r19
    5666:	08 f0       	brcs	.+2      	; 0x566a <_nrk_time_to_ticks_long+0xd0>
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	a9 2b       	or	r26, r25
    566c:	38 2f       	mov	r19, r24
    566e:	4d 81       	ldd	r20, Y+5	; 0x05
    5670:	46 0d       	add	r20, r6
    5672:	b1 e0       	ldi	r27, 0x01	; 1
    5674:	46 15       	cp	r20, r6
    5676:	08 f0       	brcs	.+2      	; 0x567a <_nrk_time_to_ticks_long+0xe0>
    5678:	b0 e0       	ldi	r27, 0x00	; 0
    567a:	8a 2f       	mov	r24, r26
    567c:	84 0f       	add	r24, r20
    567e:	91 e0       	ldi	r25, 0x01	; 1
    5680:	84 17       	cp	r24, r20
    5682:	08 f0       	brcs	.+2      	; 0x5686 <_nrk_time_to_ticks_long+0xec>
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	b9 2b       	or	r27, r25
    5688:	48 2f       	mov	r20, r24
    568a:	5e 81       	ldd	r21, Y+6	; 0x06
    568c:	57 0d       	add	r21, r7
    568e:	a1 e0       	ldi	r26, 0x01	; 1
    5690:	57 15       	cp	r21, r7
    5692:	08 f0       	brcs	.+2      	; 0x5696 <_nrk_time_to_ticks_long+0xfc>
    5694:	a0 e0       	ldi	r26, 0x00	; 0
    5696:	8b 2f       	mov	r24, r27
    5698:	85 0f       	add	r24, r21
    569a:	91 e0       	ldi	r25, 0x01	; 1
    569c:	85 17       	cp	r24, r21
    569e:	08 f0       	brcs	.+2      	; 0x56a2 <_nrk_time_to_ticks_long+0x108>
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	a9 2b       	or	r26, r25
    56a4:	58 2f       	mov	r21, r24
    56a6:	6f 81       	ldd	r22, Y+7	; 0x07
    56a8:	68 0d       	add	r22, r8
    56aa:	f1 e0       	ldi	r31, 0x01	; 1
    56ac:	68 15       	cp	r22, r8
    56ae:	08 f0       	brcs	.+2      	; 0x56b2 <_nrk_time_to_ticks_long+0x118>
    56b0:	f0 e0       	ldi	r31, 0x00	; 0
    56b2:	9a 2f       	mov	r25, r26
    56b4:	96 0f       	add	r25, r22
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	96 17       	cp	r25, r22
    56ba:	08 f0       	brcs	.+2      	; 0x56be <_nrk_time_to_ticks_long+0x124>
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	8f 2b       	or	r24, r31
    56c0:	78 85       	ldd	r23, Y+8	; 0x08
    56c2:	79 0d       	add	r23, r9
    56c4:	87 0f       	add	r24, r23
    56c6:	20 2e       	mov	r2, r16
    56c8:	31 2e       	mov	r3, r17
    56ca:	42 2e       	mov	r4, r18
    56cc:	53 2e       	mov	r5, r19
    56ce:	64 2e       	mov	r6, r20
    56d0:	75 2e       	mov	r7, r21
    56d2:	89 2e       	mov	r8, r25
    56d4:	98 2e       	mov	r9, r24
    56d6:	8a 2d       	mov	r24, r10
    56d8:	99 27       	eor	r25, r25
    56da:	aa 27       	eor	r26, r26
    56dc:	bb 27       	eor	r27, r27
    56de:	08 94       	sec
    56e0:	a1 1c       	adc	r10, r1
    56e2:	b1 1c       	adc	r11, r1
    56e4:	8c 15       	cp	r24, r12
    56e6:	9d 05       	cpc	r25, r13
    56e8:	ae 05       	cpc	r26, r14
    56ea:	bf 05       	cpc	r27, r15
    56ec:	08 f4       	brcc	.+2      	; 0x56f0 <_nrk_time_to_ticks_long+0x156>
    56ee:	85 cf       	rjmp	.-246    	; 0x55fa <_nrk_time_to_ticks_long+0x60>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    56f0:	63 eb       	ldi	r22, 0xB3	; 179
    56f2:	a6 2e       	mov	r10, r22
    56f4:	56 ee       	ldi	r21, 0xE6	; 230
    56f6:	b5 2e       	mov	r11, r21
    56f8:	4e e0       	ldi	r20, 0x0E	; 14
    56fa:	c4 2e       	mov	r12, r20
    56fc:	dd 24       	eor	r13, r13
    56fe:	ee 24       	eor	r14, r14
    5700:	ff 24       	eor	r15, r15
    5702:	00 e0       	ldi	r16, 0x00	; 0
    5704:	10 e0       	ldi	r17, 0x00	; 0
    5706:	22 2d       	mov	r18, r2
    5708:	33 2d       	mov	r19, r3
    570a:	44 2d       	mov	r20, r4
    570c:	55 2d       	mov	r21, r5
    570e:	66 2d       	mov	r22, r6
    5710:	77 2d       	mov	r23, r7
    5712:	88 2d       	mov	r24, r8
    5714:	99 2d       	mov	r25, r9
    5716:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <__udivdi3>
    571a:	a2 2e       	mov	r10, r18
    571c:	b3 2e       	mov	r11, r19
    571e:	c4 2e       	mov	r12, r20
    5720:	d5 2e       	mov	r13, r21
    5722:	a6 01       	movw	r20, r12
    5724:	95 01       	movw	r18, r10
    5726:	0a c0       	rjmp	.+20     	; 0x573c <_nrk_time_to_ticks_long+0x1a2>
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    5728:	64 81       	ldd	r22, Z+4	; 0x04
    572a:	75 81       	ldd	r23, Z+5	; 0x05
    572c:	86 81       	ldd	r24, Z+6	; 0x06
    572e:	97 81       	ldd	r25, Z+7	; 0x07
    5730:	23 eb       	ldi	r18, 0xB3	; 179
    5732:	36 ee       	ldi	r19, 0xE6	; 230
    5734:	4e e0       	ldi	r20, 0x0E	; 14
    5736:	50 e0       	ldi	r21, 0x00	; 0
    5738:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    573c:	ca 01       	movw	r24, r20
    573e:	b9 01       	movw	r22, r18
    5740:	28 96       	adiw	r28, 0x08	; 8
    5742:	0f b6       	in	r0, 0x3f	; 63
    5744:	f8 94       	cli
    5746:	de bf       	out	0x3e, r29	; 62
    5748:	0f be       	out	0x3f, r0	; 63
    574a:	cd bf       	out	0x3d, r28	; 61
    574c:	df 91       	pop	r29
    574e:	cf 91       	pop	r28
    5750:	1f 91       	pop	r17
    5752:	0f 91       	pop	r16
    5754:	ff 90       	pop	r15
    5756:	ef 90       	pop	r14
    5758:	df 90       	pop	r13
    575a:	cf 90       	pop	r12
    575c:	bf 90       	pop	r11
    575e:	af 90       	pop	r10
    5760:	9f 90       	pop	r9
    5762:	8f 90       	pop	r8
    5764:	7f 90       	pop	r7
    5766:	6f 90       	pop	r6
    5768:	5f 90       	pop	r5
    576a:	4f 90       	pop	r4
    576c:	3f 90       	pop	r3
    576e:	2f 90       	pop	r2
    5770:	08 95       	ret

00005772 <nrk_time_get>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    5772:	ef 92       	push	r14
    5774:	ff 92       	push	r15
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	ec 01       	movw	r28, r24

    5780:	80 91 5e 07 	lds	r24, 0x075E
    5784:	90 91 5f 07 	lds	r25, 0x075F
    5788:	a0 91 60 07 	lds	r26, 0x0760
    578c:	b0 91 61 07 	lds	r27, 0x0761
    5790:	88 83       	st	Y, r24
    5792:	99 83       	std	Y+1, r25	; 0x01
    5794:	aa 83       	std	Y+2, r26	; 0x02
    5796:	bb 83       	std	Y+3, r27	; 0x03
inline void nrk_int_disable(void) {
    5798:	e0 90 62 07 	lds	r14, 0x0762
    579c:	f0 90 63 07 	lds	r15, 0x0763
    57a0:	00 91 64 07 	lds	r16, 0x0764
    57a4:	10 91 65 07 	lds	r17, 0x0765
    57a8:	ec 82       	std	Y+4, r14	; 0x04
    57aa:	fd 82       	std	Y+5, r15	; 0x05
    57ac:	0e 83       	std	Y+6, r16	; 0x06
    57ae:	1f 83       	std	Y+7, r17	; 0x07
  DISABLE_GLOBAL_INT();
};
    57b0:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    57b4:	99 27       	eor	r25, r25
    57b6:	aa 27       	eor	r26, r26
    57b8:	bb 27       	eor	r27, r27
    57ba:	bc 01       	movw	r22, r24
    57bc:	cd 01       	movw	r24, r26
    57be:	23 eb       	ldi	r18, 0xB3	; 179
    57c0:	36 ee       	ldi	r19, 0xE6	; 230
    57c2:	4e e0       	ldi	r20, 0x0E	; 14
    57c4:	50 e0       	ldi	r21, 0x00	; 0
    57c6:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    57ca:	e6 0e       	add	r14, r22
    57cc:	f7 1e       	adc	r15, r23
    57ce:	08 1f       	adc	r16, r24
    57d0:	19 1f       	adc	r17, r25
    57d2:	ec 82       	std	Y+4, r14	; 0x04
    57d4:	fd 82       	std	Y+5, r15	; 0x05
    57d6:	0e 83       	std	Y+6, r16	; 0x06
    57d8:	1f 83       	std	Y+7, r17	; 0x07
    57da:	13 c0       	rjmp	.+38     	; 0x5802 <nrk_time_get+0x90>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    57dc:	80 50       	subi	r24, 0x00	; 0
    57de:	9a 4c       	sbci	r25, 0xCA	; 202
    57e0:	aa 49       	sbci	r26, 0x9A	; 154
    57e2:	bb 43       	sbci	r27, 0x3B	; 59
    57e4:	8c 83       	std	Y+4, r24	; 0x04
    57e6:	9d 83       	std	Y+5, r25	; 0x05
    57e8:	ae 83       	std	Y+6, r26	; 0x06
    57ea:	bf 83       	std	Y+7, r27	; 0x07
};
    57ec:	88 81       	ld	r24, Y
    57ee:	99 81       	ldd	r25, Y+1	; 0x01
    57f0:	aa 81       	ldd	r26, Y+2	; 0x02
    57f2:	bb 81       	ldd	r27, Y+3	; 0x03
    57f4:	01 96       	adiw	r24, 0x01	; 1
    57f6:	a1 1d       	adc	r26, r1
    57f8:	b1 1d       	adc	r27, r1
    57fa:	88 83       	st	Y, r24
    57fc:	99 83       	std	Y+1, r25	; 0x01
    57fe:	aa 83       	std	Y+2, r26	; 0x02
    5800:	bb 83       	std	Y+3, r27	; 0x03
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    5802:	8c 81       	ldd	r24, Y+4	; 0x04
    5804:	9d 81       	ldd	r25, Y+5	; 0x05
    5806:	ae 81       	ldd	r26, Y+6	; 0x06
    5808:	bf 81       	ldd	r27, Y+7	; 0x07
    580a:	80 30       	cpi	r24, 0x00	; 0
    580c:	2a ec       	ldi	r18, 0xCA	; 202
    580e:	92 07       	cpc	r25, r18
    5810:	2a e9       	ldi	r18, 0x9A	; 154
    5812:	a2 07       	cpc	r26, r18
    5814:	2b e3       	ldi	r18, 0x3B	; 59
    5816:	b2 07       	cpc	r27, r18
    5818:	08 f7       	brcc	.-62     	; 0x57dc <nrk_time_get+0x6a>
    581a:	df 91       	pop	r29
    581c:	cf 91       	pop	r28
    581e:	1f 91       	pop	r17
    5820:	0f 91       	pop	r16
    5822:	ff 90       	pop	r15
    5824:	ef 90       	pop	r14
    5826:	08 95       	ret

00005828 <nrk_idle_task>:
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    5828:	0e 94 ef 21 	call	0x43de	; 0x43de <nrk_stack_check>
#include <nrk_stats.h>

    582c:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <_nrk_get_next_wakeup>
    5830:	8b 30       	cpi	r24, 0x0B	; 11
    5832:	30 f4       	brcc	.+12     	; 0x5840 <nrk_idle_task+0x18>
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	80 93 5b 07 	sts	0x075B, r24
};
    583a:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <nrk_idle>
    583e:	09 c0       	rjmp	.+18     	; 0x5852 <nrk_idle_task+0x2a>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    5840:	8a e0       	ldi	r24, 0x0A	; 10
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <nrk_spin_wait_us>
uint8_t nrk_task_init_cnt;
    5848:	82 e0       	ldi	r24, 0x02	; 2
    584a:	80 93 5b 07 	sts	0x075B, r24

    584e:	0e 94 ef 32 	call	0x65de	; 0x65de <nrk_sleep>
void nrk_halt()
{
nrk_int_disable();
while(1);
}

    5852:	80 91 25 06 	lds	r24, 0x0625
    5856:	85 35       	cpi	r24, 0x55	; 85
    5858:	19 f0       	breq	.+6      	; 0x5860 <nrk_idle_task+0x38>
    585a:	88 e0       	ldi	r24, 0x08	; 8
    585c:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
    5860:	80 91 7e 21 	lds	r24, 0x217E
    5864:	85 35       	cpi	r24, 0x55	; 85
    5866:	01 f3       	breq	.-64     	; 0x5828 <nrk_idle_task>
    5868:	88 e0       	ldi	r24, 0x08	; 8
    586a:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
    586e:	dc cf       	rjmp	.-72     	; 0x5828 <nrk_idle_task>

00005870 <_nrk_scheduler>:
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    5870:	8f 92       	push	r8
    5872:	9f 92       	push	r9
    5874:	af 92       	push	r10
    5876:	bf 92       	push	r11
    5878:	cf 92       	push	r12
    587a:	df 92       	push	r13
    587c:	ef 92       	push	r14
    587e:	ff 92       	push	r15
    5880:	0f 93       	push	r16
    5882:	1f 93       	push	r17
    5884:	cf 93       	push	r28
    5886:	df 93       	push	r29

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    5888:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
uint8_t nrk_task_init_cnt;


void nrk_halt()
    588c:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <_nrk_high_speed_timer_reset>
{
    5890:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <_nrk_high_speed_timer_get>
    5894:	4c 01       	movw	r8, r24
nrk_int_disable();
while(1);
    5896:	8a ef       	ldi	r24, 0xFA	; 250
    5898:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    589c:	60 91 aa 06 	lds	r22, 0x06AA
    58a0:	77 27       	eor	r23, r23
    58a2:	88 27       	eor	r24, r24
    58a4:	99 27       	eor	r25, r25
    58a6:	23 eb       	ldi	r18, 0xB3	; 179
    58a8:	36 ee       	ldi	r19, 0xE6	; 230
    58aa:	4e e0       	ldi	r20, 0x0E	; 14
    58ac:	50 e0       	ldi	r21, 0x00	; 0
    58ae:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    58b2:	7b 01       	movw	r14, r22
    58b4:	8c 01       	movw	r16, r24
    58b6:	80 91 62 07 	lds	r24, 0x0762
    58ba:	90 91 63 07 	lds	r25, 0x0763
    58be:	a0 91 64 07 	lds	r26, 0x0764
    58c2:	b0 91 65 07 	lds	r27, 0x0765
    58c6:	e8 0e       	add	r14, r24
    58c8:	f9 1e       	adc	r15, r25
    58ca:	0a 1f       	adc	r16, r26
    58cc:	1b 1f       	adc	r17, r27
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    58ce:	c8 01       	movw	r24, r16
    58d0:	b7 01       	movw	r22, r14
    58d2:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    58d6:	a8 01       	movw	r20, r16
    58d8:	97 01       	movw	r18, r14
    58da:	26 1b       	sub	r18, r22
    58dc:	37 0b       	sbc	r19, r23
    58de:	48 0b       	sbc	r20, r24
    58e0:	59 0b       	sbc	r21, r25
    58e2:	80 91 5e 07 	lds	r24, 0x075E
    58e6:	90 91 5f 07 	lds	r25, 0x075F
    58ea:	a0 91 60 07 	lds	r26, 0x0760
    58ee:	b0 91 61 07 	lds	r27, 0x0761
    58f2:	1b c0       	rjmp	.+54     	; 0x592a <_nrk_scheduler+0xba>
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    58f4:	e1 2c       	mov	r14, r1
    58f6:	66 e3       	ldi	r22, 0x36	; 54
    58f8:	f6 2e       	mov	r15, r22
    58fa:	65 e6       	ldi	r22, 0x65	; 101
    58fc:	06 2f       	mov	r16, r22
    58fe:	64 ec       	ldi	r22, 0xC4	; 196
    5900:	16 2f       	mov	r17, r22
    5902:	e2 0e       	add	r14, r18
    5904:	f3 1e       	adc	r15, r19
    5906:	04 1f       	adc	r16, r20
    5908:	15 1f       	adc	r17, r21
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    590a:	c8 01       	movw	r24, r16
    590c:	b7 01       	movw	r22, r14
    590e:	23 eb       	ldi	r18, 0xB3	; 179
    5910:	36 ee       	ldi	r19, 0xE6	; 230
    5912:	4e e0       	ldi	r20, 0x0E	; 14
    5914:	50 e0       	ldi	r21, 0x00	; 0
    5916:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    591a:	a8 01       	movw	r20, r16
    591c:	97 01       	movw	r18, r14
    591e:	26 1b       	sub	r18, r22
    5920:	37 0b       	sbc	r19, r23
    5922:	48 0b       	sbc	r20, r24
    5924:	59 0b       	sbc	r21, r25
    5926:	d6 01       	movw	r26, r12
    5928:	c5 01       	movw	r24, r10
    592a:	5c 01       	movw	r10, r24
    592c:	6d 01       	movw	r12, r26
    592e:	08 94       	sec
    5930:	a1 1c       	adc	r10, r1
    5932:	b1 1c       	adc	r11, r1
    5934:	c1 1c       	adc	r12, r1
    5936:	d1 1c       	adc	r13, r1
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    5938:	20 30       	cpi	r18, 0x00	; 0
    593a:	6a ec       	ldi	r22, 0xCA	; 202
    593c:	36 07       	cpc	r19, r22
    593e:	6a e9       	ldi	r22, 0x9A	; 154
    5940:	46 07       	cpc	r20, r22
    5942:	6b e3       	ldi	r22, 0x3B	; 59
    5944:	56 07       	cpc	r21, r22
    5946:	b0 f6       	brcc	.-84     	; 0x58f4 <_nrk_scheduler+0x84>
    5948:	80 93 5e 07 	sts	0x075E, r24
    594c:	90 93 5f 07 	sts	0x075F, r25
    5950:	a0 93 60 07 	sts	0x0760, r26
    5954:	b0 93 61 07 	sts	0x0761, r27
    5958:	20 93 62 07 	sts	0x0762, r18
    595c:	30 93 63 07 	sts	0x0763, r19
    5960:	40 93 64 07 	sts	0x0764, r20
    5964:	50 93 65 07 	sts	0x0765, r21
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    5968:	e0 91 67 07 	lds	r30, 0x0767
    596c:	f0 91 68 07 	lds	r31, 0x0768
    5970:	85 81       	ldd	r24, Z+5	; 0x05
    5972:	88 23       	and	r24, r24
    5974:	19 f1       	breq	.+70     	; 0x59bc <_nrk_scheduler+0x14c>
    5976:	81 85       	ldd	r24, Z+9	; 0x09
    5978:	84 30       	cpi	r24, 0x04	; 4
    597a:	01 f1       	breq	.+64     	; 0x59bc <_nrk_scheduler+0x14c>
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    597c:	87 81       	ldd	r24, Z+7	; 0x07
    597e:	82 30       	cpi	r24, 0x02	; 2
    5980:	29 f0       	breq	.+10     	; 0x598c <_nrk_scheduler+0x11c>
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    5982:	88 23       	and	r24, r24
    5984:	41 f0       	breq	.+16     	; 0x5996 <_nrk_scheduler+0x126>
    5986:	86 81       	ldd	r24, Z+6	; 0x06
    5988:	88 23       	and	r24, r24
    598a:	11 f4       	brne	.+4      	; 0x5990 <_nrk_scheduler+0x120>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    598c:	85 e0       	ldi	r24, 0x05	; 5
    598e:	01 c0       	rjmp	.+2      	; 0x5992 <_nrk_scheduler+0x122>
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    5990:	83 e0       	ldi	r24, 0x03	; 3
    5992:	81 87       	std	Z+9, r24	; 0x09
    5994:	0c c0       	rjmp	.+24     	; 0x59ae <_nrk_scheduler+0x13e>
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    5996:	83 e0       	ldi	r24, 0x03	; 3
    5998:	81 87       	std	Z+9, r24	; 0x09
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    599a:	e0 91 67 07 	lds	r30, 0x0767
    599e:	f0 91 68 07 	lds	r31, 0x0768
    59a2:	17 82       	std	Z+7, r1	; 0x07
    #endif
    59a4:	e0 91 67 07 	lds	r30, 0x0767
    59a8:	f0 91 68 07 	lds	r31, 0x0768
    59ac:	16 82       	std	Z+6, r1	; 0x06
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    59ae:	e0 91 67 07 	lds	r30, 0x0767
    59b2:	f0 91 68 07 	lds	r31, 0x0768
    59b6:	80 85       	ldd	r24, Z+8	; 0x08
    59b8:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <nrk_rem_from_readyQ>
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    59bc:	e0 91 67 07 	lds	r30, 0x0767
    59c0:	f0 91 68 07 	lds	r31, 0x0768
    59c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    59c6:	96 8d       	ldd	r25, Z+30	; 0x1e
    59c8:	89 2b       	or	r24, r25
    59ca:	91 f1       	breq	.+100    	; 0x5a30 <_nrk_scheduler+0x1c0>
    59cc:	60 85       	ldd	r22, Z+8	; 0x08
    59ce:	66 23       	and	r22, r22
    59d0:	79 f1       	breq	.+94     	; 0x5a30 <_nrk_scheduler+0x1c0>
    59d2:	81 85       	ldd	r24, Z+9	; 0x09
    59d4:	84 30       	cpi	r24, 0x04	; 4
    59d6:	61 f1       	breq	.+88     	; 0x5a30 <_nrk_scheduler+0x1c0>
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    59d8:	21 8d       	ldd	r18, Z+25	; 0x19
    59da:	32 8d       	ldd	r19, Z+26	; 0x1a
    59dc:	80 91 aa 06 	lds	r24, 0x06AA
    59e0:	99 27       	eor	r25, r25
    59e2:	28 17       	cp	r18, r24
    59e4:	39 07       	cpc	r19, r25
    59e6:	50 f4       	brcc	.+20     	; 0x59fc <_nrk_scheduler+0x18c>

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif

    59e8:	82 e0       	ldi	r24, 0x02	; 2
    59ea:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    #ifdef NRK_MAX_RESERVES 
    59ee:	e0 91 67 07 	lds	r30, 0x0767
    59f2:	f0 91 68 07 	lds	r31, 0x0768
    59f6:	12 8e       	std	Z+26, r1	; 0x1a
    59f8:	11 8e       	std	Z+25, r1	; 0x19
    59fa:	04 c0       	rjmp	.+8      	; 0x5a04 <_nrk_scheduler+0x194>
    // Setup the reserve structures
    _nrk_reserve_init();
    59fc:	28 1b       	sub	r18, r24
    59fe:	39 0b       	sbc	r19, r25
    5a00:	32 8f       	std	Z+26, r19	; 0x1a
    5a02:	21 8f       	std	Z+25, r18	; 0x19
    #endif

    5a04:	e0 91 67 07 	lds	r30, 0x0767
    5a08:	f0 91 68 07 	lds	r31, 0x0768
    5a0c:	10 85       	ldd	r17, Z+8	; 0x08
    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

    5a0e:	81 8d       	ldd	r24, Z+25	; 0x19
    5a10:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a12:	89 2b       	or	r24, r25
    5a14:	69 f4       	brne	.+26     	; 0x5a30 <_nrk_scheduler+0x1c0>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    nrk_sem_list[i].value=-1;
    5a16:	61 2f       	mov	r22, r17
    5a18:	83 e0       	ldi	r24, 0x03	; 3
    5a1a:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    nrk_sem_list[i].resource_ceiling=-1;
    5a1e:	e0 91 67 07 	lds	r30, 0x0767
    5a22:	f0 91 68 07 	lds	r31, 0x0768
    5a26:	83 e0       	ldi	r24, 0x03	; 3
    5a28:	81 87       	std	Z+9, r24	; 0x09
    //nrk_resource_count[i]=-1;
    5a2a:	81 2f       	mov	r24, r17
    5a2c:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <nrk_rem_from_readyQ>
    5a30:	ca ec       	ldi	r28, 0xCA	; 202
    5a32:	d6 e0       	ldi	r29, 0x06	; 6
    5a34:	00 e6       	ldi	r16, 0x60	; 96
    5a36:	1a ee       	ldi	r17, 0xEA	; 234
    5a38:	cc 24       	eor	r12, r12
    5a3a:	dd 24       	eor	r13, r13
    5a3c:	ec 2d       	mov	r30, r12
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
    5a3e:	88 85       	ldd	r24, Y+8	; 0x08
    5a40:	8f 3f       	cpi	r24, 0xFF	; 255
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <_nrk_scheduler+0x1d6>
    5a44:	94 c0       	rjmp	.+296    	; 0x5b6e <_nrk_scheduler+0x2fe>
  
    5a46:	1d 82       	std	Y+5, r1	; 0x05
       
    5a48:	88 23       	and	r24, r24
    5a4a:	91 f1       	breq	.+100    	; 0x5ab0 <_nrk_scheduler+0x240>
    5a4c:	89 85       	ldd	r24, Y+9	; 0x09
    5a4e:	84 30       	cpi	r24, 0x04	; 4
    5a50:	79 f1       	breq	.+94     	; 0x5ab0 <_nrk_scheduler+0x240>
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    5a52:	2d 89       	ldd	r18, Y+21	; 0x15
    5a54:	3e 89       	ldd	r19, Y+22	; 0x16
    5a56:	80 91 aa 06 	lds	r24, 0x06AA
    5a5a:	99 27       	eor	r25, r25
    5a5c:	28 17       	cp	r18, r24
    5a5e:	39 07       	cpc	r19, r25
    5a60:	28 f0       	brcs	.+10     	; 0x5a6c <_nrk_scheduler+0x1fc>
	{
    5a62:	28 1b       	sub	r18, r24
    5a64:	39 0b       	sbc	r19, r25
    5a66:	3e 8b       	std	Y+22, r19	; 0x16
    5a68:	2d 8b       	std	Y+21, r18	; 0x15
    5a6a:	02 c0       	rjmp	.+4      	; 0x5a70 <_nrk_scheduler+0x200>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    5a6c:	1e 8a       	std	Y+22, r1	; 0x16
    5a6e:	1d 8a       	std	Y+21, r1	; 0x15
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    5a70:	2f 89       	ldd	r18, Y+23	; 0x17
    5a72:	38 8d       	ldd	r19, Y+24	; 0x18
    5a74:	28 17       	cp	r18, r24
    5a76:	39 07       	cpc	r19, r25
    5a78:	28 f0       	brcs	.+10     	; 0x5a84 <_nrk_scheduler+0x214>
	_free_node = &_nrk_readyQ[0];
    5a7a:	28 1b       	sub	r18, r24
    5a7c:	39 0b       	sbc	r19, r25
    5a7e:	38 8f       	std	Y+24, r19	; 0x18
    5a80:	2f 8b       	std	Y+23, r18	; 0x17
    5a82:	0e c0       	rjmp	.+28     	; 0x5aa0 <_nrk_scheduler+0x230>
	
	
    5a84:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5a86:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5a88:	86 17       	cp	r24, r22
    5a8a:	97 07       	cpc	r25, r23
    5a8c:	28 f4       	brcc	.+10     	; 0x5a98 <_nrk_scheduler+0x228>
	
    5a8e:	68 1b       	sub	r22, r24
    5a90:	79 0b       	sbc	r23, r25
    5a92:	78 8f       	std	Y+24, r23	; 0x18
    5a94:	6f 8b       	std	Y+23, r22	; 0x17
    5a96:	04 c0       	rjmp	.+8      	; 0x5aa0 <_nrk_scheduler+0x230>

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    5a98:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <__udivmodhi4>
    5a9c:	98 8f       	std	Y+24, r25	; 0x18
    5a9e:	8f 8b       	std	Y+23, r24	; 0x17
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    5aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    5aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa4:	89 2b       	or	r24, r25
    5aa6:	21 f4       	brne	.+8      	; 0x5ab0 <_nrk_scheduler+0x240>
    5aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5aac:	98 8f       	std	Y+24, r25	; 0x18
    5aae:	8f 8b       	std	Y+23, r24	; 0x17
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    5ab0:	89 85       	ldd	r24, Y+9	; 0x09
    5ab2:	83 30       	cpi	r24, 0x03	; 3
    5ab4:	09 f0       	breq	.+2      	; 0x5ab8 <_nrk_scheduler+0x248>
    5ab6:	5b c0       	rjmp	.+182    	; 0x5b6e <_nrk_scheduler+0x2fe>
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    5ab8:	8d 89       	ldd	r24, Y+21	; 0x15
    5aba:	9e 89       	ldd	r25, Y+22	; 0x16
    5abc:	89 2b       	or	r24, r25
    5abe:	09 f0       	breq	.+2      	; 0x5ac2 <_nrk_scheduler+0x252>
    5ac0:	4e c0       	rjmp	.+156    	; 0x5b5e <_nrk_scheduler+0x2ee>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    5ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ac4:	88 23       	and	r24, r24
    5ac6:	a1 f0       	breq	.+40     	; 0x5af0 <_nrk_scheduler+0x280>
    5ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    5aca:	88 23       	and	r24, r24
    5acc:	89 f0       	breq	.+34     	; 0x5af0 <_nrk_scheduler+0x280>
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	90 e0       	ldi	r25, 0x00	; 0
    5ad2:	a0 e0       	ldi	r26, 0x00	; 0
    5ad4:	b0 e0       	ldi	r27, 0x00	; 0
    5ad6:	00 90 57 07 	lds	r0, 0x0757
    5ada:	04 c0       	rjmp	.+8      	; 0x5ae4 <_nrk_scheduler+0x274>
    5adc:	88 0f       	add	r24, r24
    5ade:	99 1f       	adc	r25, r25
    5ae0:	aa 1f       	adc	r26, r26
    5ae2:	bb 1f       	adc	r27, r27
    5ae4:	0a 94       	dec	r0
    5ae6:	d2 f7       	brpl	.-12     	; 0x5adc <_nrk_scheduler+0x26c>
    5ae8:	89 8b       	std	Y+17, r24	; 0x11
    5aea:	9a 8b       	std	Y+18, r25	; 0x12
    5aec:	ab 8b       	std	Y+19, r26	; 0x13
    5aee:	bc 8b       	std	Y+20, r27	; 0x14
	nrk_activate_task(&IdleTask);
	
    5af0:	1f 82       	std	Y+7, r1	; 0x07
}
    5af2:	1e 82       	std	Y+6, r1	; 0x06

    5af4:	1d 82       	std	Y+5, r1	; 0x05

    5af6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5af8:	98 a1       	ldd	r25, Y+32	; 0x20
    5afa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5afc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5afe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5b00:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5b02:	81 30       	cpi	r24, 0x01	; 1
    5b04:	91 05       	cpc	r25, r1
    5b06:	91 f4       	brne	.+36     	; 0x5b2c <_nrk_scheduler+0x2bc>


    5b08:	3a 8f       	std	Y+26, r19	; 0x1a
    5b0a:	29 8f       	std	Y+25, r18	; 0x19

    5b0c:	82 e0       	ldi	r24, 0x02	; 2
    5b0e:	89 87       	std	Y+9, r24	; 0x09

    5b10:	8f 89       	ldd	r24, Y+23	; 0x17
    5b12:	98 8d       	ldd	r25, Y+24	; 0x18
    5b14:	9e 8b       	std	Y+22, r25	; 0x16
    5b16:	8d 8b       	std	Y+21, r24	; 0x15


    5b18:	45 2b       	or	r20, r21
    5b1a:	21 f4       	brne	.+8      	; 0x5b24 <_nrk_scheduler+0x2b4>
    5b1c:	8a ef       	ldi	r24, 0xFA	; 250
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	9e 8b       	std	Y+22, r25	; 0x16
    5b22:	8d 8b       	std	Y+21, r24	; 0x15
void nrk_start (void)
    5b24:	8e 2f       	mov	r24, r30
    5b26:	0e 94 42 25 	call	0x4a84	; 0x4a84 <nrk_add_to_readyQ>
    5b2a:	19 c0       	rjmp	.+50     	; 0x5b5e <_nrk_scheduler+0x2ee>
{
	int8_t task_ID;
	uint8_t i,j;
    5b2c:	3a 8f       	std	Y+26, r19	; 0x1a
    5b2e:	29 8f       	std	Y+25, r18	; 0x19
//	NRK_STK *x;
//	unsigned char *stkc;

    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	9c 01       	movw	r18, r24
    5b34:	24 9f       	mul	r18, r20
    5b36:	c0 01       	movw	r24, r0
    5b38:	25 9f       	mul	r18, r21
    5b3a:	90 0d       	add	r25, r0
    5b3c:	34 9f       	mul	r19, r20
    5b3e:	90 0d       	add	r25, r0
    5b40:	11 24       	eor	r1, r1
    5b42:	9e 8b       	std	Y+22, r25	; 0x16
    5b44:	8d 8b       	std	Y+21, r24	; 0x15
	/*
    5b46:	98 8f       	std	Y+24, r25	; 0x18
    5b48:	8f 8b       	std	Y+23, r24	; 0x17
		- Get highest priority task from rdy list
    5b4a:	45 2b       	or	r20, r21
    5b4c:	21 f4       	brne	.+8      	; 0x5b56 <_nrk_scheduler+0x2e6>
    5b4e:	8a ef       	ldi	r24, 0xFA	; 250
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	9e 8b       	std	Y+22, r25	; 0x16
    5b54:	8d 8b       	std	Y+21, r24	; 0x15
		- set cur prio and start the task 
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	98 a3       	std	Y+32, r25	; 0x20
    5b5c:	8f 8f       	std	Y+31, r24	; 0x1f
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
    5b5e:	8d 89       	ldd	r24, Y+21	; 0x15
    5b60:	9e 89       	ldd	r25, Y+22	; 0x16
    5b62:	00 97       	sbiw	r24, 0x00	; 0
    5b64:	21 f0       	breq	.+8      	; 0x5b6e <_nrk_scheduler+0x2fe>
    5b66:	80 17       	cp	r24, r16
    5b68:	91 07       	cpc	r25, r17
    5b6a:	08 f4       	brcc	.+2      	; 0x5b6e <_nrk_scheduler+0x2fe>
    5b6c:	8c 01       	movw	r16, r24
    5b6e:	08 94       	sec
    5b70:	c1 1c       	adc	r12, r1
    5b72:	d1 1c       	adc	r13, r1
    5b74:	a1 96       	adiw	r28, 0x21	; 33
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    5b76:	34 e0       	ldi	r19, 0x04	; 4
    5b78:	c3 16       	cp	r12, r19
    5b7a:	d1 04       	cpc	r13, r1
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <_nrk_scheduler+0x310>
    5b7e:	5e cf       	rjmp	.-324    	; 0x5a3c <_nrk_scheduler+0x1cc>
			}
		}
	}

    }

    5b80:	0e 94 30 25 	call	0x4a60	; 0x4a60 <nrk_get_high_ready_task_ID>
    5b84:	e8 2e       	mov	r14, r24
    task_ID = nrk_get_high_ready_task_ID();	
    5b86:	99 27       	eor	r25, r25
    5b88:	87 fd       	sbrc	r24, 7
    5b8a:	90 95       	com	r25
    5b8c:	fc 01       	movw	r30, r24
    5b8e:	25 e0       	ldi	r18, 0x05	; 5
    5b90:	ee 0f       	add	r30, r30
    5b92:	ff 1f       	adc	r31, r31
    5b94:	2a 95       	dec	r18
    5b96:	e1 f7       	brne	.-8      	; 0x5b90 <_nrk_scheduler+0x320>
    5b98:	e8 0f       	add	r30, r24
    5b9a:	f9 1f       	adc	r31, r25
    5b9c:	e6 53       	subi	r30, 0x36	; 54
    5b9e:	f9 4f       	sbci	r31, 0xF9	; 249
    5ba0:	42 85       	ldd	r20, Z+10	; 0x0a
    5ba2:	40 93 69 07 	sts	0x0769, r20
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    5ba6:	81 e2       	ldi	r24, 0x21	; 33
    5ba8:	6e 2d       	mov	r22, r14
    5baa:	68 02       	muls	r22, r24
    5bac:	90 01       	movw	r18, r0
    5bae:	11 24       	eor	r1, r1
    5bb0:	26 53       	subi	r18, 0x36	; 54
    5bb2:	39 4f       	sbci	r19, 0xF9	; 249
    5bb4:	30 93 59 07 	sts	0x0759, r19
    5bb8:	20 93 58 07 	sts	0x0758, r18
		
//    nrk_stack_pointer_restore();

    /*
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    5bbc:	ee 20       	and	r14, r14
    5bbe:	91 f0       	breq	.+36     	; 0x5be4 <_nrk_scheduler+0x374>
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    5bc0:	85 8d       	ldd	r24, Z+29	; 0x1d
    5bc2:	96 8d       	ldd	r25, Z+30	; 0x1e
    5bc4:	89 2b       	or	r24, r25
    5bc6:	51 f0       	breq	.+20     	; 0x5bdc <_nrk_scheduler+0x36c>
    5bc8:	81 8d       	ldd	r24, Z+25	; 0x19
    5bca:	92 8d       	ldd	r25, Z+26	; 0x1a
    5bcc:	8a 3f       	cpi	r24, 0xFA	; 250
    5bce:	91 05       	cpc	r25, r1
    5bd0:	28 f4       	brcc	.+10     	; 0x5bdc <_nrk_scheduler+0x36c>
    5bd2:	80 17       	cp	r24, r16
    5bd4:	91 07       	cpc	r25, r17
    5bd6:	e0 f4       	brcc	.+56     	; 0x5c10 <_nrk_scheduler+0x3a0>
    5bd8:	8c 01       	movw	r16, r24
    5bda:	1a c0       	rjmp	.+52     	; 0x5c10 <_nrk_scheduler+0x3a0>
    5bdc:	0b 3f       	cpi	r16, 0xFB	; 251
    5bde:	11 05       	cpc	r17, r1
    5be0:	b8 f0       	brcs	.+46     	; 0x5c10 <_nrk_scheduler+0x3a0>
    5be2:	14 c0       	rjmp	.+40     	; 0x5c0c <_nrk_scheduler+0x39c>
    // you should never get here    
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
    5be4:	0b 30       	cpi	r16, 0x0B	; 11
    5be6:	11 05       	cpc	r17, r1
    5be8:	98 f0       	brcs	.+38     	; 0x5c10 <_nrk_scheduler+0x3a0>
{
	
    5bea:	c8 01       	movw	r24, r16
    5bec:	0a 97       	sbiw	r24, 0x0a	; 10
    5bee:	8a 3f       	cpi	r24, 0xFA	; 250
    5bf0:	91 05       	cpc	r25, r1
    5bf2:	30 f4       	brcc	.+12     	; 0x5c00 <_nrk_scheduler+0x390>
    5bf4:	8c 01       	movw	r16, r24
    5bf6:	09 97       	sbiw	r24, 0x09	; 9
    5bf8:	58 f4       	brcc	.+22     	; 0x5c10 <_nrk_scheduler+0x3a0>
    5bfa:	09 e0       	ldi	r16, 0x09	; 9
    5bfc:	10 e0       	ldi	r17, 0x00	; 0
    5bfe:	08 c0       	rjmp	.+16     	; 0x5c10 <_nrk_scheduler+0x3a0>
    	Task->task_ID=nrk_task_init_cnt;
    else Task->task_ID=NRK_IDLE_TASK_ID;

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    5c00:	05 50       	subi	r16, 0x05	; 5
    5c02:	11 40       	sbci	r17, 0x01	; 1
    5c04:	18 f4       	brcc	.+6      	; 0x5c0c <_nrk_scheduler+0x39c>
    5c06:	00 ef       	ldi	r16, 0xF0	; 240
    5c08:	10 e0       	ldi	r17, 0x00	; 0
    5c0a:	02 c0       	rjmp	.+4      	; 0x5c10 <_nrk_scheduler+0x3a0>
    5c0c:	0a ef       	ldi	r16, 0xFA	; 250
    5c0e:	10 e0       	ldi	r17, 0x00	; 0
/*
 * _nrk_timer_tick() 
 *
 * This function is called by the interrupt timer0.
 * It calls the scheduler.
 */
    5c10:	40 93 5a 07 	sts	0x075A, r20
void _nrk_timer_tick(void)
    5c14:	30 93 68 07 	sts	0x0768, r19
    5c18:	20 93 67 07 	sts	0x0767, r18
	_nrk_scheduler();

  	return;
}


    5c1c:	00 93 aa 06 	sts	0x06AA, r16
uint16_t nrk_version (void)
{
    return (NRK_VERSION);
    5c20:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    5c24:	99 27       	eor	r25, r25
    5c26:	01 96       	adiw	r24, 0x01	; 1
    5c28:	80 17       	cp	r24, r16
    5c2a:	91 07       	cpc	r25, r17
    5c2c:	40 f0       	brcs	.+16     	; 0x5c3e <_nrk_scheduler+0x3ce>
    5c2e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    5c32:	08 2f       	mov	r16, r24
    5c34:	11 27       	eor	r17, r17
    5c36:	0e 5f       	subi	r16, 0xFE	; 254
    5c38:	1f 4f       	sbci	r17, 0xFF	; 255
    5c3a:	00 93 aa 06 	sts	0x06AA, r16
    5c3e:	ee 20       	and	r14, r14
    5c40:	11 f0       	breq	.+4      	; 0x5c46 <_nrk_scheduler+0x3d6>
    5c42:	10 92 5b 07 	sts	0x075B, r1
    5c46:	80 2f       	mov	r24, r16
    5c48:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <_nrk_set_next_wakeup>
    5c4c:	6e ee       	ldi	r22, 0xEE	; 238
    5c4e:	72 e0       	ldi	r23, 0x02	; 2
    5c50:	c4 01       	movw	r24, r8
    5c52:	0e 94 a0 30 	call	0x6140	; 0x6140 <nrk_high_speed_timer_wait>
    5c56:	0e 94 59 33 	call	0x66b2	; 0x66b2 <nrk_stack_pointer_restore>
    5c5a:	0e 94 86 33 	call	0x670c	; 0x670c <nrk_start_high_ready_task>
    5c5e:	df 91       	pop	r29
    5c60:	cf 91       	pop	r28
    5c62:	1f 91       	pop	r17
    5c64:	0f 91       	pop	r16
    5c66:	ff 90       	pop	r15
    5c68:	ef 90       	pop	r14
    5c6a:	df 90       	pop	r13
    5c6c:	cf 90       	pop	r12
    5c6e:	bf 90       	pop	r11
    5c70:	af 90       	pop	r10
    5c72:	9f 90       	pop	r9
    5c74:	8f 90       	pop	r8
    5c76:	08 95       	ret

00005c78 <nrk_register_driver>:


void nrk_halt()
{
nrk_int_disable();
while(1);
    5c78:	20 91 84 07 	lds	r18, 0x0784
    5c7c:	12 16       	cp	r1, r18
    5c7e:	1c f4       	brge	.+6      	; 0x5c86 <nrk_register_driver+0xe>
    5c80:	8f ef       	ldi	r24, 0xFF	; 255
    5c82:	9f ef       	ldi	r25, 0xFF	; 255
    5c84:	08 95       	ret
}

    5c86:	e2 2f       	mov	r30, r18
    5c88:	ff 27       	eor	r31, r31
    5c8a:	e7 fd       	sbrc	r30, 7
    5c8c:	f0 95       	com	r31
    5c8e:	ee 0f       	add	r30, r30
    5c90:	ff 1f       	adc	r31, r31
    5c92:	ee 0f       	add	r30, r30
    5c94:	ff 1f       	adc	r31, r31
    5c96:	df 01       	movw	r26, r30
    5c98:	ab 57       	subi	r26, 0x7B	; 123
    5c9a:	b8 4f       	sbci	r27, 0xF8	; 248
    5c9c:	6c 93       	st	X, r22
/**
    5c9e:	e9 57       	subi	r30, 0x79	; 121
    5ca0:	f8 4f       	sbci	r31, 0xF8	; 248
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	80 83       	st	Z, r24
 *  nrk_init();
    5ca6:	2f 5f       	subi	r18, 0xFF	; 255
    5ca8:	20 93 84 07 	sts	0x0784, r18
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	90 e0       	ldi	r25, 0x00	; 0
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
    5cb0:	08 95       	ret

00005cb2 <nrk_open>:
void nrk_init()
{
	
    uint8_t i;	
    5cb2:	0f 93       	push	r16
    5cb4:	1f 93       	push	r17
    5cb6:	cf 93       	push	r28
    5cb8:	df 93       	push	r29
    5cba:	06 2f       	mov	r16, r22
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    5cbc:	90 91 84 07 	lds	r25, 0x0784
    5cc0:	a9 2f       	mov	r26, r25
    5cc2:	bb 27       	eor	r27, r27
    5cc4:	a7 fd       	sbrc	r26, 7
    5cc6:	b0 95       	com	r27
    5cc8:	40 e0       	ldi	r20, 0x00	; 0
    5cca:	50 e0       	ldi	r21, 0x00	; 0
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    5ccc:	68 2f       	mov	r22, r24
    5cce:	77 27       	eor	r23, r23
    5cd0:	34 c0       	rjmp	.+104    	; 0x5d3a <nrk_open+0x88>
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    5cd2:	4f 5f       	subi	r20, 0xFF	; 255
    5cd4:	5f 4f       	sbci	r21, 0xFF	; 255
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    5cd6:	e9 01       	movw	r28, r18
    5cd8:	cc 0f       	add	r28, r28
    5cda:	dd 1f       	adc	r29, r29
    5cdc:	cc 0f       	add	r28, r28
    5cde:	dd 1f       	adc	r29, r29
    5ce0:	fe 01       	movw	r30, r28
    5ce2:	eb 57       	subi	r30, 0x7B	; 123
    5ce4:	f8 4f       	sbci	r31, 0xF8	; 248
    5ce6:	80 81       	ld	r24, Z
    5ce8:	99 27       	eor	r25, r25
    5cea:	87 fd       	sbrc	r24, 7
    5cec:	90 95       	com	r25
    5cee:	86 17       	cp	r24, r22
    5cf0:	97 07       	cpc	r25, r23
    5cf2:	19 f5       	brne	.+70     	; 0x5d3a <nrk_open+0x88>
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    5cf4:	f9 01       	movw	r30, r18
    5cf6:	e7 57       	subi	r30, 0x77	; 119
    5cf8:	f8 4f       	sbci	r31, 0xF8	; 248
    5cfa:	80 81       	ld	r24, Z
    5cfc:	88 23       	and	r24, r24
    5cfe:	71 f4       	brne	.+28     	; 0x5d1c <nrk_open+0x6a>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    5d00:	81 e0       	ldi	r24, 0x01	; 1
    5d02:	80 83       	st	Z, r24
#endif
    5d04:	fe 01       	movw	r30, r28
    5d06:	e9 57       	subi	r30, 0x79	; 121
    5d08:	f8 4f       	sbci	r31, 0xF8	; 248
    5d0a:	01 90       	ld	r0, Z+
    5d0c:	f0 81       	ld	r31, Z
    5d0e:	e0 2d       	mov	r30, r0
    5d10:	20 e0       	ldi	r18, 0x00	; 0
    5d12:	40 e0       	ldi	r20, 0x00	; 0
    5d14:	50 e0       	ldi	r21, 0x00	; 0
    5d16:	60 2f       	mov	r22, r16
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	09 95       	icall
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    5d1c:	c9 57       	subi	r28, 0x79	; 121
    5d1e:	d8 4f       	sbci	r29, 0xF8	; 248
    5d20:	e8 81       	ld	r30, Y
    5d22:	f9 81       	ldd	r31, Y+1	; 0x01
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	40 e0       	ldi	r20, 0x00	; 0
    5d28:	50 e0       	ldi	r21, 0x00	; 0
    5d2a:	60 2f       	mov	r22, r16
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	09 95       	icall
#endif
    5d30:	81 2f       	mov	r24, r17
    5d32:	99 27       	eor	r25, r25
    5d34:	87 fd       	sbrc	r24, 7
    5d36:	90 95       	com	r25
    5d38:	08 c0       	rjmp	.+16     	; 0x5d4a <nrk_open+0x98>
    5d3a:	14 2f       	mov	r17, r20
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    5d3c:	24 2f       	mov	r18, r20
    5d3e:	33 27       	eor	r19, r19
    5d40:	2a 17       	cp	r18, r26
    5d42:	3b 07       	cpc	r19, r27
    5d44:	34 f2       	brlt	.-116    	; 0x5cd2 <nrk_open+0x20>
    5d46:	8f ef       	ldi	r24, 0xFF	; 255
    5d48:	9f ef       	ldi	r25, 0xFF	; 255
    5d4a:	df 91       	pop	r29
    5d4c:	cf 91       	pop	r28
    5d4e:	1f 91       	pop	r17
    5d50:	0f 91       	pop	r16
    5d52:	08 95       	ret

00005d54 <nrk_get_status>:
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    5d54:	e8 2f       	mov	r30, r24
    5d56:	ff 27       	eor	r31, r31
    5d58:	80 91 84 07 	lds	r24, 0x0784
    5d5c:	99 27       	eor	r25, r25
    5d5e:	87 fd       	sbrc	r24, 7
    5d60:	90 95       	com	r25
    5d62:	8e 17       	cp	r24, r30
    5d64:	9f 07       	cpc	r25, r31
    5d66:	34 f4       	brge	.+12     	; 0x5d74 <nrk_get_status+0x20>
    _nrk_reserve_init();
    #endif
    5d68:	81 e0       	ldi	r24, 0x01	; 1
    5d6a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    5d6e:	8f ef       	ldi	r24, 0xFF	; 255
    5d70:	9f ef       	ldi	r25, 0xFF	; 255
    5d72:	08 95       	ret

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    5d74:	ee 0f       	add	r30, r30
    5d76:	ff 1f       	adc	r31, r31
    5d78:	ee 0f       	add	r30, r30
    5d7a:	ff 1f       	adc	r31, r31
    5d7c:	e9 57       	subi	r30, 0x79	; 121
    5d7e:	f8 4f       	sbci	r31, 0xF8	; 248
    5d80:	01 90       	ld	r0, Z+
    5d82:	f0 81       	ld	r31, Z
    5d84:	e0 2d       	mov	r30, r0
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	40 e0       	ldi	r20, 0x00	; 0
    5d8a:	50 e0       	ldi	r21, 0x00	; 0
    5d8c:	83 e0       	ldi	r24, 0x03	; 3
    5d8e:	09 95       	icall
    5d90:	99 27       	eor	r25, r25
    5d92:	87 fd       	sbrc	r24, 7
    5d94:	90 95       	com	r25
{
    5d96:	08 95       	ret

00005d98 <nrk_set_status>:
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    5d98:	24 2f       	mov	r18, r20
    nrk_cur_task_TCB = NULL;
    5d9a:	e8 2f       	mov	r30, r24
    5d9c:	ff 27       	eor	r31, r31
    5d9e:	80 91 84 07 	lds	r24, 0x0784
    5da2:	99 27       	eor	r25, r25
    5da4:	87 fd       	sbrc	r24, 7
    5da6:	90 95       	com	r25
    5da8:	8e 17       	cp	r24, r30
    5daa:	9f 07       	cpc	r25, r31
    5dac:	34 f4       	brge	.+12     	; 0x5dba <nrk_set_status+0x22>
    
    nrk_high_ready_TCB = NULL;
    5dae:	81 e0       	ldi	r24, 0x01	; 1
    5db0:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    5db4:	8f ef       	ldi	r24, 0xFF	; 255
    5db6:	9f ef       	ldi	r25, 0xFF	; 255
    5db8:	08 95       	ret
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
    5dba:	ee 0f       	add	r30, r30
    5dbc:	ff 1f       	adc	r31, r31
    5dbe:	ee 0f       	add	r30, r30
    5dc0:	ff 1f       	adc	r31, r31
    5dc2:	e9 57       	subi	r30, 0x79	; 121
    5dc4:	f8 4f       	sbci	r31, 0xF8	; 248
    5dc6:	01 90       	ld	r0, Z+
    5dc8:	f0 81       	ld	r31, Z
    5dca:	e0 2d       	mov	r30, r0
    5dcc:	40 e0       	ldi	r20, 0x00	; 0
    5dce:	50 e0       	ldi	r21, 0x00	; 0
    5dd0:	84 e0       	ldi	r24, 0x04	; 4
    5dd2:	09 95       	icall
    5dd4:	99 27       	eor	r25, r25
    5dd6:	87 fd       	sbrc	r24, 7
    5dd8:	90 95       	com	r25
	nrk_stats_reset();
    5dda:	08 95       	ret

00005ddc <nrk_read>:
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    5ddc:	24 2f       	mov	r18, r20
    	*stkc = STK_CANARY_VAL;
    5dde:	e8 2f       	mov	r30, r24
    5de0:	ff 27       	eor	r31, r31
    5de2:	80 91 84 07 	lds	r24, 0x0784
    5de6:	99 27       	eor	r25, r25
    5de8:	87 fd       	sbrc	r24, 7
    5dea:	90 95       	com	r25
    5dec:	8e 17       	cp	r24, r30
    5dee:	9f 07       	cpc	r25, r31
    5df0:	34 f4       	brge	.+12     	; 0x5dfe <nrk_read+0x22>
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    5df2:	81 e0       	ldi	r24, 0x01	; 1
    5df4:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    5df8:	8f ef       	ldi	r24, 0xFF	; 255
    5dfa:	9f ef       	ldi	r25, 0xFF	; 255
    5dfc:	08 95       	ret
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
    5dfe:	ee 0f       	add	r30, r30
    5e00:	ff 1f       	adc	r31, r31
    5e02:	ee 0f       	add	r30, r30
    5e04:	ff 1f       	adc	r31, r31
    5e06:	e9 57       	subi	r30, 0x79	; 121
    5e08:	f8 4f       	sbci	r31, 0xF8	; 248
    5e0a:	01 90       	ld	r0, Z+
    5e0c:	f0 81       	ld	r31, Z
    5e0e:	e0 2d       	mov	r30, r0
    5e10:	ab 01       	movw	r20, r22
    5e12:	60 e0       	ldi	r22, 0x00	; 0
    5e14:	85 e0       	ldi	r24, 0x05	; 5
    5e16:	09 95       	icall
    5e18:	99 27       	eor	r25, r25
    5e1a:	87 fd       	sbrc	r24, 7
    5e1c:	90 95       	com	r25
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    5e1e:	08 95       	ret

00005e20 <nrk_write>:

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    5e20:	24 2f       	mov	r18, r20
	}
    5e22:	e8 2f       	mov	r30, r24
    5e24:	ff 27       	eor	r31, r31
    5e26:	80 91 84 07 	lds	r24, 0x0784
    5e2a:	99 27       	eor	r25, r25
    5e2c:	87 fd       	sbrc	r24, 7
    5e2e:	90 95       	com	r25
    5e30:	8e 17       	cp	r24, r30
    5e32:	9f 07       	cpc	r25, r31
    5e34:	34 f4       	brge	.+12     	; 0x5e42 <nrk_write+0x22>
    nrk_watchdog_enable();
    #endif
    5e36:	81 e0       	ldi	r24, 0x01	; 1
    5e38:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	9f ef       	ldi	r25, 0xFF	; 255
    5e40:	08 95       	ret
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
    5e42:	ee 0f       	add	r30, r30
    5e44:	ff 1f       	adc	r31, r31
    5e46:	ee 0f       	add	r30, r30
    5e48:	ff 1f       	adc	r31, r31
    5e4a:	e9 57       	subi	r30, 0x79	; 121
    5e4c:	f8 4f       	sbci	r31, 0xF8	; 248
    5e4e:	01 90       	ld	r0, Z+
    5e50:	f0 81       	ld	r31, Z
    5e52:	e0 2d       	mov	r30, r0
    5e54:	ab 01       	movw	r20, r22
    5e56:	60 e0       	ldi	r22, 0x00	; 0
    5e58:	86 e0       	ldi	r24, 0x06	; 6
    5e5a:	09 95       	icall
    5e5c:	99 27       	eor	r25, r25
    5e5e:	87 fd       	sbrc	r24, 7
    5e60:	90 95       	com	r25
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    5e62:	08 95       	ret

00005e64 <nrk_close>:
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif



    5e64:	e8 2f       	mov	r30, r24
    5e66:	ff 27       	eor	r31, r31
    5e68:	80 91 84 07 	lds	r24, 0x0784
    5e6c:	99 27       	eor	r25, r25
    5e6e:	87 fd       	sbrc	r24, 7
    5e70:	90 95       	com	r25
    5e72:	8e 17       	cp	r24, r30
    5e74:	9f 07       	cpc	r25, r31
    5e76:	34 f4       	brge	.+12     	; 0x5e84 <nrk_close+0x20>

   #ifdef NRK_REBOOT_ON_ERROR
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <_nrk_errno_set>
    5e7e:	8f ef       	ldi	r24, 0xFF	; 255
    5e80:	9f ef       	ldi	r25, 0xFF	; 255
    5e82:	08 95       	ret
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    5e84:	ee 0f       	add	r30, r30
    5e86:	ff 1f       	adc	r31, r31
    5e88:	ee 0f       	add	r30, r30
    5e8a:	ff 1f       	adc	r31, r31
    5e8c:	e9 57       	subi	r30, 0x79	; 121
    5e8e:	f8 4f       	sbci	r31, 0xF8	; 248
    5e90:	01 90       	ld	r0, Z+
    5e92:	f0 81       	ld	r31, Z
    5e94:	e0 2d       	mov	r30, r0
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	40 e0       	ldi	r20, 0x00	; 0
    5e9a:	50 e0       	ldi	r21, 0x00	; 0
    5e9c:	60 e0       	ldi	r22, 0x00	; 0
    5e9e:	82 e0       	ldi	r24, 0x02	; 2
    5ea0:	09 95       	icall
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif

    5ea2:	99 27       	eor	r25, r25
    5ea4:	87 fd       	sbrc	r24, 7
    5ea6:	90 95       	com	r25
   #ifdef NRK_WATCHDOG
    5ea8:	08 95       	ret

00005eaa <nrk_spin_wait_us>:
	...
#include <nrk_error.h>
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
    5eb2:	01 97       	sbiw	r24, 0x01	; 1
    5eb4:	d1 f7       	brne	.-12     	; 0x5eaa <nrk_spin_wait_us>
    5eb6:	08 95       	ret

00005eb8 <_nrk_high_speed_timer_stop>:
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    5eb8:	10 92 81 00 	sts	0x0081, r1
    5ebc:	08 95       	ret

00005ebe <_nrk_high_speed_timer_start>:
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	80 93 81 00 	sts	0x0081, r24
    5ec4:	08 95       	ret

00005ec6 <_nrk_high_speed_timer_reset>:
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif
    5ec6:	83 b5       	in	r24, 0x23	; 35
    5ec8:	81 60       	ori	r24, 0x01	; 1
    5eca:	83 bd       	out	0x23, r24	; 35

    5ecc:	10 92 85 00 	sts	0x0085, r1
    5ed0:	10 92 84 00 	sts	0x0084, r1
    5ed4:	08 95       	ret

00005ed6 <_nrk_high_speed_timer_get>:
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    5ed6:	cf 93       	push	r28
    5ed8:	df 93       	push	r29
    5eda:	cd b7       	in	r28, 0x3d	; 61
    5edc:	de b7       	in	r29, 0x3e	; 62
    5ede:	22 97       	sbiw	r28, 0x02	; 2
    5ee0:	0f b6       	in	r0, 0x3f	; 63
    5ee2:	f8 94       	cli
    5ee4:	de bf       	out	0x3e, r29	; 62
    5ee6:	0f be       	out	0x3f, r0	; 63
    5ee8:	cd bf       	out	0x3d, r28	; 61
    #endif
  
  // nrk_stack_pointer_init(); 
    5eea:	80 91 84 00 	lds	r24, 0x0084
    5eee:	90 91 85 00 	lds	r25, 0x0085
    5ef2:	9a 83       	std	Y+2, r25	; 0x02
    5ef4:	89 83       	std	Y+1, r24	; 0x01
/* 
    #ifdef KERNEL_STK_ARRAY
    5ef6:	89 81       	ldd	r24, Y+1	; 0x01
    5ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    5efa:	22 96       	adiw	r28, 0x02	; 2
    5efc:	0f b6       	in	r0, 0x3f	; 63
    5efe:	f8 94       	cli
    5f00:	de bf       	out	0x3e, r29	; 62
    5f02:	0f be       	out	0x3f, r0	; 63
    5f04:	cd bf       	out	0x3d, r28	; 61
    5f06:	df 91       	pop	r29
    5f08:	cf 91       	pop	r28
    5f0a:	08 95       	ret

00005f0c <_nrk_os_timer_stop>:
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    5f0c:	10 92 b1 00 	sts	0x00B1, r1
    	*stkc = STK_CANARY_VAL;
    5f10:	e0 e7       	ldi	r30, 0x70	; 112
    5f12:	f0 e0       	ldi	r31, 0x00	; 0
    5f14:	80 81       	ld	r24, Z
    5f16:	8d 7f       	andi	r24, 0xFD	; 253
    5f18:	80 83       	st	Z, r24
    	stkc = NRK_KERNEL_STK_TOP;
    5f1a:	80 81       	ld	r24, Z
    5f1c:	8e 7f       	andi	r24, 0xFE	; 254
    5f1e:	80 83       	st	Z, r24
    5f20:	08 95       	ret

00005f22 <_nrk_os_timer_set>:
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
    5f22:	80 93 b2 00 	sts	0x00B2, r24
    5f26:	08 95       	ret

00005f28 <_nrk_os_timer_start>:
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    5f28:	e0 e7       	ldi	r30, 0x70	; 112
    5f2a:	f0 e0       	ldi	r31, 0x00	; 0
    5f2c:	80 81       	ld	r24, Z
    5f2e:	83 60       	ori	r24, 0x03	; 3
    5f30:	80 83       	st	Z, r24
    nrk_high_ready_TCB = NULL;
    5f32:	83 e0       	ldi	r24, 0x03	; 3
    5f34:	80 93 b1 00 	sts	0x00B1, r24
    5f38:	08 95       	ret

00005f3a <_nrk_os_timer_reset>:
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif

    5f3a:	83 b5       	in	r24, 0x23	; 35
    5f3c:	82 60       	ori	r24, 0x02	; 2
    5f3e:	83 bd       	out	0x23, r24	; 35
    #ifdef NRK_MAX_RESERVES 
    5f40:	10 92 b2 00 	sts	0x00B2, r1
    // Setup the reserve structures
    5f44:	10 92 a8 06 	sts	0x06A8, r1
    _nrk_reserve_init();
    5f48:	10 92 aa 06 	sts	0x06AA, r1
    5f4c:	08 95       	ret

00005f4e <_nrk_get_next_wakeup>:
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    5f4e:	80 91 b3 00 	lds	r24, 0x00B3
    5f52:	8f 5f       	subi	r24, 0xFF	; 255
    nrk_sem_list[i].count=-1;
    5f54:	99 27       	eor	r25, r25
    5f56:	08 95       	ret

00005f58 <_nrk_set_next_wakeup>:
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    5f58:	81 50       	subi	r24, 0x01	; 1
    5f5a:	80 93 b3 00 	sts	0x00B3, r24
    5f5e:	08 95       	ret

00005f60 <nrk_timer_int_stop>:
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
    5f60:	88 23       	and	r24, r24
    5f62:	11 f4       	brne	.+4      	; 0x5f68 <nrk_timer_int_stop+0x8>
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    5f64:	10 92 71 00 	sts	0x0071, r1
        }
  
       
    5f68:	8f ef       	ldi	r24, 0xFF	; 255
    5f6a:	9f ef       	ldi	r25, 0xFF	; 255
    5f6c:	08 95       	ret

00005f6e <nrk_timer_int_reset>:
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    5f6e:	88 23       	and	r24, r24
    5f70:	19 f0       	breq	.+6      	; 0x5f78 <nrk_timer_int_reset+0xa>
    5f72:	8f ef       	ldi	r24, 0xFF	; 255
    5f74:	9f ef       	ldi	r25, 0xFF	; 255
    5f76:	08 95       	ret
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
    5f78:	10 92 95 00 	sts	0x0095, r1
    5f7c:	10 92 94 00 	sts	0x0094, r1
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	90 e0       	ldi	r25, 0x00	; 0
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    5f84:	08 95       	ret

00005f86 <nrk_timer_int_read>:
	_free_node = &_nrk_readyQ[0];
	
	
	
    5f86:	88 23       	and	r24, r24
    5f88:	19 f0       	breq	.+6      	; 0x5f90 <nrk_timer_int_read+0xa>
    5f8a:	80 e0       	ldi	r24, 0x00	; 0
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	08 95       	ret

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    5f90:	80 91 94 00 	lds	r24, 0x0094
    5f94:	90 91 95 00 	lds	r25, 0x0095
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    5f98:	08 95       	ret

00005f9a <nrk_timer_int_start>:
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    5f9a:	88 23       	and	r24, r24
    5f9c:	19 f0       	breq	.+6      	; 0x5fa4 <nrk_timer_int_start+0xa>
    5f9e:	8f ef       	ldi	r24, 0xFF	; 255
    5fa0:	9f ef       	ldi	r25, 0xFF	; 255
    5fa2:	08 95       	ret
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
    5fa4:	82 e0       	ldi	r24, 0x02	; 2
    5fa6:	80 93 71 00 	sts	0x0071, r24
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	90 e0       	ldi	r25, 0x00	; 0
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
    5fae:	08 95       	ret

00005fb0 <nrk_timer_int_configure>:
	
}


    5fb0:	88 23       	and	r24, r24
    5fb2:	19 f0       	breq	.+6      	; 0x5fba <nrk_timer_int_configure+0xa>
    5fb4:	8f ef       	ldi	r24, 0xFF	; 255
    5fb6:	9f ef       	ldi	r25, 0xFF	; 255
    5fb8:	08 95       	ret


    5fba:	cb 01       	movw	r24, r22
    5fbc:	01 97       	sbiw	r24, 0x01	; 1
    5fbe:	05 97       	sbiw	r24, 0x05	; 5
    5fc0:	10 f4       	brcc	.+4      	; 0x5fc6 <nrk_timer_int_configure+0x16>
    5fc2:	60 93 a9 06 	sts	0x06A9, r22

    5fc6:	10 92 90 00 	sts	0x0090, r1

    5fca:	88 e0       	ldi	r24, 0x08	; 8
    5fcc:	80 93 91 00 	sts	0x0091, r24

    5fd0:	85 2f       	mov	r24, r21
    5fd2:	99 27       	eor	r25, r25
    5fd4:	80 93 99 00 	sts	0x0099, r24

    5fd8:	40 93 98 00 	sts	0x0098, r20
void nrk_start (void)
    5fdc:	30 93 a7 06 	sts	0x06A7, r19
    5fe0:	20 93 a6 06 	sts	0x06A6, r18
{
    5fe4:	80 91 a9 06 	lds	r24, 0x06A9
    5fe8:	81 30       	cpi	r24, 0x01	; 1
    5fea:	21 f4       	brne	.+8      	; 0x5ff4 <nrk_timer_int_configure+0x44>
    5fec:	80 91 91 00 	lds	r24, 0x0091
    5ff0:	81 60       	ori	r24, 0x01	; 1
    5ff2:	0b c0       	rjmp	.+22     	; 0x600a <nrk_timer_int_configure+0x5a>
	int8_t task_ID;
	uint8_t i,j;
    5ff4:	82 30       	cpi	r24, 0x02	; 2
    5ff6:	21 f4       	brne	.+8      	; 0x6000 <nrk_timer_int_configure+0x50>
    5ff8:	80 91 91 00 	lds	r24, 0x0091
    5ffc:	82 60       	ori	r24, 0x02	; 2
    5ffe:	05 c0       	rjmp	.+10     	; 0x600a <nrk_timer_int_configure+0x5a>
//	NRK_STK *x;
//	unsigned char *stkc;
    6000:	83 30       	cpi	r24, 0x03	; 3
    6002:	31 f4       	brne	.+12     	; 0x6010 <nrk_timer_int_configure+0x60>
    6004:	80 91 91 00 	lds	r24, 0x0091
    6008:	83 60       	ori	r24, 0x03	; 3
    600a:	80 93 91 00 	sts	0x0091, r24
    600e:	08 c0       	rjmp	.+16     	; 0x6020 <nrk_timer_int_configure+0x70>

	/*
    6010:	84 30       	cpi	r24, 0x04	; 4
    6012:	21 f4       	brne	.+8      	; 0x601c <nrk_timer_int_configure+0x6c>
    6014:	80 91 91 00 	lds	r24, 0x0091
    6018:	84 60       	ori	r24, 0x04	; 4
    601a:	f7 cf       	rjmp	.-18     	; 0x600a <nrk_timer_int_configure+0x5a>
		- Get highest priority task from rdy list
		- set cur prio and start the task 
    601c:	85 30       	cpi	r24, 0x05	; 5
    601e:	19 f0       	breq	.+6      	; 0x6026 <nrk_timer_int_configure+0x76>
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	08 95       	ret
    6026:	80 91 91 00 	lds	r24, 0x0091
    602a:	85 60       	ori	r24, 0x05	; 5
    602c:	80 93 91 00 	sts	0x0091, r24
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	90 e0       	ldi	r25, 0x00	; 0
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
    6034:	08 95       	ret

00006036 <_nrk_os_timer_get>:
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    6036:	80 91 b2 00 	lds	r24, 0x00B2
			{
    603a:	99 27       	eor	r25, r25
    603c:	08 95       	ret

0000603e <__vector_13>:
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    603e:	0f 92       	push	r0
    6040:	0f b6       	in	r0, 0x3f	; 63
    6042:	0f 92       	push	r0
    6044:	1f 92       	push	r1
    6046:	2f 92       	push	r2
    6048:	3f 92       	push	r3
    604a:	4f 92       	push	r4
    604c:	5f 92       	push	r5
    604e:	6f 92       	push	r6
    6050:	7f 92       	push	r7
    6052:	8f 92       	push	r8
    6054:	9f 92       	push	r9
    6056:	af 92       	push	r10
    6058:	bf 92       	push	r11
    605a:	cf 92       	push	r12
    605c:	df 92       	push	r13
    605e:	ef 92       	push	r14
    6060:	ff 92       	push	r15
    6062:	0f 93       	push	r16
    6064:	1f 93       	push	r17
    6066:	2f 93       	push	r18
    6068:	3f 93       	push	r19
    606a:	4f 93       	push	r20
    606c:	5f 93       	push	r21
    606e:	6f 93       	push	r22
    6070:	7f 93       	push	r23
    6072:	8f 93       	push	r24
    6074:	9f 93       	push	r25
    6076:	af 93       	push	r26
    6078:	bf 93       	push	r27
    607a:	cf 93       	push	r28
    607c:	df 93       	push	r29
    607e:	ef 93       	push	r30
    6080:	ff 93       	push	r31
    6082:	a0 91 67 07 	lds	r26, 0x0767
    6086:	b0 91 68 07 	lds	r27, 0x0768
    608a:	0d b6       	in	r0, 0x3d	; 61
    608c:	0d 92       	st	X+, r0
    608e:	0e b6       	in	r0, 0x3e	; 62
    6090:	0d 92       	st	X+, r0
    6092:	1f 92       	push	r1
    6094:	a0 91 82 05 	lds	r26, 0x0582
    6098:	b0 91 83 05 	lds	r27, 0x0583
    609c:	1e 90       	ld	r1, -X
    609e:	be bf       	out	0x3e, r27	; 62
    60a0:	ad bf       	out	0x3d, r26	; 61
    60a2:	08 95       	ret

000060a4 <__vector_17>:
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();

    60a4:	1f 92       	push	r1
    60a6:	0f 92       	push	r0
    60a8:	0f b6       	in	r0, 0x3f	; 63
    60aa:	0f 92       	push	r0
    60ac:	11 24       	eor	r1, r1
    60ae:	0f 90       	pop	r0
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	0f 90       	pop	r0
    60b4:	1f 90       	pop	r1
    60b6:	18 95       	reti

000060b8 <__vector_32>:
}


/*
 * _nrk_timer_tick() 
 *
    60b8:	1f 92       	push	r1
    60ba:	0f 92       	push	r0
    60bc:	0f b6       	in	r0, 0x3f	; 63
    60be:	0f 92       	push	r0
    60c0:	11 24       	eor	r1, r1
    60c2:	2f 93       	push	r18
    60c4:	3f 93       	push	r19
    60c6:	4f 93       	push	r20
    60c8:	5f 93       	push	r21
    60ca:	6f 93       	push	r22
    60cc:	7f 93       	push	r23
    60ce:	8f 93       	push	r24
    60d0:	9f 93       	push	r25
    60d2:	af 93       	push	r26
    60d4:	bf 93       	push	r27
    60d6:	ef 93       	push	r30
    60d8:	ff 93       	push	r31
 * This function is called by the interrupt timer0.
    60da:	e0 91 a6 06 	lds	r30, 0x06A6
    60de:	f0 91 a7 06 	lds	r31, 0x06A7
    60e2:	30 97       	sbiw	r30, 0x00	; 0
    60e4:	11 f0       	breq	.+4      	; 0x60ea <__vector_32+0x32>
    60e6:	09 95       	icall
    60e8:	04 c0       	rjmp	.+8      	; 0x60f2 <__vector_32+0x3a>
 * It calls the scheduler.
 */
    60ea:	60 e0       	ldi	r22, 0x00	; 0
    60ec:	8a e0       	ldi	r24, 0x0A	; 10
    60ee:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    60f2:	ff 91       	pop	r31
    60f4:	ef 91       	pop	r30
    60f6:	bf 91       	pop	r27
    60f8:	af 91       	pop	r26
    60fa:	9f 91       	pop	r25
    60fc:	8f 91       	pop	r24
    60fe:	7f 91       	pop	r23
    6100:	6f 91       	pop	r22
    6102:	5f 91       	pop	r21
    6104:	4f 91       	pop	r20
    6106:	3f 91       	pop	r19
    6108:	2f 91       	pop	r18
    610a:	0f 90       	pop	r0
    610c:	0f be       	out	0x3f, r0	; 63
    610e:	0f 90       	pop	r0
    6110:	1f 90       	pop	r1
    6112:	18 95       	reti

00006114 <__vector_default>:
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);

			}
		}
	}
    6114:	1f 92       	push	r1
    6116:	0f 92       	push	r0
    6118:	0f b6       	in	r0, 0x3f	; 63
    611a:	0f 92       	push	r0
    611c:	11 24       	eor	r1, r1
    611e:	2f 93       	push	r18
    6120:	3f 93       	push	r19
    6122:	4f 93       	push	r20
    6124:	5f 93       	push	r21
    6126:	6f 93       	push	r22
    6128:	7f 93       	push	r23
    612a:	8f 93       	push	r24
    612c:	9f 93       	push	r25
    612e:	af 93       	push	r26
    6130:	bf 93       	push	r27
    6132:	ef 93       	push	r30
    6134:	ff 93       	push	r31

    6136:	60 e0       	ldi	r22, 0x00	; 0
    6138:	8a e0       	ldi	r24, 0x0A	; 10
    613a:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    613e:	ff cf       	rjmp	.-2      	; 0x613e <__vector_default+0x2a>

00006140 <nrk_high_speed_timer_wait>:



   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
    6140:	cf 93       	push	r28
    6142:	df 93       	push	r29
    6144:	cd b7       	in	r28, 0x3d	; 61
    6146:	de b7       	in	r29, 0x3e	; 62
    6148:	22 97       	sbiw	r28, 0x02	; 2
    614a:	0f b6       	in	r0, 0x3f	; 63
    614c:	f8 94       	cli
    614e:	de bf       	out	0x3e, r29	; 62
    6150:	0f be       	out	0x3f, r0	; 63
    6152:	cd bf       	out	0x3d, r28	; 61
    6154:	fc 01       	movw	r30, r24
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    6156:	8f ef       	ldi	r24, 0xFF	; 255
    6158:	e9 37       	cpi	r30, 0x79	; 121
    615a:	f8 07       	cpc	r31, r24
    615c:	10 f0       	brcs	.+4      	; 0x6162 <nrk_high_speed_timer_wait+0x22>
    615e:	e0 e0       	ldi	r30, 0x00	; 0
    6160:	f0 e0       	ldi	r31, 0x00	; 0
    		for (i = 0; i < 100; i++)
    6162:	9f 01       	movw	r18, r30
    6164:	44 27       	eor	r20, r20
    6166:	55 27       	eor	r21, r21
    6168:	cb 01       	movw	r24, r22
    616a:	aa 27       	eor	r26, r26
    616c:	bb 27       	eor	r27, r27
    616e:	28 0f       	add	r18, r24
    6170:	39 1f       	adc	r19, r25
    6172:	4a 1f       	adc	r20, r26
    6174:	5b 1f       	adc	r21, r27
      			nrk_spin_wait_us (1000);
    6176:	21 30       	cpi	r18, 0x01	; 1
    6178:	80 e0       	ldi	r24, 0x00	; 0
    617a:	38 07       	cpc	r19, r24
    617c:	81 e0       	ldi	r24, 0x01	; 1
    617e:	48 07       	cpc	r20, r24
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	58 07       	cpc	r21, r24
    6184:	78 f0       	brcs	.+30     	; 0x61a4 <nrk_high_speed_timer_wait+0x64>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
    6186:	80 91 84 00 	lds	r24, 0x0084
    618a:	90 91 85 00 	lds	r25, 0x0085
    618e:	9a 83       	std	Y+2, r25	; 0x02
    6190:	89 83       	std	Y+1, r24	; 0x01
/* 
    #ifdef KERNEL_STK_ARRAY
    6192:	89 81       	ldd	r24, Y+1	; 0x01
    6194:	9a 81       	ldd	r25, Y+2	; 0x02
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    6196:	e8 17       	cp	r30, r24
    6198:	f9 07       	cpc	r31, r25
    619a:	a8 f3       	brcs	.-22     	; 0x6186 <nrk_high_speed_timer_wait+0x46>
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
    619c:	20 50       	subi	r18, 0x00	; 0
    619e:	30 40       	sbci	r19, 0x00	; 0
    61a0:	41 40       	sbci	r20, 0x01	; 1
    61a2:	50 40       	sbci	r21, 0x00	; 0
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
    61a4:	80 91 84 00 	lds	r24, 0x0084
    61a8:	90 91 85 00 	lds	r25, 0x0085
    61ac:	9a 83       	std	Y+2, r25	; 0x02
    61ae:	89 83       	std	Y+1, r24	; 0x01
/* 
    #ifdef KERNEL_STK_ARRAY
    61b0:	89 81       	ldd	r24, Y+1	; 0x01
    61b2:	9a 81       	ldd	r25, Y+2	; 0x02
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    61b4:	82 17       	cp	r24, r18
    61b6:	93 07       	cpc	r25, r19
    61b8:	a8 f3       	brcs	.-22     	; 0x61a4 <nrk_high_speed_timer_wait+0x64>
    61ba:	22 96       	adiw	r28, 0x02	; 2
    61bc:	0f b6       	in	r0, 0x3f	; 63
    61be:	f8 94       	cli
    61c0:	de bf       	out	0x3e, r29	; 62
    61c2:	0f be       	out	0x3f, r0	; 63
    61c4:	cd bf       	out	0x3d, r28	; 61
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	08 95       	ret

000061cc <_nrk_setup_timer>:
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
    61cc:	ef 92       	push	r14
    61ce:	ff 92       	push	r15
    61d0:	1f 93       	push	r17
  DISABLE_GLOBAL_INT();
    61d2:	9e ef       	ldi	r25, 0xFE	; 254
    61d4:	90 93 aa 06 	sts	0x06AA, r25
};

inline void nrk_int_enable(void) {
    61d8:	80 e2       	ldi	r24, 0x20	; 32
    61da:	80 93 b6 00 	sts	0x00B6, r24
  ENABLE_GLOBAL_INT();
    61de:	90 93 b3 00 	sts	0x00B3, r25
};
    61e2:	13 e0       	ldi	r17, 0x03	; 3
    61e4:	17 bb       	out	0x17, r17	; 23

    61e6:	82 e0       	ldi	r24, 0x02	; 2
    61e8:	80 93 b0 00 	sts	0x00B0, r24
uint8_t nrk_task_init_cnt;
    61ec:	91 eb       	ldi	r25, 0xB1	; 177
    61ee:	e9 2e       	mov	r14, r25
    61f0:	f1 2c       	mov	r15, r1
    61f2:	f7 01       	movw	r30, r14
    61f4:	10 83       	st	Z, r17

    61f6:	83 b5       	in	r24, 0x23	; 35
    61f8:	82 60       	ori	r24, 0x02	; 2
    61fa:	83 bd       	out	0x23, r24	; 35

void nrk_halt()
    61fc:	17 bb       	out	0x17, r17	; 23
{
nrk_int_disable();
    61fe:	14 bd       	out	0x24, r17	; 36
while(1);
}

    6200:	83 b5       	in	r24, 0x23	; 35
    6202:	82 60       	ori	r24, 0x02	; 2
    6204:	83 bd       	out	0x23, r24	; 35
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    6206:	10 92 80 00 	sts	0x0080, r1
 *  - Init event list
    620a:	81 e0       	ldi	r24, 0x01	; 1
    620c:	80 93 81 00 	sts	0x0081, r24
 *  - Create idle task
    6210:	10 92 85 00 	sts	0x0085, r1
    6214:	10 92 84 00 	sts	0x0084, r1
 */
    6218:	83 b5       	in	r24, 0x23	; 35
    621a:	82 60       	ori	r24, 0x02	; 2
    621c:	83 bd       	out	0x23, r24	; 35
void nrk_init()
    621e:	83 b5       	in	r24, 0x23	; 35
    6220:	81 60       	ori	r24, 0x01	; 1
    6222:	83 bd       	out	0x23, r24	; 35
{
	
    6224:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <_nrk_os_timer_reset>
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    6228:	e0 e7       	ldi	r30, 0x70	; 112
    622a:	f0 e0       	ldi	r31, 0x00	; 0
    622c:	80 81       	ld	r24, Z
    622e:	83 60       	ori	r24, 0x03	; 3
    6230:	80 83       	st	Z, r24
    nrk_high_ready_TCB = NULL;
    6232:	f7 01       	movw	r30, r14
    6234:	10 83       	st	Z, r17
 */
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
    6236:	10 92 a8 06 	sts	0x06A8, r1
    623a:	1f 91       	pop	r17
    623c:	ff 90       	pop	r15
    623e:	ef 90       	pop	r14
    6240:	08 95       	ret

00006242 <_nrk_startup_error>:
#include <nrk.h>
#include <stdint.h>
#include <basic_rf.h>
#include <nrk_timer.h>

#define ADC_STARTUP_DELAY  1000
    6242:	04 b6       	in	r0, 0x34	; 52
    6244:	03 fe       	sbrs	r0, 3
    6246:	02 c0       	rjmp	.+4      	; 0x624c <_nrk_startup_error+0xa>
    6248:	90 e1       	ldi	r25, 0x10	; 16
    624a:	01 c0       	rjmp	.+2      	; 0x624e <_nrk_startup_error+0xc>
    624c:	90 e0       	ldi	r25, 0x00	; 0
uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
    624e:	04 b6       	in	r0, 0x34	; 52
    6250:	02 fe       	sbrs	r0, 2
    6252:	06 c0       	rjmp	.+12     	; 0x6260 <_nrk_startup_error+0x1e>
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
    6254:	84 b7       	in	r24, 0x34	; 52
    6256:	8b 7f       	andi	r24, 0xFB	; 251
    6258:	84 bf       	out	0x34, r24	; 52
} while (0)

    625a:	04 b6       	in	r0, 0x34	; 52
    625c:	00 fe       	sbrs	r0, 0
#define ADC_VREF_VCC() \
    625e:	94 60       	ori	r25, 0x04	; 4
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)
    6260:	04 b6       	in	r0, 0x34	; 52
    6262:	01 fe       	sbrs	r0, 1
    6264:	04 c0       	rjmp	.+8      	; 0x626e <_nrk_startup_error+0x2c>


    6266:	84 b7       	in	r24, 0x34	; 52
    6268:	8d 7f       	andi	r24, 0xFD	; 253
    626a:	84 bf       	out	0x34, r24	; 52
#define ADC_VREF_1_1() \
    626c:	92 60       	ori	r25, 0x02	; 2
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)

    626e:	99 23       	and	r25, r25
    6270:	19 f0       	breq	.+6      	; 0x6278 <_nrk_startup_error+0x36>
    6272:	89 2f       	mov	r24, r25
    6274:	99 27       	eor	r25, r25
    6276:	08 95       	ret

#define ADC_VREF_2_56() \
   do { \
    6278:	04 b6       	in	r0, 0x34	; 52
    627a:	00 fc       	sbrc	r0, 0
    627c:	02 c0       	rjmp	.+4      	; 0x6282 <_nrk_startup_error+0x40>
    627e:	91 e0       	ldi	r25, 0x01	; 1
    6280:	03 c0       	rjmp	.+6      	; 0x6288 <_nrk_startup_error+0x46>
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    6282:	84 b7       	in	r24, 0x34	; 52
    6284:	8e 7f       	andi	r24, 0xFE	; 254
    6286:	84 bf       	out	0x34, r24	; 52
#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)

// Enables/disables the ADC
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)

    6288:	80 91 b0 00 	lds	r24, 0x00B0
    628c:	81 11       	cpse	r24, r1
    628e:	91 60       	ori	r25, 0x01	; 1
#define ADC_SAMPLE_SINGLE() \
    do { \
    6290:	89 2f       	mov	r24, r25
    6292:	99 27       	eor	r25, r25
ADCSRA |= BM(ADSC); \
    6294:	08 95       	ret

00006296 <nrk_ext_int_enable>:
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    6296:	88 23       	and	r24, r24
    6298:	11 f4       	brne	.+4      	; 0x629e <nrk_ext_int_enable+0x8>
    629a:	e8 9a       	sbi	0x1d, 0	; 29
    629c:	33 c0       	rjmp	.+102    	; 0x6304 <nrk_ext_int_enable+0x6e>
#include <basic_rf.h>
    629e:	81 30       	cpi	r24, 0x01	; 1
    62a0:	11 f4       	brne	.+4      	; 0x62a6 <nrk_ext_int_enable+0x10>
    62a2:	e9 9a       	sbi	0x1d, 1	; 29
    62a4:	2f c0       	rjmp	.+94     	; 0x6304 <nrk_ext_int_enable+0x6e>
#include <nrk_timer.h>
    62a6:	82 30       	cpi	r24, 0x02	; 2
    62a8:	11 f4       	brne	.+4      	; 0x62ae <nrk_ext_int_enable+0x18>
    62aa:	ea 9a       	sbi	0x1d, 2	; 29
    62ac:	2b c0       	rjmp	.+86     	; 0x6304 <nrk_ext_int_enable+0x6e>

    62ae:	83 30       	cpi	r24, 0x03	; 3
    62b0:	21 f4       	brne	.+8      	; 0x62ba <nrk_ext_int_enable+0x24>
    62b2:	80 91 6b 00 	lds	r24, 0x006B
    62b6:	81 60       	ori	r24, 0x01	; 1
    62b8:	23 c0       	rjmp	.+70     	; 0x6300 <nrk_ext_int_enable+0x6a>
#define ADC_STARTUP_DELAY  1000
    62ba:	84 30       	cpi	r24, 0x04	; 4
    62bc:	21 f4       	brne	.+8      	; 0x62c6 <nrk_ext_int_enable+0x30>
    62be:	80 91 6b 00 	lds	r24, 0x006B
    62c2:	82 60       	ori	r24, 0x02	; 2
    62c4:	1d c0       	rjmp	.+58     	; 0x6300 <nrk_ext_int_enable+0x6a>
#define ADC_SETUP_DELAY  200
    62c6:	85 30       	cpi	r24, 0x05	; 5
    62c8:	21 f4       	brne	.+8      	; 0x62d2 <nrk_ext_int_enable+0x3c>
    62ca:	80 91 6b 00 	lds	r24, 0x006B
    62ce:	84 60       	ori	r24, 0x04	; 4
    62d0:	17 c0       	rjmp	.+46     	; 0x6300 <nrk_ext_int_enable+0x6a>

    62d2:	86 30       	cpi	r24, 0x06	; 6
    62d4:	21 f4       	brne	.+8      	; 0x62de <nrk_ext_int_enable+0x48>
    62d6:	80 91 6b 00 	lds	r24, 0x006B
    62da:	88 60       	ori	r24, 0x08	; 8
    62dc:	11 c0       	rjmp	.+34     	; 0x6300 <nrk_ext_int_enable+0x6a>
uint8_t channel;
    62de:	87 30       	cpi	r24, 0x07	; 7
    62e0:	21 f4       	brne	.+8      	; 0x62ea <nrk_ext_int_enable+0x54>
    62e2:	80 91 6b 00 	lds	r24, 0x006B
    62e6:	80 61       	ori	r24, 0x10	; 16
    62e8:	0b c0       	rjmp	.+22     	; 0x6300 <nrk_ext_int_enable+0x6a>
uint8_t is_open;
    62ea:	88 30       	cpi	r24, 0x08	; 8
    62ec:	21 f4       	brne	.+8      	; 0x62f6 <nrk_ext_int_enable+0x60>
    62ee:	80 91 6b 00 	lds	r24, 0x006B
    62f2:	80 62       	ori	r24, 0x20	; 32
    62f4:	05 c0       	rjmp	.+10     	; 0x6300 <nrk_ext_int_enable+0x6a>

    62f6:	89 30       	cpi	r24, 0x09	; 9
    62f8:	41 f4       	brne	.+16     	; 0x630a <nrk_ext_int_enable+0x74>
    62fa:	80 91 6b 00 	lds	r24, 0x006B
    62fe:	80 64       	ori	r24, 0x40	; 64
    6300:	80 93 6b 00 	sts	0x006B, r24
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	08 95       	ret
// VREF is set to VCC by default
    630a:	8a 30       	cpi	r24, 0x0A	; 10
    630c:	19 f0       	breq	.+6      	; 0x6314 <nrk_ext_int_enable+0x7e>
    630e:	8f ef       	ldi	r24, 0xFF	; 255
    6310:	9f ef       	ldi	r25, 0xFF	; 255
    6312:	08 95       	ret
    6314:	80 91 6b 00 	lds	r24, 0x006B
    6318:	80 68       	ori	r24, 0x80	; 128
    631a:	80 93 6b 00 	sts	0x006B, r24
    631e:	81 e0       	ldi	r24, 0x01	; 1
    6320:	90 e0       	ldi	r25, 0x00	; 0
#define ADC_INIT() \
    do { \
    6322:	08 95       	ret

00006324 <nrk_ext_int_disable>:
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
	ADMUX = BM(REFS0);  \
} while (0)

    6324:	88 23       	and	r24, r24
    6326:	11 f4       	brne	.+4      	; 0x632c <nrk_ext_int_disable+0x8>
    6328:	e8 98       	cbi	0x1d, 0	; 29
    632a:	31 c0       	rjmp	.+98     	; 0x638e <nrk_ext_int_disable+0x6a>
#define ADC_VREF_VCC() \
    632c:	81 30       	cpi	r24, 0x01	; 1
    632e:	11 f0       	breq	.+4      	; 0x6334 <nrk_ext_int_disable+0x10>
   do { \
    6330:	82 30       	cpi	r24, 0x02	; 2
    6332:	11 f4       	brne	.+4      	; 0x6338 <nrk_ext_int_disable+0x14>
    6334:	e9 98       	cbi	0x1d, 1	; 29
    6336:	2b c0       	rjmp	.+86     	; 0x638e <nrk_ext_int_disable+0x6a>
	ADMUX &= ~(BM(REFS1));  \
    6338:	83 30       	cpi	r24, 0x03	; 3
    633a:	21 f4       	brne	.+8      	; 0x6344 <nrk_ext_int_disable+0x20>
    633c:	80 91 6b 00 	lds	r24, 0x006B
    6340:	8e 7f       	andi	r24, 0xFE	; 254
    6342:	23 c0       	rjmp	.+70     	; 0x638a <nrk_ext_int_disable+0x66>
	ADMUX |= BM(REFS0);  \
    6344:	84 30       	cpi	r24, 0x04	; 4
    6346:	21 f4       	brne	.+8      	; 0x6350 <nrk_ext_int_disable+0x2c>
    6348:	80 91 6b 00 	lds	r24, 0x006B
    634c:	8d 7f       	andi	r24, 0xFD	; 253
    634e:	1d c0       	rjmp	.+58     	; 0x638a <nrk_ext_int_disable+0x66>
} while(0)
    6350:	85 30       	cpi	r24, 0x05	; 5
    6352:	21 f4       	brne	.+8      	; 0x635c <nrk_ext_int_disable+0x38>
    6354:	80 91 6b 00 	lds	r24, 0x006B
    6358:	8b 7f       	andi	r24, 0xFB	; 251
    635a:	17 c0       	rjmp	.+46     	; 0x638a <nrk_ext_int_disable+0x66>

    635c:	86 30       	cpi	r24, 0x06	; 6
    635e:	21 f4       	brne	.+8      	; 0x6368 <nrk_ext_int_disable+0x44>
    6360:	80 91 6b 00 	lds	r24, 0x006B
    6364:	87 7f       	andi	r24, 0xF7	; 247
    6366:	11 c0       	rjmp	.+34     	; 0x638a <nrk_ext_int_disable+0x66>

    6368:	87 30       	cpi	r24, 0x07	; 7
    636a:	21 f4       	brne	.+8      	; 0x6374 <nrk_ext_int_disable+0x50>
    636c:	80 91 6b 00 	lds	r24, 0x006B
    6370:	8f 7e       	andi	r24, 0xEF	; 239
    6372:	0b c0       	rjmp	.+22     	; 0x638a <nrk_ext_int_disable+0x66>
#define ADC_VREF_1_1() \
    6374:	88 30       	cpi	r24, 0x08	; 8
    6376:	21 f4       	brne	.+8      	; 0x6380 <nrk_ext_int_disable+0x5c>
    6378:	80 91 6b 00 	lds	r24, 0x006B
    637c:	8f 7d       	andi	r24, 0xDF	; 223
    637e:	05 c0       	rjmp	.+10     	; 0x638a <nrk_ext_int_disable+0x66>
   do { \
    6380:	89 30       	cpi	r24, 0x09	; 9
    6382:	41 f4       	brne	.+16     	; 0x6394 <nrk_ext_int_disable+0x70>
    6384:	80 91 6b 00 	lds	r24, 0x006B
    6388:	8f 7b       	andi	r24, 0xBF	; 191
    638a:	80 93 6b 00 	sts	0x006B, r24
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	08 95       	ret
	ADMUX &= ~(BM(REFS0));  \
    6394:	8a 30       	cpi	r24, 0x0A	; 10
    6396:	19 f0       	breq	.+6      	; 0x639e <nrk_ext_int_disable+0x7a>
    6398:	8f ef       	ldi	r24, 0xFF	; 255
    639a:	9f ef       	ldi	r25, 0xFF	; 255
    639c:	08 95       	ret
    639e:	80 91 6b 00 	lds	r24, 0x006B
    63a2:	8f 77       	andi	r24, 0x7F	; 127
    63a4:	80 93 6b 00 	sts	0x006B, r24
    63a8:	81 e0       	ldi	r24, 0x01	; 1
    63aa:	90 e0       	ldi	r25, 0x00	; 0
	ADMUX |= BM(REFS1);  \
} while(0)
    63ac:	08 95       	ret

000063ae <nrk_ext_int_configure>:


#define ADC_VREF_2_56() \
   do { \
	ADMUX |= BM(REFS1) | BM(REFS0);  \
} while(0)
    63ae:	88 23       	and	r24, r24
    63b0:	39 f5       	brne	.+78     	; 0x6400 <nrk_ext_int_configure+0x52>

#define ADC_SET_CHANNEL(channel) do { ADMUX &= ~0x1F; ADMUX |= (ADMUX & ~0x1F) | (channel); } while (0)
    63b2:	50 93 8d 07 	sts	0x078D, r21
    63b6:	40 93 8c 07 	sts	0x078C, r20

    63ba:	66 23       	and	r22, r22
    63bc:	21 f4       	brne	.+8      	; 0x63c6 <nrk_ext_int_configure+0x18>
    63be:	80 91 69 00 	lds	r24, 0x0069
    63c2:	8c 7f       	andi	r24, 0xFC	; 252
    63c4:	45 c0       	rjmp	.+138    	; 0x6450 <nrk_ext_int_configure+0xa2>
// Enables/disables the ADC
    63c6:	61 30       	cpi	r22, 0x01	; 1
    63c8:	49 f4       	brne	.+18     	; 0x63dc <nrk_ext_int_configure+0x2e>
#define ADC_ENABLE() do { ADCSRA |= BM(ADEN); } while (0)
    63ca:	80 91 69 00 	lds	r24, 0x0069
    63ce:	8d 7f       	andi	r24, 0xFD	; 253
    63d0:	80 93 69 00 	sts	0x0069, r24
    63d4:	80 91 69 00 	lds	r24, 0x0069
    63d8:	81 60       	ori	r24, 0x01	; 1
    63da:	3a c0       	rjmp	.+116    	; 0x6450 <nrk_ext_int_configure+0xa2>
#define ADC_DISABLE() do { ADCSRA &= ~BM(ADEN); } while (0)
    63dc:	62 30       	cpi	r22, 0x02	; 2
    63de:	49 f4       	brne	.+18     	; 0x63f2 <nrk_ext_int_configure+0x44>

    63e0:	80 91 69 00 	lds	r24, 0x0069
    63e4:	82 60       	ori	r24, 0x02	; 2
    63e6:	80 93 69 00 	sts	0x0069, r24
    63ea:	80 91 69 00 	lds	r24, 0x0069
    63ee:	8e 7f       	andi	r24, 0xFE	; 254
    63f0:	2f c0       	rjmp	.+94     	; 0x6450 <nrk_ext_int_configure+0xa2>
#define ADC_SAMPLE_SINGLE() \
    63f2:	63 30       	cpi	r22, 0x03	; 3
    63f4:	09 f0       	breq	.+2      	; 0x63f8 <nrk_ext_int_configure+0x4a>
    63f6:	69 c0       	rjmp	.+210    	; 0x64ca <nrk_ext_int_configure+0x11c>
    63f8:	80 91 69 00 	lds	r24, 0x0069
    63fc:	83 60       	ori	r24, 0x03	; 3
    63fe:	28 c0       	rjmp	.+80     	; 0x6450 <nrk_ext_int_configure+0xa2>
    do { \
ADCSRA |= BM(ADSC); \
while (!(ADCSRA & 0x10)); \
    6400:	81 30       	cpi	r24, 0x01	; 1
    6402:	49 f5       	brne	.+82     	; 0x6456 <nrk_ext_int_configure+0xa8>
} while(0)

    6404:	50 93 8b 07 	sts	0x078B, r21
    6408:	40 93 8a 07 	sts	0x078A, r20
// Macros for obtaining the latest sample value
    640c:	66 23       	and	r22, r22
    640e:	21 f4       	brne	.+8      	; 0x6418 <nrk_ext_int_configure+0x6a>
    6410:	80 91 69 00 	lds	r24, 0x0069
    6414:	83 7f       	andi	r24, 0xF3	; 243
    6416:	1c c0       	rjmp	.+56     	; 0x6450 <nrk_ext_int_configure+0xa2>
#define ADC_GET_SAMPLE_10(x) \
    6418:	61 30       	cpi	r22, 0x01	; 1
    641a:	49 f4       	brne	.+18     	; 0x642e <nrk_ext_int_configure+0x80>
do { \
    641c:	80 91 69 00 	lds	r24, 0x0069
    6420:	87 7f       	andi	r24, 0xF7	; 247
    6422:	80 93 69 00 	sts	0x0069, r24
    6426:	80 91 69 00 	lds	r24, 0x0069
    642a:	84 60       	ori	r24, 0x04	; 4
    642c:	11 c0       	rjmp	.+34     	; 0x6450 <nrk_ext_int_configure+0xa2>
x =  ADCL; \
    642e:	62 30       	cpi	r22, 0x02	; 2
    6430:	49 f4       	brne	.+18     	; 0x6444 <nrk_ext_int_configure+0x96>
x |= ADCH << 8; \
    6432:	80 91 69 00 	lds	r24, 0x0069
    6436:	88 60       	ori	r24, 0x08	; 8
    6438:	80 93 69 00 	sts	0x0069, r24
    643c:	80 91 69 00 	lds	r24, 0x0069
    6440:	8b 7f       	andi	r24, 0xFB	; 251
    6442:	06 c0       	rjmp	.+12     	; 0x6450 <nrk_ext_int_configure+0xa2>
} while (0)
    6444:	63 30       	cpi	r22, 0x03	; 3
    6446:	09 f0       	breq	.+2      	; 0x644a <nrk_ext_int_configure+0x9c>
    6448:	40 c0       	rjmp	.+128    	; 0x64ca <nrk_ext_int_configure+0x11c>
    644a:	80 91 69 00 	lds	r24, 0x0069
    644e:	8c 60       	ori	r24, 0x0C	; 12
    6450:	80 93 69 00 	sts	0x0069, r24
    6454:	37 c0       	rjmp	.+110    	; 0x64c4 <nrk_ext_int_configure+0x116>

#define ADC_GET_SAMPLE_8(x) \
do { \
    6456:	82 30       	cpi	r24, 0x02	; 2
    6458:	31 f5       	brne	.+76     	; 0x64a6 <nrk_ext_int_configure+0xf8>
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
    645a:	50 93 8b 07 	sts	0x078B, r21
    645e:	40 93 8a 07 	sts	0x078A, r20
} while (0)
    6462:	66 23       	and	r22, r22
    6464:	21 f4       	brne	.+8      	; 0x646e <nrk_ext_int_configure+0xc0>
    6466:	80 91 69 00 	lds	r24, 0x0069
    646a:	8f 7c       	andi	r24, 0xCF	; 207
    646c:	f1 cf       	rjmp	.-30     	; 0x6450 <nrk_ext_int_configure+0xa2>

    646e:	61 30       	cpi	r22, 0x01	; 1
    6470:	49 f4       	brne	.+18     	; 0x6484 <nrk_ext_int_configure+0xd6>
uint16_t read_voltage_status();
    6472:	80 91 69 00 	lds	r24, 0x0069
    6476:	8f 7d       	andi	r24, 0xDF	; 223
    6478:	80 93 69 00 	sts	0x0069, r24
    647c:	80 91 69 00 	lds	r24, 0x0069
    6480:	80 61       	ori	r24, 0x10	; 16
    6482:	e6 cf       	rjmp	.-52     	; 0x6450 <nrk_ext_int_configure+0xa2>
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
    6484:	62 30       	cpi	r22, 0x02	; 2
    6486:	49 f4       	brne	.+18     	; 0x649a <nrk_ext_int_configure+0xec>
{
    6488:	80 91 69 00 	lds	r24, 0x0069
    648c:	80 62       	ori	r24, 0x20	; 32
    648e:	80 93 69 00 	sts	0x0069, r24
    6492:	80 91 69 00 	lds	r24, 0x0069
    6496:	8f 7e       	andi	r24, 0xEF	; 239
    6498:	db cf       	rjmp	.-74     	; 0x6450 <nrk_ext_int_configure+0xa2>
uint8_t count=0;
    649a:	63 30       	cpi	r22, 0x03	; 3
    649c:	b1 f4       	brne	.+44     	; 0x64ca <nrk_ext_int_configure+0x11c>
    649e:	80 91 69 00 	lds	r24, 0x0069
    64a2:	80 63       	ori	r24, 0x30	; 48
    64a4:	d5 cf       	rjmp	.-86     	; 0x6450 <nrk_ext_int_configure+0xa2>
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     {
    64a6:	83 50       	subi	r24, 0x03	; 3
    64a8:	88 30       	cpi	r24, 0x08	; 8
    64aa:	18 f0       	brcs	.+6      	; 0x64b2 <nrk_ext_int_configure+0x104>
    64ac:	8f ef       	ldi	r24, 0xFF	; 255
    64ae:	9f ef       	ldi	r25, 0xFF	; 255
    64b0:	08 95       	ret
            case INIT: 
    64b2:	80 91 68 00 	lds	r24, 0x0068
    64b6:	81 60       	ori	r24, 0x01	; 1
    64b8:	80 93 68 00 	sts	0x0068, r24
			// Set the pwr ctrl pin as output
    64bc:	50 93 91 07 	sts	0x0791, r21
    64c0:	40 93 90 07 	sts	0x0790, r20
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	08 95       	ret
  			DDRF = PWR_CTRL_MASK;
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	90 e0       	ldi	r25, 0x00	; 0
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
    64ce:	08 95       	ret

000064d0 <__vector_1>:
		    if(opt&READ_FLAG)
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
  			channel=0;
  			ADC_SET_CHANNEL (0);
    64d0:	1f 92       	push	r1
    64d2:	0f 92       	push	r0
    64d4:	0f b6       	in	r0, 0x3f	; 63
    64d6:	0f 92       	push	r0
    64d8:	11 24       	eor	r1, r1
    64da:	2f 93       	push	r18
    64dc:	3f 93       	push	r19
    64de:	4f 93       	push	r20
    64e0:	5f 93       	push	r21
    64e2:	6f 93       	push	r22
    64e4:	7f 93       	push	r23
    64e6:	8f 93       	push	r24
    64e8:	9f 93       	push	r25
    64ea:	af 93       	push	r26
    64ec:	bf 93       	push	r27
    64ee:	ef 93       	push	r30
    64f0:	ff 93       	push	r31
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    64f2:	e0 91 8c 07 	lds	r30, 0x078C
    64f6:	f0 91 8d 07 	lds	r31, 0x078D
    64fa:	30 97       	sbiw	r30, 0x00	; 0
    64fc:	11 f0       	breq	.+4      	; 0x6502 <__vector_1+0x32>
    64fe:	09 95       	icall
    6500:	04 c0       	rjmp	.+8      	; 0x650a <__vector_1+0x3a>
		    	return NRK_OK;
		    }
    6502:	60 e0       	ldi	r22, 0x00	; 0
    6504:	8a e0       	ldi	r24, 0x0A	; 10
    6506:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    650a:	ff 91       	pop	r31
    650c:	ef 91       	pop	r30
    650e:	bf 91       	pop	r27
    6510:	af 91       	pop	r26
    6512:	9f 91       	pop	r25
    6514:	8f 91       	pop	r24
    6516:	7f 91       	pop	r23
    6518:	6f 91       	pop	r22
    651a:	5f 91       	pop	r21
    651c:	4f 91       	pop	r20
    651e:	3f 91       	pop	r19
    6520:	2f 91       	pop	r18
    6522:	0f 90       	pop	r0
    6524:	0f be       	out	0x3f, r0	; 63
    6526:	0f 90       	pop	r0
    6528:	1f 90       	pop	r1
    652a:	18 95       	reti

0000652c <__vector_9>:
			PORTF |= PWR_CTRL_MASK;
	     		init_adc();  
			is_open=0;
		      return 1;
	     
	    case OPEN:  
    652c:	1f 92       	push	r1
    652e:	0f 92       	push	r0
    6530:	0f b6       	in	r0, 0x3f	; 63
    6532:	0f 92       	push	r0
    6534:	11 24       	eor	r1, r1
    6536:	2f 93       	push	r18
    6538:	3f 93       	push	r19
    653a:	4f 93       	push	r20
    653c:	5f 93       	push	r21
    653e:	6f 93       	push	r22
    6540:	7f 93       	push	r23
    6542:	8f 93       	push	r24
    6544:	9f 93       	push	r25
    6546:	af 93       	push	r26
    6548:	bf 93       	push	r27
    654a:	ef 93       	push	r30
    654c:	ff 93       	push	r31
		    if(is_open==1) return NRK_ERROR;
    654e:	e0 91 90 07 	lds	r30, 0x0790
    6552:	f0 91 91 07 	lds	r31, 0x0791
    6556:	30 97       	sbiw	r30, 0x00	; 0
    6558:	11 f0       	breq	.+4      	; 0x655e <__vector_9+0x32>
    655a:	09 95       	icall
    655c:	04 c0       	rjmp	.+8      	; 0x6566 <__vector_9+0x3a>
		    is_open=1; 
		    if(opt&READ_FLAG)
    655e:	60 e0       	ldi	r22, 0x00	; 0
    6560:	8a e0       	ldi	r24, 0x0A	; 10
    6562:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <nrk_kernel_error_add>
    6566:	ff 91       	pop	r31
    6568:	ef 91       	pop	r30
    656a:	bf 91       	pop	r27
    656c:	af 91       	pop	r26
    656e:	9f 91       	pop	r25
    6570:	8f 91       	pop	r24
    6572:	7f 91       	pop	r23
    6574:	6f 91       	pop	r22
    6576:	5f 91       	pop	r21
    6578:	4f 91       	pop	r20
    657a:	3f 91       	pop	r19
    657c:	2f 91       	pop	r18
    657e:	0f 90       	pop	r0
    6580:	0f be       	out	0x3f, r0	; 63
    6582:	0f 90       	pop	r0
    6584:	1f 90       	pop	r1
    6586:	18 95       	reti

00006588 <nrk_watchdog_check>:
#define ADC_VREF_VCC() \
   do { \
	ADMUX &= ~(BM(REFS1));  \
	ADMUX |= BM(REFS0);  \
} while(0)

    6588:	04 b6       	in	r0, 0x34	; 52
    658a:	03 fc       	sbrc	r0, 3
    658c:	03 c0       	rjmp	.+6      	; 0x6594 <nrk_watchdog_check+0xc>
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	08 95       	ret
    6594:	8f ef       	ldi	r24, 0xFF	; 255
    6596:	9f ef       	ldi	r25, 0xFF	; 255

#define ADC_VREF_1_1() \
    6598:	08 95       	ret

0000659a <nrk_watchdog_reset>:
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    659a:	a8 95       	wdr
    659c:	08 95       	ret

0000659e <nrk_watchdog_disable>:
#include <nrk_driver.h>
#include <ff_basic_sensor.h>
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
    659e:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    65a2:	a8 95       	wdr
#include <include.h>
#include <stdio.h>
#include <ulib.h>
#include <nrk_error.h>
#include <nrk.h>
#include <stdint.h>
    65a4:	84 b7       	in	r24, 0x34	; 52
    65a6:	87 7f       	andi	r24, 0xF7	; 247
    65a8:	84 bf       	out	0x34, r24	; 52
#include <basic_rf.h>
    65aa:	e0 e6       	ldi	r30, 0x60	; 96
    65ac:	f0 e0       	ldi	r31, 0x00	; 0
    65ae:	80 81       	ld	r24, Z
    65b0:	88 61       	ori	r24, 0x18	; 24
    65b2:	80 83       	st	Z, r24
#include <nrk_timer.h>
    65b4:	10 82       	st	Z, r1

    65b6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    65ba:	08 95       	ret

000065bc <nrk_watchdog_enable>:
#define ADC_SETUP_DELAY  200

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
    65bc:	0e 94 c9 1c 	call	0x3992	; 0x3992 <nrk_int_disable>
#define ADC_INIT() \
    65c0:	84 b7       	in	r24, 0x34	; 52
    65c2:	87 7f       	andi	r24, 0xF7	; 247
    65c4:	84 bf       	out	0x34, r24	; 52

#define ADC_VREF_1_1() \
   do { \
	ADMUX &= ~(BM(REFS0));  \
	ADMUX |= BM(REFS1);  \
} while(0)
    65c6:	a8 95       	wdr
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    do { \
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    65c8:	e0 e6       	ldi	r30, 0x60	; 96
    65ca:	f0 e0       	ldi	r31, 0x00	; 0
    65cc:	80 81       	ld	r24, Z
    65ce:	88 61       	ori	r24, 0x18	; 24
    65d0:	80 83       	st	Z, r24
	ADMUX = BM(REFS0);  \
    65d2:	8d e0       	ldi	r24, 0x0D	; 13
    65d4:	80 83       	st	Z, r24
} while (0)
    65d6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    65da:	08 95       	ret

000065dc <nrk_battery_save>:
}

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    65dc:	08 95       	ret

000065de <nrk_sleep>:
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    65de:	83 b7       	in	r24, 0x33	; 51
    65e0:	81 7f       	andi	r24, 0xF1	; 241
    65e2:	86 60       	ori	r24, 0x06	; 6
    65e4:	83 bf       	out	0x33, r24	; 51
#ifndef IGNORE_EXT_RST_ERROR
    65e6:	83 b7       	in	r24, 0x33	; 51
    65e8:	81 60       	ori	r24, 0x01	; 1
    65ea:	83 bf       	out	0x33, r24	; 51
    65ec:	88 95       	sleep
    65ee:	83 b7       	in	r24, 0x33	; 51
    65f0:	8e 7f       	andi	r24, 0xFE	; 254
    65f2:	83 bf       	out	0x33, r24	; 51
    65f4:	08 95       	ret

000065f6 <nrk_idle>:
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    65f6:	83 b7       	in	r24, 0x33	; 51
    65f8:	81 7f       	andi	r24, 0xF1	; 241
    65fa:	83 bf       	out	0x33, r24	; 51
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    65fc:	83 b7       	in	r24, 0x33	; 51
    65fe:	81 60       	ori	r24, 0x01	; 1
    6600:	83 bf       	out	0x33, r24	; 51
    6602:	88 95       	sleep
    6604:	83 b7       	in	r24, 0x33	; 51
    6606:	8e 7f       	andi	r24, 0xFE	; 254
    6608:	83 bf       	out	0x33, r24	; 51
    660a:	08 95       	ret

0000660c <nrk_task_set_entry_function>:
#endif

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif

    660c:	fc 01       	movw	r30, r24
    660e:	76 83       	std	Z+6, r23	; 0x06
    6610:	65 83       	std	Z+5, r22	; 0x05
    6612:	08 95       	ret

00006614 <nrk_task_stk_init>:
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    6614:	fb 01       	movw	r30, r22
    6616:	da 01       	movw	r26, r20

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    6618:	25 e5       	ldi	r18, 0x55	; 85
    661a:	2c 93       	st	X, r18
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    661c:	32 97       	sbiw	r30, 0x02	; 2
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    661e:	29 2f       	mov	r18, r25
    6620:	33 27       	eor	r19, r19
    6622:	20 83       	st	Z, r18
    #endif
    6624:	81 83       	std	Z+1, r24	; 0x01
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    6626:	32 97       	sbiw	r30, 0x02	; 2
    6628:	11 82       	std	Z+1, r1	; 0x01
    662a:	10 82       	st	Z, r1
*/	
    662c:	32 97       	sbiw	r30, 0x02	; 2
    662e:	11 82       	std	Z+1, r1	; 0x01
    6630:	10 82       	st	Z, r1
 
    6632:	32 97       	sbiw	r30, 0x02	; 2
    6634:	11 82       	std	Z+1, r1	; 0x01
    6636:	10 82       	st	Z, r1
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    6638:	32 97       	sbiw	r30, 0x02	; 2
    663a:	11 82       	std	Z+1, r1	; 0x01
    663c:	10 82       	st	Z, r1

    663e:	32 97       	sbiw	r30, 0x02	; 2
    6640:	11 82       	std	Z+1, r1	; 0x01
    6642:	10 82       	st	Z, r1
    
    6644:	32 97       	sbiw	r30, 0x02	; 2
    6646:	11 82       	std	Z+1, r1	; 0x01
    6648:	10 82       	st	Z, r1
    nrk_cur_task_prio = 0;
    664a:	32 97       	sbiw	r30, 0x02	; 2
    664c:	11 82       	std	Z+1, r1	; 0x01
    664e:	10 82       	st	Z, r1
    nrk_cur_task_TCB = NULL;
    6650:	32 97       	sbiw	r30, 0x02	; 2
    6652:	11 82       	std	Z+1, r1	; 0x01
    6654:	10 82       	st	Z, r1
    
    nrk_high_ready_TCB = NULL;
    6656:	32 97       	sbiw	r30, 0x02	; 2
    6658:	11 82       	std	Z+1, r1	; 0x01
    665a:	10 82       	st	Z, r1
    nrk_high_ready_prio = 0; 
    665c:	32 97       	sbiw	r30, 0x02	; 2
    665e:	11 82       	std	Z+1, r1	; 0x01
    6660:	10 82       	st	Z, r1

    6662:	32 97       	sbiw	r30, 0x02	; 2
    6664:	11 82       	std	Z+1, r1	; 0x01
    6666:	10 82       	st	Z, r1
   #ifdef NRK_STATS_TRACKER
    6668:	32 97       	sbiw	r30, 0x02	; 2
    666a:	11 82       	std	Z+1, r1	; 0x01
    666c:	10 82       	st	Z, r1
	nrk_stats_reset();
    666e:	32 97       	sbiw	r30, 0x02	; 2
    6670:	11 82       	std	Z+1, r1	; 0x01
    6672:	10 82       	st	Z, r1
   #endif
    6674:	32 97       	sbiw	r30, 0x02	; 2
    6676:	11 82       	std	Z+1, r1	; 0x01
    6678:	10 82       	st	Z, r1

    667a:	32 97       	sbiw	r30, 0x02	; 2
    667c:	11 82       	std	Z+1, r1	; 0x01
    667e:	10 82       	st	Z, r1
    #ifdef NRK_MAX_RESERVES 
    6680:	32 97       	sbiw	r30, 0x02	; 2
    6682:	11 82       	std	Z+1, r1	; 0x01
    6684:	10 82       	st	Z, r1
    // Setup the reserve structures
    6686:	32 97       	sbiw	r30, 0x02	; 2
    6688:	11 82       	std	Z+1, r1	; 0x01
    668a:	10 82       	st	Z, r1
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    668c:	cf 01       	movw	r24, r30
    668e:	08 95       	ret

00006690 <nrk_stack_pointer_init>:
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    6690:	85 e5       	ldi	r24, 0x55	; 85
    6692:	80 93 7e 21 	sts	0x217E, r24
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
    6696:	ee ef       	ldi	r30, 0xFE	; 254
    6698:	f1 e2       	ldi	r31, 0x21	; 33
    669a:	f0 93 83 05 	sts	0x0583, r31
    669e:	e0 93 82 05 	sts	0x0582, r30
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    66a2:	20 ed       	ldi	r18, 0xD0	; 208
    66a4:	3c e1       	ldi	r19, 0x1C	; 28
    66a6:	83 2f       	mov	r24, r19
    66a8:	99 27       	eor	r25, r25
    66aa:	80 83       	st	Z, r24
        }
    66ac:	20 93 ff 21 	sts	0x21FF, r18
    66b0:	08 95       	ret

000066b2 <nrk_stack_pointer_restore>:
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
    66b2:	20 ed       	ldi	r18, 0xD0	; 208
    66b4:	3c e1       	ldi	r19, 0x1C	; 28
    66b6:	83 2f       	mov	r24, r19
    66b8:	99 27       	eor	r25, r25
    66ba:	80 93 fe 21 	sts	0x21FE, r24
	
    66be:	20 93 ff 21 	sts	0x21FF, r18
    66c2:	08 95       	ret

000066c4 <nrk_target_start>:

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    66c4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_nrk_setup_timer>
	IdleTask.period.secs = 0;
    66c8:	0e 94 cb 1c 	call	0x3996	; 0x3996 <nrk_int_enable>
    66cc:	08 95       	ret

000066ce <nrk_task_set_stk>:
   #endif




   #ifdef NRK_REBOOT_ON_ERROR
    66ce:	ef 92       	push	r14
    66d0:	ff 92       	push	r15
    66d2:	0f 93       	push	r16
    66d4:	1f 93       	push	r17
    66d6:	cf 93       	push	r28
    66d8:	df 93       	push	r29
    66da:	7c 01       	movw	r14, r24
    66dc:	8b 01       	movw	r16, r22
    66de:	ea 01       	movw	r28, r20
   #ifndef NRK_WATCHDOG
   while(1)
    66e0:	40 32       	cpi	r20, 0x20	; 32
    66e2:	51 05       	cpc	r21, r1
    66e4:	18 f4       	brcc	.+6      	; 0x66ec <nrk_task_set_stk+0x1e>
    66e6:	81 e1       	ldi	r24, 0x11	; 17
    66e8:	0e 94 12 21 	call	0x4224	; 0x4224 <nrk_error_add>
	   {
    66ec:	c8 01       	movw	r24, r16
    66ee:	01 97       	sbiw	r24, 0x01	; 1
    66f0:	8c 0f       	add	r24, r28
    66f2:	9d 1f       	adc	r25, r29
    66f4:	f7 01       	movw	r30, r14
    66f6:	92 83       	std	Z+2, r25	; 0x02
    66f8:	81 83       	std	Z+1, r24	; 0x01
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    66fa:	14 83       	std	Z+4, r17	; 0x04
    66fc:	03 83       	std	Z+3, r16	; 0x03
    66fe:	df 91       	pop	r29
    6700:	cf 91       	pop	r28
    6702:	1f 91       	pop	r17
    6704:	0f 91       	pop	r16
    6706:	ff 90       	pop	r15
    6708:	ef 90       	pop	r14
    670a:	08 95       	ret

0000670c <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    670c:	a0 91 58 07 	lds	r26, 0x0758
	lds r27,nrk_high_ready_TCB+1
    6710:	b0 91 59 07 	lds	r27, 0x0759

    	;x points to &OSTCB[x]
    
	ld r28,x+
    6714:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    6716:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    6718:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    671a:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    671c:	ff 91       	pop	r31
	pop r30
    671e:	ef 91       	pop	r30
	pop r29
    6720:	df 91       	pop	r29
	pop r28
    6722:	cf 91       	pop	r28
	pop r27
    6724:	bf 91       	pop	r27
	pop r26
    6726:	af 91       	pop	r26
	pop r25
    6728:	9f 91       	pop	r25
	pop r24			
    672a:	8f 91       	pop	r24
	pop r23
    672c:	7f 91       	pop	r23
	pop r22
    672e:	6f 91       	pop	r22
	pop r21
    6730:	5f 91       	pop	r21
	pop r20	
    6732:	4f 91       	pop	r20
	pop r19
    6734:	3f 91       	pop	r19
	pop r18	
    6736:	2f 91       	pop	r18
	pop r17
    6738:	1f 91       	pop	r17
	pop r16
    673a:	0f 91       	pop	r16
	pop r15
    673c:	ff 90       	pop	r15
	pop r14
    673e:	ef 90       	pop	r14
	pop r13
    6740:	df 90       	pop	r13
	pop r12
    6742:	cf 90       	pop	r12
	pop r11
    6744:	bf 90       	pop	r11
	pop r10
    6746:	af 90       	pop	r10
	pop r9
    6748:	9f 90       	pop	r9
	pop r8
    674a:	8f 90       	pop	r8
	pop r7
    674c:	7f 90       	pop	r7
	pop r6
    674e:	6f 90       	pop	r6
	pop r5
    6750:	5f 90       	pop	r5
	pop r4
    6752:	4f 90       	pop	r4
	pop r3
    6754:	3f 90       	pop	r3
	pop r2
    6756:	2f 90       	pop	r2
	pop r1
    6758:	1f 90       	pop	r1
	pop r0
    675a:	0f 90       	pop	r0
	out __SREG__, r0
    675c:	0f be       	out	0x3f, r0	; 63
	pop r0	
    675e:	0f 90       	pop	r0
	   
    	reti 
    6760:	18 95       	reti

00006762 <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    6762:	ab e0       	ldi	r26, 0x0B	; 11
    6764:	b0 e0       	ldi	r27, 0x00	; 0
    6766:	e7 eb       	ldi	r30, 0xB7	; 183
    6768:	f3 e3       	ldi	r31, 0x33	; 51
    676a:	0c 94 7e 3e 	jmp	0x7cfc	; 0x7cfc <__prologue_saves__>
    676e:	4c 01       	movw	r8, r24
    6770:	6b 01       	movw	r12, r22
    6772:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    6774:	fc 01       	movw	r30, r24
    6776:	17 82       	std	Z+7, r1	; 0x07
    6778:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    677a:	83 81       	ldd	r24, Z+3	; 0x03
    677c:	81 fd       	sbrc	r24, 1
    677e:	08 c0       	rjmp	.+16     	; 0x6790 <vfprintf+0x2e>
    6780:	8f ef       	ldi	r24, 0xFF	; 255
    6782:	9f ef       	ldi	r25, 0xFF	; 255
    6784:	1a c1       	rjmp	.+564    	; 0x69ba <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    6786:	22 e0       	ldi	r18, 0x02	; 2
    6788:	30 e0       	ldi	r19, 0x00	; 0
    678a:	e2 0e       	add	r14, r18
    678c:	f3 1e       	adc	r15, r19
    678e:	0c c0       	rjmp	.+24     	; 0x67a8 <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    6790:	90 ea       	ldi	r25, 0xA0	; 160
    6792:	29 2e       	mov	r2, r25
    6794:	94 e0       	ldi	r25, 0x04	; 4
    6796:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    6798:	3e 01       	movw	r6, r28
    679a:	08 94       	sec
    679c:	61 1c       	adc	r6, r1
    679e:	71 1c       	adc	r7, r1
    67a0:	89 e9       	ldi	r24, 0x99	; 153
    67a2:	48 2e       	mov	r4, r24
    67a4:	84 e0       	ldi	r24, 0x04	; 4
    67a6:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    67a8:	f4 01       	movw	r30, r8
    67aa:	03 81       	ldd	r16, Z+3	; 0x03
    67ac:	f6 01       	movw	r30, r12
    67ae:	03 fd       	sbrc	r16, 3
    67b0:	85 91       	lpm	r24, Z+
    67b2:	03 ff       	sbrs	r16, 3
    67b4:	81 91       	ld	r24, Z+
    67b6:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    67b8:	88 23       	and	r24, r24
    67ba:	09 f4       	brne	.+2      	; 0x67be <vfprintf+0x5c>
    67bc:	fb c0       	rjmp	.+502    	; 0x69b4 <vfprintf+0x252>
	    if (c == '%') {
    67be:	85 32       	cpi	r24, 0x25	; 37
    67c0:	59 f4       	brne	.+22     	; 0x67d8 <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    67c2:	03 fd       	sbrc	r16, 3
    67c4:	65 91       	lpm	r22, Z+
    67c6:	03 ff       	sbrs	r16, 3
    67c8:	61 91       	ld	r22, Z+
    67ca:	6f 01       	movw	r12, r30
		if (c != '%') break;
    67cc:	65 32       	cpi	r22, 0x25	; 37
    67ce:	19 f0       	breq	.+6      	; 0x67d6 <vfprintf+0x74>
    67d0:	16 2f       	mov	r17, r22
    67d2:	bb 24       	eor	r11, r11
    67d4:	1c c0       	rjmp	.+56     	; 0x680e <vfprintf+0xac>
    67d6:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    67d8:	b4 01       	movw	r22, r8
    67da:	99 27       	eor	r25, r25
    67dc:	2a c0       	rjmp	.+84     	; 0x6832 <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    67de:	11 23       	and	r17, r17
    67e0:	59 f1       	breq	.+86     	; 0x6838 <vfprintf+0xd6>
    67e2:	61 2f       	mov	r22, r17
    67e4:	77 27       	eor	r23, r23
    67e6:	c1 01       	movw	r24, r2
    67e8:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <strchr_P>
    67ec:	89 2b       	or	r24, r25
    67ee:	49 f4       	brne	.+18     	; 0x6802 <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    67f0:	13 32       	cpi	r17, 0x23	; 35
    67f2:	19 f4       	brne	.+6      	; 0x67fa <vfprintf+0x98>
		flags |= FL_ALT;
    67f4:	f0 e1       	ldi	r31, 0x10	; 16
    67f6:	bf 2a       	or	r11, r31
    67f8:	04 c0       	rjmp	.+8      	; 0x6802 <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    67fa:	1c 36       	cpi	r17, 0x6C	; 108
    67fc:	61 f4       	brne	.+24     	; 0x6816 <vfprintf+0xb4>
		flags |= FL_LONG;
    67fe:	20 e8       	ldi	r18, 0x80	; 128
    6800:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    6802:	f6 01       	movw	r30, r12
    6804:	03 fd       	sbrc	r16, 3
    6806:	15 91       	lpm	r17, Z+
    6808:	03 ff       	sbrs	r16, 3
    680a:	11 91       	ld	r17, Z+
    680c:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    680e:	b7 fe       	sbrs	r11, 7
    6810:	e6 cf       	rjmp	.-52     	; 0x67de <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    6812:	11 23       	and	r17, r17
    6814:	89 f0       	breq	.+34     	; 0x6838 <vfprintf+0xd6>
    6816:	61 2f       	mov	r22, r17
    6818:	77 27       	eor	r23, r23
    681a:	c2 01       	movw	r24, r4
    681c:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <strchr_P>
    6820:	89 2b       	or	r24, r25
    6822:	51 f0       	breq	.+20     	; 0x6838 <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    6824:	24 e0       	ldi	r18, 0x04	; 4
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	e2 0e       	add	r14, r18
    682a:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    682c:	b4 01       	movw	r22, r8
    682e:	8f e3       	ldi	r24, 0x3F	; 63
    6830:	90 e0       	ldi	r25, 0x00	; 0
    6832:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
    6836:	b8 cf       	rjmp	.-144    	; 0x67a8 <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    6838:	13 36       	cpi	r17, 0x63	; 99
    683a:	29 f0       	breq	.+10     	; 0x6846 <vfprintf+0xe4>
    683c:	13 37       	cpi	r17, 0x73	; 115
    683e:	81 f0       	breq	.+32     	; 0x6860 <vfprintf+0xfe>
    6840:	13 35       	cpi	r17, 0x53	; 83
    6842:	f9 f4       	brne	.+62     	; 0x6882 <vfprintf+0x120>
    6844:	0b c0       	rjmp	.+22     	; 0x685c <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    6846:	87 01       	movw	r16, r14
    6848:	0e 5f       	subi	r16, 0xFE	; 254
    684a:	1f 4f       	sbci	r17, 0xFF	; 255
    684c:	b4 01       	movw	r22, r8
    684e:	f7 01       	movw	r30, r14
    6850:	80 81       	ld	r24, Z
    6852:	91 81       	ldd	r25, Z+1	; 0x01
    6854:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
    6858:	78 01       	movw	r14, r16
    685a:	a6 cf       	rjmp	.-180    	; 0x67a8 <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    685c:	f1 e0       	ldi	r31, 0x01	; 1
    685e:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    6860:	f7 01       	movw	r30, r14
    6862:	00 81       	ld	r16, Z
    6864:	11 81       	ldd	r17, Z+1	; 0x01
    6866:	04 c0       	rjmp	.+8      	; 0x6870 <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    6868:	b4 01       	movw	r22, r8
    686a:	99 27       	eor	r25, r25
    686c:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    6870:	f8 01       	movw	r30, r16
    6872:	b0 fc       	sbrc	r11, 0
    6874:	85 91       	lpm	r24, Z+
    6876:	b0 fe       	sbrs	r11, 0
    6878:	81 91       	ld	r24, Z+
    687a:	8f 01       	movw	r16, r30
    687c:	88 23       	and	r24, r24
    687e:	a1 f7       	brne	.-24     	; 0x6868 <vfprintf+0x106>
    6880:	82 cf       	rjmp	.-252    	; 0x6786 <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    6882:	14 36       	cpi	r17, 0x64	; 100
    6884:	11 f0       	breq	.+4      	; 0x688a <vfprintf+0x128>
    6886:	19 36       	cpi	r17, 0x69	; 105
    6888:	49 f5       	brne	.+82     	; 0x68dc <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    688a:	b7 fe       	sbrs	r11, 7
    688c:	0a c0       	rjmp	.+20     	; 0x68a2 <vfprintf+0x140>
    688e:	f7 01       	movw	r30, r14
    6890:	60 81       	ld	r22, Z
    6892:	71 81       	ldd	r23, Z+1	; 0x01
    6894:	82 81       	ldd	r24, Z+2	; 0x02
    6896:	93 81       	ldd	r25, Z+3	; 0x03
    6898:	24 e0       	ldi	r18, 0x04	; 4
    689a:	30 e0       	ldi	r19, 0x00	; 0
    689c:	e2 0e       	add	r14, r18
    689e:	f3 1e       	adc	r15, r19
    68a0:	0d c0       	rjmp	.+26     	; 0x68bc <vfprintf+0x15a>
    68a2:	f7 01       	movw	r30, r14
    68a4:	80 81       	ld	r24, Z
    68a6:	91 81       	ldd	r25, Z+1	; 0x01
    68a8:	9c 01       	movw	r18, r24
    68aa:	b9 01       	movw	r22, r18
    68ac:	88 27       	eor	r24, r24
    68ae:	77 fd       	sbrc	r23, 7
    68b0:	80 95       	com	r24
    68b2:	98 2f       	mov	r25, r24
    68b4:	42 e0       	ldi	r20, 0x02	; 2
    68b6:	50 e0       	ldi	r21, 0x00	; 0
    68b8:	e4 0e       	add	r14, r20
    68ba:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    68bc:	5f ee       	ldi	r21, 0xEF	; 239
    68be:	b5 22       	and	r11, r21
	    if (x < 0) {
    68c0:	97 ff       	sbrs	r25, 7
    68c2:	09 c0       	rjmp	.+18     	; 0x68d6 <vfprintf+0x174>
		x = -x;
    68c4:	90 95       	com	r25
    68c6:	80 95       	com	r24
    68c8:	70 95       	com	r23
    68ca:	61 95       	neg	r22
    68cc:	7f 4f       	sbci	r23, 0xFF	; 255
    68ce:	8f 4f       	sbci	r24, 0xFF	; 255
    68d0:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    68d2:	e0 e4       	ldi	r30, 0x40	; 64
    68d4:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    68d6:	2a e0       	ldi	r18, 0x0A	; 10
    68d8:	30 e0       	ldi	r19, 0x00	; 0
    68da:	3a c0       	rjmp	.+116    	; 0x6950 <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    68dc:	10 37       	cpi	r17, 0x70	; 112
    68de:	b1 f0       	breq	.+44     	; 0x690c <vfprintf+0x1aa>
    68e0:	11 37       	cpi	r17, 0x71	; 113
    68e2:	30 f4       	brcc	.+12     	; 0x68f0 <vfprintf+0x18e>
    68e4:	18 35       	cpi	r17, 0x58	; 88
    68e6:	c9 f0       	breq	.+50     	; 0x691a <vfprintf+0x1b8>
    68e8:	1f 36       	cpi	r17, 0x6F	; 111
    68ea:	09 f0       	breq	.+2      	; 0x68ee <vfprintf+0x18c>
    68ec:	63 c0       	rjmp	.+198    	; 0x69b4 <vfprintf+0x252>
    68ee:	06 c0       	rjmp	.+12     	; 0x68fc <vfprintf+0x19a>
    68f0:	15 37       	cpi	r17, 0x75	; 117
    68f2:	39 f0       	breq	.+14     	; 0x6902 <vfprintf+0x1a0>
    68f4:	18 37       	cpi	r17, 0x78	; 120
    68f6:	09 f0       	breq	.+2      	; 0x68fa <vfprintf+0x198>
    68f8:	5d c0       	rjmp	.+186    	; 0x69b4 <vfprintf+0x252>
    68fa:	0a c0       	rjmp	.+20     	; 0x6910 <vfprintf+0x1ae>
    68fc:	28 e0       	ldi	r18, 0x08	; 8
    68fe:	30 e0       	ldi	r19, 0x00	; 0
    6900:	10 c0       	rjmp	.+32     	; 0x6922 <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    6902:	ff ee       	ldi	r31, 0xEF	; 239
    6904:	bf 22       	and	r11, r31
    6906:	2a e0       	ldi	r18, 0x0A	; 10
    6908:	30 e0       	ldi	r19, 0x00	; 0
    690a:	0b c0       	rjmp	.+22     	; 0x6922 <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    690c:	20 e1       	ldi	r18, 0x10	; 16
    690e:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    6910:	34 e2       	ldi	r19, 0x24	; 36
    6912:	b3 2a       	or	r11, r19
    6914:	20 e1       	ldi	r18, 0x10	; 16
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	04 c0       	rjmp	.+8      	; 0x6922 <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    691a:	44 e0       	ldi	r20, 0x04	; 4
    691c:	b4 2a       	or	r11, r20
    691e:	20 e1       	ldi	r18, 0x10	; 16
    6920:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    6922:	b7 fe       	sbrs	r11, 7
    6924:	0a c0       	rjmp	.+20     	; 0x693a <vfprintf+0x1d8>
    6926:	f7 01       	movw	r30, r14
    6928:	60 81       	ld	r22, Z
    692a:	71 81       	ldd	r23, Z+1	; 0x01
    692c:	82 81       	ldd	r24, Z+2	; 0x02
    692e:	93 81       	ldd	r25, Z+3	; 0x03
    6930:	44 e0       	ldi	r20, 0x04	; 4
    6932:	50 e0       	ldi	r21, 0x00	; 0
    6934:	e4 0e       	add	r14, r20
    6936:	f5 1e       	adc	r15, r21
    6938:	0b c0       	rjmp	.+22     	; 0x6950 <vfprintf+0x1ee>
    693a:	f7 01       	movw	r30, r14
    693c:	80 81       	ld	r24, Z
    693e:	91 81       	ldd	r25, Z+1	; 0x01
    6940:	ac 01       	movw	r20, r24
    6942:	ba 01       	movw	r22, r20
    6944:	88 27       	eor	r24, r24
    6946:	99 27       	eor	r25, r25
    6948:	e2 e0       	ldi	r30, 0x02	; 2
    694a:	f0 e0       	ldi	r31, 0x00	; 0
    694c:	ee 0e       	add	r14, r30
    694e:	ff 1e       	adc	r15, r31
    6950:	a3 01       	movw	r20, r6
    6952:	0e 94 97 3c 	call	0x792e	; 0x792e <__ultoa_invert>
    6956:	a8 2e       	mov	r10, r24
    6958:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    695a:	0b 2d       	mov	r16, r11
    695c:	11 27       	eor	r17, r17
    695e:	06 ff       	sbrs	r16, 6
    6960:	05 c0       	rjmp	.+10     	; 0x696c <vfprintf+0x20a>
	    putc ('-', stream);
    6962:	b4 01       	movw	r22, r8
    6964:	8d e2       	ldi	r24, 0x2D	; 45
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    696c:	04 ff       	sbrs	r16, 4
    696e:	15 c0       	rjmp	.+42     	; 0x699a <vfprintf+0x238>
    6970:	fe 01       	movw	r30, r28
    6972:	ea 0d       	add	r30, r10
    6974:	f1 1d       	adc	r31, r1
    6976:	80 81       	ld	r24, Z
    6978:	80 33       	cpi	r24, 0x30	; 48
    697a:	79 f0       	breq	.+30     	; 0x699a <vfprintf+0x238>
	    putc ('0', stream);
    697c:	b4 01       	movw	r22, r8
    697e:	80 e3       	ldi	r24, 0x30	; 48
    6980:	90 e0       	ldi	r25, 0x00	; 0
    6982:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
	    if (flags & FL_ALTHEX)
    6986:	02 ff       	sbrs	r16, 2
    6988:	08 c0       	rjmp	.+16     	; 0x699a <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    698a:	00 72       	andi	r16, 0x20	; 32
    698c:	10 70       	andi	r17, 0x00	; 0
    698e:	b4 01       	movw	r22, r8
    6990:	c8 01       	movw	r24, r16
    6992:	88 5a       	subi	r24, 0xA8	; 168
    6994:	9f 4f       	sbci	r25, 0xFF	; 255
    6996:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
	}
	do {
	    putc (buf[--c], stream);
    699a:	aa 94       	dec	r10
    699c:	f3 01       	movw	r30, r6
    699e:	ea 0d       	add	r30, r10
    69a0:	f1 1d       	adc	r31, r1
    69a2:	80 81       	ld	r24, Z
    69a4:	b4 01       	movw	r22, r8
    69a6:	99 27       	eor	r25, r25
    69a8:	0e 94 2e 3c 	call	0x785c	; 0x785c <fputc>
	} while (c);
    69ac:	aa 20       	and	r10, r10
    69ae:	09 f4       	brne	.+2      	; 0x69b2 <vfprintf+0x250>
    69b0:	fb ce       	rjmp	.-522    	; 0x67a8 <vfprintf+0x46>
    69b2:	f3 cf       	rjmp	.-26     	; 0x699a <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    69b4:	f4 01       	movw	r30, r8
    69b6:	86 81       	ldd	r24, Z+6	; 0x06
    69b8:	97 81       	ldd	r25, Z+7	; 0x07
    69ba:	e2 e1       	ldi	r30, 0x12	; 18
    69bc:	2b 96       	adiw	r28, 0x0b	; 11
    69be:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <__epilogue_restores__>

000069c2 <__udivdi3>:
    69c2:	ac e6       	ldi	r26, 0x6C	; 108
    69c4:	b0 e0       	ldi	r27, 0x00	; 0
    69c6:	e7 ee       	ldi	r30, 0xE7	; 231
    69c8:	f4 e3       	ldi	r31, 0x34	; 52
    69ca:	0c 94 7e 3e 	jmp	0x7cfc	; 0x7cfc <__prologue_saves__>
    69ce:	22 2e       	mov	r2, r18
    69d0:	33 2e       	mov	r3, r19
    69d2:	44 2e       	mov	r4, r20
    69d4:	55 2e       	mov	r5, r21
    69d6:	66 2e       	mov	r6, r22
    69d8:	77 2e       	mov	r7, r23
    69da:	88 2e       	mov	r8, r24
    69dc:	99 2e       	mov	r9, r25
    69de:	6e 2d       	mov	r22, r14
    69e0:	a8 e0       	ldi	r26, 0x08	; 8
    69e2:	fe 01       	movw	r30, r28
    69e4:	31 96       	adiw	r30, 0x01	; 1
    69e6:	ea 2e       	mov	r14, r26
    69e8:	11 92       	st	Z+, r1
    69ea:	ea 94       	dec	r14
    69ec:	e9 f7       	brne	.-6      	; 0x69e8 <__udivdi3+0x26>
    69ee:	29 82       	std	Y+1, r2	; 0x01
    69f0:	3a 82       	std	Y+2, r3	; 0x02
    69f2:	4b 82       	std	Y+3, r4	; 0x03
    69f4:	5c 82       	std	Y+4, r5	; 0x04
    69f6:	6d 82       	std	Y+5, r6	; 0x05
    69f8:	7e 82       	std	Y+6, r7	; 0x06
    69fa:	8f 82       	std	Y+7, r8	; 0x07
    69fc:	98 86       	std	Y+8, r9	; 0x08
    69fe:	fe 01       	movw	r30, r28
    6a00:	39 96       	adiw	r30, 0x09	; 9
    6a02:	11 92       	st	Z+, r1
    6a04:	aa 95       	dec	r26
    6a06:	e9 f7       	brne	.-6      	; 0x6a02 <__udivdi3+0x40>
    6a08:	a9 86       	std	Y+9, r10	; 0x09
    6a0a:	ba 86       	std	Y+10, r11	; 0x0a
    6a0c:	cb 86       	std	Y+11, r12	; 0x0b
    6a0e:	dc 86       	std	Y+12, r13	; 0x0c
    6a10:	6d 87       	std	Y+13, r22	; 0x0d
    6a12:	fe 86       	std	Y+14, r15	; 0x0e
    6a14:	0f 87       	std	Y+15, r16	; 0x0f
    6a16:	18 8b       	std	Y+16, r17	; 0x10
    6a18:	a9 84       	ldd	r10, Y+9	; 0x09
    6a1a:	ba 84       	ldd	r11, Y+10	; 0x0a
    6a1c:	cb 84       	ldd	r12, Y+11	; 0x0b
    6a1e:	dc 84       	ldd	r13, Y+12	; 0x0c
    6a20:	6d 84       	ldd	r6, Y+13	; 0x0d
    6a22:	7e 84       	ldd	r7, Y+14	; 0x0e
    6a24:	8f 84       	ldd	r8, Y+15	; 0x0f
    6a26:	98 88       	ldd	r9, Y+16	; 0x10
    6a28:	09 81       	ldd	r16, Y+1	; 0x01
    6a2a:	1a 81       	ldd	r17, Y+2	; 0x02
    6a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    6a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    6a30:	09 ab       	std	Y+49, r16	; 0x31
    6a32:	1a ab       	std	Y+50, r17	; 0x32
    6a34:	2b ab       	std	Y+51, r18	; 0x33
    6a36:	3c ab       	std	Y+52, r19	; 0x34
    6a38:	2d 80       	ldd	r2, Y+5	; 0x05
    6a3a:	3e 80       	ldd	r3, Y+6	; 0x06
    6a3c:	4f 80       	ldd	r4, Y+7	; 0x07
    6a3e:	58 84       	ldd	r5, Y+8	; 0x08
    6a40:	61 14       	cp	r6, r1
    6a42:	71 04       	cpc	r7, r1
    6a44:	81 04       	cpc	r8, r1
    6a46:	91 04       	cpc	r9, r1
    6a48:	09 f0       	breq	.+2      	; 0x6a4c <__udivdi3+0x8a>
    6a4a:	b8 c3       	rjmp	.+1904   	; 0x71bc <__udivdi3+0x7fa>
    6a4c:	2a 14       	cp	r2, r10
    6a4e:	3b 04       	cpc	r3, r11
    6a50:	4c 04       	cpc	r4, r12
    6a52:	5d 04       	cpc	r5, r13
    6a54:	08 f0       	brcs	.+2      	; 0x6a58 <__udivdi3+0x96>
    6a56:	61 c1       	rjmp	.+706    	; 0x6d1a <__udivdi3+0x358>
    6a58:	10 e0       	ldi	r17, 0x00	; 0
    6a5a:	a1 16       	cp	r10, r17
    6a5c:	10 e0       	ldi	r17, 0x00	; 0
    6a5e:	b1 06       	cpc	r11, r17
    6a60:	11 e0       	ldi	r17, 0x01	; 1
    6a62:	c1 06       	cpc	r12, r17
    6a64:	10 e0       	ldi	r17, 0x00	; 0
    6a66:	d1 06       	cpc	r13, r17
    6a68:	88 f4       	brcc	.+34     	; 0x6a8c <__udivdi3+0xca>
    6a6a:	2f ef       	ldi	r18, 0xFF	; 255
    6a6c:	a2 16       	cp	r10, r18
    6a6e:	b1 04       	cpc	r11, r1
    6a70:	c1 04       	cpc	r12, r1
    6a72:	d1 04       	cpc	r13, r1
    6a74:	09 f0       	breq	.+2      	; 0x6a78 <__udivdi3+0xb6>
    6a76:	28 f4       	brcc	.+10     	; 0x6a82 <__udivdi3+0xc0>
    6a78:	20 e0       	ldi	r18, 0x00	; 0
    6a7a:	30 e0       	ldi	r19, 0x00	; 0
    6a7c:	40 e0       	ldi	r20, 0x00	; 0
    6a7e:	50 e0       	ldi	r21, 0x00	; 0
    6a80:	17 c0       	rjmp	.+46     	; 0x6ab0 <__udivdi3+0xee>
    6a82:	28 e0       	ldi	r18, 0x08	; 8
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	40 e0       	ldi	r20, 0x00	; 0
    6a88:	50 e0       	ldi	r21, 0x00	; 0
    6a8a:	12 c0       	rjmp	.+36     	; 0x6ab0 <__udivdi3+0xee>
    6a8c:	30 e0       	ldi	r19, 0x00	; 0
    6a8e:	a3 16       	cp	r10, r19
    6a90:	30 e0       	ldi	r19, 0x00	; 0
    6a92:	b3 06       	cpc	r11, r19
    6a94:	30 e0       	ldi	r19, 0x00	; 0
    6a96:	c3 06       	cpc	r12, r19
    6a98:	31 e0       	ldi	r19, 0x01	; 1
    6a9a:	d3 06       	cpc	r13, r19
    6a9c:	28 f4       	brcc	.+10     	; 0x6aa8 <__udivdi3+0xe6>
    6a9e:	20 e1       	ldi	r18, 0x10	; 16
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	40 e0       	ldi	r20, 0x00	; 0
    6aa4:	50 e0       	ldi	r21, 0x00	; 0
    6aa6:	04 c0       	rjmp	.+8      	; 0x6ab0 <__udivdi3+0xee>
    6aa8:	28 e1       	ldi	r18, 0x18	; 24
    6aaa:	30 e0       	ldi	r19, 0x00	; 0
    6aac:	40 e0       	ldi	r20, 0x00	; 0
    6aae:	50 e0       	ldi	r21, 0x00	; 0
    6ab0:	80 e2       	ldi	r24, 0x20	; 32
    6ab2:	90 e0       	ldi	r25, 0x00	; 0
    6ab4:	a0 e0       	ldi	r26, 0x00	; 0
    6ab6:	b0 e0       	ldi	r27, 0x00	; 0
    6ab8:	82 1b       	sub	r24, r18
    6aba:	93 0b       	sbc	r25, r19
    6abc:	a4 0b       	sbc	r26, r20
    6abe:	b5 0b       	sbc	r27, r21
    6ac0:	35 01       	movw	r6, r10
    6ac2:	46 01       	movw	r8, r12
    6ac4:	04 c0       	rjmp	.+8      	; 0x6ace <__udivdi3+0x10c>
    6ac6:	96 94       	lsr	r9
    6ac8:	87 94       	ror	r8
    6aca:	77 94       	ror	r7
    6acc:	67 94       	ror	r6
    6ace:	2a 95       	dec	r18
    6ad0:	d2 f7       	brpl	.-12     	; 0x6ac6 <__udivdi3+0x104>
    6ad2:	a4 01       	movw	r20, r8
    6ad4:	93 01       	movw	r18, r6
    6ad6:	23 56       	subi	r18, 0x63	; 99
    6ad8:	3d 4f       	sbci	r19, 0xFD	; 253
    6ada:	f9 01       	movw	r30, r18
    6adc:	20 81       	ld	r18, Z
    6ade:	ac 01       	movw	r20, r24
    6ae0:	bd 01       	movw	r22, r26
    6ae2:	42 1b       	sub	r20, r18
    6ae4:	51 09       	sbc	r21, r1
    6ae6:	61 09       	sbc	r22, r1
    6ae8:	71 09       	sbc	r23, r1
    6aea:	41 15       	cp	r20, r1
    6aec:	51 05       	cpc	r21, r1
    6aee:	61 05       	cpc	r22, r1
    6af0:	71 05       	cpc	r23, r1
    6af2:	b9 f1       	breq	.+110    	; 0x6b62 <__udivdi3+0x1a0>
    6af4:	ca 01       	movw	r24, r20
    6af6:	04 2e       	mov	r0, r20
    6af8:	04 c0       	rjmp	.+8      	; 0x6b02 <__udivdi3+0x140>
    6afa:	aa 0c       	add	r10, r10
    6afc:	bb 1c       	adc	r11, r11
    6afe:	cc 1c       	adc	r12, r12
    6b00:	dd 1c       	adc	r13, r13
    6b02:	0a 94       	dec	r0
    6b04:	d2 f7       	brpl	.-12     	; 0x6afa <__udivdi3+0x138>
    6b06:	20 e2       	ldi	r18, 0x20	; 32
    6b08:	30 e0       	ldi	r19, 0x00	; 0
    6b0a:	24 1b       	sub	r18, r20
    6b0c:	35 0b       	sbc	r19, r21
    6b0e:	69 a8       	ldd	r6, Y+49	; 0x31
    6b10:	7a a8       	ldd	r7, Y+50	; 0x32
    6b12:	8b a8       	ldd	r8, Y+51	; 0x33
    6b14:	9c a8       	ldd	r9, Y+52	; 0x34
    6b16:	04 c0       	rjmp	.+8      	; 0x6b20 <__udivdi3+0x15e>
    6b18:	96 94       	lsr	r9
    6b1a:	87 94       	ror	r8
    6b1c:	77 94       	ror	r7
    6b1e:	67 94       	ror	r6
    6b20:	2a 95       	dec	r18
    6b22:	d2 f7       	brpl	.-12     	; 0x6b18 <__udivdi3+0x156>
    6b24:	82 01       	movw	r16, r4
    6b26:	71 01       	movw	r14, r2
    6b28:	08 2e       	mov	r0, r24
    6b2a:	04 c0       	rjmp	.+8      	; 0x6b34 <__udivdi3+0x172>
    6b2c:	ee 0c       	add	r14, r14
    6b2e:	ff 1c       	adc	r15, r15
    6b30:	00 1f       	adc	r16, r16
    6b32:	11 1f       	adc	r17, r17
    6b34:	0a 94       	dec	r0
    6b36:	d2 f7       	brpl	.-12     	; 0x6b2c <__udivdi3+0x16a>
    6b38:	13 01       	movw	r2, r6
    6b3a:	24 01       	movw	r4, r8
    6b3c:	2e 28       	or	r2, r14
    6b3e:	3f 28       	or	r3, r15
    6b40:	40 2a       	or	r4, r16
    6b42:	51 2a       	or	r5, r17
    6b44:	e9 a8       	ldd	r14, Y+49	; 0x31
    6b46:	fa a8       	ldd	r15, Y+50	; 0x32
    6b48:	0b a9       	ldd	r16, Y+51	; 0x33
    6b4a:	1c a9       	ldd	r17, Y+52	; 0x34
    6b4c:	04 c0       	rjmp	.+8      	; 0x6b56 <__udivdi3+0x194>
    6b4e:	ee 0c       	add	r14, r14
    6b50:	ff 1c       	adc	r15, r15
    6b52:	00 1f       	adc	r16, r16
    6b54:	11 1f       	adc	r17, r17
    6b56:	8a 95       	dec	r24
    6b58:	d2 f7       	brpl	.-12     	; 0x6b4e <__udivdi3+0x18c>
    6b5a:	e9 aa       	std	Y+49, r14	; 0x31
    6b5c:	fa aa       	std	Y+50, r15	; 0x32
    6b5e:	0b ab       	std	Y+51, r16	; 0x33
    6b60:	1c ab       	std	Y+52, r17	; 0x34
    6b62:	86 01       	movw	r16, r12
    6b64:	22 27       	eor	r18, r18
    6b66:	33 27       	eor	r19, r19
    6b68:	21 96       	adiw	r28, 0x01	; 1
    6b6a:	0c af       	std	Y+60, r16	; 0x3c
    6b6c:	1d af       	std	Y+61, r17	; 0x3d
    6b6e:	2e af       	std	Y+62, r18	; 0x3e
    6b70:	3f af       	std	Y+63, r19	; 0x3f
    6b72:	21 97       	sbiw	r28, 0x01	; 1
    6b74:	a6 01       	movw	r20, r12
    6b76:	95 01       	movw	r18, r10
    6b78:	40 70       	andi	r20, 0x00	; 0
    6b7a:	50 70       	andi	r21, 0x00	; 0
    6b7c:	25 96       	adiw	r28, 0x05	; 5
    6b7e:	2c af       	std	Y+60, r18	; 0x3c
    6b80:	3d af       	std	Y+61, r19	; 0x3d
    6b82:	4e af       	std	Y+62, r20	; 0x3e
    6b84:	5f af       	std	Y+63, r21	; 0x3f
    6b86:	25 97       	sbiw	r28, 0x05	; 5
    6b88:	c2 01       	movw	r24, r4
    6b8a:	b1 01       	movw	r22, r2
    6b8c:	21 96       	adiw	r28, 0x01	; 1
    6b8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6b90:	3d ad       	ldd	r19, Y+61	; 0x3d
    6b92:	4e ad       	ldd	r20, Y+62	; 0x3e
    6b94:	5f ad       	ldd	r21, Y+63	; 0x3f
    6b96:	21 97       	sbiw	r28, 0x01	; 1
    6b98:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6b9c:	29 96       	adiw	r28, 0x09	; 9
    6b9e:	2c af       	std	Y+60, r18	; 0x3c
    6ba0:	3d af       	std	Y+61, r19	; 0x3d
    6ba2:	4e af       	std	Y+62, r20	; 0x3e
    6ba4:	5f af       	std	Y+63, r21	; 0x3f
    6ba6:	29 97       	sbiw	r28, 0x09	; 9
    6ba8:	ca 01       	movw	r24, r20
    6baa:	b9 01       	movw	r22, r18
    6bac:	25 96       	adiw	r28, 0x05	; 5
    6bae:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bb0:	3d ad       	ldd	r19, Y+61	; 0x3d
    6bb2:	4e ad       	ldd	r20, Y+62	; 0x3e
    6bb4:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bb6:	25 97       	sbiw	r28, 0x05	; 5
    6bb8:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    6bbc:	3b 01       	movw	r6, r22
    6bbe:	4c 01       	movw	r8, r24
    6bc0:	c2 01       	movw	r24, r4
    6bc2:	b1 01       	movw	r22, r2
    6bc4:	21 96       	adiw	r28, 0x01	; 1
    6bc6:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bc8:	3d ad       	ldd	r19, Y+61	; 0x3d
    6bca:	4e ad       	ldd	r20, Y+62	; 0x3e
    6bcc:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bce:	21 97       	sbiw	r28, 0x01	; 1
    6bd0:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6bd4:	cb 01       	movw	r24, r22
    6bd6:	77 27       	eor	r23, r23
    6bd8:	66 27       	eor	r22, r22
    6bda:	e9 a8       	ldd	r14, Y+49	; 0x31
    6bdc:	fa a8       	ldd	r15, Y+50	; 0x32
    6bde:	0b a9       	ldd	r16, Y+51	; 0x33
    6be0:	1c a9       	ldd	r17, Y+52	; 0x34
    6be2:	98 01       	movw	r18, r16
    6be4:	44 27       	eor	r20, r20
    6be6:	55 27       	eor	r21, r21
    6be8:	7b 01       	movw	r14, r22
    6bea:	8c 01       	movw	r16, r24
    6bec:	e2 2a       	or	r14, r18
    6bee:	f3 2a       	or	r15, r19
    6bf0:	04 2b       	or	r16, r20
    6bf2:	15 2b       	or	r17, r21
    6bf4:	e6 14       	cp	r14, r6
    6bf6:	f7 04       	cpc	r15, r7
    6bf8:	08 05       	cpc	r16, r8
    6bfa:	19 05       	cpc	r17, r9
    6bfc:	60 f5       	brcc	.+88     	; 0x6c56 <__udivdi3+0x294>
    6bfe:	29 96       	adiw	r28, 0x09	; 9
    6c00:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c02:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c04:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c06:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c08:	29 97       	sbiw	r28, 0x09	; 9
    6c0a:	21 50       	subi	r18, 0x01	; 1
    6c0c:	30 40       	sbci	r19, 0x00	; 0
    6c0e:	40 40       	sbci	r20, 0x00	; 0
    6c10:	50 40       	sbci	r21, 0x00	; 0
    6c12:	29 96       	adiw	r28, 0x09	; 9
    6c14:	2c af       	std	Y+60, r18	; 0x3c
    6c16:	3d af       	std	Y+61, r19	; 0x3d
    6c18:	4e af       	std	Y+62, r20	; 0x3e
    6c1a:	5f af       	std	Y+63, r21	; 0x3f
    6c1c:	29 97       	sbiw	r28, 0x09	; 9
    6c1e:	ea 0c       	add	r14, r10
    6c20:	fb 1c       	adc	r15, r11
    6c22:	0c 1d       	adc	r16, r12
    6c24:	1d 1d       	adc	r17, r13
    6c26:	ea 14       	cp	r14, r10
    6c28:	fb 04       	cpc	r15, r11
    6c2a:	0c 05       	cpc	r16, r12
    6c2c:	1d 05       	cpc	r17, r13
    6c2e:	98 f0       	brcs	.+38     	; 0x6c56 <__udivdi3+0x294>
    6c30:	e6 14       	cp	r14, r6
    6c32:	f7 04       	cpc	r15, r7
    6c34:	08 05       	cpc	r16, r8
    6c36:	19 05       	cpc	r17, r9
    6c38:	70 f4       	brcc	.+28     	; 0x6c56 <__udivdi3+0x294>
    6c3a:	21 50       	subi	r18, 0x01	; 1
    6c3c:	30 40       	sbci	r19, 0x00	; 0
    6c3e:	40 40       	sbci	r20, 0x00	; 0
    6c40:	50 40       	sbci	r21, 0x00	; 0
    6c42:	29 96       	adiw	r28, 0x09	; 9
    6c44:	2c af       	std	Y+60, r18	; 0x3c
    6c46:	3d af       	std	Y+61, r19	; 0x3d
    6c48:	4e af       	std	Y+62, r20	; 0x3e
    6c4a:	5f af       	std	Y+63, r21	; 0x3f
    6c4c:	29 97       	sbiw	r28, 0x09	; 9
    6c4e:	ea 0c       	add	r14, r10
    6c50:	fb 1c       	adc	r15, r11
    6c52:	0c 1d       	adc	r16, r12
    6c54:	1d 1d       	adc	r17, r13
    6c56:	e6 18       	sub	r14, r6
    6c58:	f7 08       	sbc	r15, r7
    6c5a:	08 09       	sbc	r16, r8
    6c5c:	19 09       	sbc	r17, r9
    6c5e:	c8 01       	movw	r24, r16
    6c60:	b7 01       	movw	r22, r14
    6c62:	21 96       	adiw	r28, 0x01	; 1
    6c64:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c66:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c68:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c6c:	21 97       	sbiw	r28, 0x01	; 1
    6c6e:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6c72:	39 01       	movw	r6, r18
    6c74:	4a 01       	movw	r8, r20
    6c76:	ca 01       	movw	r24, r20
    6c78:	b9 01       	movw	r22, r18
    6c7a:	25 96       	adiw	r28, 0x05	; 5
    6c7c:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c7e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c80:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c82:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c84:	25 97       	sbiw	r28, 0x05	; 5
    6c86:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    6c8a:	1b 01       	movw	r2, r22
    6c8c:	2c 01       	movw	r4, r24
    6c8e:	c8 01       	movw	r24, r16
    6c90:	b7 01       	movw	r22, r14
    6c92:	21 96       	adiw	r28, 0x01	; 1
    6c94:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c96:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c98:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c9c:	21 97       	sbiw	r28, 0x01	; 1
    6c9e:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6ca2:	cb 01       	movw	r24, r22
    6ca4:	77 27       	eor	r23, r23
    6ca6:	66 27       	eor	r22, r22
    6ca8:	29 a9       	ldd	r18, Y+49	; 0x31
    6caa:	3a a9       	ldd	r19, Y+50	; 0x32
    6cac:	4b a9       	ldd	r20, Y+51	; 0x33
    6cae:	5c a9       	ldd	r21, Y+52	; 0x34
    6cb0:	40 70       	andi	r20, 0x00	; 0
    6cb2:	50 70       	andi	r21, 0x00	; 0
    6cb4:	26 2b       	or	r18, r22
    6cb6:	37 2b       	or	r19, r23
    6cb8:	48 2b       	or	r20, r24
    6cba:	59 2b       	or	r21, r25
    6cbc:	22 15       	cp	r18, r2
    6cbe:	33 05       	cpc	r19, r3
    6cc0:	44 05       	cpc	r20, r4
    6cc2:	55 05       	cpc	r21, r5
    6cc4:	c0 f4       	brcc	.+48     	; 0x6cf6 <__udivdi3+0x334>
    6cc6:	08 94       	sec
    6cc8:	61 08       	sbc	r6, r1
    6cca:	71 08       	sbc	r7, r1
    6ccc:	81 08       	sbc	r8, r1
    6cce:	91 08       	sbc	r9, r1
    6cd0:	2a 0d       	add	r18, r10
    6cd2:	3b 1d       	adc	r19, r11
    6cd4:	4c 1d       	adc	r20, r12
    6cd6:	5d 1d       	adc	r21, r13
    6cd8:	2a 15       	cp	r18, r10
    6cda:	3b 05       	cpc	r19, r11
    6cdc:	4c 05       	cpc	r20, r12
    6cde:	5d 05       	cpc	r21, r13
    6ce0:	50 f0       	brcs	.+20     	; 0x6cf6 <__udivdi3+0x334>
    6ce2:	22 15       	cp	r18, r2
    6ce4:	33 05       	cpc	r19, r3
    6ce6:	44 05       	cpc	r20, r4
    6ce8:	55 05       	cpc	r21, r5
    6cea:	28 f4       	brcc	.+10     	; 0x6cf6 <__udivdi3+0x334>
    6cec:	08 94       	sec
    6cee:	61 08       	sbc	r6, r1
    6cf0:	71 08       	sbc	r7, r1
    6cf2:	81 08       	sbc	r8, r1
    6cf4:	91 08       	sbc	r9, r1
    6cf6:	29 96       	adiw	r28, 0x09	; 9
    6cf8:	ec ac       	ldd	r14, Y+60	; 0x3c
    6cfa:	fd ac       	ldd	r15, Y+61	; 0x3d
    6cfc:	0e ad       	ldd	r16, Y+62	; 0x3e
    6cfe:	1f ad       	ldd	r17, Y+63	; 0x3f
    6d00:	29 97       	sbiw	r28, 0x09	; 9
    6d02:	d7 01       	movw	r26, r14
    6d04:	99 27       	eor	r25, r25
    6d06:	88 27       	eor	r24, r24
    6d08:	68 2a       	or	r6, r24
    6d0a:	79 2a       	or	r7, r25
    6d0c:	8a 2a       	or	r8, r26
    6d0e:	9b 2a       	or	r9, r27
    6d10:	6d aa       	std	Y+53, r6	; 0x35
    6d12:	7e aa       	std	Y+54, r7	; 0x36
    6d14:	8f aa       	std	Y+55, r8	; 0x37
    6d16:	98 ae       	std	Y+56, r9	; 0x38
    6d18:	b2 c4       	rjmp	.+2404   	; 0x767e <__udivdi3+0xcbc>
    6d1a:	a1 14       	cp	r10, r1
    6d1c:	b1 04       	cpc	r11, r1
    6d1e:	c1 04       	cpc	r12, r1
    6d20:	d1 04       	cpc	r13, r1
    6d22:	61 f4       	brne	.+24     	; 0x6d3c <__udivdi3+0x37a>
    6d24:	61 e0       	ldi	r22, 0x01	; 1
    6d26:	70 e0       	ldi	r23, 0x00	; 0
    6d28:	80 e0       	ldi	r24, 0x00	; 0
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	20 e0       	ldi	r18, 0x00	; 0
    6d2e:	30 e0       	ldi	r19, 0x00	; 0
    6d30:	40 e0       	ldi	r20, 0x00	; 0
    6d32:	50 e0       	ldi	r21, 0x00	; 0
    6d34:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6d38:	59 01       	movw	r10, r18
    6d3a:	6a 01       	movw	r12, r20
    6d3c:	00 e0       	ldi	r16, 0x00	; 0
    6d3e:	a0 16       	cp	r10, r16
    6d40:	00 e0       	ldi	r16, 0x00	; 0
    6d42:	b0 06       	cpc	r11, r16
    6d44:	01 e0       	ldi	r16, 0x01	; 1
    6d46:	c0 06       	cpc	r12, r16
    6d48:	00 e0       	ldi	r16, 0x00	; 0
    6d4a:	d0 06       	cpc	r13, r16
    6d4c:	88 f4       	brcc	.+34     	; 0x6d70 <__udivdi3+0x3ae>
    6d4e:	1f ef       	ldi	r17, 0xFF	; 255
    6d50:	a1 16       	cp	r10, r17
    6d52:	b1 04       	cpc	r11, r1
    6d54:	c1 04       	cpc	r12, r1
    6d56:	d1 04       	cpc	r13, r1
    6d58:	09 f0       	breq	.+2      	; 0x6d5c <__udivdi3+0x39a>
    6d5a:	28 f4       	brcc	.+10     	; 0x6d66 <__udivdi3+0x3a4>
    6d5c:	20 e0       	ldi	r18, 0x00	; 0
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	40 e0       	ldi	r20, 0x00	; 0
    6d62:	50 e0       	ldi	r21, 0x00	; 0
    6d64:	17 c0       	rjmp	.+46     	; 0x6d94 <__udivdi3+0x3d2>
    6d66:	28 e0       	ldi	r18, 0x08	; 8
    6d68:	30 e0       	ldi	r19, 0x00	; 0
    6d6a:	40 e0       	ldi	r20, 0x00	; 0
    6d6c:	50 e0       	ldi	r21, 0x00	; 0
    6d6e:	12 c0       	rjmp	.+36     	; 0x6d94 <__udivdi3+0x3d2>
    6d70:	20 e0       	ldi	r18, 0x00	; 0
    6d72:	a2 16       	cp	r10, r18
    6d74:	20 e0       	ldi	r18, 0x00	; 0
    6d76:	b2 06       	cpc	r11, r18
    6d78:	20 e0       	ldi	r18, 0x00	; 0
    6d7a:	c2 06       	cpc	r12, r18
    6d7c:	21 e0       	ldi	r18, 0x01	; 1
    6d7e:	d2 06       	cpc	r13, r18
    6d80:	28 f4       	brcc	.+10     	; 0x6d8c <__udivdi3+0x3ca>
    6d82:	20 e1       	ldi	r18, 0x10	; 16
    6d84:	30 e0       	ldi	r19, 0x00	; 0
    6d86:	40 e0       	ldi	r20, 0x00	; 0
    6d88:	50 e0       	ldi	r21, 0x00	; 0
    6d8a:	04 c0       	rjmp	.+8      	; 0x6d94 <__udivdi3+0x3d2>
    6d8c:	28 e1       	ldi	r18, 0x18	; 24
    6d8e:	30 e0       	ldi	r19, 0x00	; 0
    6d90:	40 e0       	ldi	r20, 0x00	; 0
    6d92:	50 e0       	ldi	r21, 0x00	; 0
    6d94:	f0 e2       	ldi	r31, 0x20	; 32
    6d96:	ef 2e       	mov	r14, r31
    6d98:	f1 2c       	mov	r15, r1
    6d9a:	01 2d       	mov	r16, r1
    6d9c:	11 2d       	mov	r17, r1
    6d9e:	d8 01       	movw	r26, r16
    6da0:	c7 01       	movw	r24, r14
    6da2:	82 1b       	sub	r24, r18
    6da4:	93 0b       	sbc	r25, r19
    6da6:	a4 0b       	sbc	r26, r20
    6da8:	b5 0b       	sbc	r27, r21
    6daa:	35 01       	movw	r6, r10
    6dac:	46 01       	movw	r8, r12
    6dae:	04 c0       	rjmp	.+8      	; 0x6db8 <__udivdi3+0x3f6>
    6db0:	96 94       	lsr	r9
    6db2:	87 94       	ror	r8
    6db4:	77 94       	ror	r7
    6db6:	67 94       	ror	r6
    6db8:	2a 95       	dec	r18
    6dba:	d2 f7       	brpl	.-12     	; 0x6db0 <__udivdi3+0x3ee>
    6dbc:	a4 01       	movw	r20, r8
    6dbe:	93 01       	movw	r18, r6
    6dc0:	23 56       	subi	r18, 0x63	; 99
    6dc2:	3d 4f       	sbci	r19, 0xFD	; 253
    6dc4:	f9 01       	movw	r30, r18
    6dc6:	20 81       	ld	r18, Z
    6dc8:	82 1b       	sub	r24, r18
    6dca:	91 09       	sbc	r25, r1
    6dcc:	a1 09       	sbc	r26, r1
    6dce:	b1 09       	sbc	r27, r1
    6dd0:	00 97       	sbiw	r24, 0x00	; 0
    6dd2:	a1 05       	cpc	r26, r1
    6dd4:	b1 05       	cpc	r27, r1
    6dd6:	61 f4       	brne	.+24     	; 0x6df0 <__udivdi3+0x42e>
    6dd8:	82 01       	movw	r16, r4
    6dda:	71 01       	movw	r14, r2
    6ddc:	ea 18       	sub	r14, r10
    6dde:	fb 08       	sbc	r15, r11
    6de0:	0c 09       	sbc	r16, r12
    6de2:	1d 09       	sbc	r17, r13
    6de4:	e1 e0       	ldi	r30, 0x01	; 1
    6de6:	6e 2e       	mov	r6, r30
    6de8:	71 2c       	mov	r7, r1
    6dea:	81 2c       	mov	r8, r1
    6dec:	91 2c       	mov	r9, r1
    6dee:	1a c1       	rjmp	.+564    	; 0x7024 <__udivdi3+0x662>
    6df0:	98 a3       	std	Y+32, r25	; 0x20
    6df2:	8f 8f       	std	Y+31, r24	; 0x1f
    6df4:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6df6:	04 c0       	rjmp	.+8      	; 0x6e00 <__udivdi3+0x43e>
    6df8:	aa 0c       	add	r10, r10
    6dfa:	bb 1c       	adc	r11, r11
    6dfc:	cc 1c       	adc	r12, r12
    6dfe:	dd 1c       	adc	r13, r13
    6e00:	0a 94       	dec	r0
    6e02:	d2 f7       	brpl	.-12     	; 0x6df8 <__udivdi3+0x436>
    6e04:	e8 1a       	sub	r14, r24
    6e06:	f9 0a       	sbc	r15, r25
    6e08:	0a 0b       	sbc	r16, r26
    6e0a:	1b 0b       	sbc	r17, r27
    6e0c:	d8 01       	movw	r26, r16
    6e0e:	c7 01       	movw	r24, r14
    6e10:	82 01       	movw	r16, r4
    6e12:	71 01       	movw	r14, r2
    6e14:	08 2e       	mov	r0, r24
    6e16:	04 c0       	rjmp	.+8      	; 0x6e20 <__udivdi3+0x45e>
    6e18:	16 95       	lsr	r17
    6e1a:	07 95       	ror	r16
    6e1c:	f7 94       	ror	r15
    6e1e:	e7 94       	ror	r14
    6e20:	0a 94       	dec	r0
    6e22:	d2 f7       	brpl	.-12     	; 0x6e18 <__udivdi3+0x456>
    6e24:	29 a9       	ldd	r18, Y+49	; 0x31
    6e26:	3a a9       	ldd	r19, Y+50	; 0x32
    6e28:	4b a9       	ldd	r20, Y+51	; 0x33
    6e2a:	5c a9       	ldd	r21, Y+52	; 0x34
    6e2c:	04 c0       	rjmp	.+8      	; 0x6e36 <__udivdi3+0x474>
    6e2e:	56 95       	lsr	r21
    6e30:	47 95       	ror	r20
    6e32:	37 95       	ror	r19
    6e34:	27 95       	ror	r18
    6e36:	8a 95       	dec	r24
    6e38:	d2 f7       	brpl	.-12     	; 0x6e2e <__udivdi3+0x46c>
    6e3a:	d2 01       	movw	r26, r4
    6e3c:	c1 01       	movw	r24, r2
    6e3e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6e40:	04 c0       	rjmp	.+8      	; 0x6e4a <__udivdi3+0x488>
    6e42:	88 0f       	add	r24, r24
    6e44:	99 1f       	adc	r25, r25
    6e46:	aa 1f       	adc	r26, r26
    6e48:	bb 1f       	adc	r27, r27
    6e4a:	0a 94       	dec	r0
    6e4c:	d2 f7       	brpl	.-12     	; 0x6e42 <__udivdi3+0x480>
    6e4e:	28 2b       	or	r18, r24
    6e50:	39 2b       	or	r19, r25
    6e52:	4a 2b       	or	r20, r26
    6e54:	5b 2b       	or	r21, r27
    6e56:	2d a7       	std	Y+45, r18	; 0x2d
    6e58:	3e a7       	std	Y+46, r19	; 0x2e
    6e5a:	4f a7       	std	Y+47, r20	; 0x2f
    6e5c:	58 ab       	std	Y+48, r21	; 0x30
    6e5e:	96 01       	movw	r18, r12
    6e60:	44 27       	eor	r20, r20
    6e62:	55 27       	eor	r21, r21
    6e64:	2d 96       	adiw	r28, 0x0d	; 13
    6e66:	2c af       	std	Y+60, r18	; 0x3c
    6e68:	3d af       	std	Y+61, r19	; 0x3d
    6e6a:	4e af       	std	Y+62, r20	; 0x3e
    6e6c:	5f af       	std	Y+63, r21	; 0x3f
    6e6e:	2d 97       	sbiw	r28, 0x0d	; 13
    6e70:	6f ef       	ldi	r22, 0xFF	; 255
    6e72:	26 2e       	mov	r2, r22
    6e74:	6f ef       	ldi	r22, 0xFF	; 255
    6e76:	36 2e       	mov	r3, r22
    6e78:	41 2c       	mov	r4, r1
    6e7a:	51 2c       	mov	r5, r1
    6e7c:	2a 20       	and	r2, r10
    6e7e:	3b 20       	and	r3, r11
    6e80:	4c 20       	and	r4, r12
    6e82:	5d 20       	and	r5, r13
    6e84:	c8 01       	movw	r24, r16
    6e86:	b7 01       	movw	r22, r14
    6e88:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6e8c:	61 96       	adiw	r28, 0x11	; 17
    6e8e:	2c af       	std	Y+60, r18	; 0x3c
    6e90:	3d af       	std	Y+61, r19	; 0x3d
    6e92:	4e af       	std	Y+62, r20	; 0x3e
    6e94:	5f af       	std	Y+63, r21	; 0x3f
    6e96:	61 97       	sbiw	r28, 0x11	; 17
    6e98:	ca 01       	movw	r24, r20
    6e9a:	b9 01       	movw	r22, r18
    6e9c:	a2 01       	movw	r20, r4
    6e9e:	91 01       	movw	r18, r2
    6ea0:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    6ea4:	3b 01       	movw	r6, r22
    6ea6:	4c 01       	movw	r8, r24
    6ea8:	c8 01       	movw	r24, r16
    6eaa:	b7 01       	movw	r22, r14
    6eac:	2d 96       	adiw	r28, 0x0d	; 13
    6eae:	2c ad       	ldd	r18, Y+60	; 0x3c
    6eb0:	3d ad       	ldd	r19, Y+61	; 0x3d
    6eb2:	4e ad       	ldd	r20, Y+62	; 0x3e
    6eb4:	5f ad       	ldd	r21, Y+63	; 0x3f
    6eb6:	2d 97       	sbiw	r28, 0x0d	; 13
    6eb8:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6ebc:	cb 01       	movw	r24, r22
    6ebe:	77 27       	eor	r23, r23
    6ec0:	66 27       	eor	r22, r22
    6ec2:	ed a4       	ldd	r14, Y+45	; 0x2d
    6ec4:	fe a4       	ldd	r15, Y+46	; 0x2e
    6ec6:	0f a5       	ldd	r16, Y+47	; 0x2f
    6ec8:	18 a9       	ldd	r17, Y+48	; 0x30
    6eca:	98 01       	movw	r18, r16
    6ecc:	44 27       	eor	r20, r20
    6ece:	55 27       	eor	r21, r21
    6ed0:	79 01       	movw	r14, r18
    6ed2:	8a 01       	movw	r16, r20
    6ed4:	e6 2a       	or	r14, r22
    6ed6:	f7 2a       	or	r15, r23
    6ed8:	08 2b       	or	r16, r24
    6eda:	19 2b       	or	r17, r25
    6edc:	e6 14       	cp	r14, r6
    6ede:	f7 04       	cpc	r15, r7
    6ee0:	08 05       	cpc	r16, r8
    6ee2:	19 05       	cpc	r17, r9
    6ee4:	60 f5       	brcc	.+88     	; 0x6f3e <__udivdi3+0x57c>
    6ee6:	61 96       	adiw	r28, 0x11	; 17
    6ee8:	2c ad       	ldd	r18, Y+60	; 0x3c
    6eea:	3d ad       	ldd	r19, Y+61	; 0x3d
    6eec:	4e ad       	ldd	r20, Y+62	; 0x3e
    6eee:	5f ad       	ldd	r21, Y+63	; 0x3f
    6ef0:	61 97       	sbiw	r28, 0x11	; 17
    6ef2:	21 50       	subi	r18, 0x01	; 1
    6ef4:	30 40       	sbci	r19, 0x00	; 0
    6ef6:	40 40       	sbci	r20, 0x00	; 0
    6ef8:	50 40       	sbci	r21, 0x00	; 0
    6efa:	61 96       	adiw	r28, 0x11	; 17
    6efc:	2c af       	std	Y+60, r18	; 0x3c
    6efe:	3d af       	std	Y+61, r19	; 0x3d
    6f00:	4e af       	std	Y+62, r20	; 0x3e
    6f02:	5f af       	std	Y+63, r21	; 0x3f
    6f04:	61 97       	sbiw	r28, 0x11	; 17
    6f06:	ea 0c       	add	r14, r10
    6f08:	fb 1c       	adc	r15, r11
    6f0a:	0c 1d       	adc	r16, r12
    6f0c:	1d 1d       	adc	r17, r13
    6f0e:	ea 14       	cp	r14, r10
    6f10:	fb 04       	cpc	r15, r11
    6f12:	0c 05       	cpc	r16, r12
    6f14:	1d 05       	cpc	r17, r13
    6f16:	98 f0       	brcs	.+38     	; 0x6f3e <__udivdi3+0x57c>
    6f18:	e6 14       	cp	r14, r6
    6f1a:	f7 04       	cpc	r15, r7
    6f1c:	08 05       	cpc	r16, r8
    6f1e:	19 05       	cpc	r17, r9
    6f20:	70 f4       	brcc	.+28     	; 0x6f3e <__udivdi3+0x57c>
    6f22:	21 50       	subi	r18, 0x01	; 1
    6f24:	30 40       	sbci	r19, 0x00	; 0
    6f26:	40 40       	sbci	r20, 0x00	; 0
    6f28:	50 40       	sbci	r21, 0x00	; 0
    6f2a:	61 96       	adiw	r28, 0x11	; 17
    6f2c:	2c af       	std	Y+60, r18	; 0x3c
    6f2e:	3d af       	std	Y+61, r19	; 0x3d
    6f30:	4e af       	std	Y+62, r20	; 0x3e
    6f32:	5f af       	std	Y+63, r21	; 0x3f
    6f34:	61 97       	sbiw	r28, 0x11	; 17
    6f36:	ea 0c       	add	r14, r10
    6f38:	fb 1c       	adc	r15, r11
    6f3a:	0c 1d       	adc	r16, r12
    6f3c:	1d 1d       	adc	r17, r13
    6f3e:	e6 18       	sub	r14, r6
    6f40:	f7 08       	sbc	r15, r7
    6f42:	08 09       	sbc	r16, r8
    6f44:	19 09       	sbc	r17, r9
    6f46:	c8 01       	movw	r24, r16
    6f48:	b7 01       	movw	r22, r14
    6f4a:	2d 96       	adiw	r28, 0x0d	; 13
    6f4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6f50:	4e ad       	ldd	r20, Y+62	; 0x3e
    6f52:	5f ad       	ldd	r21, Y+63	; 0x3f
    6f54:	2d 97       	sbiw	r28, 0x0d	; 13
    6f56:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6f5a:	39 01       	movw	r6, r18
    6f5c:	4a 01       	movw	r8, r20
    6f5e:	ca 01       	movw	r24, r20
    6f60:	b9 01       	movw	r22, r18
    6f62:	a2 01       	movw	r20, r4
    6f64:	91 01       	movw	r18, r2
    6f66:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    6f6a:	1b 01       	movw	r2, r22
    6f6c:	2c 01       	movw	r4, r24
    6f6e:	c8 01       	movw	r24, r16
    6f70:	b7 01       	movw	r22, r14
    6f72:	2d 96       	adiw	r28, 0x0d	; 13
    6f74:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f76:	3d ad       	ldd	r19, Y+61	; 0x3d
    6f78:	4e ad       	ldd	r20, Y+62	; 0x3e
    6f7a:	5f ad       	ldd	r21, Y+63	; 0x3f
    6f7c:	2d 97       	sbiw	r28, 0x0d	; 13
    6f7e:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    6f82:	cb 01       	movw	r24, r22
    6f84:	77 27       	eor	r23, r23
    6f86:	66 27       	eor	r22, r22
    6f88:	2d a5       	ldd	r18, Y+45	; 0x2d
    6f8a:	3e a5       	ldd	r19, Y+46	; 0x2e
    6f8c:	4f a5       	ldd	r20, Y+47	; 0x2f
    6f8e:	58 a9       	ldd	r21, Y+48	; 0x30
    6f90:	40 70       	andi	r20, 0x00	; 0
    6f92:	50 70       	andi	r21, 0x00	; 0
    6f94:	7b 01       	movw	r14, r22
    6f96:	8c 01       	movw	r16, r24
    6f98:	e2 2a       	or	r14, r18
    6f9a:	f3 2a       	or	r15, r19
    6f9c:	04 2b       	or	r16, r20
    6f9e:	15 2b       	or	r17, r21
    6fa0:	e2 14       	cp	r14, r2
    6fa2:	f3 04       	cpc	r15, r3
    6fa4:	04 05       	cpc	r16, r4
    6fa6:	15 05       	cpc	r17, r5
    6fa8:	e0 f4       	brcc	.+56     	; 0x6fe2 <__udivdi3+0x620>
    6faa:	08 94       	sec
    6fac:	61 08       	sbc	r6, r1
    6fae:	71 08       	sbc	r7, r1
    6fb0:	81 08       	sbc	r8, r1
    6fb2:	91 08       	sbc	r9, r1
    6fb4:	ea 0c       	add	r14, r10
    6fb6:	fb 1c       	adc	r15, r11
    6fb8:	0c 1d       	adc	r16, r12
    6fba:	1d 1d       	adc	r17, r13
    6fbc:	ea 14       	cp	r14, r10
    6fbe:	fb 04       	cpc	r15, r11
    6fc0:	0c 05       	cpc	r16, r12
    6fc2:	1d 05       	cpc	r17, r13
    6fc4:	70 f0       	brcs	.+28     	; 0x6fe2 <__udivdi3+0x620>
    6fc6:	e2 14       	cp	r14, r2
    6fc8:	f3 04       	cpc	r15, r3
    6fca:	04 05       	cpc	r16, r4
    6fcc:	15 05       	cpc	r17, r5
    6fce:	48 f4       	brcc	.+18     	; 0x6fe2 <__udivdi3+0x620>
    6fd0:	08 94       	sec
    6fd2:	61 08       	sbc	r6, r1
    6fd4:	71 08       	sbc	r7, r1
    6fd6:	81 08       	sbc	r8, r1
    6fd8:	91 08       	sbc	r9, r1
    6fda:	ea 0c       	add	r14, r10
    6fdc:	fb 1c       	adc	r15, r11
    6fde:	0c 1d       	adc	r16, r12
    6fe0:	1d 1d       	adc	r17, r13
    6fe2:	89 a9       	ldd	r24, Y+49	; 0x31
    6fe4:	9a a9       	ldd	r25, Y+50	; 0x32
    6fe6:	ab a9       	ldd	r26, Y+51	; 0x33
    6fe8:	bc a9       	ldd	r27, Y+52	; 0x34
    6fea:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <__udivdi3+0x634>
    6fee:	88 0f       	add	r24, r24
    6ff0:	99 1f       	adc	r25, r25
    6ff2:	aa 1f       	adc	r26, r26
    6ff4:	bb 1f       	adc	r27, r27
    6ff6:	0a 94       	dec	r0
    6ff8:	d2 f7       	brpl	.-12     	; 0x6fee <__udivdi3+0x62c>
    6ffa:	89 ab       	std	Y+49, r24	; 0x31
    6ffc:	9a ab       	std	Y+50, r25	; 0x32
    6ffe:	ab ab       	std	Y+51, r26	; 0x33
    7000:	bc ab       	std	Y+52, r27	; 0x34
    7002:	e2 18       	sub	r14, r2
    7004:	f3 08       	sbc	r15, r3
    7006:	04 09       	sbc	r16, r4
    7008:	15 09       	sbc	r17, r5
    700a:	61 96       	adiw	r28, 0x11	; 17
    700c:	2c ad       	ldd	r18, Y+60	; 0x3c
    700e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7010:	4e ad       	ldd	r20, Y+62	; 0x3e
    7012:	5f ad       	ldd	r21, Y+63	; 0x3f
    7014:	61 97       	sbiw	r28, 0x11	; 17
    7016:	d9 01       	movw	r26, r18
    7018:	99 27       	eor	r25, r25
    701a:	88 27       	eor	r24, r24
    701c:	68 2a       	or	r6, r24
    701e:	79 2a       	or	r7, r25
    7020:	8a 2a       	or	r8, r26
    7022:	9b 2a       	or	r9, r27
    7024:	69 ae       	std	Y+57, r6	; 0x39
    7026:	7a ae       	std	Y+58, r7	; 0x3a
    7028:	8b ae       	std	Y+59, r8	; 0x3b
    702a:	9c ae       	std	Y+60, r9	; 0x3c
    702c:	c6 01       	movw	r24, r12
    702e:	aa 27       	eor	r26, r26
    7030:	bb 27       	eor	r27, r27
    7032:	65 96       	adiw	r28, 0x15	; 21
    7034:	8c af       	std	Y+60, r24	; 0x3c
    7036:	9d af       	std	Y+61, r25	; 0x3d
    7038:	ae af       	std	Y+62, r26	; 0x3e
    703a:	bf af       	std	Y+63, r27	; 0x3f
    703c:	65 97       	sbiw	r28, 0x15	; 21
    703e:	a6 01       	movw	r20, r12
    7040:	95 01       	movw	r18, r10
    7042:	40 70       	andi	r20, 0x00	; 0
    7044:	50 70       	andi	r21, 0x00	; 0
    7046:	69 96       	adiw	r28, 0x19	; 25
    7048:	2c af       	std	Y+60, r18	; 0x3c
    704a:	3d af       	std	Y+61, r19	; 0x3d
    704c:	4e af       	std	Y+62, r20	; 0x3e
    704e:	5f af       	std	Y+63, r21	; 0x3f
    7050:	69 97       	sbiw	r28, 0x19	; 25
    7052:	c8 01       	movw	r24, r16
    7054:	b7 01       	movw	r22, r14
    7056:	65 96       	adiw	r28, 0x15	; 21
    7058:	2c ad       	ldd	r18, Y+60	; 0x3c
    705a:	3d ad       	ldd	r19, Y+61	; 0x3d
    705c:	4e ad       	ldd	r20, Y+62	; 0x3e
    705e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7060:	65 97       	sbiw	r28, 0x15	; 21
    7062:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7066:	19 01       	movw	r2, r18
    7068:	2a 01       	movw	r4, r20
    706a:	ca 01       	movw	r24, r20
    706c:	b9 01       	movw	r22, r18
    706e:	69 96       	adiw	r28, 0x19	; 25
    7070:	2c ad       	ldd	r18, Y+60	; 0x3c
    7072:	3d ad       	ldd	r19, Y+61	; 0x3d
    7074:	4e ad       	ldd	r20, Y+62	; 0x3e
    7076:	5f ad       	ldd	r21, Y+63	; 0x3f
    7078:	69 97       	sbiw	r28, 0x19	; 25
    707a:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    707e:	3b 01       	movw	r6, r22
    7080:	4c 01       	movw	r8, r24
    7082:	c8 01       	movw	r24, r16
    7084:	b7 01       	movw	r22, r14
    7086:	65 96       	adiw	r28, 0x15	; 21
    7088:	2c ad       	ldd	r18, Y+60	; 0x3c
    708a:	3d ad       	ldd	r19, Y+61	; 0x3d
    708c:	4e ad       	ldd	r20, Y+62	; 0x3e
    708e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7090:	65 97       	sbiw	r28, 0x15	; 21
    7092:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7096:	cb 01       	movw	r24, r22
    7098:	77 27       	eor	r23, r23
    709a:	66 27       	eor	r22, r22
    709c:	e9 a8       	ldd	r14, Y+49	; 0x31
    709e:	fa a8       	ldd	r15, Y+50	; 0x32
    70a0:	0b a9       	ldd	r16, Y+51	; 0x33
    70a2:	1c a9       	ldd	r17, Y+52	; 0x34
    70a4:	98 01       	movw	r18, r16
    70a6:	44 27       	eor	r20, r20
    70a8:	55 27       	eor	r21, r21
    70aa:	7b 01       	movw	r14, r22
    70ac:	8c 01       	movw	r16, r24
    70ae:	e2 2a       	or	r14, r18
    70b0:	f3 2a       	or	r15, r19
    70b2:	04 2b       	or	r16, r20
    70b4:	15 2b       	or	r17, r21
    70b6:	e6 14       	cp	r14, r6
    70b8:	f7 04       	cpc	r15, r7
    70ba:	08 05       	cpc	r16, r8
    70bc:	19 05       	cpc	r17, r9
    70be:	e0 f4       	brcc	.+56     	; 0x70f8 <__udivdi3+0x736>
    70c0:	08 94       	sec
    70c2:	21 08       	sbc	r2, r1
    70c4:	31 08       	sbc	r3, r1
    70c6:	41 08       	sbc	r4, r1
    70c8:	51 08       	sbc	r5, r1
    70ca:	ea 0c       	add	r14, r10
    70cc:	fb 1c       	adc	r15, r11
    70ce:	0c 1d       	adc	r16, r12
    70d0:	1d 1d       	adc	r17, r13
    70d2:	ea 14       	cp	r14, r10
    70d4:	fb 04       	cpc	r15, r11
    70d6:	0c 05       	cpc	r16, r12
    70d8:	1d 05       	cpc	r17, r13
    70da:	70 f0       	brcs	.+28     	; 0x70f8 <__udivdi3+0x736>
    70dc:	e6 14       	cp	r14, r6
    70de:	f7 04       	cpc	r15, r7
    70e0:	08 05       	cpc	r16, r8
    70e2:	19 05       	cpc	r17, r9
    70e4:	48 f4       	brcc	.+18     	; 0x70f8 <__udivdi3+0x736>
    70e6:	08 94       	sec
    70e8:	21 08       	sbc	r2, r1
    70ea:	31 08       	sbc	r3, r1
    70ec:	41 08       	sbc	r4, r1
    70ee:	51 08       	sbc	r5, r1
    70f0:	ea 0c       	add	r14, r10
    70f2:	fb 1c       	adc	r15, r11
    70f4:	0c 1d       	adc	r16, r12
    70f6:	1d 1d       	adc	r17, r13
    70f8:	e6 18       	sub	r14, r6
    70fa:	f7 08       	sbc	r15, r7
    70fc:	08 09       	sbc	r16, r8
    70fe:	19 09       	sbc	r17, r9
    7100:	c8 01       	movw	r24, r16
    7102:	b7 01       	movw	r22, r14
    7104:	65 96       	adiw	r28, 0x15	; 21
    7106:	2c ad       	ldd	r18, Y+60	; 0x3c
    7108:	3d ad       	ldd	r19, Y+61	; 0x3d
    710a:	4e ad       	ldd	r20, Y+62	; 0x3e
    710c:	5f ad       	ldd	r21, Y+63	; 0x3f
    710e:	65 97       	sbiw	r28, 0x15	; 21
    7110:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7114:	39 01       	movw	r6, r18
    7116:	4a 01       	movw	r8, r20
    7118:	ca 01       	movw	r24, r20
    711a:	b9 01       	movw	r22, r18
    711c:	69 96       	adiw	r28, 0x19	; 25
    711e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7120:	3d ad       	ldd	r19, Y+61	; 0x3d
    7122:	4e ad       	ldd	r20, Y+62	; 0x3e
    7124:	5f ad       	ldd	r21, Y+63	; 0x3f
    7126:	69 97       	sbiw	r28, 0x19	; 25
    7128:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    712c:	69 8f       	std	Y+25, r22	; 0x19
    712e:	7a 8f       	std	Y+26, r23	; 0x1a
    7130:	8b 8f       	std	Y+27, r24	; 0x1b
    7132:	9c 8f       	std	Y+28, r25	; 0x1c
    7134:	c8 01       	movw	r24, r16
    7136:	b7 01       	movw	r22, r14
    7138:	65 96       	adiw	r28, 0x15	; 21
    713a:	2c ad       	ldd	r18, Y+60	; 0x3c
    713c:	3d ad       	ldd	r19, Y+61	; 0x3d
    713e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7140:	5f ad       	ldd	r21, Y+63	; 0x3f
    7142:	65 97       	sbiw	r28, 0x15	; 21
    7144:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7148:	cb 01       	movw	r24, r22
    714a:	77 27       	eor	r23, r23
    714c:	66 27       	eor	r22, r22
    714e:	29 a9       	ldd	r18, Y+49	; 0x31
    7150:	3a a9       	ldd	r19, Y+50	; 0x32
    7152:	4b a9       	ldd	r20, Y+51	; 0x33
    7154:	5c a9       	ldd	r21, Y+52	; 0x34
    7156:	40 70       	andi	r20, 0x00	; 0
    7158:	50 70       	andi	r21, 0x00	; 0
    715a:	26 2b       	or	r18, r22
    715c:	37 2b       	or	r19, r23
    715e:	48 2b       	or	r20, r24
    7160:	59 2b       	or	r21, r25
    7162:	89 8d       	ldd	r24, Y+25	; 0x19
    7164:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7166:	ab 8d       	ldd	r26, Y+27	; 0x1b
    7168:	bc 8d       	ldd	r27, Y+28	; 0x1c
    716a:	28 17       	cp	r18, r24
    716c:	39 07       	cpc	r19, r25
    716e:	4a 07       	cpc	r20, r26
    7170:	5b 07       	cpc	r21, r27
    7172:	c0 f4       	brcc	.+48     	; 0x71a4 <__udivdi3+0x7e2>
    7174:	08 94       	sec
    7176:	61 08       	sbc	r6, r1
    7178:	71 08       	sbc	r7, r1
    717a:	81 08       	sbc	r8, r1
    717c:	91 08       	sbc	r9, r1
    717e:	2a 0d       	add	r18, r10
    7180:	3b 1d       	adc	r19, r11
    7182:	4c 1d       	adc	r20, r12
    7184:	5d 1d       	adc	r21, r13
    7186:	2a 15       	cp	r18, r10
    7188:	3b 05       	cpc	r19, r11
    718a:	4c 05       	cpc	r20, r12
    718c:	5d 05       	cpc	r21, r13
    718e:	50 f0       	brcs	.+20     	; 0x71a4 <__udivdi3+0x7e2>
    7190:	28 17       	cp	r18, r24
    7192:	39 07       	cpc	r19, r25
    7194:	4a 07       	cpc	r20, r26
    7196:	5b 07       	cpc	r21, r27
    7198:	28 f4       	brcc	.+10     	; 0x71a4 <__udivdi3+0x7e2>
    719a:	08 94       	sec
    719c:	61 08       	sbc	r6, r1
    719e:	71 08       	sbc	r7, r1
    71a0:	81 08       	sbc	r8, r1
    71a2:	91 08       	sbc	r9, r1
    71a4:	d1 01       	movw	r26, r2
    71a6:	99 27       	eor	r25, r25
    71a8:	88 27       	eor	r24, r24
    71aa:	68 2a       	or	r6, r24
    71ac:	79 2a       	or	r7, r25
    71ae:	8a 2a       	or	r8, r26
    71b0:	9b 2a       	or	r9, r27
    71b2:	6d aa       	std	Y+53, r6	; 0x35
    71b4:	7e aa       	std	Y+54, r7	; 0x36
    71b6:	8f aa       	std	Y+55, r8	; 0x37
    71b8:	98 ae       	std	Y+56, r9	; 0x38
    71ba:	65 c2       	rjmp	.+1226   	; 0x7686 <__udivdi3+0xcc4>
    71bc:	26 14       	cp	r2, r6
    71be:	37 04       	cpc	r3, r7
    71c0:	48 04       	cpc	r4, r8
    71c2:	59 04       	cpc	r5, r9
    71c4:	08 f4       	brcc	.+2      	; 0x71c8 <__udivdi3+0x806>
    71c6:	4e c2       	rjmp	.+1180   	; 0x7664 <__udivdi3+0xca2>
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	69 16       	cp	r6, r25
    71cc:	90 e0       	ldi	r25, 0x00	; 0
    71ce:	79 06       	cpc	r7, r25
    71d0:	91 e0       	ldi	r25, 0x01	; 1
    71d2:	89 06       	cpc	r8, r25
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	99 06       	cpc	r9, r25
    71d8:	88 f4       	brcc	.+34     	; 0x71fc <__udivdi3+0x83a>
    71da:	af ef       	ldi	r26, 0xFF	; 255
    71dc:	6a 16       	cp	r6, r26
    71de:	71 04       	cpc	r7, r1
    71e0:	81 04       	cpc	r8, r1
    71e2:	91 04       	cpc	r9, r1
    71e4:	09 f0       	breq	.+2      	; 0x71e8 <__udivdi3+0x826>
    71e6:	28 f4       	brcc	.+10     	; 0x71f2 <__udivdi3+0x830>
    71e8:	20 e0       	ldi	r18, 0x00	; 0
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	40 e0       	ldi	r20, 0x00	; 0
    71ee:	50 e0       	ldi	r21, 0x00	; 0
    71f0:	17 c0       	rjmp	.+46     	; 0x7220 <__udivdi3+0x85e>
    71f2:	28 e0       	ldi	r18, 0x08	; 8
    71f4:	30 e0       	ldi	r19, 0x00	; 0
    71f6:	40 e0       	ldi	r20, 0x00	; 0
    71f8:	50 e0       	ldi	r21, 0x00	; 0
    71fa:	12 c0       	rjmp	.+36     	; 0x7220 <__udivdi3+0x85e>
    71fc:	b0 e0       	ldi	r27, 0x00	; 0
    71fe:	6b 16       	cp	r6, r27
    7200:	b0 e0       	ldi	r27, 0x00	; 0
    7202:	7b 06       	cpc	r7, r27
    7204:	b0 e0       	ldi	r27, 0x00	; 0
    7206:	8b 06       	cpc	r8, r27
    7208:	b1 e0       	ldi	r27, 0x01	; 1
    720a:	9b 06       	cpc	r9, r27
    720c:	28 f4       	brcc	.+10     	; 0x7218 <__udivdi3+0x856>
    720e:	20 e1       	ldi	r18, 0x10	; 16
    7210:	30 e0       	ldi	r19, 0x00	; 0
    7212:	40 e0       	ldi	r20, 0x00	; 0
    7214:	50 e0       	ldi	r21, 0x00	; 0
    7216:	04 c0       	rjmp	.+8      	; 0x7220 <__udivdi3+0x85e>
    7218:	28 e1       	ldi	r18, 0x18	; 24
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	40 e0       	ldi	r20, 0x00	; 0
    721e:	50 e0       	ldi	r21, 0x00	; 0
    7220:	e0 e2       	ldi	r30, 0x20	; 32
    7222:	ee 2e       	mov	r14, r30
    7224:	f1 2c       	mov	r15, r1
    7226:	01 2d       	mov	r16, r1
    7228:	11 2d       	mov	r17, r1
    722a:	d8 01       	movw	r26, r16
    722c:	c7 01       	movw	r24, r14
    722e:	82 1b       	sub	r24, r18
    7230:	93 0b       	sbc	r25, r19
    7232:	a4 0b       	sbc	r26, r20
    7234:	b5 0b       	sbc	r27, r21
    7236:	ad 96       	adiw	r28, 0x2d	; 45
    7238:	8c af       	std	Y+60, r24	; 0x3c
    723a:	9d af       	std	Y+61, r25	; 0x3d
    723c:	ae af       	std	Y+62, r26	; 0x3e
    723e:	bf af       	std	Y+63, r27	; 0x3f
    7240:	ad 97       	sbiw	r28, 0x2d	; 45
    7242:	d4 01       	movw	r26, r8
    7244:	c3 01       	movw	r24, r6
    7246:	04 c0       	rjmp	.+8      	; 0x7250 <__udivdi3+0x88e>
    7248:	b6 95       	lsr	r27
    724a:	a7 95       	ror	r26
    724c:	97 95       	ror	r25
    724e:	87 95       	ror	r24
    7250:	2a 95       	dec	r18
    7252:	d2 f7       	brpl	.-12     	; 0x7248 <__udivdi3+0x886>
    7254:	9c 01       	movw	r18, r24
    7256:	ad 01       	movw	r20, r26
    7258:	23 56       	subi	r18, 0x63	; 99
    725a:	3d 4f       	sbci	r19, 0xFD	; 253
    725c:	d9 01       	movw	r26, r18
    725e:	2c 91       	ld	r18, X
    7260:	ad 96       	adiw	r28, 0x2d	; 45
    7262:	8c ad       	ldd	r24, Y+60	; 0x3c
    7264:	9d ad       	ldd	r25, Y+61	; 0x3d
    7266:	ae ad       	ldd	r26, Y+62	; 0x3e
    7268:	bf ad       	ldd	r27, Y+63	; 0x3f
    726a:	ad 97       	sbiw	r28, 0x2d	; 45
    726c:	82 1b       	sub	r24, r18
    726e:	91 09       	sbc	r25, r1
    7270:	a1 09       	sbc	r26, r1
    7272:	b1 09       	sbc	r27, r1
    7274:	00 97       	sbiw	r24, 0x00	; 0
    7276:	a1 05       	cpc	r26, r1
    7278:	b1 05       	cpc	r27, r1
    727a:	89 f4       	brne	.+34     	; 0x729e <__udivdi3+0x8dc>
    727c:	62 14       	cp	r6, r2
    727e:	73 04       	cpc	r7, r3
    7280:	84 04       	cpc	r8, r4
    7282:	95 04       	cpc	r9, r5
    7284:	08 f4       	brcc	.+2      	; 0x7288 <__udivdi3+0x8c6>
    7286:	f3 c1       	rjmp	.+998    	; 0x766e <__udivdi3+0xcac>
    7288:	69 a8       	ldd	r6, Y+49	; 0x31
    728a:	7a a8       	ldd	r7, Y+50	; 0x32
    728c:	8b a8       	ldd	r8, Y+51	; 0x33
    728e:	9c a8       	ldd	r9, Y+52	; 0x34
    7290:	6a 14       	cp	r6, r10
    7292:	7b 04       	cpc	r7, r11
    7294:	8c 04       	cpc	r8, r12
    7296:	9d 04       	cpc	r9, r13
    7298:	08 f0       	brcs	.+2      	; 0x729c <__udivdi3+0x8da>
    729a:	e9 c1       	rjmp	.+978    	; 0x766e <__udivdi3+0xcac>
    729c:	e3 c1       	rjmp	.+966    	; 0x7664 <__udivdi3+0xca2>
    729e:	9e 8f       	std	Y+30, r25	; 0x1e
    72a0:	8d 8f       	std	Y+29, r24	; 0x1d
    72a2:	e8 1a       	sub	r14, r24
    72a4:	f9 0a       	sbc	r15, r25
    72a6:	0a 0b       	sbc	r16, r26
    72a8:	1b 0b       	sbc	r17, r27
    72aa:	a8 01       	movw	r20, r16
    72ac:	97 01       	movw	r18, r14
    72ae:	86 01       	movw	r16, r12
    72b0:	75 01       	movw	r14, r10
    72b2:	02 2e       	mov	r0, r18
    72b4:	04 c0       	rjmp	.+8      	; 0x72be <__udivdi3+0x8fc>
    72b6:	16 95       	lsr	r17
    72b8:	07 95       	ror	r16
    72ba:	f7 94       	ror	r15
    72bc:	e7 94       	ror	r14
    72be:	0a 94       	dec	r0
    72c0:	d2 f7       	brpl	.-12     	; 0x72b6 <__udivdi3+0x8f4>
    72c2:	d4 01       	movw	r26, r8
    72c4:	c3 01       	movw	r24, r6
    72c6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    72c8:	04 c0       	rjmp	.+8      	; 0x72d2 <__udivdi3+0x910>
    72ca:	88 0f       	add	r24, r24
    72cc:	99 1f       	adc	r25, r25
    72ce:	aa 1f       	adc	r26, r26
    72d0:	bb 1f       	adc	r27, r27
    72d2:	0a 94       	dec	r0
    72d4:	d2 f7       	brpl	.-12     	; 0x72ca <__udivdi3+0x908>
    72d6:	37 01       	movw	r6, r14
    72d8:	48 01       	movw	r8, r16
    72da:	68 2a       	or	r6, r24
    72dc:	79 2a       	or	r7, r25
    72de:	8a 2a       	or	r8, r26
    72e0:	9b 2a       	or	r9, r27
    72e2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    72e4:	04 c0       	rjmp	.+8      	; 0x72ee <__udivdi3+0x92c>
    72e6:	aa 0c       	add	r10, r10
    72e8:	bb 1c       	adc	r11, r11
    72ea:	cc 1c       	adc	r12, r12
    72ec:	dd 1c       	adc	r13, r13
    72ee:	0a 94       	dec	r0
    72f0:	d2 f7       	brpl	.-12     	; 0x72e6 <__udivdi3+0x924>
    72f2:	a9 a2       	std	Y+33, r10	; 0x21
    72f4:	ba a2       	std	Y+34, r11	; 0x22
    72f6:	cb a2       	std	Y+35, r12	; 0x23
    72f8:	dc a2       	std	Y+36, r13	; 0x24
    72fa:	82 01       	movw	r16, r4
    72fc:	71 01       	movw	r14, r2
    72fe:	02 2e       	mov	r0, r18
    7300:	04 c0       	rjmp	.+8      	; 0x730a <__udivdi3+0x948>
    7302:	16 95       	lsr	r17
    7304:	07 95       	ror	r16
    7306:	f7 94       	ror	r15
    7308:	e7 94       	ror	r14
    730a:	0a 94       	dec	r0
    730c:	d2 f7       	brpl	.-12     	; 0x7302 <__udivdi3+0x940>
    730e:	89 a9       	ldd	r24, Y+49	; 0x31
    7310:	9a a9       	ldd	r25, Y+50	; 0x32
    7312:	ab a9       	ldd	r26, Y+51	; 0x33
    7314:	bc a9       	ldd	r27, Y+52	; 0x34
    7316:	04 c0       	rjmp	.+8      	; 0x7320 <__udivdi3+0x95e>
    7318:	b6 95       	lsr	r27
    731a:	a7 95       	ror	r26
    731c:	97 95       	ror	r25
    731e:	87 95       	ror	r24
    7320:	2a 95       	dec	r18
    7322:	d2 f7       	brpl	.-12     	; 0x7318 <__udivdi3+0x956>
    7324:	9c 01       	movw	r18, r24
    7326:	ad 01       	movw	r20, r26
    7328:	d2 01       	movw	r26, r4
    732a:	c1 01       	movw	r24, r2
    732c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    732e:	04 c0       	rjmp	.+8      	; 0x7338 <__udivdi3+0x976>
    7330:	88 0f       	add	r24, r24
    7332:	99 1f       	adc	r25, r25
    7334:	aa 1f       	adc	r26, r26
    7336:	bb 1f       	adc	r27, r27
    7338:	0a 94       	dec	r0
    733a:	d2 f7       	brpl	.-12     	; 0x7330 <__udivdi3+0x96e>
    733c:	28 2b       	or	r18, r24
    733e:	39 2b       	or	r19, r25
    7340:	4a 2b       	or	r20, r26
    7342:	5b 2b       	or	r21, r27
    7344:	29 a7       	std	Y+41, r18	; 0x29
    7346:	3a a7       	std	Y+42, r19	; 0x2a
    7348:	4b a7       	std	Y+43, r20	; 0x2b
    734a:	5c a7       	std	Y+44, r21	; 0x2c
    734c:	94 01       	movw	r18, r8
    734e:	44 27       	eor	r20, r20
    7350:	55 27       	eor	r21, r21
    7352:	6d 96       	adiw	r28, 0x1d	; 29
    7354:	2c af       	std	Y+60, r18	; 0x3c
    7356:	3d af       	std	Y+61, r19	; 0x3d
    7358:	4e af       	std	Y+62, r20	; 0x3e
    735a:	5f af       	std	Y+63, r21	; 0x3f
    735c:	6d 97       	sbiw	r28, 0x1d	; 29
    735e:	6f ef       	ldi	r22, 0xFF	; 255
    7360:	26 2e       	mov	r2, r22
    7362:	6f ef       	ldi	r22, 0xFF	; 255
    7364:	36 2e       	mov	r3, r22
    7366:	41 2c       	mov	r4, r1
    7368:	51 2c       	mov	r5, r1
    736a:	26 20       	and	r2, r6
    736c:	37 20       	and	r3, r7
    736e:	48 20       	and	r4, r8
    7370:	59 20       	and	r5, r9
    7372:	c8 01       	movw	r24, r16
    7374:	b7 01       	movw	r22, r14
    7376:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    737a:	a1 96       	adiw	r28, 0x21	; 33
    737c:	2c af       	std	Y+60, r18	; 0x3c
    737e:	3d af       	std	Y+61, r19	; 0x3d
    7380:	4e af       	std	Y+62, r20	; 0x3e
    7382:	5f af       	std	Y+63, r21	; 0x3f
    7384:	a1 97       	sbiw	r28, 0x21	; 33
    7386:	ca 01       	movw	r24, r20
    7388:	b9 01       	movw	r22, r18
    738a:	a2 01       	movw	r20, r4
    738c:	91 01       	movw	r18, r2
    738e:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    7392:	5b 01       	movw	r10, r22
    7394:	6c 01       	movw	r12, r24
    7396:	c8 01       	movw	r24, r16
    7398:	b7 01       	movw	r22, r14
    739a:	6d 96       	adiw	r28, 0x1d	; 29
    739c:	2c ad       	ldd	r18, Y+60	; 0x3c
    739e:	3d ad       	ldd	r19, Y+61	; 0x3d
    73a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    73a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    73a4:	6d 97       	sbiw	r28, 0x1d	; 29
    73a6:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    73aa:	cb 01       	movw	r24, r22
    73ac:	77 27       	eor	r23, r23
    73ae:	66 27       	eor	r22, r22
    73b0:	e9 a4       	ldd	r14, Y+41	; 0x29
    73b2:	fa a4       	ldd	r15, Y+42	; 0x2a
    73b4:	0b a5       	ldd	r16, Y+43	; 0x2b
    73b6:	1c a5       	ldd	r17, Y+44	; 0x2c
    73b8:	98 01       	movw	r18, r16
    73ba:	44 27       	eor	r20, r20
    73bc:	55 27       	eor	r21, r21
    73be:	7b 01       	movw	r14, r22
    73c0:	8c 01       	movw	r16, r24
    73c2:	e2 2a       	or	r14, r18
    73c4:	f3 2a       	or	r15, r19
    73c6:	04 2b       	or	r16, r20
    73c8:	15 2b       	or	r17, r21
    73ca:	ea 14       	cp	r14, r10
    73cc:	fb 04       	cpc	r15, r11
    73ce:	0c 05       	cpc	r16, r12
    73d0:	1d 05       	cpc	r17, r13
    73d2:	60 f5       	brcc	.+88     	; 0x742c <__udivdi3+0xa6a>
    73d4:	a1 96       	adiw	r28, 0x21	; 33
    73d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    73d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    73da:	4e ad       	ldd	r20, Y+62	; 0x3e
    73dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    73de:	a1 97       	sbiw	r28, 0x21	; 33
    73e0:	21 50       	subi	r18, 0x01	; 1
    73e2:	30 40       	sbci	r19, 0x00	; 0
    73e4:	40 40       	sbci	r20, 0x00	; 0
    73e6:	50 40       	sbci	r21, 0x00	; 0
    73e8:	a1 96       	adiw	r28, 0x21	; 33
    73ea:	2c af       	std	Y+60, r18	; 0x3c
    73ec:	3d af       	std	Y+61, r19	; 0x3d
    73ee:	4e af       	std	Y+62, r20	; 0x3e
    73f0:	5f af       	std	Y+63, r21	; 0x3f
    73f2:	a1 97       	sbiw	r28, 0x21	; 33
    73f4:	e6 0c       	add	r14, r6
    73f6:	f7 1c       	adc	r15, r7
    73f8:	08 1d       	adc	r16, r8
    73fa:	19 1d       	adc	r17, r9
    73fc:	e6 14       	cp	r14, r6
    73fe:	f7 04       	cpc	r15, r7
    7400:	08 05       	cpc	r16, r8
    7402:	19 05       	cpc	r17, r9
    7404:	98 f0       	brcs	.+38     	; 0x742c <__udivdi3+0xa6a>
    7406:	ea 14       	cp	r14, r10
    7408:	fb 04       	cpc	r15, r11
    740a:	0c 05       	cpc	r16, r12
    740c:	1d 05       	cpc	r17, r13
    740e:	70 f4       	brcc	.+28     	; 0x742c <__udivdi3+0xa6a>
    7410:	21 50       	subi	r18, 0x01	; 1
    7412:	30 40       	sbci	r19, 0x00	; 0
    7414:	40 40       	sbci	r20, 0x00	; 0
    7416:	50 40       	sbci	r21, 0x00	; 0
    7418:	a1 96       	adiw	r28, 0x21	; 33
    741a:	2c af       	std	Y+60, r18	; 0x3c
    741c:	3d af       	std	Y+61, r19	; 0x3d
    741e:	4e af       	std	Y+62, r20	; 0x3e
    7420:	5f af       	std	Y+63, r21	; 0x3f
    7422:	a1 97       	sbiw	r28, 0x21	; 33
    7424:	e6 0c       	add	r14, r6
    7426:	f7 1c       	adc	r15, r7
    7428:	08 1d       	adc	r16, r8
    742a:	19 1d       	adc	r17, r9
    742c:	ea 18       	sub	r14, r10
    742e:	fb 08       	sbc	r15, r11
    7430:	0c 09       	sbc	r16, r12
    7432:	1d 09       	sbc	r17, r13
    7434:	c8 01       	movw	r24, r16
    7436:	b7 01       	movw	r22, r14
    7438:	6d 96       	adiw	r28, 0x1d	; 29
    743a:	2c ad       	ldd	r18, Y+60	; 0x3c
    743c:	3d ad       	ldd	r19, Y+61	; 0x3d
    743e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7440:	5f ad       	ldd	r21, Y+63	; 0x3f
    7442:	6d 97       	sbiw	r28, 0x1d	; 29
    7444:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7448:	59 01       	movw	r10, r18
    744a:	6a 01       	movw	r12, r20
    744c:	ca 01       	movw	r24, r20
    744e:	b9 01       	movw	r22, r18
    7450:	a2 01       	movw	r20, r4
    7452:	91 01       	movw	r18, r2
    7454:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    7458:	1b 01       	movw	r2, r22
    745a:	2c 01       	movw	r4, r24
    745c:	c8 01       	movw	r24, r16
    745e:	b7 01       	movw	r22, r14
    7460:	6d 96       	adiw	r28, 0x1d	; 29
    7462:	2c ad       	ldd	r18, Y+60	; 0x3c
    7464:	3d ad       	ldd	r19, Y+61	; 0x3d
    7466:	4e ad       	ldd	r20, Y+62	; 0x3e
    7468:	5f ad       	ldd	r21, Y+63	; 0x3f
    746a:	6d 97       	sbiw	r28, 0x1d	; 29
    746c:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <__udivmodsi4>
    7470:	cb 01       	movw	r24, r22
    7472:	77 27       	eor	r23, r23
    7474:	66 27       	eor	r22, r22
    7476:	29 a5       	ldd	r18, Y+41	; 0x29
    7478:	3a a5       	ldd	r19, Y+42	; 0x2a
    747a:	4b a5       	ldd	r20, Y+43	; 0x2b
    747c:	5c a5       	ldd	r21, Y+44	; 0x2c
    747e:	40 70       	andi	r20, 0x00	; 0
    7480:	50 70       	andi	r21, 0x00	; 0
    7482:	7b 01       	movw	r14, r22
    7484:	8c 01       	movw	r16, r24
    7486:	e2 2a       	or	r14, r18
    7488:	f3 2a       	or	r15, r19
    748a:	04 2b       	or	r16, r20
    748c:	15 2b       	or	r17, r21
    748e:	e2 14       	cp	r14, r2
    7490:	f3 04       	cpc	r15, r3
    7492:	04 05       	cpc	r16, r4
    7494:	15 05       	cpc	r17, r5
    7496:	e0 f4       	brcc	.+56     	; 0x74d0 <__udivdi3+0xb0e>
    7498:	08 94       	sec
    749a:	a1 08       	sbc	r10, r1
    749c:	b1 08       	sbc	r11, r1
    749e:	c1 08       	sbc	r12, r1
    74a0:	d1 08       	sbc	r13, r1
    74a2:	e6 0c       	add	r14, r6
    74a4:	f7 1c       	adc	r15, r7
    74a6:	08 1d       	adc	r16, r8
    74a8:	19 1d       	adc	r17, r9
    74aa:	e6 14       	cp	r14, r6
    74ac:	f7 04       	cpc	r15, r7
    74ae:	08 05       	cpc	r16, r8
    74b0:	19 05       	cpc	r17, r9
    74b2:	70 f0       	brcs	.+28     	; 0x74d0 <__udivdi3+0xb0e>
    74b4:	e2 14       	cp	r14, r2
    74b6:	f3 04       	cpc	r15, r3
    74b8:	04 05       	cpc	r16, r4
    74ba:	15 05       	cpc	r17, r5
    74bc:	48 f4       	brcc	.+18     	; 0x74d0 <__udivdi3+0xb0e>
    74be:	08 94       	sec
    74c0:	a1 08       	sbc	r10, r1
    74c2:	b1 08       	sbc	r11, r1
    74c4:	c1 08       	sbc	r12, r1
    74c6:	d1 08       	sbc	r13, r1
    74c8:	e6 0c       	add	r14, r6
    74ca:	f7 1c       	adc	r15, r7
    74cc:	08 1d       	adc	r16, r8
    74ce:	19 1d       	adc	r17, r9
    74d0:	e2 18       	sub	r14, r2
    74d2:	f3 08       	sbc	r15, r3
    74d4:	04 09       	sbc	r16, r4
    74d6:	15 09       	sbc	r17, r5
    74d8:	ed a2       	std	Y+37, r14	; 0x25
    74da:	fe a2       	std	Y+38, r15	; 0x26
    74dc:	0f a3       	std	Y+39, r16	; 0x27
    74de:	18 a7       	std	Y+40, r17	; 0x28
    74e0:	a1 96       	adiw	r28, 0x21	; 33
    74e2:	6c ac       	ldd	r6, Y+60	; 0x3c
    74e4:	7d ac       	ldd	r7, Y+61	; 0x3d
    74e6:	8e ac       	ldd	r8, Y+62	; 0x3e
    74e8:	9f ac       	ldd	r9, Y+63	; 0x3f
    74ea:	a1 97       	sbiw	r28, 0x21	; 33
    74ec:	d3 01       	movw	r26, r6
    74ee:	99 27       	eor	r25, r25
    74f0:	88 27       	eor	r24, r24
    74f2:	a8 2a       	or	r10, r24
    74f4:	b9 2a       	or	r11, r25
    74f6:	ca 2a       	or	r12, r26
    74f8:	db 2a       	or	r13, r27
    74fa:	ad aa       	std	Y+53, r10	; 0x35
    74fc:	be aa       	std	Y+54, r11	; 0x36
    74fe:	cf aa       	std	Y+55, r12	; 0x37
    7500:	d8 ae       	std	Y+56, r13	; 0x38
    7502:	86 01       	movw	r16, r12
    7504:	75 01       	movw	r14, r10
    7506:	2f ef       	ldi	r18, 0xFF	; 255
    7508:	3f ef       	ldi	r19, 0xFF	; 255
    750a:	40 e0       	ldi	r20, 0x00	; 0
    750c:	50 e0       	ldi	r21, 0x00	; 0
    750e:	e2 22       	and	r14, r18
    7510:	f3 22       	and	r15, r19
    7512:	04 23       	and	r16, r20
    7514:	15 23       	and	r17, r21
    7516:	c6 01       	movw	r24, r12
    7518:	aa 27       	eor	r26, r26
    751a:	bb 27       	eor	r27, r27
    751c:	a9 96       	adiw	r28, 0x29	; 41
    751e:	8c af       	std	Y+60, r24	; 0x3c
    7520:	9d af       	std	Y+61, r25	; 0x3d
    7522:	ae af       	std	Y+62, r26	; 0x3e
    7524:	bf af       	std	Y+63, r27	; 0x3f
    7526:	a9 97       	sbiw	r28, 0x29	; 41
    7528:	a9 a0       	ldd	r10, Y+33	; 0x21
    752a:	ba a0       	ldd	r11, Y+34	; 0x22
    752c:	cb a0       	ldd	r12, Y+35	; 0x23
    752e:	dc a0       	ldd	r13, Y+36	; 0x24
    7530:	a2 22       	and	r10, r18
    7532:	b3 22       	and	r11, r19
    7534:	c4 22       	and	r12, r20
    7536:	d5 22       	and	r13, r21
    7538:	69 a0       	ldd	r6, Y+33	; 0x21
    753a:	7a a0       	ldd	r7, Y+34	; 0x22
    753c:	8b a0       	ldd	r8, Y+35	; 0x23
    753e:	9c a0       	ldd	r9, Y+36	; 0x24
    7540:	14 01       	movw	r2, r8
    7542:	44 24       	eor	r4, r4
    7544:	55 24       	eor	r5, r5
    7546:	c8 01       	movw	r24, r16
    7548:	b7 01       	movw	r22, r14
    754a:	a6 01       	movw	r20, r12
    754c:	95 01       	movw	r18, r10
    754e:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    7552:	a5 96       	adiw	r28, 0x25	; 37
    7554:	6c af       	std	Y+60, r22	; 0x3c
    7556:	7d af       	std	Y+61, r23	; 0x3d
    7558:	8e af       	std	Y+62, r24	; 0x3e
    755a:	9f af       	std	Y+63, r25	; 0x3f
    755c:	a5 97       	sbiw	r28, 0x25	; 37
    755e:	c8 01       	movw	r24, r16
    7560:	b7 01       	movw	r22, r14
    7562:	a2 01       	movw	r20, r4
    7564:	91 01       	movw	r18, r2
    7566:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    756a:	3b 01       	movw	r6, r22
    756c:	4c 01       	movw	r8, r24
    756e:	a9 96       	adiw	r28, 0x29	; 41
    7570:	6c ad       	ldd	r22, Y+60	; 0x3c
    7572:	7d ad       	ldd	r23, Y+61	; 0x3d
    7574:	8e ad       	ldd	r24, Y+62	; 0x3e
    7576:	9f ad       	ldd	r25, Y+63	; 0x3f
    7578:	a9 97       	sbiw	r28, 0x29	; 41
    757a:	a6 01       	movw	r20, r12
    757c:	95 01       	movw	r18, r10
    757e:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    7582:	7b 01       	movw	r14, r22
    7584:	8c 01       	movw	r16, r24
    7586:	a9 96       	adiw	r28, 0x29	; 41
    7588:	6c ad       	ldd	r22, Y+60	; 0x3c
    758a:	7d ad       	ldd	r23, Y+61	; 0x3d
    758c:	8e ad       	ldd	r24, Y+62	; 0x3e
    758e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7590:	a9 97       	sbiw	r28, 0x29	; 41
    7592:	a2 01       	movw	r20, r4
    7594:	91 01       	movw	r18, r2
    7596:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    759a:	5b 01       	movw	r10, r22
    759c:	6c 01       	movw	r12, r24
    759e:	a8 01       	movw	r20, r16
    75a0:	97 01       	movw	r18, r14
    75a2:	26 0d       	add	r18, r6
    75a4:	37 1d       	adc	r19, r7
    75a6:	48 1d       	adc	r20, r8
    75a8:	59 1d       	adc	r21, r9
    75aa:	a5 96       	adiw	r28, 0x25	; 37
    75ac:	6c ac       	ldd	r6, Y+60	; 0x3c
    75ae:	7d ac       	ldd	r7, Y+61	; 0x3d
    75b0:	8e ac       	ldd	r8, Y+62	; 0x3e
    75b2:	9f ac       	ldd	r9, Y+63	; 0x3f
    75b4:	a5 97       	sbiw	r28, 0x25	; 37
    75b6:	c4 01       	movw	r24, r8
    75b8:	aa 27       	eor	r26, r26
    75ba:	bb 27       	eor	r27, r27
    75bc:	28 0f       	add	r18, r24
    75be:	39 1f       	adc	r19, r25
    75c0:	4a 1f       	adc	r20, r26
    75c2:	5b 1f       	adc	r21, r27
    75c4:	2e 15       	cp	r18, r14
    75c6:	3f 05       	cpc	r19, r15
    75c8:	40 07       	cpc	r20, r16
    75ca:	51 07       	cpc	r21, r17
    75cc:	48 f4       	brcc	.+18     	; 0x75e0 <__udivdi3+0xc1e>
    75ce:	e1 2c       	mov	r14, r1
    75d0:	f1 2c       	mov	r15, r1
    75d2:	61 e0       	ldi	r22, 0x01	; 1
    75d4:	06 2f       	mov	r16, r22
    75d6:	11 2d       	mov	r17, r1
    75d8:	ae 0c       	add	r10, r14
    75da:	bf 1c       	adc	r11, r15
    75dc:	c0 1e       	adc	r12, r16
    75de:	d1 1e       	adc	r13, r17
    75e0:	ca 01       	movw	r24, r20
    75e2:	aa 27       	eor	r26, r26
    75e4:	bb 27       	eor	r27, r27
    75e6:	a8 0e       	add	r10, r24
    75e8:	b9 1e       	adc	r11, r25
    75ea:	ca 1e       	adc	r12, r26
    75ec:	db 1e       	adc	r13, r27
    75ee:	6d a0       	ldd	r6, Y+37	; 0x25
    75f0:	7e a0       	ldd	r7, Y+38	; 0x26
    75f2:	8f a0       	ldd	r8, Y+39	; 0x27
    75f4:	98 a4       	ldd	r9, Y+40	; 0x28
    75f6:	6a 14       	cp	r6, r10
    75f8:	7b 04       	cpc	r7, r11
    75fa:	8c 04       	cpc	r8, r12
    75fc:	9d 04       	cpc	r9, r13
    75fe:	28 f1       	brcs	.+74     	; 0x764a <__udivdi3+0xc88>
    7600:	a6 14       	cp	r10, r6
    7602:	b7 04       	cpc	r11, r7
    7604:	c8 04       	cpc	r12, r8
    7606:	d9 04       	cpc	r13, r9
    7608:	d1 f5       	brne	.+116    	; 0x767e <__udivdi3+0xcbc>
    760a:	d9 01       	movw	r26, r18
    760c:	99 27       	eor	r25, r25
    760e:	88 27       	eor	r24, r24
    7610:	a5 96       	adiw	r28, 0x25	; 37
    7612:	2c ad       	ldd	r18, Y+60	; 0x3c
    7614:	3d ad       	ldd	r19, Y+61	; 0x3d
    7616:	4e ad       	ldd	r20, Y+62	; 0x3e
    7618:	5f ad       	ldd	r21, Y+63	; 0x3f
    761a:	a5 97       	sbiw	r28, 0x25	; 37
    761c:	40 70       	andi	r20, 0x00	; 0
    761e:	50 70       	andi	r21, 0x00	; 0
    7620:	82 0f       	add	r24, r18
    7622:	93 1f       	adc	r25, r19
    7624:	a4 1f       	adc	r26, r20
    7626:	b5 1f       	adc	r27, r21
    7628:	29 a9       	ldd	r18, Y+49	; 0x31
    762a:	3a a9       	ldd	r19, Y+50	; 0x32
    762c:	4b a9       	ldd	r20, Y+51	; 0x33
    762e:	5c a9       	ldd	r21, Y+52	; 0x34
    7630:	0d 8c       	ldd	r0, Y+29	; 0x1d
    7632:	04 c0       	rjmp	.+8      	; 0x763c <__udivdi3+0xc7a>
    7634:	22 0f       	add	r18, r18
    7636:	33 1f       	adc	r19, r19
    7638:	44 1f       	adc	r20, r20
    763a:	55 1f       	adc	r21, r21
    763c:	0a 94       	dec	r0
    763e:	d2 f7       	brpl	.-12     	; 0x7634 <__udivdi3+0xc72>
    7640:	28 17       	cp	r18, r24
    7642:	39 07       	cpc	r19, r25
    7644:	4a 07       	cpc	r20, r26
    7646:	5b 07       	cpc	r21, r27
    7648:	d0 f4       	brcc	.+52     	; 0x767e <__udivdi3+0xcbc>
    764a:	0d a9       	ldd	r16, Y+53	; 0x35
    764c:	1e a9       	ldd	r17, Y+54	; 0x36
    764e:	2f a9       	ldd	r18, Y+55	; 0x37
    7650:	38 ad       	ldd	r19, Y+56	; 0x38
    7652:	01 50       	subi	r16, 0x01	; 1
    7654:	10 40       	sbci	r17, 0x00	; 0
    7656:	20 40       	sbci	r18, 0x00	; 0
    7658:	30 40       	sbci	r19, 0x00	; 0
    765a:	0d ab       	std	Y+53, r16	; 0x35
    765c:	1e ab       	std	Y+54, r17	; 0x36
    765e:	2f ab       	std	Y+55, r18	; 0x37
    7660:	38 af       	std	Y+56, r19	; 0x38
    7662:	0d c0       	rjmp	.+26     	; 0x767e <__udivdi3+0xcbc>
    7664:	1d aa       	std	Y+53, r1	; 0x35
    7666:	1e aa       	std	Y+54, r1	; 0x36
    7668:	1f aa       	std	Y+55, r1	; 0x37
    766a:	18 ae       	std	Y+56, r1	; 0x38
    766c:	08 c0       	rjmp	.+16     	; 0x767e <__udivdi3+0xcbc>
    766e:	21 e0       	ldi	r18, 0x01	; 1
    7670:	30 e0       	ldi	r19, 0x00	; 0
    7672:	40 e0       	ldi	r20, 0x00	; 0
    7674:	50 e0       	ldi	r21, 0x00	; 0
    7676:	2d ab       	std	Y+53, r18	; 0x35
    7678:	3e ab       	std	Y+54, r19	; 0x36
    767a:	4f ab       	std	Y+55, r20	; 0x37
    767c:	58 af       	std	Y+56, r21	; 0x38
    767e:	19 ae       	std	Y+57, r1	; 0x39
    7680:	1a ae       	std	Y+58, r1	; 0x3a
    7682:	1b ae       	std	Y+59, r1	; 0x3b
    7684:	1c ae       	std	Y+60, r1	; 0x3c
    7686:	88 e0       	ldi	r24, 0x08	; 8
    7688:	fe 01       	movw	r30, r28
    768a:	71 96       	adiw	r30, 0x11	; 17
    768c:	11 92       	st	Z+, r1
    768e:	8a 95       	dec	r24
    7690:	e9 f7       	brne	.-6      	; 0x768c <__udivdi3+0xcca>
    7692:	8d a9       	ldd	r24, Y+53	; 0x35
    7694:	9e a9       	ldd	r25, Y+54	; 0x36
    7696:	af a9       	ldd	r26, Y+55	; 0x37
    7698:	b8 ad       	ldd	r27, Y+56	; 0x38
    769a:	89 8b       	std	Y+17, r24	; 0x11
    769c:	9a 8b       	std	Y+18, r25	; 0x12
    769e:	ab 8b       	std	Y+19, r26	; 0x13
    76a0:	bc 8b       	std	Y+20, r27	; 0x14
    76a2:	69 ac       	ldd	r6, Y+57	; 0x39
    76a4:	7a ac       	ldd	r7, Y+58	; 0x3a
    76a6:	8b ac       	ldd	r8, Y+59	; 0x3b
    76a8:	9c ac       	ldd	r9, Y+60	; 0x3c
    76aa:	6d 8a       	std	Y+21, r6	; 0x15
    76ac:	7e 8a       	std	Y+22, r7	; 0x16
    76ae:	8f 8a       	std	Y+23, r8	; 0x17
    76b0:	98 8e       	std	Y+24, r9	; 0x18
    76b2:	29 88       	ldd	r2, Y+17	; 0x11
    76b4:	3a 88       	ldd	r3, Y+18	; 0x12
    76b6:	4b 88       	ldd	r4, Y+19	; 0x13
    76b8:	5c 88       	ldd	r5, Y+20	; 0x14
    76ba:	6d 88       	ldd	r6, Y+21	; 0x15
    76bc:	7e 88       	ldd	r7, Y+22	; 0x16
    76be:	8f 88       	ldd	r8, Y+23	; 0x17
    76c0:	98 8c       	ldd	r9, Y+24	; 0x18
    76c2:	22 2d       	mov	r18, r2
    76c4:	33 2d       	mov	r19, r3
    76c6:	44 2d       	mov	r20, r4
    76c8:	55 2d       	mov	r21, r5
    76ca:	66 2d       	mov	r22, r6
    76cc:	77 2d       	mov	r23, r7
    76ce:	88 2d       	mov	r24, r8
    76d0:	99 2d       	mov	r25, r9
    76d2:	e2 e1       	ldi	r30, 0x12	; 18
    76d4:	c4 59       	subi	r28, 0x94	; 148
    76d6:	df 4f       	sbci	r29, 0xFF	; 255
    76d8:	0c 94 9a 3e 	jmp	0x7d34	; 0x7d34 <__epilogue_restores__>

000076dc <do_rand>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
    76dc:	a0 e0       	ldi	r26, 0x00	; 0
    76de:	b0 e0       	ldi	r27, 0x00	; 0
    76e0:	e4 e7       	ldi	r30, 0x74	; 116
    76e2:	fb e3       	ldi	r31, 0x3B	; 59
    76e4:	0c 94 86 3e 	jmp	0x7d0c	; 0x7d0c <__prologue_saves__+0x10>
    76e8:	ec 01       	movw	r28, r24

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    76ea:	68 81       	ld	r22, Y
    76ec:	79 81       	ldd	r23, Y+1	; 0x01
    76ee:	8a 81       	ldd	r24, Y+2	; 0x02
    76f0:	9b 81       	ldd	r25, Y+3	; 0x03
#endif

    76f2:	61 15       	cp	r22, r1
    76f4:	71 05       	cpc	r23, r1
    76f6:	81 05       	cpc	r24, r1
    76f8:	91 05       	cpc	r25, r1
    76fa:	49 f4       	brne	.+18     	; 0x770e <do_rand+0x32>
    76fc:	84 e2       	ldi	r24, 0x24	; 36
    76fe:	a8 2e       	mov	r10, r24
    7700:	89 ed       	ldi	r24, 0xD9	; 217
    7702:	b8 2e       	mov	r11, r24
    7704:	8b e5       	ldi	r24, 0x5B	; 91
    7706:	c8 2e       	mov	r12, r24
    7708:	87 e0       	ldi	r24, 0x07	; 7
    770a:	d8 2e       	mov	r13, r24
    770c:	02 c0       	rjmp	.+4      	; 0x7712 <do_rand+0x36>

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    770e:	5b 01       	movw	r10, r22
    7710:	6c 01       	movw	r12, r24
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
#  define __AVR_HAVE_LPMX__	1
# endif
    7712:	c6 01       	movw	r24, r12
    7714:	b5 01       	movw	r22, r10
    7716:	2d e1       	ldi	r18, 0x1D	; 29
    7718:	33 ef       	ldi	r19, 0xF3	; 243
    771a:	41 e0       	ldi	r20, 0x01	; 1
    771c:	50 e0       	ldi	r21, 0x00	; 0
    771e:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__divmodsi4>
    7722:	27 ea       	ldi	r18, 0xA7	; 167
    7724:	31 e4       	ldi	r19, 0x41	; 65
    7726:	40 e0       	ldi	r20, 0x00	; 0
    7728:	50 e0       	ldi	r21, 0x00	; 0
    772a:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    772e:	7b 01       	movw	r14, r22
    7730:	8c 01       	movw	r16, r24
    7732:	c6 01       	movw	r24, r12
    7734:	b5 01       	movw	r22, r10
    7736:	2d e1       	ldi	r18, 0x1D	; 29
    7738:	33 ef       	ldi	r19, 0xF3	; 243
    773a:	41 e0       	ldi	r20, 0x01	; 1
    773c:	50 e0       	ldi	r21, 0x00	; 0
    773e:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <__divmodsi4>
    7742:	ca 01       	movw	r24, r20
    7744:	b9 01       	movw	r22, r18
    7746:	24 e1       	ldi	r18, 0x14	; 20
    7748:	3b e0       	ldi	r19, 0x0B	; 11
    774a:	40 e0       	ldi	r20, 0x00	; 0
    774c:	50 e0       	ldi	r21, 0x00	; 0
    774e:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <__mulsi3>
    7752:	e6 1a       	sub	r14, r22
    7754:	f7 0a       	sbc	r15, r23
    7756:	08 0b       	sbc	r16, r24
    7758:	19 0b       	sbc	r17, r25
#endif
    775a:	17 ff       	sbrs	r17, 7
    775c:	08 c0       	rjmp	.+16     	; 0x776e <do_rand+0x92>

    775e:	8f ef       	ldi	r24, 0xFF	; 255
    7760:	9f ef       	ldi	r25, 0xFF	; 255
    7762:	af ef       	ldi	r26, 0xFF	; 255
    7764:	bf e7       	ldi	r27, 0x7F	; 127
    7766:	e8 0e       	add	r14, r24
    7768:	f9 1e       	adc	r15, r25
    776a:	0a 1f       	adc	r16, r26
    776c:	1b 1f       	adc	r17, r27
#if  defined(__AVR_HAVE_LPMX__) && __AVR_HAVE_LPMX__
    776e:	e8 82       	st	Y, r14
    7770:	f9 82       	std	Y+1, r15	; 0x01
    7772:	0a 83       	std	Y+2, r16	; 0x02
    7774:	1b 83       	std	Y+3, r17	; 0x03
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    7776:	c7 01       	movw	r24, r14
    7778:	9f 77       	andi	r25, 0x7F	; 127
    777a:	ea e0       	ldi	r30, 0x0A	; 10
    777c:	cd b7       	in	r28, 0x3d	; 61
    777e:	de b7       	in	r29, 0x3e	; 62
    7780:	0c 94 a2 3e 	jmp	0x7d44	; 0x7d44 <__epilogue_restores__+0x10>

00007784 <rand_r>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	%0,Z+	"			\
	: "=r" (__c),				\
    7784:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <do_rand>
    7788:	08 95       	ret

0000778a <rand>:
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    778a:	8d e9       	ldi	r24, 0x9D	; 157
    778c:	93 e0       	ldi	r25, 0x03	; 3
    778e:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <do_rand>
    7792:	08 95       	ret

00007794 <srand>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
    7794:	aa 27       	eor	r26, r26
    7796:	bb 27       	eor	r27, r27
    7798:	80 93 9d 03 	sts	0x039D, r24
    779c:	90 93 9e 03 	sts	0x039E, r25
    77a0:	a0 93 9f 03 	sts	0x039F, r26
    77a4:	b0 93 a0 03 	sts	0x03A0, r27
    77a8:	08 95       	ret

000077aa <strchr_P>:
    77aa:	fc 01       	movw	r30, r24
    77ac:	05 90       	lpm	r0, Z+
    77ae:	06 16       	cp	r0, r22
    77b0:	21 f0       	breq	.+8      	; 0x77ba <strchr_P+0x10>
    77b2:	00 20       	and	r0, r0
    77b4:	d9 f7       	brne	.-10     	; 0x77ac <strchr_P+0x2>
    77b6:	c0 01       	movw	r24, r0
    77b8:	08 95       	ret
    77ba:	31 97       	sbiw	r30, 0x01	; 1
    77bc:	cf 01       	movw	r24, r30
    77be:	08 95       	ret

000077c0 <fdevopen>:
	: "r" (flag),				\
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
    77c0:	ef 92       	push	r14
    77c2:	ff 92       	push	r15
    77c4:	0f 93       	push	r16
    77c6:	1f 93       	push	r17
    77c8:	cf 93       	push	r28
    77ca:	df 93       	push	r29
    77cc:	8c 01       	movw	r16, r24
    77ce:	7b 01       	movw	r14, r22
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    77d0:	89 2b       	or	r24, r25
    77d2:	11 f4       	brne	.+4      	; 0x77d8 <fdevopen+0x18>
    77d4:	67 2b       	or	r22, r23
    77d6:	d1 f1       	breq	.+116    	; 0x784c <fdevopen+0x8c>
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    77d8:	6e e0       	ldi	r22, 0x0E	; 14
    77da:	70 e0       	ldi	r23, 0x00	; 0
    77dc:	81 e0       	ldi	r24, 0x01	; 1
    77de:	90 e0       	ldi	r25, 0x00	; 0
    77e0:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <calloc>
    77e4:	fc 01       	movw	r30, r24
    77e6:	00 97       	sbiw	r24, 0x00	; 0
    77e8:	89 f1       	breq	.+98     	; 0x784c <fdevopen+0x8c>
    77ea:	dc 01       	movw	r26, r24
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    77ec:	80 e8       	ldi	r24, 0x80	; 128
    77ee:	83 83       	std	Z+3, r24	; 0x03
	: "=r" (__c),				\
	  "+z" (pnt)				\
    77f0:	e1 14       	cp	r14, r1
    77f2:	f1 04       	cpc	r15, r1
    77f4:	71 f0       	breq	.+28     	; 0x7812 <fdevopen+0x52>
	: "r" (flag),				\
    77f6:	f3 86       	std	Z+11, r15	; 0x0b
    77f8:	e2 86       	std	Z+10, r14	; 0x0a
	  "I" (ntz(mask))			\
    77fa:	81 e8       	ldi	r24, 0x81	; 129
    77fc:	83 83       	std	Z+3, r24	; 0x03
	: "r0"					\
    77fe:	80 91 92 07 	lds	r24, 0x0792
    7802:	90 91 93 07 	lds	r25, 0x0793
    7806:	89 2b       	or	r24, r25
    7808:	21 f4       	brne	.+8      	; 0x7812 <fdevopen+0x52>
    );						\
    780a:	f0 93 93 07 	sts	0x0793, r31
    780e:	e0 93 92 07 	sts	0x0792, r30
    __c;					\
})
#else
    7812:	01 15       	cp	r16, r1
    7814:	11 05       	cpc	r17, r1
    7816:	e1 f0       	breq	.+56     	; 0x7850 <fdevopen+0x90>
# define GETBYTE(flag, mask, pnt)	({	\
    7818:	11 87       	std	Z+9, r17	; 0x09
    781a:	00 87       	std	Z+8, r16	; 0x08
    unsigned char __c;				\
    781c:	83 81       	ldd	r24, Z+3	; 0x03
    781e:	82 60       	ori	r24, 0x02	; 2
    7820:	83 83       	std	Z+3, r24	; 0x03
    __c = ((flag) & (mask))			\
    7822:	80 91 94 07 	lds	r24, 0x0794
    7826:	90 91 95 07 	lds	r25, 0x0795
    782a:	89 2b       	or	r24, r25
    782c:	89 f4       	brne	.+34     	; 0x7850 <fdevopen+0x90>
	  ? pgm_read_byte(pnt) : *pnt;		\
    782e:	f0 93 95 07 	sts	0x0795, r31
    7832:	e0 93 94 07 	sts	0x0794, r30
    pnt++;					\
    7836:	80 91 96 07 	lds	r24, 0x0796
    783a:	90 91 97 07 	lds	r25, 0x0797
    783e:	89 2b       	or	r24, r25
    7840:	39 f4       	brne	.+14     	; 0x7850 <fdevopen+0x90>
    __c;					\
    7842:	f0 93 97 07 	sts	0x0797, r31
    7846:	e0 93 96 07 	sts	0x0796, r30
    784a:	02 c0       	rjmp	.+4      	; 0x7850 <fdevopen+0x90>
    784c:	a0 e0       	ldi	r26, 0x00	; 0
    784e:	b0 e0       	ldi	r27, 0x00	; 0
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN
    7850:	cd 01       	movw	r24, r26
    7852:	e6 e0       	ldi	r30, 0x06	; 6
    7854:	cd b7       	in	r28, 0x3d	; 61
    7856:	de b7       	in	r29, 0x3e	; 62
    7858:	0c 94 a6 3e 	jmp	0x7d4c	; 0x7d4c <__epilogue_restores__+0x18>

0000785c <fputc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    785c:	0f 93       	push	r16
    785e:	1f 93       	push	r17
    7860:	cf 93       	push	r28
    7862:	df 93       	push	r29
    7864:	8c 01       	movw	r16, r24
    7866:	eb 01       	movw	r28, r22
#include <stdlib.h>
#include <string.h>
    7868:	8b 81       	ldd	r24, Y+3	; 0x03
    786a:	99 27       	eor	r25, r25
    786c:	81 ff       	sbrs	r24, 1
    786e:	1b c0       	rjmp	.+54     	; 0x78a6 <fputc+0x4a>

#include "stdio_private.h"
#include "ftoa_engine.h"
    7870:	82 ff       	sbrs	r24, 2
    7872:	0d c0       	rjmp	.+26     	; 0x788e <fputc+0x32>
#include "ntz.h"
    7874:	2e 81       	ldd	r18, Y+6	; 0x06
    7876:	3f 81       	ldd	r19, Y+7	; 0x07
    7878:	8c 81       	ldd	r24, Y+4	; 0x04
    787a:	9d 81       	ldd	r25, Y+5	; 0x05
    787c:	28 17       	cp	r18, r24
    787e:	39 07       	cpc	r19, r25
    7880:	64 f4       	brge	.+24     	; 0x789a <fputc+0x3e>
#include "xtoa_fast.h"
    7882:	e8 81       	ld	r30, Y
    7884:	f9 81       	ldd	r31, Y+1	; 0x01
    7886:	01 93       	st	Z+, r16
    7888:	f9 83       	std	Y+1, r31	; 0x01
    788a:	e8 83       	st	Y, r30
    788c:	06 c0       	rjmp	.+12     	; 0x789a <fputc+0x3e>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
    788e:	e8 85       	ldd	r30, Y+8	; 0x08
    7890:	f9 85       	ldd	r31, Y+9	; 0x09
    7892:	80 2f       	mov	r24, r16
    7894:	09 95       	icall
    7896:	89 2b       	or	r24, r25
    7898:	31 f4       	brne	.+12     	; 0x78a6 <fputc+0x4a>
 * (level 2).  Level 1 maintains a minimal version that just offers
    789a:	8e 81       	ldd	r24, Y+6	; 0x06
    789c:	9f 81       	ldd	r25, Y+7	; 0x07
    789e:	01 96       	adiw	r24, 0x01	; 1
    78a0:	9f 83       	std	Y+7, r25	; 0x07
    78a2:	8e 83       	std	Y+6, r24	; 0x06
    78a4:	02 c0       	rjmp	.+4      	; 0x78aa <fputc+0x4e>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    78a6:	0f ef       	ldi	r16, 0xFF	; 255
    78a8:	1f ef       	ldi	r17, 0xFF	; 255
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
    78aa:	c8 01       	movw	r24, r16
    78ac:	df 91       	pop	r29
    78ae:	cf 91       	pop	r28
    78b0:	1f 91       	pop	r17
    78b2:	0f 91       	pop	r16
    78b4:	08 95       	ret

000078b6 <printf>:

/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
    78b6:	a2 e0       	ldi	r26, 0x02	; 2
    78b8:	b0 e0       	ldi	r27, 0x00	; 0
    78ba:	e1 e6       	ldi	r30, 0x61	; 97
    78bc:	fc e3       	ldi	r31, 0x3C	; 60
    78be:	0c 94 8e 3e 	jmp	0x7d1c	; 0x7d1c <__prologue_saves__+0x20>
    78c2:	fe 01       	movw	r30, r28
    78c4:	37 96       	adiw	r30, 0x07	; 7
    78c6:	61 91       	ld	r22, Z+
    78c8:	71 91       	ld	r23, Z+
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    78ca:	fa 83       	std	Y+2, r31	; 0x02
    78cc:	e9 83       	std	Y+1, r30	; 0x01
#include "stdio_private.h"
    78ce:	af 01       	movw	r20, r30
    78d0:	80 91 94 07 	lds	r24, 0x0794
    78d4:	90 91 95 07 	lds	r25, 0x0795
    78d8:	0e 94 b1 33 	call	0x6762	; 0x6762 <vfprintf>
    78dc:	e2 e0       	ldi	r30, 0x02	; 2
    78de:	22 96       	adiw	r28, 0x02	; 2
    78e0:	0c 94 aa 3e 	jmp	0x7d54	; 0x7d54 <__epilogue_restores__+0x20>

000078e4 <sprintf>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    78e4:	a0 e1       	ldi	r26, 0x10	; 16
    78e6:	b0 e0       	ldi	r27, 0x00	; 0
    78e8:	e8 e7       	ldi	r30, 0x78	; 120
    78ea:	fc e3       	ldi	r31, 0x3C	; 60
    78ec:	0c 94 8c 3e 	jmp	0x7d18	; 0x7d18 <__prologue_saves__+0x1c>
    78f0:	0f 89       	ldd	r16, Y+23	; 0x17
    78f2:	18 8d       	ldd	r17, Y+24	; 0x18

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    78f4:	86 e0       	ldi	r24, 0x06	; 6
    78f6:	8e 83       	std	Y+6, r24	; 0x06

    78f8:	1c 83       	std	Y+4, r17	; 0x04
    78fa:	0b 83       	std	Y+3, r16	; 0x03
/*
    78fc:	8f ef       	ldi	r24, 0xFF	; 255
    78fe:	9f e7       	ldi	r25, 0x7F	; 127
    7900:	98 87       	std	Y+8, r25	; 0x08
    7902:	8f 83       	std	Y+7, r24	; 0x07
 * This file can be compiled into more than one flavour.  The default
    7904:	ae 01       	movw	r20, r28
    7906:	45 5e       	subi	r20, 0xE5	; 229
    7908:	5f 4f       	sbci	r21, 0xFF	; 255
    790a:	5a 83       	std	Y+2, r21	; 0x02
    790c:	49 83       	std	Y+1, r20	; 0x01
 * is to offer the usual modifiers and integer formatting support
    790e:	69 8d       	ldd	r22, Y+25	; 0x19
    7910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7912:	ce 01       	movw	r24, r28
    7914:	03 96       	adiw	r24, 0x03	; 3
    7916:	0e 94 b1 33 	call	0x6762	; 0x6762 <vfprintf>
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    791a:	29 85       	ldd	r18, Y+9	; 0x09
    791c:	3a 85       	ldd	r19, Y+10	; 0x0a
    791e:	02 0f       	add	r16, r18
    7920:	13 1f       	adc	r17, r19
    7922:	f8 01       	movw	r30, r16
    7924:	10 82       	st	Z, r1
    7926:	e4 e0       	ldi	r30, 0x04	; 4
    7928:	60 96       	adiw	r28, 0x10	; 16
    792a:	0c 94 a8 3e 	jmp	0x7d50	; 0x7d50 <__epilogue_restores__+0x1c>

0000792e <__ultoa_invert>:
    792e:	fa 01       	movw	r30, r20
    7930:	aa 27       	eor	r26, r26
    7932:	28 30       	cpi	r18, 0x08	; 8
    7934:	51 f1       	breq	.+84     	; 0x798a <__ultoa_invert+0x5c>
    7936:	20 31       	cpi	r18, 0x10	; 16
    7938:	81 f1       	breq	.+96     	; 0x799a <__ultoa_invert+0x6c>
    793a:	e8 94       	clt
    793c:	6f 93       	push	r22
    793e:	6e 7f       	andi	r22, 0xFE	; 254
    7940:	6e 5f       	subi	r22, 0xFE	; 254
    7942:	7f 4f       	sbci	r23, 0xFF	; 255
    7944:	8f 4f       	sbci	r24, 0xFF	; 255
    7946:	9f 4f       	sbci	r25, 0xFF	; 255
    7948:	af 4f       	sbci	r26, 0xFF	; 255
    794a:	b1 e0       	ldi	r27, 0x01	; 1
    794c:	3e d0       	rcall	.+124    	; 0x79ca <__ultoa_invert+0x9c>
    794e:	b4 e0       	ldi	r27, 0x04	; 4
    7950:	3c d0       	rcall	.+120    	; 0x79ca <__ultoa_invert+0x9c>
    7952:	67 0f       	add	r22, r23
    7954:	78 1f       	adc	r23, r24
    7956:	89 1f       	adc	r24, r25
    7958:	9a 1f       	adc	r25, r26
    795a:	a1 1d       	adc	r26, r1
    795c:	68 0f       	add	r22, r24
    795e:	79 1f       	adc	r23, r25
    7960:	8a 1f       	adc	r24, r26
    7962:	91 1d       	adc	r25, r1
    7964:	a1 1d       	adc	r26, r1
    7966:	6a 0f       	add	r22, r26
    7968:	71 1d       	adc	r23, r1
    796a:	81 1d       	adc	r24, r1
    796c:	91 1d       	adc	r25, r1
    796e:	a1 1d       	adc	r26, r1
    7970:	20 d0       	rcall	.+64     	; 0x79b2 <__ultoa_invert+0x84>
    7972:	09 f4       	brne	.+2      	; 0x7976 <__ultoa_invert+0x48>
    7974:	68 94       	set
    7976:	3f 91       	pop	r19
    7978:	2a e0       	ldi	r18, 0x0A	; 10
    797a:	26 9f       	mul	r18, r22
    797c:	11 24       	eor	r1, r1
    797e:	30 19       	sub	r19, r0
    7980:	30 5d       	subi	r19, 0xD0	; 208
    7982:	31 93       	st	Z+, r19
    7984:	de f6       	brtc	.-74     	; 0x793c <__ultoa_invert+0xe>
    7986:	cf 01       	movw	r24, r30
    7988:	08 95       	ret
    798a:	46 2f       	mov	r20, r22
    798c:	47 70       	andi	r20, 0x07	; 7
    798e:	40 5d       	subi	r20, 0xD0	; 208
    7990:	41 93       	st	Z+, r20
    7992:	b3 e0       	ldi	r27, 0x03	; 3
    7994:	0f d0       	rcall	.+30     	; 0x79b4 <__ultoa_invert+0x86>
    7996:	c9 f7       	brne	.-14     	; 0x798a <__ultoa_invert+0x5c>
    7998:	f6 cf       	rjmp	.-20     	; 0x7986 <__ultoa_invert+0x58>
    799a:	46 2f       	mov	r20, r22
    799c:	4f 70       	andi	r20, 0x0F	; 15
    799e:	40 5d       	subi	r20, 0xD0	; 208
    79a0:	4a 33       	cpi	r20, 0x3A	; 58
    79a2:	18 f0       	brcs	.+6      	; 0x79aa <__ultoa_invert+0x7c>
    79a4:	49 5d       	subi	r20, 0xD9	; 217
    79a6:	31 fd       	sbrc	r19, 1
    79a8:	40 52       	subi	r20, 0x20	; 32
    79aa:	41 93       	st	Z+, r20
    79ac:	02 d0       	rcall	.+4      	; 0x79b2 <__ultoa_invert+0x84>
    79ae:	a9 f7       	brne	.-22     	; 0x799a <__ultoa_invert+0x6c>
    79b0:	ea cf       	rjmp	.-44     	; 0x7986 <__ultoa_invert+0x58>
    79b2:	b4 e0       	ldi	r27, 0x04	; 4
    79b4:	a6 95       	lsr	r26
    79b6:	97 95       	ror	r25
    79b8:	87 95       	ror	r24
    79ba:	77 95       	ror	r23
    79bc:	67 95       	ror	r22
    79be:	ba 95       	dec	r27
    79c0:	c9 f7       	brne	.-14     	; 0x79b4 <__ultoa_invert+0x86>
    79c2:	00 97       	sbiw	r24, 0x00	; 0
    79c4:	61 05       	cpc	r22, r1
    79c6:	71 05       	cpc	r23, r1
    79c8:	08 95       	ret
    79ca:	9b 01       	movw	r18, r22
    79cc:	ac 01       	movw	r20, r24
    79ce:	0a 2e       	mov	r0, r26
    79d0:	06 94       	lsr	r0
    79d2:	57 95       	ror	r21
    79d4:	47 95       	ror	r20
    79d6:	37 95       	ror	r19
    79d8:	27 95       	ror	r18
    79da:	ba 95       	dec	r27
    79dc:	c9 f7       	brne	.-14     	; 0x79d0 <__ultoa_invert+0xa2>
    79de:	62 0f       	add	r22, r18
    79e0:	73 1f       	adc	r23, r19
    79e2:	84 1f       	adc	r24, r20
    79e4:	95 1f       	adc	r25, r21
    79e6:	a0 1d       	adc	r26, r0
    79e8:	08 95       	ret

000079ea <calloc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    79ea:	0f 93       	push	r16
    79ec:	1f 93       	push	r17
    79ee:	cf 93       	push	r28
    79f0:	df 93       	push	r29
#include <stdlib.h>
#include <string.h>

    79f2:	68 9f       	mul	r22, r24
    79f4:	80 01       	movw	r16, r0
    79f6:	69 9f       	mul	r22, r25
    79f8:	10 0d       	add	r17, r0
    79fa:	78 9f       	mul	r23, r24
    79fc:	10 0d       	add	r17, r0
    79fe:	11 24       	eor	r1, r1
    7a00:	c8 01       	movw	r24, r16
    7a02:	0e 94 11 3d 	call	0x7a22	; 0x7a22 <malloc>
    7a06:	ec 01       	movw	r28, r24
    7a08:	00 97       	sbiw	r24, 0x00	; 0
    7a0a:	29 f0       	breq	.+10     	; 0x7a16 <calloc+0x2c>
#include "stdio_private.h"
#include "ftoa_engine.h"
    7a0c:	a8 01       	movw	r20, r16
    7a0e:	60 e0       	ldi	r22, 0x00	; 0
    7a10:	70 e0       	ldi	r23, 0x00	; 0
    7a12:	0e 94 0f 3e 	call	0x7c1e	; 0x7c1e <memset>
#include "ntz.h"
#include "xtoa_fast.h"
    7a16:	ce 01       	movw	r24, r28
    7a18:	df 91       	pop	r29
    7a1a:	cf 91       	pop	r28
    7a1c:	1f 91       	pop	r17
    7a1e:	0f 91       	pop	r16
    7a20:	08 95       	ret

00007a22 <malloc>:
#else
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    7a22:	cf 93       	push	r28
    7a24:	df 93       	push	r29
    7a26:	ac 01       	movw	r20, r24
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    7a28:	02 97       	sbiw	r24, 0x02	; 2
    7a2a:	10 f4       	brcc	.+4      	; 0x7a30 <malloc+0xe>
    7a2c:	42 e0       	ldi	r20, 0x02	; 2
    7a2e:	50 e0       	ldi	r21, 0x00	; 0
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    7a30:	a0 91 9a 07 	lds	r26, 0x079A
    7a34:	b0 91 9b 07 	lds	r27, 0x079B
    7a38:	fd 01       	movw	r30, r26
    7a3a:	c0 e0       	ldi	r28, 0x00	; 0
    7a3c:	d0 e0       	ldi	r29, 0x00	; 0
    7a3e:	20 e0       	ldi	r18, 0x00	; 0
    7a40:	30 e0       	ldi	r19, 0x00	; 0
    7a42:	20 c0       	rjmp	.+64     	; 0x7a84 <malloc+0x62>
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
    7a44:	80 81       	ld	r24, Z
    7a46:	91 81       	ldd	r25, Z+1	; 0x01
    7a48:	84 17       	cp	r24, r20
    7a4a:	95 07       	cpc	r25, r21
    7a4c:	69 f4       	brne	.+26     	; 0x7a68 <malloc+0x46>
    7a4e:	82 81       	ldd	r24, Z+2	; 0x02
    7a50:	93 81       	ldd	r25, Z+3	; 0x03
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    7a52:	20 97       	sbiw	r28, 0x00	; 0
    7a54:	19 f0       	breq	.+6      	; 0x7a5c <malloc+0x3a>
	: "=r" (__c),				\
    7a56:	9b 83       	std	Y+3, r25	; 0x03
    7a58:	8a 83       	std	Y+2, r24	; 0x02
    7a5a:	04 c0       	rjmp	.+8      	; 0x7a64 <malloc+0x42>
	  "+z" (pnt)				\
	: "r" (flag),				\
    7a5c:	90 93 9b 07 	sts	0x079B, r25
    7a60:	80 93 9a 07 	sts	0x079A, r24
	  "I" (ntz(mask))			\
    7a64:	9f 01       	movw	r18, r30
    7a66:	32 c0       	rjmp	.+100    	; 0x7acc <malloc+0xaa>
	: "r0"					\
    );						\
    7a68:	48 17       	cp	r20, r24
    7a6a:	59 07       	cpc	r21, r25
    7a6c:	38 f4       	brcc	.+14     	; 0x7a7c <malloc+0x5a>
    __c;					\
    7a6e:	21 15       	cp	r18, r1
    7a70:	31 05       	cpc	r19, r1
    7a72:	19 f0       	breq	.+6      	; 0x7a7a <malloc+0x58>
    7a74:	82 17       	cp	r24, r18
    7a76:	93 07       	cpc	r25, r19
    7a78:	08 f4       	brcc	.+2      	; 0x7a7c <malloc+0x5a>
    7a7a:	9c 01       	movw	r18, r24
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    7a7c:	ef 01       	movw	r28, r30
    7a7e:	02 80       	ldd	r0, Z+2	; 0x02
    7a80:	f3 81       	ldd	r31, Z+3	; 0x03
    7a82:	e0 2d       	mov	r30, r0
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    7a84:	30 97       	sbiw	r30, 0x00	; 0
    7a86:	f1 f6       	brne	.-68     	; 0x7a44 <malloc+0x22>
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN

    7a88:	21 15       	cp	r18, r1
    7a8a:	31 05       	cpc	r19, r1
    7a8c:	99 f1       	breq	.+102    	; 0x7af4 <malloc+0xd2>
#define FL_PGMSTRING	0x01
    7a8e:	c9 01       	movw	r24, r18
    7a90:	84 1b       	sub	r24, r20
    7a92:	95 0b       	sbc	r25, r21
    7a94:	04 97       	sbiw	r24, 0x04	; 4
    7a96:	08 f4       	brcc	.+2      	; 0x7a9a <malloc+0x78>
    7a98:	a9 01       	movw	r20, r18
    7a9a:	e0 e0       	ldi	r30, 0x00	; 0
    7a9c:	f0 e0       	ldi	r31, 0x00	; 0
    7a9e:	28 c0       	rjmp	.+80     	; 0x7af0 <malloc+0xce>
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80
    7aa0:	8d 91       	ld	r24, X+
    7aa2:	9c 91       	ld	r25, X
    7aa4:	11 97       	sbiw	r26, 0x01	; 1
    7aa6:	82 17       	cp	r24, r18
    7aa8:	93 07       	cpc	r25, r19
    7aaa:	f9 f4       	brne	.+62     	; 0x7aea <malloc+0xc8>

    7aac:	48 17       	cp	r20, r24
    7aae:	59 07       	cpc	r21, r25
    7ab0:	81 f4       	brne	.+32     	; 0x7ad2 <malloc+0xb0>
    7ab2:	ed 01       	movw	r28, r26
    7ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ab6:	9b 81       	ldd	r25, Y+3	; 0x03
int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/
    7ab8:	30 97       	sbiw	r30, 0x00	; 0
    7aba:	19 f0       	breq	.+6      	; 0x7ac2 <malloc+0xa0>

    7abc:	93 83       	std	Z+3, r25	; 0x03
    7abe:	82 83       	std	Z+2, r24	; 0x02
    7ac0:	04 c0       	rjmp	.+8      	; 0x7aca <malloc+0xa8>
    stream->len = 0;

    7ac2:	90 93 9b 07 	sts	0x079B, r25
    7ac6:	80 93 9a 07 	sts	0x079A, r24
    if ((stream->flags & __SWR) == 0)
    7aca:	9d 01       	movw	r18, r26
    7acc:	2e 5f       	subi	r18, 0xFE	; 254
    7ace:	3f 4f       	sbci	r19, 0xFF	; 255
    7ad0:	4c c0       	rjmp	.+152    	; 0x7b6a <malloc+0x148>
		if (c != '%') break;
	    }
	    putc (c, stream);
	}

	for (flags = 0;
    7ad2:	84 1b       	sub	r24, r20
    7ad4:	95 0b       	sbc	r25, r21
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    7ad6:	fd 01       	movw	r30, r26
    7ad8:	e8 0f       	add	r30, r24
    7ada:	f9 1f       	adc	r31, r25
	{
    7adc:	41 93       	st	Z+, r20
    7ade:	51 93       	st	Z+, r21
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    7ae0:	02 97       	sbiw	r24, 0x02	; 2
    7ae2:	8d 93       	st	X+, r24
    7ae4:	9c 93       	st	X, r25
		continue;
    7ae6:	9f 01       	movw	r18, r30
    7ae8:	40 c0       	rjmp	.+128    	; 0x7b6a <malloc+0x148>

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
    7aea:	fd 01       	movw	r30, r26
    7aec:	a2 81       	ldd	r26, Z+2	; 0x02
    7aee:	b3 81       	ldd	r27, Z+3	; 0x03
#if  PRINTF_LEVEL <= PRINTF_MIN

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
    7af0:	10 97       	sbiw	r26, 0x00	; 0
    7af2:	b1 f6       	brne	.-84     	; 0x7aa0 <malloc+0x7e>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    7af4:	80 91 98 07 	lds	r24, 0x0798
    7af8:	90 91 99 07 	lds	r25, 0x0799
    7afc:	89 2b       	or	r24, r25
    7afe:	41 f4       	brne	.+16     	; 0x7b10 <malloc+0xee>
	    (void) va_arg (ap, double);
    7b00:	80 91 a3 03 	lds	r24, 0x03A3
    7b04:	90 91 a4 03 	lds	r25, 0x03A4
    7b08:	90 93 99 07 	sts	0x0799, r25
    7b0c:	80 93 98 07 	sts	0x0798, r24
	    putc ('?', stream);
    7b10:	20 91 a5 03 	lds	r18, 0x03A5
    7b14:	30 91 a6 03 	lds	r19, 0x03A6
	    continue;
    7b18:	21 15       	cp	r18, r1
    7b1a:	31 05       	cpc	r19, r1
    7b1c:	49 f4       	brne	.+18     	; 0x7b30 <malloc+0x10e>
	}
    7b1e:	8d b7       	in	r24, 0x3d	; 61
    7b20:	28 2f       	mov	r18, r24
    7b22:	33 27       	eor	r19, r19
    7b24:	80 91 a1 03 	lds	r24, 0x03A1
    7b28:	90 91 a2 03 	lds	r25, 0x03A2
    7b2c:	28 1b       	sub	r18, r24
    7b2e:	39 0b       	sbc	r19, r25

    7b30:	a0 91 98 07 	lds	r26, 0x0798
    7b34:	b0 91 99 07 	lds	r27, 0x0799
    7b38:	2a 1b       	sub	r18, r26
    7b3a:	3b 0b       	sbc	r19, r27
	{
	    const char * pnt;

	    switch (c) {
    7b3c:	24 17       	cp	r18, r20
    7b3e:	35 07       	cpc	r19, r21
    7b40:	90 f0       	brcs	.+36     	; 0x7b66 <malloc+0x144>
    7b42:	ca 01       	movw	r24, r20
    7b44:	02 96       	adiw	r24, 0x02	; 2
    7b46:	28 17       	cp	r18, r24
    7b48:	39 07       	cpc	r19, r25
    7b4a:	68 f0       	brcs	.+26     	; 0x7b66 <malloc+0x144>

	      case 'c':
    7b4c:	9d 01       	movw	r18, r26
    7b4e:	2e 5f       	subi	r18, 0xFE	; 254
    7b50:	3f 4f       	sbci	r19, 0xFF	; 255
    7b52:	c9 01       	movw	r24, r18
    7b54:	84 0f       	add	r24, r20
    7b56:	95 1f       	adc	r25, r21
    7b58:	90 93 99 07 	sts	0x0799, r25
    7b5c:	80 93 98 07 	sts	0x0798, r24
		putc (va_arg (ap, int), stream);
    7b60:	4d 93       	st	X+, r20
    7b62:	5c 93       	st	X, r21
    7b64:	02 c0       	rjmp	.+4      	; 0x7b6a <malloc+0x148>
		continue;
    7b66:	20 e0       	ldi	r18, 0x00	; 0
    7b68:	30 e0       	ldi	r19, 0x00	; 0

	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
    7b6a:	c9 01       	movw	r24, r18
    7b6c:	df 91       	pop	r29
    7b6e:	cf 91       	pop	r28
    7b70:	08 95       	ret

00007b72 <free>:
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
		continue;
    7b72:	cf 93       	push	r28
    7b74:	df 93       	push	r29
	    }
	}

	if (c == 'd' || c == 'i') {
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    7b76:	00 97       	sbiw	r24, 0x00	; 0
    7b78:	09 f4       	brne	.+2      	; 0x7b7c <free+0xa>
    7b7a:	4e c0       	rjmp	.+156    	; 0x7c18 <free+0xa6>
	    flags &= ~FL_ALT;
	    if (x < 0) {
		x = -x;
		/* `putc ('-', stream)' will considarably inlarge stack size.
    7b7c:	ec 01       	movw	r28, r24
    7b7e:	22 97       	sbiw	r28, 0x02	; 2
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    7b80:	1b 82       	std	Y+3, r1	; 0x03
    7b82:	1a 82       	std	Y+2, r1	; 0x02
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;

	} else {
	    int base;

    7b84:	a0 91 9a 07 	lds	r26, 0x079A
    7b88:	b0 91 9b 07 	lds	r27, 0x079B
    7b8c:	10 97       	sbiw	r26, 0x00	; 0
    7b8e:	11 f1       	breq	.+68     	; 0x7bd4 <free+0x62>
    7b90:	40 e0       	ldi	r20, 0x00	; 0
    7b92:	50 e0       	ldi	r21, 0x00	; 0
    7b94:	01 c0       	rjmp	.+2      	; 0x7b98 <free+0x26>
	    switch (c) {
	      case 'u':
    7b96:	dc 01       	movw	r26, r24
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    7b98:	ac 17       	cp	r26, r28
    7b9a:	bd 07       	cpc	r27, r29
    7b9c:	00 f1       	brcs	.+64     	; 0x7bde <free+0x6c>
	        base = 16;
		goto ultoa;
	      case 'X':
    7b9e:	bb 83       	std	Y+3, r27	; 0x03
    7ba0:	aa 83       	std	Y+2, r26	; 0x02
		flags |= FL_ALTHEX;
    7ba2:	fe 01       	movw	r30, r28
    7ba4:	21 91       	ld	r18, Z+
    7ba6:	31 91       	ld	r19, Z+
    7ba8:	e2 0f       	add	r30, r18
    7baa:	f3 1f       	adc	r31, r19
    7bac:	ea 17       	cp	r30, r26
    7bae:	fb 07       	cpc	r31, r27
    7bb0:	71 f4       	brne	.+28     	; 0x7bce <free+0x5c>
	        base = 16 | XTOA_UPPER;
	      ultoa:
    7bb2:	8d 91       	ld	r24, X+
    7bb4:	9c 91       	ld	r25, X
    7bb6:	11 97       	sbiw	r26, 0x01	; 1
    7bb8:	28 0f       	add	r18, r24
    7bba:	39 1f       	adc	r19, r25
    7bbc:	2e 5f       	subi	r18, 0xFE	; 254
    7bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    7bc0:	39 83       	std	Y+1, r19	; 0x01
    7bc2:	28 83       	st	Y, r18
		c = __ultoa_invert ((flags & FL_LONG)
    7bc4:	fd 01       	movw	r30, r26
    7bc6:	82 81       	ldd	r24, Z+2	; 0x02
    7bc8:	93 81       	ldd	r25, Z+3	; 0x03
    7bca:	9b 83       	std	Y+3, r25	; 0x03
    7bcc:	8a 83       	std	Y+2, r24	; 0x02
				    ? va_arg(ap, unsigned long)
				    : va_arg(ap, unsigned int),
    7bce:	41 15       	cp	r20, r1
    7bd0:	51 05       	cpc	r21, r1
    7bd2:	59 f4       	brne	.+22     	; 0x7bea <free+0x78>
				    (char *)buf, base)  -  (char *)buf;
		break;
    7bd4:	d0 93 9b 07 	sts	0x079B, r29
    7bd8:	c0 93 9a 07 	sts	0x079A, r28
    7bdc:	1d c0       	rjmp	.+58     	; 0x7c18 <free+0xa6>
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
    7bde:	fd 01       	movw	r30, r26
    7be0:	82 81       	ldd	r24, Z+2	; 0x02
    7be2:	93 81       	ldd	r25, Z+3	; 0x03
    7be4:	ad 01       	movw	r20, r26
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
    7be6:	00 97       	sbiw	r24, 0x00	; 0
    7be8:	b1 f6       	brne	.-84     	; 0x7b96 <free+0x24>

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
	    putc ('-', stream);
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
	    putc ('0', stream);
    7bea:	fa 01       	movw	r30, r20
    7bec:	d3 83       	std	Z+3, r29	; 0x03
    7bee:	c2 83       	std	Z+2, r28	; 0x02
	    if (flags & FL_ALTHEX)
#if  FL_ALTLWR != 'x' - 'X'
    7bf0:	21 91       	ld	r18, Z+
    7bf2:	31 91       	ld	r19, Z+
    7bf4:	e2 0f       	add	r30, r18
    7bf6:	f3 1f       	adc	r31, r19
    7bf8:	ec 17       	cp	r30, r28
    7bfa:	fd 07       	cpc	r31, r29
    7bfc:	69 f4       	brne	.+26     	; 0x7c18 <free+0xa6>
# error
#endif
    7bfe:	88 81       	ld	r24, Y
    7c00:	99 81       	ldd	r25, Y+1	; 0x01
    7c02:	28 0f       	add	r18, r24
    7c04:	39 1f       	adc	r19, r25
    7c06:	2e 5f       	subi	r18, 0xFE	; 254
    7c08:	3f 4f       	sbci	r19, 0xFF	; 255
    7c0a:	fa 01       	movw	r30, r20
    7c0c:	31 83       	std	Z+1, r19	; 0x01
    7c0e:	20 83       	st	Z, r18
		putc ('X' + (flags & FL_ALTLWR), stream);
    7c10:	8a 81       	ldd	r24, Y+2	; 0x02
    7c12:	9b 81       	ldd	r25, Y+3	; 0x03
    7c14:	93 83       	std	Z+3, r25	; 0x03
    7c16:	82 83       	std	Z+2, r24	; 0x02
    7c18:	df 91       	pop	r29
    7c1a:	cf 91       	pop	r28
    7c1c:	08 95       	ret

00007c1e <memset>:
    7c1e:	dc 01       	movw	r26, r24
    7c20:	01 c0       	rjmp	.+2      	; 0x7c24 <memset+0x6>
    7c22:	6d 93       	st	X+, r22
    7c24:	41 50       	subi	r20, 0x01	; 1
    7c26:	50 40       	sbci	r21, 0x00	; 0
    7c28:	e0 f7       	brcc	.-8      	; 0x7c22 <memset+0x4>
    7c2a:	08 95       	ret

00007c2c <__mulsi3>:
    7c2c:	62 9f       	mul	r22, r18
    7c2e:	d0 01       	movw	r26, r0
    7c30:	73 9f       	mul	r23, r19
    7c32:	f0 01       	movw	r30, r0
    7c34:	82 9f       	mul	r24, r18
    7c36:	e0 0d       	add	r30, r0
    7c38:	f1 1d       	adc	r31, r1
    7c3a:	64 9f       	mul	r22, r20
    7c3c:	e0 0d       	add	r30, r0
    7c3e:	f1 1d       	adc	r31, r1
    7c40:	92 9f       	mul	r25, r18
    7c42:	f0 0d       	add	r31, r0
    7c44:	83 9f       	mul	r24, r19
    7c46:	f0 0d       	add	r31, r0
    7c48:	74 9f       	mul	r23, r20
    7c4a:	f0 0d       	add	r31, r0
    7c4c:	65 9f       	mul	r22, r21
    7c4e:	f0 0d       	add	r31, r0
    7c50:	99 27       	eor	r25, r25
    7c52:	72 9f       	mul	r23, r18
    7c54:	b0 0d       	add	r27, r0
    7c56:	e1 1d       	adc	r30, r1
    7c58:	f9 1f       	adc	r31, r25
    7c5a:	63 9f       	mul	r22, r19
    7c5c:	b0 0d       	add	r27, r0
    7c5e:	e1 1d       	adc	r30, r1
    7c60:	f9 1f       	adc	r31, r25
    7c62:	bd 01       	movw	r22, r26
    7c64:	cf 01       	movw	r24, r30
    7c66:	11 24       	eor	r1, r1
    7c68:	08 95       	ret

00007c6a <__udivmodhi4>:
    7c6a:	aa 1b       	sub	r26, r26
    7c6c:	bb 1b       	sub	r27, r27
    7c6e:	51 e1       	ldi	r21, 0x11	; 17
    7c70:	07 c0       	rjmp	.+14     	; 0x7c80 <__udivmodhi4_ep>

00007c72 <__udivmodhi4_loop>:
    7c72:	aa 1f       	adc	r26, r26
    7c74:	bb 1f       	adc	r27, r27
    7c76:	a6 17       	cp	r26, r22
    7c78:	b7 07       	cpc	r27, r23
    7c7a:	10 f0       	brcs	.+4      	; 0x7c80 <__udivmodhi4_ep>
    7c7c:	a6 1b       	sub	r26, r22
    7c7e:	b7 0b       	sbc	r27, r23

00007c80 <__udivmodhi4_ep>:
    7c80:	88 1f       	adc	r24, r24
    7c82:	99 1f       	adc	r25, r25
    7c84:	5a 95       	dec	r21
    7c86:	a9 f7       	brne	.-22     	; 0x7c72 <__udivmodhi4_loop>
    7c88:	80 95       	com	r24
    7c8a:	90 95       	com	r25
    7c8c:	bc 01       	movw	r22, r24
    7c8e:	cd 01       	movw	r24, r26
    7c90:	08 95       	ret

00007c92 <__divmodhi4>:
    7c92:	97 fb       	bst	r25, 7
    7c94:	09 2e       	mov	r0, r25
    7c96:	07 26       	eor	r0, r23
    7c98:	0a d0       	rcall	.+20     	; 0x7cae <__divmodhi4_neg1>
    7c9a:	77 fd       	sbrc	r23, 7
    7c9c:	04 d0       	rcall	.+8      	; 0x7ca6 <__divmodhi4_neg2>
    7c9e:	e5 df       	rcall	.-54     	; 0x7c6a <__udivmodhi4>
    7ca0:	06 d0       	rcall	.+12     	; 0x7cae <__divmodhi4_neg1>
    7ca2:	00 20       	and	r0, r0
    7ca4:	1a f4       	brpl	.+6      	; 0x7cac <__divmodhi4_exit>

00007ca6 <__divmodhi4_neg2>:
    7ca6:	70 95       	com	r23
    7ca8:	61 95       	neg	r22
    7caa:	7f 4f       	sbci	r23, 0xFF	; 255

00007cac <__divmodhi4_exit>:
    7cac:	08 95       	ret

00007cae <__divmodhi4_neg1>:
    7cae:	f6 f7       	brtc	.-4      	; 0x7cac <__divmodhi4_exit>
    7cb0:	90 95       	com	r25
    7cb2:	81 95       	neg	r24
    7cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    7cb6:	08 95       	ret

00007cb8 <__udivmodsi4>:
    7cb8:	a1 e2       	ldi	r26, 0x21	; 33
    7cba:	1a 2e       	mov	r1, r26
    7cbc:	aa 1b       	sub	r26, r26
    7cbe:	bb 1b       	sub	r27, r27
    7cc0:	fd 01       	movw	r30, r26
    7cc2:	0d c0       	rjmp	.+26     	; 0x7cde <__udivmodsi4_ep>

00007cc4 <__udivmodsi4_loop>:
    7cc4:	aa 1f       	adc	r26, r26
    7cc6:	bb 1f       	adc	r27, r27
    7cc8:	ee 1f       	adc	r30, r30
    7cca:	ff 1f       	adc	r31, r31
    7ccc:	a2 17       	cp	r26, r18
    7cce:	b3 07       	cpc	r27, r19
    7cd0:	e4 07       	cpc	r30, r20
    7cd2:	f5 07       	cpc	r31, r21
    7cd4:	20 f0       	brcs	.+8      	; 0x7cde <__udivmodsi4_ep>
    7cd6:	a2 1b       	sub	r26, r18
    7cd8:	b3 0b       	sbc	r27, r19
    7cda:	e4 0b       	sbc	r30, r20
    7cdc:	f5 0b       	sbc	r31, r21

00007cde <__udivmodsi4_ep>:
    7cde:	66 1f       	adc	r22, r22
    7ce0:	77 1f       	adc	r23, r23
    7ce2:	88 1f       	adc	r24, r24
    7ce4:	99 1f       	adc	r25, r25
    7ce6:	1a 94       	dec	r1
    7ce8:	69 f7       	brne	.-38     	; 0x7cc4 <__udivmodsi4_loop>
    7cea:	60 95       	com	r22
    7cec:	70 95       	com	r23
    7cee:	80 95       	com	r24
    7cf0:	90 95       	com	r25
    7cf2:	9b 01       	movw	r18, r22
    7cf4:	ac 01       	movw	r20, r24
    7cf6:	bd 01       	movw	r22, r26
    7cf8:	cf 01       	movw	r24, r30
    7cfa:	08 95       	ret

00007cfc <__prologue_saves__>:
    7cfc:	2f 92       	push	r2
    7cfe:	3f 92       	push	r3
    7d00:	4f 92       	push	r4
    7d02:	5f 92       	push	r5
    7d04:	6f 92       	push	r6
    7d06:	7f 92       	push	r7
    7d08:	8f 92       	push	r8
    7d0a:	9f 92       	push	r9
    7d0c:	af 92       	push	r10
    7d0e:	bf 92       	push	r11
    7d10:	cf 92       	push	r12
    7d12:	df 92       	push	r13
    7d14:	ef 92       	push	r14
    7d16:	ff 92       	push	r15
    7d18:	0f 93       	push	r16
    7d1a:	1f 93       	push	r17
    7d1c:	cf 93       	push	r28
    7d1e:	df 93       	push	r29
    7d20:	cd b7       	in	r28, 0x3d	; 61
    7d22:	de b7       	in	r29, 0x3e	; 62
    7d24:	ca 1b       	sub	r28, r26
    7d26:	db 0b       	sbc	r29, r27
    7d28:	0f b6       	in	r0, 0x3f	; 63
    7d2a:	f8 94       	cli
    7d2c:	de bf       	out	0x3e, r29	; 62
    7d2e:	0f be       	out	0x3f, r0	; 63
    7d30:	cd bf       	out	0x3d, r28	; 61
    7d32:	09 94       	ijmp

00007d34 <__epilogue_restores__>:
    7d34:	2a 88       	ldd	r2, Y+18	; 0x12
    7d36:	39 88       	ldd	r3, Y+17	; 0x11
    7d38:	48 88       	ldd	r4, Y+16	; 0x10
    7d3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    7d3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    7d3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7d40:	8c 84       	ldd	r8, Y+12	; 0x0c
    7d42:	9b 84       	ldd	r9, Y+11	; 0x0b
    7d44:	aa 84       	ldd	r10, Y+10	; 0x0a
    7d46:	b9 84       	ldd	r11, Y+9	; 0x09
    7d48:	c8 84       	ldd	r12, Y+8	; 0x08
    7d4a:	df 80       	ldd	r13, Y+7	; 0x07
    7d4c:	ee 80       	ldd	r14, Y+6	; 0x06
    7d4e:	fd 80       	ldd	r15, Y+5	; 0x05
    7d50:	0c 81       	ldd	r16, Y+4	; 0x04
    7d52:	1b 81       	ldd	r17, Y+3	; 0x03
    7d54:	aa 81       	ldd	r26, Y+2	; 0x02
    7d56:	b9 81       	ldd	r27, Y+1	; 0x01
    7d58:	ce 0f       	add	r28, r30
    7d5a:	d1 1d       	adc	r29, r1
    7d5c:	0f b6       	in	r0, 0x3f	; 63
    7d5e:	f8 94       	cli
    7d60:	de bf       	out	0x3e, r29	; 62
    7d62:	0f be       	out	0x3f, r0	; 63
    7d64:	cd bf       	out	0x3d, r28	; 61
    7d66:	ed 01       	movw	r28, r26
    7d68:	08 95       	ret

00007d6a <__eeprom_read_byte_1F2021>:
    7d6a:	f9 99       	sbic	0x1f, 1	; 31
    7d6c:	fe cf       	rjmp	.-4      	; 0x7d6a <__eeprom_read_byte_1F2021>
    7d6e:	b2 bd       	out	0x22, r27	; 34
    7d70:	a1 bd       	out	0x21, r26	; 33
    7d72:	f8 9a       	sbi	0x1f, 0	; 31
    7d74:	11 96       	adiw	r26, 0x01	; 1
    7d76:	00 b4       	in	r0, 0x20	; 32
    7d78:	08 95       	ret

00007d7a <__eeprom_write_byte_1F2021>:
    7d7a:	f9 99       	sbic	0x1f, 1	; 31
    7d7c:	fe cf       	rjmp	.-4      	; 0x7d7a <__eeprom_write_byte_1F2021>
    7d7e:	b2 bd       	out	0x22, r27	; 34
    7d80:	a1 bd       	out	0x21, r26	; 33
    7d82:	00 bc       	out	0x20, r0	; 32
    7d84:	11 96       	adiw	r26, 0x01	; 1
    7d86:	0f b6       	in	r0, 0x3f	; 63
    7d88:	f8 94       	cli
    7d8a:	fa 9a       	sbi	0x1f, 2	; 31
    7d8c:	f9 9a       	sbi	0x1f, 1	; 31
    7d8e:	0f be       	out	0x3f, r0	; 63
    7d90:	08 95       	ret

00007d92 <__divmodsi4>:
    7d92:	97 fb       	bst	r25, 7
    7d94:	09 2e       	mov	r0, r25
    7d96:	05 26       	eor	r0, r21
    7d98:	0e d0       	rcall	.+28     	; 0x7db6 <__divmodsi4_neg1>
    7d9a:	57 fd       	sbrc	r21, 7
    7d9c:	04 d0       	rcall	.+8      	; 0x7da6 <__divmodsi4_neg2>
    7d9e:	8c df       	rcall	.-232    	; 0x7cb8 <__udivmodsi4>
    7da0:	0a d0       	rcall	.+20     	; 0x7db6 <__divmodsi4_neg1>
    7da2:	00 1c       	adc	r0, r0
    7da4:	38 f4       	brcc	.+14     	; 0x7db4 <__divmodsi4_exit>

00007da6 <__divmodsi4_neg2>:
    7da6:	50 95       	com	r21
    7da8:	40 95       	com	r20
    7daa:	30 95       	com	r19
    7dac:	21 95       	neg	r18
    7dae:	3f 4f       	sbci	r19, 0xFF	; 255
    7db0:	4f 4f       	sbci	r20, 0xFF	; 255
    7db2:	5f 4f       	sbci	r21, 0xFF	; 255

00007db4 <__divmodsi4_exit>:
    7db4:	08 95       	ret

00007db6 <__divmodsi4_neg1>:
    7db6:	f6 f7       	brtc	.-4      	; 0x7db4 <__divmodsi4_exit>
    7db8:	90 95       	com	r25
    7dba:	80 95       	com	r24
    7dbc:	70 95       	com	r23
    7dbe:	61 95       	neg	r22
    7dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    7dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc6:	08 95       	ret

00007dc8 <_exit>:
    7dc8:	ff cf       	rjmp	.-2      	; 0x7dc8 <_exit>

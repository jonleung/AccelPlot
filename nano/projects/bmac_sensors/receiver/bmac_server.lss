
bmac_server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800200  00007704  00007778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007704  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000036c  0080039a  0000789e  00007912  2**0
                  ALLOC
  3 .stab         00010860  00000000  00000000  00007914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008e8a  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 02 	jmp	0x46a	; 0x46a <__ctors_end>
       4:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__vector_1>
       8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
       c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      10:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      14:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      18:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      1c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      20:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_8>
      24:	0c 94 f9 2e 	jmp	0x5df2	; 0x5df2 <__vector_9>
      28:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      2c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      30:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      34:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__vector_13>
      38:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      3c:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__vector_13>
      40:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      44:	0c 94 b5 2c 	jmp	0x596a	; 0x596a <__vector_17>
      48:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      4c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      50:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      54:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      58:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      5c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      60:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      64:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      68:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      6c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      70:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      74:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      78:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      7c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      80:	0c 94 bf 2c 	jmp	0x597e	; 0x597e <__vector_32>
      84:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      88:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      8c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      90:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__vector_36>
      94:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      98:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      9c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      a0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      a4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      a8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      ac:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      b0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      b4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      b8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      bc:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      c0:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      c4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      c8:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__bad_interrupt>
      cc:	f4 1d       	adc	r31, r4
      ce:	f8 1d       	adc	r31, r8
      d0:	fa 1d       	adc	r31, r10
      d2:	fc 1d       	adc	r31, r12
      d4:	fe 1d       	adc	r31, r14
      d6:	00 1e       	adc	r0, r16
      d8:	05 1e       	adc	r0, r21
      da:	02 1e       	adc	r0, r18
      dc:	08 1e       	adc	r0, r24
      de:	0b 1e       	adc	r0, r27
      e0:	0e 1e       	adc	r0, r30
      e2:	17 1e       	adc	r1, r23
      e4:	1a 1e       	adc	r1, r26
      e6:	1d 1e       	adc	r1, r29
      e8:	20 1e       	adc	r2, r16
      ea:	14 1e       	adc	r1, r20
      ec:	f2 1d       	adc	r31, r2
      ee:	f6 1d       	adc	r31, r6
      f0:	23 1e       	adc	r2, r19
      f2:	26 1e       	adc	r2, r22
      f4:	11 1e       	adc	r1, r17

000000f6 <__c.2347>:
      f6:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 62 6d     ERROR setting bm
     106:	61 63 20 72 61 74 65 0d 0a 00                       ac rate...

00000110 <__c.2781>:
     110:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     120:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

0000012c <__c.2737>:
     12c:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     13c:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     14c:	0d 0a 00                                            ...

0000014f <__c.2735>:
     14f:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     15f:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     16f:	74 0d 0a 00                                         t...

00000173 <__c.2643>:
     173:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     183:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     193:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

0000019f <__c.2641>:
     19f:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1af:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     1bf:	61 69 6c 65 64 0d 0a 00                             ailed...

000001c7 <__c.2639>:
     1c7:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     1d7:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     1e7:	61 69 6c 65 64 0d 0a 00                             ailed...

000001ef <__c.2798>:
     1ef:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     1ff:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     20f:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

0000021c <__c.2736>:
     21c:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     22c:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     23c:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

00000248 <__c.2410>:
     248:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000024f <__c.2407>:
     24f:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

0000025e <__c.2404>:
     25e:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

0000026f <__c.2401>:
     26f:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     27f:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000028a <__c.2398>:
     28a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     29a:	20 53 69 67 6e 61 6c 00                              Signal.

000002a2 <__c.2395>:
     2a2:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2b2:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000002c2 <__c.2392>:
     2c2:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     2d2:	72 6f 72 00                                         ror.

000002d6 <__c.2389>:
     2d6:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000002e7 <__c.2386>:
     2e7:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     2f7:	61 72 74 00                                         art.

000002fb <__c.2383>:
     2fb:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000030a <__c.2380>:
     30a:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     31a:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000325 <__c.2377>:
     325:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000331 <__c.2374>:
     331:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     341:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     351:	20 6f 6b 3f 00                                       ok?.

00000356 <__c.2371>:
     356:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     366:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000374 <__c.2368>:
     374:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     384:	72 74 00                                            rt.

00000387 <__c.2365>:
     387:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     397:	49 44 00                                            ID.

0000039a <__c.2362>:
     39a:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3aa:	20 57 61 6b 65 75 70 00                              Wakeup.

000003b2 <__c.2359>:
     3b2:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     3c2:	6c 61 74 65 64 00                                   lated.

000003c8 <__c.2356>:
     3c8:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     3d8:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000003e3 <__c.2353>:
     3e3:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     3f3:	69 6e 74 65 72 00                                   inter.

000003f9 <__c.2350>:
     3f9:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     409:	6c 6f 77 00                                         low.

0000040d <__c.2346>:
     40d:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     41d:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     42d:	6e 6f 75 67 68 21 00                                nough!.

00000434 <__c.2343>:
     434:	29 3a 20 00                                         ): .

00000438 <__c.2341>:
     438:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000444 <__c.2270>:
     444:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000453 <__c.2062>:
     453:	45 46 47 65 66 67 00                                EFGefg.

0000045a <__c.2056>:
     45a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000046a <__ctors_end>:
     46a:	11 24       	eor	r1, r1
     46c:	1f be       	out	0x3f, r1	; 63
     46e:	cf ef       	ldi	r28, 0xFF	; 255
     470:	d1 e2       	ldi	r29, 0x21	; 33
     472:	de bf       	out	0x3e, r29	; 62
     474:	cd bf       	out	0x3d, r28	; 61

00000476 <__do_copy_data>:
     476:	13 e0       	ldi	r17, 0x03	; 3
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b2 e0       	ldi	r27, 0x02	; 2
     47c:	e4 e0       	ldi	r30, 0x04	; 4
     47e:	f7 e7       	ldi	r31, 0x77	; 119
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	0b bf       	out	0x3b, r16	; 59
     484:	02 c0       	rjmp	.+4      	; 0x48a <__do_copy_data+0x14>
     486:	07 90       	elpm	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	aa 39       	cpi	r26, 0x9A	; 154
     48c:	b1 07       	cpc	r27, r17
     48e:	d9 f7       	brne	.-10     	; 0x486 <__do_copy_data+0x10>

00000490 <__do_clear_bss>:
     490:	17 e0       	ldi	r17, 0x07	; 7
     492:	aa e9       	ldi	r26, 0x9A	; 154
     494:	b3 e0       	ldi	r27, 0x03	; 3
     496:	01 c0       	rjmp	.+2      	; 0x49a <.do_clear_bss_start>

00000498 <.do_clear_bss_loop>:
     498:	1d 92       	st	X+, r1

0000049a <.do_clear_bss_start>:
     49a:	a6 30       	cpi	r26, 0x06	; 6
     49c:	b1 07       	cpc	r27, r17
     49e:	e1 f7       	brne	.-8      	; 0x498 <.do_clear_bss_loop>
     4a0:	0e 94 0a 03 	call	0x614	; 0x614 <main>
     4a4:	0c 94 81 3b 	jmp	0x7702	; 0x7702 <_exit>

000004a8 <__bad_interrupt>:
     4a8:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__vector_default>

000004ac <nrk_create_taskset>:

}

void nrk_create_taskset ()
{
	RX_TASK.task = rx_task;
     4ac:	83 eb       	ldi	r24, 0xB3	; 179
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	90 93 70 05 	sts	0x0570, r25
     4b4:	80 93 6f 05 	sts	0x056F, r24
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
     4b8:	87 ee       	ldi	r24, 0xE7	; 231
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	90 93 6c 05 	sts	0x056C, r25
     4c0:	80 93 6b 05 	sts	0x056B, r24
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
     4c4:	88 e6       	ldi	r24, 0x68	; 104
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	90 93 6e 05 	sts	0x056E, r25
     4cc:	80 93 6d 05 	sts	0x056D, r24
	RX_TASK.prio = 2;
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	80 93 72 05 	sts	0x0572, r24
	RX_TASK.FirstActivation = TRUE;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 71 05 	sts	0x0571, r24
	RX_TASK.Type = BASIC_TASK;
     4dc:	80 93 73 05 	sts	0x0573, r24
	RX_TASK.SchType = PREEMPTIVE;
     4e0:	80 93 74 05 	sts	0x0574, r24
	RX_TASK.period.secs = 1;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	80 93 75 05 	sts	0x0575, r24
     4f0:	90 93 76 05 	sts	0x0576, r25
     4f4:	a0 93 77 05 	sts	0x0577, r26
     4f8:	b0 93 78 05 	sts	0x0578, r27
	RX_TASK.period.nano_secs = 0;
     4fc:	10 92 79 05 	sts	0x0579, r1
     500:	10 92 7a 05 	sts	0x057A, r1
     504:	10 92 7b 05 	sts	0x057B, r1
     508:	10 92 7c 05 	sts	0x057C, r1
	RX_TASK.cpu_reserve.secs = 1;
     50c:	80 93 7d 05 	sts	0x057D, r24
     510:	90 93 7e 05 	sts	0x057E, r25
     514:	a0 93 7f 05 	sts	0x057F, r26
     518:	b0 93 80 05 	sts	0x0580, r27
	RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	95 e6       	ldi	r25, 0x65	; 101
     520:	ad ec       	ldi	r26, 0xCD	; 205
     522:	bd e1       	ldi	r27, 0x1D	; 29
     524:	80 93 81 05 	sts	0x0581, r24
     528:	90 93 82 05 	sts	0x0582, r25
     52c:	a0 93 83 05 	sts	0x0583, r26
     530:	b0 93 84 05 	sts	0x0584, r27
	RX_TASK.offset.secs = 0;
     534:	10 92 85 05 	sts	0x0585, r1
     538:	10 92 86 05 	sts	0x0586, r1
     53c:	10 92 87 05 	sts	0x0587, r1
     540:	10 92 88 05 	sts	0x0588, r1
	RX_TASK.offset.nano_secs = 0;
     544:	10 92 89 05 	sts	0x0589, r1
     548:	10 92 8a 05 	sts	0x058A, r1
     54c:	10 92 8b 05 	sts	0x058B, r1
     550:	10 92 8c 05 	sts	0x058C, r1
	nrk_activate_task (&RX_TASK);
     554:	8a e6       	ldi	r24, 0x6A	; 106
     556:	95 e0       	ldi	r25, 0x05	; 5
     558:	0e 94 89 25 	call	0x4b12	; 0x4b12 <nrk_activate_task>

	printf ("Create done\r\n");
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <puts>
     564:	08 95       	ret

00000566 <rx_task>:

	return 0;
}

void rx_task ()
{
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	22 97       	sbiw	r28, 0x02	; 2
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     586:	0e 94 97 23 	call	0x472e	; 0x472e <nrk_get_pid>
     58a:	99 27       	eor	r25, r25
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	8d e0       	ldi	r24, 0x0D	; 13
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	0e 94 be 38 	call	0x717c	; 0x717c <printf>

	// init bmac on channel 25 
	bmac_init (25);
     59c:	89 e1       	ldi	r24, 0x19	; 25
     59e:	0e 94 e7 05 	call	0xbce	; 0xbce <bmac_init>
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	1f 3f       	cpi	r17, 0xFF	; 255
     5ac:	21 f4       	brne	.+8      	; 0x5b6 <rx_task+0x50>
     5ae:	86 ef       	ldi	r24, 0xF6	; 246
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     5b6:	64 e7       	ldi	r22, 0x74	; 116
     5b8:	84 ef       	ldi	r24, 0xF4	; 244
     5ba:	94 e0       	ldi	r25, 0x04	; 4
     5bc:	0e 94 4b 03 	call	0x696	; 0x696 <bmac_rx_pkt_set_buffer>
	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	c8 2e       	mov	r12, r24
     5c4:	d1 2c       	mov	r13, r1
     5c6:	cc 0e       	add	r12, r28
     5c8:	dd 1e       	adc	r13, r29
     5ca:	7e 01       	movw	r14, r28
     5cc:	08 94       	sec
     5ce:	e1 1c       	adc	r14, r1
     5d0:	f1 1c       	adc	r15, r1
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
     5d2:	0e 94 d4 06 	call	0xda8	; 0xda8 <bmac_wait_until_rx_pkt>
		// Get the RX packet 
		nrk_led_set (ORANGE_LED);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 a7 18 	call	0x314e	; 0x314e <nrk_led_set>
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     5de:	b6 01       	movw	r22, r12
     5e0:	c7 01       	movw	r24, r14
     5e2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <bmac_rx_pkt_get>
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	10 e0       	ldi	r17, 0x00	; 0
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <rx_task+0x94>
		for (i = 0; i < len; i++)
			printf ("%c", rx_buf[i]);
     5ec:	ff 27       	eor	r31, r31
     5ee:	ec 50       	subi	r30, 0x0C	; 12
     5f0:	fb 4f       	sbci	r31, 0xFB	; 251
     5f2:	80 81       	ld	r24, Z
     5f4:	99 27       	eor	r25, r25
     5f6:	0e 94 d5 38 	call	0x71aa	; 0x71aa <putchar>
     5fa:	e0 2f       	mov	r30, r16
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		for (i = 0; i < len; i++)
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	e8 17       	cp	r30, r24
     604:	98 f3       	brcs	.-26     	; 0x5ec <rx_task+0x86>
			printf ("%c", rx_buf[i]);
		nrk_led_clr (ORANGE_LED);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
     60e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <bmac_rx_pkt_release>
     612:	df cf       	rjmp	.-66     	; 0x5d2 <rx_task+0x6c>

00000614 <main>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
     614:	cf ef       	ldi	r28, 0xFF	; 255
     616:	d1 e2       	ldi	r29, 0x21	; 33
     618:	de bf       	out	0x3e, r29	; 62
     61a:	cd bf       	out	0x3d, r28	; 61
	uint16_t div;
	nrk_setup_ports ();
     61c:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <nrk_setup_ports>
	nrk_setup_uart (UART_BAUDRATE_115K2);
     620:	87 e0       	ldi	r24, 0x07	; 7
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 1f 19 	call	0x323e	; 0x323e <nrk_setup_uart>

	nrk_init ();
     628:	0e 94 cb 1b 	call	0x3796	; 0x3796 <nrk_init>

	nrk_led_clr (0);
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
	nrk_led_clr (1);
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
	nrk_led_clr (2);
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
	nrk_led_clr (3);
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>

	nrk_time_set (0, 0);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <nrk_time_set>

	bmac_task_config ();
     660:	0e 94 ed 03 	call	0x7da	; 0x7da <bmac_task_config>

	nrk_create_taskset ();
     664:	0e 94 56 02 	call	0x4ac	; 0x4ac <nrk_create_taskset>
	nrk_start ();
     668:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <nrk_start>

	return 0;
}
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0c 94 81 3b 	jmp	0x7702	; 0x7702 <_exit>

00000674 <rf_rx_callback>:
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
     674:	08 95       	ret

00000676 <bmac_tx_reserve_set>:
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	while (1) {
		// Wait until an RX packet is received
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	9f ef       	ldi	r25, 0xFF	; 255
     67a:	08 95       	ret

0000067c <bmac_tx_reserve_get>:
			printf ("%c", rx_buf[i]);
		nrk_led_clr (ORANGE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	08 95       	ret

00000682 <bmac_addr_decode_dest_mac>:
     682:	90 93 e9 04 	sts	0x04E9, r25
     686:	80 93 e8 04 	sts	0x04E8, r24
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	08 95       	ret

00000690 <bmac_set_cca_active>:
     690:	80 93 4f 04 	sts	0x044F, r24
     694:	08 95       	ret

00000696 <bmac_rx_pkt_set_buffer>:
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	19 f4       	brne	.+6      	; 0x6a0 <bmac_rx_pkt_set_buffer+0xa>
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	9f ef       	ldi	r25, 0xFF	; 255
     69e:	08 95       	ret
     6a0:	90 93 93 05 	sts	0x0593, r25
     6a4:	80 93 92 05 	sts	0x0592, r24
     6a8:	60 93 91 05 	sts	0x0591, r22
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 42 04 	sts	0x0442, r24
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret

000006b8 <bmac_tx_pkt_nonblocking>:
     6b8:	9c 01       	movw	r18, r24
     6ba:	80 91 41 04 	lds	r24, 0x0441
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <bmac_tx_pkt_nonblocking+0x10>
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	08 95       	ret
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 41 04 	sts	0x0441, r24
     6ce:	30 93 ec 04 	sts	0x04EC, r19
     6d2:	20 93 eb 04 	sts	0x04EB, r18
     6d6:	60 93 ea 04 	sts	0x04EA, r22
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret

000006e0 <bmac_rx_pkt_ready>:
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	80 91 42 04 	lds	r24, 0x0442
     6e8:	88 23       	and	r24, r24
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <bmac_rx_pkt_ready+0x10>
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	08 95       	ret

000006f4 <bmac_rx_pkt_release>:
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 42 04 	sts	0x0442, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	08 95       	ret

00000700 <bmac_set_rx_check_rate>:
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	28 97       	sbiw	r28, 0x08	; 8
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	29 83       	std	Y+1, r18	; 0x01
     716:	3a 83       	std	Y+2, r19	; 0x02
     718:	4b 83       	std	Y+3, r20	; 0x03
     71a:	5c 83       	std	Y+4, r21	; 0x04
     71c:	6d 83       	std	Y+5, r22	; 0x05
     71e:	7e 83       	std	Y+6, r23	; 0x06
     720:	8f 83       	std	Y+7, r24	; 0x07
     722:	98 87       	std	Y+8, r25	; 0x08
     724:	2d 81       	ldd	r18, Y+5	; 0x05
     726:	3e 81       	ldd	r19, Y+6	; 0x06
     728:	4f 81       	ldd	r20, Y+7	; 0x07
     72a:	58 85       	ldd	r21, Y+8	; 0x08
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	ab 81       	ldd	r26, Y+3	; 0x03
     732:	bc 81       	ldd	r27, Y+4	; 0x04
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	a1 05       	cpc	r26, r1
     738:	b1 05       	cpc	r27, r1
     73a:	59 f4       	brne	.+22     	; 0x752 <bmac_set_rx_check_rate+0x52>
     73c:	20 30       	cpi	r18, 0x00	; 0
     73e:	6d e2       	ldi	r22, 0x2D	; 45
     740:	36 07       	cpc	r19, r22
     742:	61 e3       	ldi	r22, 0x31	; 49
     744:	46 07       	cpc	r20, r22
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	56 07       	cpc	r21, r22
     74a:	18 f4       	brcc	.+6      	; 0x752 <bmac_set_rx_check_rate+0x52>
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	9f ef       	ldi	r25, 0xFF	; 255
     750:	12 c0       	rjmp	.+36     	; 0x776 <bmac_set_rx_check_rate+0x76>
     752:	80 93 47 04 	sts	0x0447, r24
     756:	90 93 48 04 	sts	0x0448, r25
     75a:	a0 93 49 04 	sts	0x0449, r26
     75e:	b0 93 4a 04 	sts	0x044A, r27
     762:	20 93 4b 04 	sts	0x044B, r18
     766:	30 93 4c 04 	sts	0x044C, r19
     76a:	40 93 4d 04 	sts	0x044D, r20
     76e:	50 93 4e 04 	sts	0x044E, r21
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	28 96       	adiw	r28, 0x08	; 8
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <bmac_started>:
     788:	80 91 43 04 	lds	r24, 0x0443
     78c:	99 27       	eor	r25, r25
     78e:	87 fd       	sbrc	r24, 7
     790:	90 95       	com	r25
     792:	08 95       	ret

00000794 <bmac_rx_failure_count_get>:
     794:	80 91 3d 04 	lds	r24, 0x043D
     798:	90 91 3e 04 	lds	r25, 0x043E
     79c:	08 95       	ret

0000079e <bmac_rx_failure_count_reset>:
     79e:	10 92 3d 04 	sts	0x043D, r1
     7a2:	10 92 3e 04 	sts	0x043E, r1
     7a6:	10 92 3f 04 	sts	0x043F, r1
     7aa:	10 92 40 04 	sts	0x0440, r1
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	08 95       	ret

000007b4 <_b_pow>:
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	18 f4       	brcc	.+6      	; 0x7be <_b_pow+0xa>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	08 95       	ret
     7be:	88 30       	cpi	r24, 0x08	; 8
     7c0:	08 f0       	brcs	.+2      	; 0x7c4 <_b_pow+0x10>
     7c2:	86 e0       	ldi	r24, 0x06	; 6
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	99 0f       	add	r25, r25
     7cc:	2f 5f       	subi	r18, 0xFF	; 255
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	28 17       	cp	r18, r24
     7d2:	d8 f3       	brcs	.-10     	; 0x7ca <_b_pow+0x16>
     7d4:	89 2f       	mov	r24, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	08 95       	ret

000007da <bmac_task_config>:
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	0a e9       	ldi	r16, 0x9A	; 154
     7e0:	13 e0       	ldi	r17, 0x03	; 3
     7e2:	62 e1       	ldi	r22, 0x12	; 18
     7e4:	77 e0       	ldi	r23, 0x07	; 7
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <nrk_task_set_entry_function>
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	6d eb       	ldi	r22, 0xBD	; 189
     7f2:	73 e0       	ldi	r23, 0x03	; 3
     7f4:	c8 01       	movw	r24, r16
     7f6:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <nrk_task_set_stk>
     7fa:	84 e1       	ldi	r24, 0x14	; 20
     7fc:	80 93 a2 03 	sts	0x03A2, r24
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 a1 03 	sts	0x03A1, r24
     806:	80 93 a3 03 	sts	0x03A3, r24
     80a:	80 93 a4 03 	sts	0x03A4, r24
     80e:	10 92 a5 03 	sts	0x03A5, r1
     812:	10 92 a6 03 	sts	0x03A6, r1
     816:	10 92 a7 03 	sts	0x03A7, r1
     81a:	10 92 a8 03 	sts	0x03A8, r1
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	9d e2       	ldi	r25, 0x2D	; 45
     822:	a1 e3       	ldi	r26, 0x31	; 49
     824:	b1 e0       	ldi	r27, 0x01	; 1
     826:	80 93 a9 03 	sts	0x03A9, r24
     82a:	90 93 aa 03 	sts	0x03AA, r25
     82e:	a0 93 ab 03 	sts	0x03AB, r26
     832:	b0 93 ac 03 	sts	0x03AC, r27
     836:	85 e0       	ldi	r24, 0x05	; 5
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	80 93 ad 03 	sts	0x03AD, r24
     842:	90 93 ae 03 	sts	0x03AE, r25
     846:	a0 93 af 03 	sts	0x03AF, r26
     84a:	b0 93 b0 03 	sts	0x03B0, r27
     84e:	10 92 b1 03 	sts	0x03B1, r1
     852:	10 92 b2 03 	sts	0x03B2, r1
     856:	10 92 b3 03 	sts	0x03B3, r1
     85a:	10 92 b4 03 	sts	0x03B4, r1
     85e:	10 92 b5 03 	sts	0x03B5, r1
     862:	10 92 b6 03 	sts	0x03B6, r1
     866:	10 92 b7 03 	sts	0x03B7, r1
     86a:	10 92 b8 03 	sts	0x03B8, r1
     86e:	10 92 b9 03 	sts	0x03B9, r1
     872:	10 92 ba 03 	sts	0x03BA, r1
     876:	10 92 bb 03 	sts	0x03BB, r1
     87a:	10 92 bc 03 	sts	0x03BC, r1
     87e:	c8 01       	movw	r24, r16
     880:	0e 94 89 25 	call	0x4b12	; 0x4b12 <nrk_activate_task>
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	08 95       	ret

0000088a <_bmac_channel_check>:
     88a:	1f 93       	push	r17
     88c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <rf_polling_rx_on>
     890:	8a ef       	ldi	r24, 0xFA	; 250
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
     898:	89 b1       	in	r24, 0x09	; 9
     89a:	99 27       	eor	r25, r25
     89c:	24 e0       	ldi	r18, 0x04	; 4
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
     8a2:	2a 95       	dec	r18
     8a4:	e1 f7       	brne	.-8      	; 0x89e <_bmac_channel_check+0x14>
     8a6:	18 2f       	mov	r17, r24
     8a8:	11 70       	andi	r17, 0x01	; 1
     8aa:	80 ff       	sbrs	r24, 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <_bmac_channel_check+0x28>
     8ae:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     8b2:	81 2f       	mov	r24, r17
     8b4:	99 27       	eor	r25, r25
     8b6:	1f 91       	pop	r17
     8b8:	08 95       	ret

000008ba <_bmac_tx>:
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	80 91 4f 04 	lds	r24, 0x044F
     8ca:	88 23       	and	r24, r24
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <_bmac_tx+0x16>
     8ce:	4a c0       	rjmp	.+148    	; 0x964 <_bmac_tx+0xaa>
     8d0:	87 e4       	ldi	r24, 0x47	; 71
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
     8d8:	8c 01       	movw	r16, r24
     8da:	0e 94 28 38 	call	0x7050	; 0x7050 <rand>
     8de:	6a e0       	ldi	r22, 0x0A	; 10
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <__divmodhi4>
     8e6:	bc 01       	movw	r22, r24
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 d2 3a 	call	0x75a4	; 0x75a4 <__udivmodhi4>
     8f2:	cb 01       	movw	r24, r22
     8f4:	0e 94 b6 24 	call	0x496c	; 0x496c <nrk_wait_until_ticks>
     8f8:	ff 24       	eor	r15, r15
     8fa:	f3 94       	inc	r15
     8fc:	c7 e4       	ldi	r28, 0x47	; 71
     8fe:	d4 e0       	ldi	r29, 0x04	; 4
     900:	0e 94 45 04 	call	0x88a	; 0x88a <_bmac_channel_check>
     904:	e8 2e       	mov	r14, r24
     906:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	e8 16       	cp	r14, r24
     90e:	51 f1       	breq	.+84     	; 0x964 <_bmac_tx+0xaa>
     910:	0e 94 28 38 	call	0x7050	; 0x7050 <rand>
     914:	8c 01       	movw	r16, r24
     916:	8f 2d       	mov	r24, r15
     918:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_b_pow>
     91c:	68 2f       	mov	r22, r24
     91e:	77 27       	eor	r23, r23
     920:	c8 01       	movw	r24, r16
     922:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <__divmodhi4>
     926:	99 27       	eor	r25, r25
     928:	0e 94 18 25 	call	0x4a30	; 0x4a30 <nrk_wait_until_next_n_periods>
     92c:	ce 01       	movw	r24, r28
     92e:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
     932:	8c 01       	movw	r16, r24
     934:	0e 94 28 38 	call	0x7050	; 0x7050 <rand>
     938:	6a e0       	ldi	r22, 0x0A	; 10
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <__divmodhi4>
     940:	bc 01       	movw	r22, r24
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	c8 01       	movw	r24, r16
     948:	0e 94 d2 3a 	call	0x75a4	; 0x75a4 <__udivmodhi4>
     94c:	cb 01       	movw	r24, r22
     94e:	0e 94 b6 24 	call	0x496c	; 0x496c <nrk_wait_until_ticks>
     952:	ee 20       	and	r14, r14
     954:	39 f4       	brne	.+14     	; 0x964 <_bmac_tx+0xaa>
     956:	f3 94       	inc	r15
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	8f 15       	cp	r24, r15
     95c:	88 f6       	brcc	.-94     	; 0x900 <_bmac_tx+0x46>
     95e:	36 e0       	ldi	r19, 0x06	; 6
     960:	f3 2e       	mov	r15, r19
     962:	ce cf       	rjmp	.-100    	; 0x900 <_bmac_tx+0x46>
     964:	0e 94 85 0b 	call	0x170a	; 0x170a <rf_test_mode>
     968:	0e 94 3c 0b 	call	0x1678	; 0x1678 <rf_carrier_on>
     96c:	20 91 47 04 	lds	r18, 0x0447
     970:	30 91 48 04 	lds	r19, 0x0448
     974:	40 91 49 04 	lds	r20, 0x0449
     978:	50 91 4a 04 	lds	r21, 0x044A
     97c:	60 91 4b 04 	lds	r22, 0x044B
     980:	70 91 4c 04 	lds	r23, 0x044C
     984:	80 91 4d 04 	lds	r24, 0x044D
     988:	90 91 4e 04 	lds	r25, 0x044E
     98c:	0e 94 a8 23 	call	0x4750	; 0x4750 <nrk_wait>
     990:	0e 94 28 0b 	call	0x1650	; 0x1650 <rf_carrier_off>
     994:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <rf_data_mode>
     998:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     99c:	88 ee       	ldi	r24, 0xE8	; 232
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <rf_tx_packet>
     9a4:	80 93 44 04 	sts	0x0444, r24
     9a8:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     9ac:	10 92 41 04 	sts	0x0441, r1
     9b0:	80 91 17 06 	lds	r24, 0x0617
     9b4:	0e 94 1f 21 	call	0x423e	; 0x423e <nrk_event_signal>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <_bmac_rx>:
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	60 91 45 04 	lds	r22, 0x0445
     9d2:	8d e8       	ldi	r24, 0x8D	; 141
     9d4:	95 e0       	ldi	r25, 0x05	; 5
     9d6:	0e 94 41 13 	call	0x2682	; 0x2682 <rf_set_rx>
     9da:	0e 94 55 0e 	call	0x1caa	; 0x1caa <rf_polling_rx_on>
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	26 c0       	rjmp	.+76     	; 0xa2e <_bmac_rx+0x64>
     9e2:	1f 5f       	subi	r17, 0xFF	; 255
     9e4:	20 91 47 04 	lds	r18, 0x0447
     9e8:	30 91 48 04 	lds	r19, 0x0448
     9ec:	40 91 49 04 	lds	r20, 0x0449
     9f0:	50 91 4a 04 	lds	r21, 0x044A
     9f4:	60 91 4b 04 	lds	r22, 0x044B
     9f8:	70 91 4c 04 	lds	r23, 0x044C
     9fc:	80 91 4d 04 	lds	r24, 0x044D
     a00:	90 91 4e 04 	lds	r25, 0x044E
     a04:	0e 94 a8 23 	call	0x4750	; 0x4750 <nrk_wait>
     a08:	13 30       	cpi	r17, 0x03	; 3
     a0a:	89 f4       	brne	.+34     	; 0xa2e <_bmac_rx+0x64>
     a0c:	80 91 3d 04 	lds	r24, 0x043D
     a10:	90 91 3e 04 	lds	r25, 0x043E
     a14:	a0 91 3f 04 	lds	r26, 0x043F
     a18:	b0 91 40 04 	lds	r27, 0x0440
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	92 07       	cpc	r25, r18
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	a2 07       	cpc	r26, r18
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	b2 07       	cpc	r27, r18
     a2a:	00 f5       	brcc	.+64     	; 0xa6c <_bmac_rx+0xa2>
     a2c:	14 c0       	rjmp	.+40     	; 0xa56 <_bmac_rx+0x8c>
     a2e:	0e 94 b7 08 	call	0x116e	; 0x116e <rf_rx_check_fifop>
     a32:	88 23       	and	r24, r24
     a34:	b1 f2       	breq	.-84     	; 0x9e2 <_bmac_rx+0x18>
     a36:	1d c0       	rjmp	.+58     	; 0xa72 <_bmac_rx+0xa8>
     a38:	1f 5f       	subi	r17, 0xFF	; 255
     a3a:	84 e6       	ldi	r24, 0x64	; 100
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
     a42:	13 33       	cpi	r17, 0x33	; 51
     a44:	b9 f4       	brne	.+46     	; 0xa74 <_bmac_rx+0xaa>
     a46:	80 91 3d 04 	lds	r24, 0x043D
     a4a:	90 91 3e 04 	lds	r25, 0x043E
     a4e:	a0 91 3f 04 	lds	r26, 0x043F
     a52:	b0 91 40 04 	lds	r27, 0x0440
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	a1 1d       	adc	r26, r1
     a5a:	b1 1d       	adc	r27, r1
     a5c:	80 93 3d 04 	sts	0x043D, r24
     a60:	90 93 3e 04 	sts	0x043E, r25
     a64:	a0 93 3f 04 	sts	0x043F, r26
     a68:	b0 93 40 04 	sts	0x0440, r27
     a6c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     a70:	22 c0       	rjmp	.+68     	; 0xab6 <_bmac_rx+0xec>
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <rf_polling_rx_packet>
     a78:	08 2f       	mov	r16, r24
     a7a:	88 23       	and	r24, r24
     a7c:	e9 f2       	breq	.-70     	; 0xa38 <_bmac_rx+0x6e>
     a7e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     a82:	01 30       	cpi	r16, 0x01	; 1
     a84:	29 f4       	brne	.+10     	; 0xa90 <_bmac_rx+0xc6>
     a86:	10 92 42 04 	sts	0x0442, r1
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	15 c0       	rjmp	.+42     	; 0xaba <_bmac_rx+0xf0>
     a90:	80 91 3d 04 	lds	r24, 0x043D
     a94:	90 91 3e 04 	lds	r25, 0x043E
     a98:	a0 91 3f 04 	lds	r26, 0x043F
     a9c:	b0 91 40 04 	lds	r27, 0x0440
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	a1 1d       	adc	r26, r1
     aa4:	b1 1d       	adc	r27, r1
     aa6:	80 93 3d 04 	sts	0x043D, r24
     aaa:	90 93 3e 04 	sts	0x043E, r25
     aae:	a0 93 3f 04 	sts	0x043F, r26
     ab2:	b0 93 40 04 	sts	0x0440, r27
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <bmac_get_tx_done_signal>:
     ac0:	80 91 17 06 	lds	r24, 0x0617
     ac4:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     ac8:	80 91 17 06 	lds	r24, 0x0617
     acc:	99 27       	eor	r25, r25
     ace:	87 fd       	sbrc	r24, 7
     ad0:	90 95       	com	r25
     ad2:	08 95       	ret

00000ad4 <bmac_get_rx_pkt_signal>:
     ad4:	80 91 f3 04 	lds	r24, 0x04F3
     ad8:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     adc:	80 91 f3 04 	lds	r24, 0x04F3
     ae0:	99 27       	eor	r25, r25
     ae2:	87 fd       	sbrc	r24, 7
     ae4:	90 95       	com	r25
     ae6:	08 95       	ret

00000ae8 <bmac_tx_pkt>:
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	8c 01       	movw	r16, r24
     af2:	f6 2e       	mov	r15, r22
     af4:	80 91 41 04 	lds	r24, 0x0441
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f4       	brne	.+2      	; 0xafe <bmac_tx_pkt+0x16>
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <bmac_tx_pkt+0x94>
     afe:	80 91 17 06 	lds	r24, 0x0617
     b02:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 41 04 	sts	0x0441, r24
     b0c:	10 93 ec 04 	sts	0x04EC, r17
     b10:	00 93 eb 04 	sts	0x04EB, r16
     b14:	f0 92 ea 04 	sts	0x04EA, r15
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	00 90 17 06 	lds	r0, 0x0617
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <bmac_tx_pkt+0x46>
     b26:	66 0f       	add	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	88 1f       	adc	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	0a 94       	dec	r0
     b30:	d2 f7       	brpl	.-12     	; 0xb26 <bmac_tx_pkt+0x3e>
     b32:	0e 94 71 22 	call	0x44e2	; 0x44e2 <nrk_event_wait>
     b36:	7b 01       	movw	r14, r22
     b38:	8c 01       	movw	r16, r24
     b3a:	61 15       	cp	r22, r1
     b3c:	71 05       	cpc	r23, r1
     b3e:	81 05       	cpc	r24, r1
     b40:	91 05       	cpc	r25, r1
     b42:	21 f4       	brne	.+8      	; 0xb4c <bmac_tx_pkt+0x64>
     b44:	8f e4       	ldi	r24, 0x4F	; 79
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
     b4c:	d8 01       	movw	r26, r16
     b4e:	c7 01       	movw	r24, r14
     b50:	00 90 17 06 	lds	r0, 0x0617
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <bmac_tx_pkt+0x76>
     b56:	b6 95       	lsr	r27
     b58:	a7 95       	ror	r26
     b5a:	97 95       	ror	r25
     b5c:	87 95       	ror	r24
     b5e:	0a 94       	dec	r0
     b60:	d2 f7       	brpl	.-12     	; 0xb56 <bmac_tx_pkt+0x6e>
     b62:	80 fd       	sbrc	r24, 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <bmac_tx_pkt+0x86>
     b66:	8c e2       	ldi	r24, 0x2C	; 44
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
     b6e:	80 91 44 04 	lds	r24, 0x0444
     b72:	88 23       	and	r24, r24
     b74:	19 f0       	breq	.+6      	; 0xb7c <bmac_tx_pkt+0x94>
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <bmac_tx_pkt+0x98>
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	08 95       	ret

00000b8a <bmac_enable>:
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 46 04 	sts	0x0446, r24
     b90:	0e 94 33 13 	call	0x2666	; 0x2666 <rf_power_up>
     b94:	80 91 67 04 	lds	r24, 0x0467
     b98:	0e 94 1f 21 	call	0x423e	; 0x423e <nrk_event_signal>
     b9c:	08 95       	ret

00000b9e <bmac_disable>:
     b9e:	10 92 46 04 	sts	0x0446, r1
     ba2:	0e 94 a1 07 	call	0xf42	; 0xf42 <rf_power_down>
     ba6:	08 95       	ret

00000ba8 <bmac_set_channel>:
     ba8:	68 2f       	mov	r22, r24
     baa:	8b 31       	cpi	r24, 0x1B	; 27
     bac:	18 f0       	brcs	.+6      	; 0xbb4 <bmac_set_channel+0xc>
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	08 95       	ret
     bb4:	80 93 45 04 	sts	0x0445, r24
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4f ef       	ldi	r20, 0xFF	; 255
     bbe:	5f ef       	ldi	r21, 0xFF	; 255
     bc0:	8d e8       	ldi	r24, 0x8D	; 141
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rf_init>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	08 95       	ret

00000bce <bmac_init>:
     bce:	1f 93       	push	r17
     bd0:	18 2f       	mov	r17, r24
     bd2:	10 92 43 04 	sts	0x0443, r1
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	80 93 50 04 	sts	0x0450, r24
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 4f 04 	sts	0x044F, r24
     be2:	10 92 3d 04 	sts	0x043D, r1
     be6:	10 92 3e 04 	sts	0x043E, r1
     bea:	10 92 3f 04 	sts	0x043F, r1
     bee:	10 92 40 04 	sts	0x0440, r1
     bf2:	10 92 47 04 	sts	0x0447, r1
     bf6:	10 92 48 04 	sts	0x0448, r1
     bfa:	10 92 49 04 	sts	0x0449, r1
     bfe:	10 92 4a 04 	sts	0x044A, r1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	91 ee       	ldi	r25, 0xE1	; 225
     c06:	a5 ef       	ldi	r26, 0xF5	; 245
     c08:	b5 e0       	ldi	r27, 0x05	; 5
     c0a:	80 93 4b 04 	sts	0x044B, r24
     c0e:	90 93 4c 04 	sts	0x044C, r25
     c12:	a0 93 4d 04 	sts	0x044D, r26
     c16:	b0 93 4e 04 	sts	0x044E, r27
     c1a:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <nrk_signal_create>
     c1e:	80 93 f3 04 	sts	0x04F3, r24
     c22:	8f 3f       	cpi	r24, 0xFF	; 255
     c24:	19 f4       	brne	.+6      	; 0xc2c <bmac_init+0x5e>
     c26:	87 ec       	ldi	r24, 0xC7	; 199
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <bmac_init+0x6e>
     c2c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <nrk_signal_create>
     c30:	80 93 17 06 	sts	0x0617, r24
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	79 f4       	brne	.+30     	; 0xc56 <bmac_init+0x88>
     c38:	8f e9       	ldi	r24, 0x9F	; 159
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
     c40:	e0 91 d7 06 	lds	r30, 0x06D7
     c44:	f0 91 d8 06 	lds	r31, 0x06D8
     c48:	60 85       	ldd	r22, Z+8	; 0x08
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	5b c0       	rjmp	.+182    	; 0xd0c <bmac_init+0x13e>
     c56:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <nrk_signal_create>
     c5a:	80 93 67 04 	sts	0x0467, r24
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	19 f4       	brne	.+6      	; 0xc68 <bmac_init+0x9a>
     c62:	83 e7       	ldi	r24, 0x73	; 115
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	ea cf       	rjmp	.-44     	; 0xc3c <bmac_init+0x6e>
     c68:	10 92 41 04 	sts	0x0441, r1
     c6c:	10 92 42 04 	sts	0x0442, r1
     c70:	10 92 93 05 	sts	0x0593, r1
     c74:	10 92 92 05 	sts	0x0592, r1
     c78:	10 92 91 05 	sts	0x0591, r1
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	4f ef       	ldi	r20, 0xFF	; 255
     c82:	5f ef       	ldi	r21, 0xFF	; 255
     c84:	61 2f       	mov	r22, r17
     c86:	8d e8       	ldi	r24, 0x8D	; 141
     c88:	95 e0       	ldi	r25, 0x05	; 5
     c8a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rf_init>
     c8e:	10 93 45 04 	sts	0x0445, r17
     c92:	40 98       	cbi	0x08, 0	; 8
     c94:	83 e1       	ldi	r24, 0x13	; 19
     c96:	8e bd       	out	0x2e, r24	; 46
     c98:	0d b4       	in	r0, 0x2d	; 45
     c9a:	07 fe       	sbrs	r0, 7
     c9c:	fd cf       	rjmp	.-6      	; 0xc98 <bmac_init+0xca>
     c9e:	85 ee       	ldi	r24, 0xE5	; 229
     ca0:	8e bd       	out	0x2e, r24	; 46
     ca2:	0d b4       	in	r0, 0x2d	; 45
     ca4:	07 fe       	sbrs	r0, 7
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <bmac_init+0xd4>
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	8e bd       	out	0x2e, r24	; 46
     cac:	0d b4       	in	r0, 0x2d	; 45
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <bmac_init+0xde>
     cb2:	40 9a       	sbi	0x08, 0	; 8
     cb4:	40 98       	cbi	0x08, 0	; 8
     cb6:	85 e1       	ldi	r24, 0x15	; 21
     cb8:	8e bd       	out	0x2e, r24	; 46
     cba:	0d b4       	in	r0, 0x2d	; 45
     cbc:	07 fe       	sbrs	r0, 7
     cbe:	fd cf       	rjmp	.-6      	; 0xcba <bmac_init+0xec>
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	8e bd       	out	0x2e, r24	; 46
     cc4:	0d b4       	in	r0, 0x2d	; 45
     cc6:	07 fe       	sbrs	r0, 7
     cc8:	fd cf       	rjmp	.-6      	; 0xcc4 <bmac_init+0xf6>
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	8e bd       	out	0x2e, r24	; 46
     cce:	0d b4       	in	r0, 0x2d	; 45
     cd0:	07 fe       	sbrs	r0, 7
     cd2:	fd cf       	rjmp	.-6      	; 0xcce <bmac_init+0x100>
     cd4:	40 9a       	sbi	0x08, 0	; 8
     cd6:	40 98       	cbi	0x08, 0	; 8
     cd8:	87 e1       	ldi	r24, 0x17	; 23
     cda:	8e bd       	out	0x2e, r24	; 46
     cdc:	0d b4       	in	r0, 0x2d	; 45
     cde:	07 fe       	sbrs	r0, 7
     ce0:	fd cf       	rjmp	.-6      	; 0xcdc <bmac_init+0x10e>
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	8e bd       	out	0x2e, r24	; 46
     ce6:	0d b4       	in	r0, 0x2d	; 45
     ce8:	07 fe       	sbrs	r0, 7
     cea:	fd cf       	rjmp	.-6      	; 0xce6 <bmac_init+0x118>
     cec:	86 e5       	ldi	r24, 0x56	; 86
     cee:	8e bd       	out	0x2e, r24	; 46
     cf0:	0d b4       	in	r0, 0x2d	; 45
     cf2:	07 fe       	sbrs	r0, 7
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <bmac_init+0x122>
     cf6:	40 9a       	sbi	0x08, 0	; 8
     cf8:	83 ed       	ldi	r24, 0xD3	; 211
     cfa:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rf_set_cca_thresh>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 43 04 	sts	0x0443, r24
     d04:	80 93 46 04 	sts	0x0446, r24
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	1f 91       	pop	r17
     d0e:	08 95       	ret

00000d10 <bmac_set_cca_thresh>:
     d10:	0e 94 bc 0b 	call	0x1778	; 0x1778 <rf_set_cca_thresh>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret

00000d1a <bmac_set_rf_power>:
     d1a:	80 32       	cpi	r24, 0x20	; 32
     d1c:	18 f0       	brcs	.+6      	; 0xd24 <bmac_set_rf_power+0xa>
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	08 95       	ret
     d24:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <rf_tx_power>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	08 95       	ret

00000d2e <bmac_encryption_disable>:
     d2e:	0e 94 23 08 	call	0x1046	; 0x1046 <rf_security_disable>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	08 95       	ret

00000d38 <bmac_encryption_enable>:
     d38:	0e 94 fd 07 	call	0xffa	; 0xffa <rf_security_enable>
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	08 95       	ret

00000d42 <bmac_encryption_set_key>:
     d42:	60 31       	cpi	r22, 0x10	; 16
     d44:	19 f0       	breq	.+6      	; 0xd4c <bmac_encryption_set_key+0xa>
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	9f ef       	ldi	r25, 0xFF	; 255
     d4a:	08 95       	ret
     d4c:	0e 94 46 12 	call	0x248c	; 0x248c <rf_security_set_key>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	08 95       	ret

00000d56 <bmac_rx_pkt_is_encrypted>:
     d56:	0e 94 b2 07 	call	0xf64	; 0xf64 <rf_security_last_pkt_status>
     d5a:	99 27       	eor	r25, r25
     d5c:	87 fd       	sbrc	r24, 7
     d5e:	90 95       	com	r25
     d60:	08 95       	ret

00000d62 <bmac_addr_decode_set_my_mac>:
     d62:	0e 94 0b 12 	call	0x2416	; 0x2416 <rf_addr_decode_set_my_mac>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	08 95       	ret

00000d6c <bmac_addr_decode_enable>:
	nrk_activate_task (&RX_TASK);

	printf ("Create done\r\n");
}
     d6c:	0e 94 3c 08 	call	0x1078	; 0x1078 <rf_addr_decode_enable>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	08 95       	ret

00000d76 <bmac_addr_decode_disable>:
	RX_TASK.period.secs = 1;
	RX_TASK.period.nano_secs = 0;
	RX_TASK.cpu_reserve.secs = 1;
	RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
	RX_TASK.offset.secs = 0;
	RX_TASK.offset.nano_secs = 0;
     d76:	0e 94 57 08 	call	0x10ae	; 0x10ae <rf_addr_decode_disable>
	nrk_activate_task (&RX_TASK);

     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	08 95       	ret

00000d80 <bmac_auto_ack_enable>:
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
	RX_TASK.prio = 2;
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
     d80:	0e 94 72 08 	call	0x10e4	; 0x10e4 <rf_auto_ack_enable>
	RX_TASK.period.secs = 1;
	RX_TASK.period.nano_secs = 0;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	08 95       	ret

00000d8a <bmac_auto_ack_disable>:

}

void nrk_create_taskset ()
{
	RX_TASK.task = rx_task;
     d8a:	0e 94 90 08 	call	0x1120	; 0x1120 <rf_auto_ack_disable>
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	08 95       	ret

00000d94 <bmac_encryption_set_ctr_counter>:

	// By default the RX check rate is 100ms
	// below shows how to change that
	//check_period.secs=0;
	//check_period.nano_secs=200*NANOS_PER_MS;
	//val=bmac_set_rx_check_rate(check_period);
     d94:	64 30       	cpi	r22, 0x04	; 4
     d96:	19 f0       	breq	.+6      	; 0xd9e <bmac_encryption_set_ctr_counter+0xa>
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	08 95       	ret

     d9e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <rf_security_set_ctr_counter>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
     da6:	08 95       	ret

00000da8 <bmac_wait_until_rx_pkt>:
     da8:	80 91 42 04 	lds	r24, 0x0442
     dac:	88 23       	and	r24, r24
     dae:	09 f1       	breq	.+66     	; 0xdf2 <bmac_wait_until_rx_pkt+0x4a>
     db0:	80 91 f3 04 	lds	r24, 0x04F3
     db4:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	00 90 f3 04 	lds	r0, 0x04F3
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <bmac_wait_until_rx_pkt+0x26>
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	d2 f7       	brpl	.-12     	; 0xdc6 <bmac_wait_until_rx_pkt+0x1e>
     dd2:	0e 94 71 22 	call	0x44e2	; 0x44e2 <nrk_event_wait>
     dd6:	00 90 f3 04 	lds	r0, 0x04F3
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <bmac_wait_until_rx_pkt+0x3c>
     ddc:	96 95       	lsr	r25
     dde:	87 95       	ror	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <bmac_wait_until_rx_pkt+0x34>
     de8:	60 fd       	sbrc	r22, 0
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <bmac_wait_until_rx_pkt+0x4a>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	08 95       	ret
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	08 95       	ret

00000df8 <bmac_rx_pkt_get>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	80 91 42 04 	lds	r24, 0x0442
     e00:	88 23       	and	r24, r24
     e02:	29 f0       	breq	.+10     	; 0xe0e <bmac_rx_pkt_get+0x16>
     e04:	10 82       	st	Z, r1
     e06:	1c 92       	st	X, r1
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	08 95       	ret
     e0e:	80 91 90 05 	lds	r24, 0x0590
     e12:	80 83       	st	Z, r24
     e14:	80 91 95 05 	lds	r24, 0x0595
     e18:	8c 93       	st	X, r24
     e1a:	80 91 92 05 	lds	r24, 0x0592
     e1e:	90 91 93 05 	lds	r25, 0x0593
     e22:	08 95       	ret

00000e24 <bmac_nw_task>:
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <bmac_nw_task+0x6>
     e26:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <nrk_wait_until_next_period>
     e2a:	80 91 43 04 	lds	r24, 0x0443
     e2e:	88 23       	and	r24, r24
     e30:	d1 f3       	breq	.-12     	; 0xe26 <bmac_nw_task+0x2>
     e32:	80 91 67 04 	lds	r24, 0x0467
     e36:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     e3a:	8f 3f       	cpi	r24, 0xFF	; 255
     e3c:	21 f4       	brne	.+8      	; 0xe46 <bmac_nw_task+0x22>
     e3e:	80 e1       	ldi	r24, 0x10	; 16
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
     e46:	80 91 46 04 	lds	r24, 0x0446
     e4a:	88 23       	and	r24, r24
     e4c:	59 f1       	breq	.+86     	; 0xea4 <bmac_nw_task+0x80>
     e4e:	80 91 42 04 	lds	r24, 0x0442
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	41 f4       	brne	.+16     	; 0xe66 <bmac_nw_task+0x42>
     e56:	0e 94 45 04 	call	0x88a	; 0x88a <_bmac_channel_check>
     e5a:	88 23       	and	r24, r24
     e5c:	41 f4       	brne	.+16     	; 0xe6e <bmac_nw_task+0x4a>
     e5e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_bmac_rx>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	21 f4       	brne	.+8      	; 0xe6e <bmac_nw_task+0x4a>
     e66:	80 91 f3 04 	lds	r24, 0x04F3
     e6a:	0e 94 1f 21 	call	0x423e	; 0x423e <nrk_event_signal>
     e6e:	80 91 41 04 	lds	r24, 0x0441
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	21 f4       	brne	.+8      	; 0xe7e <bmac_nw_task+0x5a>
     e76:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <rf_rx_off>
     e7a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_bmac_tx>
     e7e:	20 91 47 04 	lds	r18, 0x0447
     e82:	30 91 48 04 	lds	r19, 0x0448
     e86:	40 91 49 04 	lds	r20, 0x0449
     e8a:	50 91 4a 04 	lds	r21, 0x044A
     e8e:	60 91 4b 04 	lds	r22, 0x044B
     e92:	70 91 4c 04 	lds	r23, 0x044C
     e96:	80 91 4d 04 	lds	r24, 0x044D
     e9a:	90 91 4e 04 	lds	r25, 0x044E
     e9e:	0e 94 a8 23 	call	0x4750	; 0x4750 <nrk_wait>
     ea2:	d1 cf       	rjmp	.-94     	; 0xe46 <bmac_nw_task+0x22>
     ea4:	80 91 67 04 	lds	r24, 0x0467
     ea8:	0e 94 17 20 	call	0x402e	; 0x402e <nrk_signal_register>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	00 90 67 04 	lds	r0, 0x0467
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <bmac_nw_task+0x9e>
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	d2 f7       	brpl	.-12     	; 0xeba <bmac_nw_task+0x96>
     ec6:	0e 94 71 22 	call	0x44e2	; 0x44e2 <nrk_event_wait>
     eca:	00 90 67 04 	lds	r0, 0x0467
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <bmac_nw_task+0xb4>
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	77 95       	ror	r23
     ed6:	67 95       	ror	r22
     ed8:	0a 94       	dec	r0
     eda:	d2 f7       	brpl	.-12     	; 0xed0 <bmac_nw_task+0xac>
     edc:	60 fd       	sbrc	r22, 0
     ede:	b3 cf       	rjmp	.-154    	; 0xe46 <bmac_nw_task+0x22>
     ee0:	e1 cf       	rjmp	.-62     	; 0xea4 <bmac_nw_task+0x80>

00000ee2 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     ee2:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     ee4:	9c 01       	movw	r18, r24
     ee6:	26 5a       	subi	r18, 0xA6	; 166
     ee8:	3e 4b       	sbci	r19, 0xBE	; 190
     eea:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	28 0f       	add	r18, r24
     ef6:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     ef8:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     efa:	40 98       	cbi	0x08, 0	; 8
     efc:	88 e1       	ldi	r24, 0x18	; 24
     efe:	8e bd       	out	0x2e, r24	; 46
     f00:	0d b4       	in	r0, 0x2d	; 45
     f02:	07 fe       	sbrs	r0, 7
     f04:	fd cf       	rjmp	.-6      	; 0xf00 <halRfSetChannel+0x1e>
     f06:	83 2f       	mov	r24, r19
     f08:	99 27       	eor	r25, r25
     f0a:	8e bd       	out	0x2e, r24	; 46
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <halRfSetChannel+0x2a>
     f12:	2e bd       	out	0x2e, r18	; 46
     f14:	0d b4       	in	r0, 0x2d	; 45
     f16:	07 fe       	sbrs	r0, 7
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <halRfSetChannel+0x32>
     f1a:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     f1c:	78 94       	sei
     f1e:	08 95       	ret

00000f20 <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     f20:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     f22:	40 98       	cbi	0x08, 0	; 8
     f24:	1e bc       	out	0x2e, r1	; 46
     f26:	0d b4       	in	r0, 0x2d	; 45
     f28:	07 fe       	sbrs	r0, 7
     f2a:	fd cf       	rjmp	.-6      	; 0xf26 <halRfWaitForCrystalOscillator+0x6>
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     f30:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     f32:	86 ff       	sbrs	r24, 6
     f34:	f5 cf       	rjmp	.-22     	; 0xf20 <halRfWaitForCrystalOscillator>
     f36:	08 95       	ret

00000f38 <set_rf_rx_callback>:
#define OSC_STARTUP_DELAY	1000

RF_RX_INFO* (*_rf_rx_callback)(RF_RX_INFO *) = NULL;

void set_rf_rx_callback(RF_RX_INFO* (*callback)(RF_RX_INFO *)){
	_rf_rx_callback = callback;
     f38:	90 93 52 04 	sts	0x0452, r25
     f3c:	80 93 51 04 	sts	0x0451, r24
     f40:	08 95       	ret

00000f42 <rf_power_down>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

void rf_power_down()
{
    DISABLE_GLOBAL_INT();
     f42:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCOFF);
     f44:	40 98       	cbi	0x08, 0	; 8
     f46:	87 e0       	ldi	r24, 0x07	; 7
     f48:	8e bd       	out	0x2e, r24	; 46
     f4a:	0d b4       	in	r0, 0x2d	; 45
     f4c:	07 fe       	sbrs	r0, 7
     f4e:	fd cf       	rjmp	.-6      	; 0xf4a <rf_power_down+0x8>
     f50:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
     f52:	40 98       	cbi	0x08, 0	; 8
     f54:	86 e0       	ldi	r24, 0x06	; 6
     f56:	8e bd       	out	0x2e, r24	; 46
     f58:	0d b4       	in	r0, 0x2d	; 45
     f5a:	07 fe       	sbrs	r0, 7
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <rf_power_down+0x16>
     f5e:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
     f60:	78 94       	sei
     f62:	08 95       	ret

00000f64 <rf_security_last_pkt_status>:
}


// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
     f64:	80 91 32 06 	lds	r24, 0x0632
return last_pkt_encrypted;
}
     f68:	99 27       	eor	r25, r25
     f6a:	08 95       	ret

00000f6c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
     f72:	40 98       	cbi	0x08, 0	; 8
     f74:	89 ec       	ldi	r24, 0xC9	; 201
     f76:	8e bd       	out	0x2e, r24	; 46
     f78:	0d b4       	in	r0, 0x2d	; 45
     f7a:	07 fe       	sbrs	r0, 7
     f7c:	fd cf       	rjmp	.-6      	; 0xf78 <rf_security_set_ctr_counter+0xc>
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	8e bd       	out	0x2e, r24	; 46
     f82:	0d b4       	in	r0, 0x2d	; 45
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <rf_security_set_ctr_counter+0x16>
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	91 50       	subi	r25, 0x01	; 1
     f8c:	fd 01       	movw	r30, r26
     f8e:	e9 0f       	add	r30, r25
     f90:	f1 1d       	adc	r31, r1
     f92:	80 81       	ld	r24, Z
     f94:	8e bd       	out	0x2e, r24	; 46
     f96:	0d b4       	in	r0, 0x2d	; 45
     f98:	07 fe       	sbrs	r0, 7
     f9a:	fd cf       	rjmp	.-6      	; 0xf96 <rf_security_set_ctr_counter+0x2a>
     f9c:	99 23       	and	r25, r25
     f9e:	a9 f7       	brne	.-22     	; 0xf8a <rf_security_set_ctr_counter+0x1e>
     fa0:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
     fa2:	40 98       	cbi	0x08, 0	; 8
     fa4:	8b ec       	ldi	r24, 0xCB	; 203
     fa6:	8e bd       	out	0x2e, r24	; 46
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <rf_security_set_ctr_counter+0x3c>
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	8e bd       	out	0x2e, r24	; 46
     fb2:	0d b4       	in	r0, 0x2d	; 45
     fb4:	07 fe       	sbrs	r0, 7
     fb6:	fd cf       	rjmp	.-6      	; 0xfb2 <rf_security_set_ctr_counter+0x46>
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	9d 01       	movw	r18, r26
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	e9 01       	movw	r28, r18
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	f9 01       	movw	r30, r18
     fc6:	e9 0f       	add	r30, r25
     fc8:	f1 1d       	adc	r31, r1
     fca:	80 81       	ld	r24, Z
     fcc:	8e bd       	out	0x2e, r24	; 46
     fce:	0d b4       	in	r0, 0x2d	; 45
     fd0:	07 fe       	sbrs	r0, 7
     fd2:	fd cf       	rjmp	.-6      	; 0xfce <rf_security_set_ctr_counter+0x62>
     fd4:	99 23       	and	r25, r25
     fd6:	a1 f7       	brne	.-24     	; 0xfc0 <rf_security_set_ctr_counter+0x54>
     fd8:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
     fda:	8c 91       	ld	r24, X
     fdc:	80 93 33 06 	sts	0x0633, r24
tx_ctr[1]=counter[1];
     fe0:	fd 01       	movw	r30, r26
     fe2:	81 81       	ldd	r24, Z+1	; 0x01
     fe4:	80 93 34 06 	sts	0x0634, r24
tx_ctr[2]=counter[2];
     fe8:	88 81       	ld	r24, Y
     fea:	80 93 35 06 	sts	0x0635, r24
tx_ctr[3]=counter[3];
     fee:	83 81       	ldd	r24, Z+3	; 0x03
     ff0:	80 93 36 06 	sts	0x0636, r24
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
     ffa:	40 98       	cbi	0x08, 0	; 8
     ffc:	89 e1       	ldi	r24, 0x19	; 25
     ffe:	8e bd       	out	0x2e, r24	; 46
    1000:	0d b4       	in	r0, 0x2d	; 45
    1002:	07 fe       	sbrs	r0, 7
    1004:	fd cf       	rjmp	.-6      	; 0x1000 <rf_security_enable+0x6>
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	8e bd       	out	0x2e, r24	; 46
    100a:	0d b4       	in	r0, 0x2d	; 45
    100c:	07 fe       	sbrs	r0, 7
    100e:	fd cf       	rjmp	.-6      	; 0x100a <rf_security_enable+0x10>
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	8e bd       	out	0x2e, r24	; 46
    1014:	0d b4       	in	r0, 0x2d	; 45
    1016:	07 fe       	sbrs	r0, 7
    1018:	fd cf       	rjmp	.-6      	; 0x1014 <rf_security_enable+0x1a>
    101a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    101c:	40 98       	cbi	0x08, 0	; 8
    101e:	8a e1       	ldi	r24, 0x1A	; 26
    1020:	8e bd       	out	0x2e, r24	; 46
    1022:	0d b4       	in	r0, 0x2d	; 45
    1024:	07 fe       	sbrs	r0, 7
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <rf_security_enable+0x28>
    1028:	8e e0       	ldi	r24, 0x0E	; 14
    102a:	8e bd       	out	0x2e, r24	; 46
    102c:	0d b4       	in	r0, 0x2d	; 45
    102e:	07 fe       	sbrs	r0, 7
    1030:	fd cf       	rjmp	.-6      	; 0x102c <rf_security_enable+0x32>
    1032:	8e e0       	ldi	r24, 0x0E	; 14
    1034:	8e bd       	out	0x2e, r24	; 46
    1036:	0d b4       	in	r0, 0x2d	; 45
    1038:	07 fe       	sbrs	r0, 7
    103a:	fd cf       	rjmp	.-6      	; 0x1036 <rf_security_enable+0x3c>
    103c:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 23 06 	sts	0x0623, r24
    1044:	08 95       	ret

00001046 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    1046:	40 98       	cbi	0x08, 0	; 8
    1048:	89 e1       	ldi	r24, 0x19	; 25
    104a:	8e bd       	out	0x2e, r24	; 46
    104c:	0d b4       	in	r0, 0x2d	; 45
    104e:	07 fe       	sbrs	r0, 7
    1050:	fd cf       	rjmp	.-6      	; 0x104c <rf_security_disable+0x6>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	8e bd       	out	0x2e, r24	; 46
    1056:	0d b4       	in	r0, 0x2d	; 45
    1058:	07 fe       	sbrs	r0, 7
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <rf_security_disable+0x10>
    105c:	84 ec       	ldi	r24, 0xC4	; 196
    105e:	8e bd       	out	0x2e, r24	; 46
    1060:	0d b4       	in	r0, 0x2d	; 45
    1062:	07 fe       	sbrs	r0, 7
    1064:	fd cf       	rjmp	.-6      	; 0x1060 <rf_security_disable+0x1a>
    1066:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    1068:	10 92 23 06 	sts	0x0623, r1
    106c:	08 95       	ret

0000106e <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    106e:	80 91 21 06 	lds	r24, 0x0621
    1072:	90 91 22 06 	lds	r25, 0x0622
    1076:	08 95       	ret

00001078 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    1078:	20 91 24 06 	lds	r18, 0x0624
    107c:	30 91 25 06 	lds	r19, 0x0625
    1080:	38 60       	ori	r19, 0x08	; 8
    1082:	30 93 25 06 	sts	0x0625, r19
    1086:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    108a:	40 98       	cbi	0x08, 0	; 8
    108c:	81 e1       	ldi	r24, 0x11	; 17
    108e:	8e bd       	out	0x2e, r24	; 46
    1090:	0d b4       	in	r0, 0x2d	; 45
    1092:	07 fe       	sbrs	r0, 7
    1094:	fd cf       	rjmp	.-6      	; 0x1090 <rf_addr_decode_enable+0x18>
    1096:	83 2f       	mov	r24, r19
    1098:	99 27       	eor	r25, r25
    109a:	8e bd       	out	0x2e, r24	; 46
    109c:	0d b4       	in	r0, 0x2d	; 45
    109e:	07 fe       	sbrs	r0, 7
    10a0:	fd cf       	rjmp	.-6      	; 0x109c <rf_addr_decode_enable+0x24>
    10a2:	2e bd       	out	0x2e, r18	; 46
    10a4:	0d b4       	in	r0, 0x2d	; 45
    10a6:	07 fe       	sbrs	r0, 7
    10a8:	fd cf       	rjmp	.-6      	; 0x10a4 <rf_addr_decode_enable+0x2c>
    10aa:	40 9a       	sbi	0x08, 0	; 8
    10ac:	08 95       	ret

000010ae <rf_addr_decode_disable>:
}

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    10ae:	20 91 24 06 	lds	r18, 0x0624
    10b2:	30 91 25 06 	lds	r19, 0x0625
    10b6:	37 7f       	andi	r19, 0xF7	; 247
    10b8:	30 93 25 06 	sts	0x0625, r19
    10bc:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    10c0:	40 98       	cbi	0x08, 0	; 8
    10c2:	81 e1       	ldi	r24, 0x11	; 17
    10c4:	8e bd       	out	0x2e, r24	; 46
    10c6:	0d b4       	in	r0, 0x2d	; 45
    10c8:	07 fe       	sbrs	r0, 7
    10ca:	fd cf       	rjmp	.-6      	; 0x10c6 <rf_addr_decode_disable+0x18>
    10cc:	83 2f       	mov	r24, r19
    10ce:	99 27       	eor	r25, r25
    10d0:	8e bd       	out	0x2e, r24	; 46
    10d2:	0d b4       	in	r0, 0x2d	; 45
    10d4:	07 fe       	sbrs	r0, 7
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <rf_addr_decode_disable+0x24>
    10d8:	2e bd       	out	0x2e, r18	; 46
    10da:	0d b4       	in	r0, 0x2d	; 45
    10dc:	07 fe       	sbrs	r0, 7
    10de:	fd cf       	rjmp	.-6      	; 0x10da <rf_addr_decode_disable+0x2c>
    10e0:	40 9a       	sbi	0x08, 0	; 8
    10e2:	08 95       	ret

000010e4 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 31 06 	sts	0x0631, r24
    mdmctrl0 |= 0x0010;
    10ea:	20 91 24 06 	lds	r18, 0x0624
    10ee:	30 91 25 06 	lds	r19, 0x0625
    10f2:	20 61       	ori	r18, 0x10	; 16
    10f4:	30 93 25 06 	sts	0x0625, r19
    10f8:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    10fc:	40 98       	cbi	0x08, 0	; 8
    10fe:	81 e1       	ldi	r24, 0x11	; 17
    1100:	8e bd       	out	0x2e, r24	; 46
    1102:	0d b4       	in	r0, 0x2d	; 45
    1104:	07 fe       	sbrs	r0, 7
    1106:	fd cf       	rjmp	.-6      	; 0x1102 <rf_auto_ack_enable+0x1e>
    1108:	83 2f       	mov	r24, r19
    110a:	99 27       	eor	r25, r25
    110c:	8e bd       	out	0x2e, r24	; 46
    110e:	0d b4       	in	r0, 0x2d	; 45
    1110:	07 fe       	sbrs	r0, 7
    1112:	fd cf       	rjmp	.-6      	; 0x110e <rf_auto_ack_enable+0x2a>
    1114:	2e bd       	out	0x2e, r18	; 46
    1116:	0d b4       	in	r0, 0x2d	; 45
    1118:	07 fe       	sbrs	r0, 7
    111a:	fd cf       	rjmp	.-6      	; 0x1116 <rf_auto_ack_enable+0x32>
    111c:	40 9a       	sbi	0x08, 0	; 8
    111e:	08 95       	ret

00001120 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    1120:	10 92 31 06 	sts	0x0631, r1
    mdmctrl0 &= (~0x0010);
    1124:	20 91 24 06 	lds	r18, 0x0624
    1128:	30 91 25 06 	lds	r19, 0x0625
    112c:	2f 7e       	andi	r18, 0xEF	; 239
    112e:	30 93 25 06 	sts	0x0625, r19
    1132:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    1136:	40 98       	cbi	0x08, 0	; 8
    1138:	81 e1       	ldi	r24, 0x11	; 17
    113a:	8e bd       	out	0x2e, r24	; 46
    113c:	0d b4       	in	r0, 0x2d	; 45
    113e:	07 fe       	sbrs	r0, 7
    1140:	fd cf       	rjmp	.-6      	; 0x113c <rf_auto_ack_disable+0x1c>
    1142:	83 2f       	mov	r24, r19
    1144:	99 27       	eor	r25, r25
    1146:	8e bd       	out	0x2e, r24	; 46
    1148:	0d b4       	in	r0, 0x2d	; 45
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <rf_auto_ack_disable+0x28>
    114e:	2e bd       	out	0x2e, r18	; 46
    1150:	0d b4       	in	r0, 0x2d	; 45
    1152:	07 fe       	sbrs	r0, 7
    1154:	fd cf       	rjmp	.-6      	; 0x1150 <rf_auto_ack_disable+0x30>
    1156:	40 9a       	sbi	0x08, 0	; 8
    1158:	08 95       	ret

0000115a <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    115a:	89 b1       	in	r24, 0x09	; 9
    115c:	99 27       	eor	r25, r25
    115e:	66 e0       	ldi	r22, 0x06	; 6
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	6a 95       	dec	r22
    1166:	e1 f7       	brne	.-8      	; 0x1160 <rf_busy+0x6>
}
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	90 70       	andi	r25, 0x00	; 0
    116c:	08 95       	ret

0000116e <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    116e:	8c b1       	in	r24, 0x0c	; 12
    1170:	99 27       	eor	r25, r25
    1172:	87 fd       	sbrc	r24, 7
    1174:	90 95       	com	r25
}
    1176:	88 27       	eor	r24, r24
    1178:	99 0f       	add	r25, r25
    117a:	88 1f       	adc	r24, r24
    117c:	99 27       	eor	r25, r25
    117e:	08 95       	ret

00001180 <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    1180:	89 b1       	in	r24, 0x09	; 9
    1182:	99 27       	eor	r25, r25
    1184:	e6 e0       	ldi	r30, 0x06	; 6
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	ea 95       	dec	r30
    118c:	e1 f7       	brne	.-8      	; 0x1186 <rf_rx_check_sfd+0x6>
}
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	90 70       	andi	r25, 0x00	; 0
    1192:	08 95       	ret

00001194 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    1194:	80 91 37 06 	lds	r24, 0x0637
    1198:	88 23       	and	r24, r24
    119a:	19 f4       	brne	.+6      	; 0x11a2 <rf_rx_packet+0xe>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	08 95       	ret
    11a2:	80 91 37 06 	lds	r24, 0x0637
    11a6:	10 92 37 06 	sts	0x0637, r1
    11aa:	99 27       	eor	r25, r25
    11ac:	87 fd       	sbrc	r24, 7
    11ae:	90 95       	com	r25
return 0;
}
    11b0:	08 95       	ret

000011b2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    11b2:	40 98       	cbi	0x08, 0	; 8
    11b4:	88 e0       	ldi	r24, 0x08	; 8
    11b6:	8e bd       	out	0x2e, r24	; 46
    11b8:	0d b4       	in	r0, 0x2d	; 45
    11ba:	07 fe       	sbrs	r0, 7
    11bc:	fd cf       	rjmp	.-6      	; 0x11b8 <rf_flush_rx_fifo+0x6>
    11be:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    11c0:	40 98       	cbi	0x08, 0	; 8
    11c2:	88 e0       	ldi	r24, 0x08	; 8
    11c4:	8e bd       	out	0x2e, r24	; 46
    11c6:	0d b4       	in	r0, 0x2d	; 45
    11c8:	07 fe       	sbrs	r0, 7
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <rf_flush_rx_fifo+0x14>
    11cc:	40 9a       	sbi	0x08, 0	; 8
    11ce:	08 95       	ret

000011d0 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    FASTSPI_STROBE(CC2420_SRFOFF);           // stop radio
    11d0:	40 98       	cbi	0x08, 0	; 8
    11d2:	86 e0       	ldi	r24, 0x06	; 6
    11d4:	8e bd       	out	0x2e, r24	; 46
    11d6:	0d b4       	in	r0, 0x2d	; 45
    11d8:	07 fe       	sbrs	r0, 7
    11da:	fd cf       	rjmp	.-6      	; 0x11d6 <rf_rx_set_serial+0x6>
    11dc:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0501); // Set RX_MODE to 1
    11de:	40 98       	cbi	0x08, 0	; 8
    11e0:	82 e1       	ldi	r24, 0x12	; 18
    11e2:	8e bd       	out	0x2e, r24	; 46
    11e4:	0d b4       	in	r0, 0x2d	; 45
    11e6:	07 fe       	sbrs	r0, 7
    11e8:	fd cf       	rjmp	.-6      	; 0x11e4 <rf_rx_set_serial+0x14>
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	8e bd       	out	0x2e, r24	; 46
    11ee:	0d b4       	in	r0, 0x2d	; 45
    11f0:	07 fe       	sbrs	r0, 7
    11f2:	fd cf       	rjmp	.-6      	; 0x11ee <rf_rx_set_serial+0x1e>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	8e bd       	out	0x2e, r24	; 46
    11f8:	0d b4       	in	r0, 0x2d	; 45
    11fa:	07 fe       	sbrs	r0, 7
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <rf_rx_set_serial+0x28>
    11fe:	40 9a       	sbi	0x08, 0	; 8
    rf_flush_rx_fifo();
    1200:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <rf_flush_rx_fifo>
    1204:	08 95       	ret

00001206 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0504); // set TXMODE to 1
    1206:	40 98       	cbi	0x08, 0	; 8
    1208:	82 e1       	ldi	r24, 0x12	; 18
    120a:	8e bd       	out	0x2e, r24	; 46
    120c:	0d b4       	in	r0, 0x2d	; 45
    120e:	07 fe       	sbrs	r0, 7
    1210:	fd cf       	rjmp	.-6      	; 0x120c <rf_tx_set_serial+0x6>
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	8e bd       	out	0x2e, r24	; 46
    1216:	0d b4       	in	r0, 0x2d	; 45
    1218:	07 fe       	sbrs	r0, 7
    121a:	fd cf       	rjmp	.-6      	; 0x1216 <rf_tx_set_serial+0x10>
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	8e bd       	out	0x2e, r24	; 46
    1220:	0d b4       	in	r0, 0x2d	; 45
    1222:	07 fe       	sbrs	r0, 7
    1224:	fd cf       	rjmp	.-6      	; 0x1220 <rf_tx_set_serial+0x1a>
    1226:	40 9a       	sbi	0x08, 0	; 8
    rf_flush_rx_fifo();
    1228:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <rf_flush_rx_fifo>
    122c:	08 95       	ret

0000122e <rf_set_preamble_length>:
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    mdmctrl0 &= (0xFFF0);  
    mdmctrl0 |= (length & 0x000F);  
    122e:	28 2f       	mov	r18, r24
    1230:	33 27       	eor	r19, r19
    1232:	2f 70       	andi	r18, 0x0F	; 15
    1234:	30 70       	andi	r19, 0x00	; 0
    1236:	80 91 24 06 	lds	r24, 0x0624
    123a:	90 91 25 06 	lds	r25, 0x0625
    123e:	80 7f       	andi	r24, 0xF0	; 240
    1240:	28 2b       	or	r18, r24
    1242:	39 2b       	or	r19, r25
    1244:	30 93 25 06 	sts	0x0625, r19
    1248:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    124c:	40 98       	cbi	0x08, 0	; 8
    124e:	81 e1       	ldi	r24, 0x11	; 17
    1250:	8e bd       	out	0x2e, r24	; 46
    1252:	0d b4       	in	r0, 0x2d	; 45
    1254:	07 fe       	sbrs	r0, 7
    1256:	fd cf       	rjmp	.-6      	; 0x1252 <rf_set_preamble_length+0x24>
    1258:	83 2f       	mov	r24, r19
    125a:	99 27       	eor	r25, r25
    125c:	8e bd       	out	0x2e, r24	; 46
    125e:	0d b4       	in	r0, 0x2d	; 45
    1260:	07 fe       	sbrs	r0, 7
    1262:	fd cf       	rjmp	.-6      	; 0x125e <rf_set_preamble_length+0x30>
    1264:	2e bd       	out	0x2e, r18	; 46
    1266:	0d b4       	in	r0, 0x2d	; 45
    1268:	07 fe       	sbrs	r0, 7
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <rf_set_preamble_length+0x38>
    126c:	40 9a       	sbi	0x08, 0	; 8
    126e:	08 95       	ret

00001270 <rf_set_cca_mode>:
 * Accept 1-3 as argument
 */
void rf_set_cca_mode(uint8_t mode)
{
    mdmctrl0 &= (0xFF3F);
    mdmctrl0 |= ((mode & 0x3) << 6);
    1270:	28 2f       	mov	r18, r24
    1272:	33 27       	eor	r19, r19
    1274:	23 70       	andi	r18, 0x03	; 3
    1276:	30 70       	andi	r19, 0x00	; 0
    1278:	b6 e0       	ldi	r27, 0x06	; 6
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	ba 95       	dec	r27
    1280:	e1 f7       	brne	.-8      	; 0x127a <rf_set_cca_mode+0xa>
    1282:	80 91 24 06 	lds	r24, 0x0624
    1286:	90 91 25 06 	lds	r25, 0x0625
    128a:	8f 73       	andi	r24, 0x3F	; 63
    128c:	28 2b       	or	r18, r24
    128e:	39 2b       	or	r19, r25
    1290:	30 93 25 06 	sts	0x0625, r19
    1294:	20 93 24 06 	sts	0x0624, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    1298:	40 98       	cbi	0x08, 0	; 8
    129a:	81 e1       	ldi	r24, 0x11	; 17
    129c:	8e bd       	out	0x2e, r24	; 46
    129e:	0d b4       	in	r0, 0x2d	; 45
    12a0:	07 fe       	sbrs	r0, 7
    12a2:	fd cf       	rjmp	.-6      	; 0x129e <rf_set_cca_mode+0x2e>
    12a4:	83 2f       	mov	r24, r19
    12a6:	99 27       	eor	r25, r25
    12a8:	8e bd       	out	0x2e, r24	; 46
    12aa:	0d b4       	in	r0, 0x2d	; 45
    12ac:	07 fe       	sbrs	r0, 7
    12ae:	fd cf       	rjmp	.-6      	; 0x12aa <rf_set_cca_mode+0x3a>
    12b0:	2e bd       	out	0x2e, r18	; 46
    12b2:	0d b4       	in	r0, 0x2d	; 45
    12b4:	07 fe       	sbrs	r0, 7
    12b6:	fd cf       	rjmp	.-6      	; 0x12b2 <rf_set_cca_mode+0x42>
    12b8:	40 9a       	sbi	0x08, 0	; 8
    12ba:	08 95       	ret

000012bc <__vector_8>:
//  DESCRIPTION:
//
//      Note: Packets are acknowledged automatically by CC2420 through the auto-acknowledgment feature.
//  TODO: handle acknowledgements, not implemented before, so not a huge deal
//-------------------------------------------------------------------------------------------------------
SIGNAL(INT7_vect){
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	24 97       	sbiw	r28, 0x04	; 4
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	cd bf       	out	0x3d, r28	; 61
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum, rx_checksum, i;

	CLEAR_FIFOP_INT();
    12ec:	80 e8       	ldi	r24, 0x80	; 128
    12ee:	8c bb       	out	0x1c, r24	; 28

	// prevent fals positive
	if(!(FIFOP_IS_1)){
    12f0:	67 9b       	sbis	0x0c, 7	; 12
    12f2:	97 c1       	rjmp	.+814    	; 0x1622 <__vector_8+0x366>
		return;
	}

    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {
    12f4:	67 9b       	sbis	0x0c, 7	; 12
    12f6:	1c c0       	rjmp	.+56     	; 0x1330 <__vector_8+0x74>
    12f8:	31 99       	sbic	0x06, 1	; 6
    12fa:	1a c0       	rjmp	.+52     	; 0x1330 <__vector_8+0x74>
		uint8_t tmp;
		FASTSPI_READ_FIFO_BYTE(tmp);
    12fc:	40 98       	cbi	0x08, 0	; 8
    12fe:	8f e7       	ldi	r24, 0x7F	; 127
    1300:	8e bd       	out	0x2e, r24	; 46
    1302:	0d b4       	in	r0, 0x2d	; 45
    1304:	07 fe       	sbrs	r0, 7
    1306:	fd cf       	rjmp	.-6      	; 0x1302 <__vector_8+0x46>
    1308:	1e bc       	out	0x2e, r1	; 46
    130a:	0d b4       	in	r0, 0x2d	; 45
    130c:	07 fe       	sbrs	r0, 7
    130e:	fd cf       	rjmp	.-6      	; 0x130a <__vector_8+0x4e>
    1310:	8e b5       	in	r24, 0x2e	; 46
    1312:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1314:	40 98       	cbi	0x08, 0	; 8
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	8e bd       	out	0x2e, r24	; 46
    131a:	0d b4       	in	r0, 0x2d	; 45
    131c:	07 fe       	sbrs	r0, 7
    131e:	fd cf       	rjmp	.-6      	; 0x131a <__vector_8+0x5e>
    1320:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1322:	40 98       	cbi	0x08, 0	; 8
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	8e bd       	out	0x2e, r24	; 46
    1328:	0d b4       	in	r0, 0x2d	; 45
    132a:	07 fe       	sbrs	r0, 7
    132c:	fd cf       	rjmp	.-6      	; 0x1328 <__vector_8+0x6c>
    132e:	78 c1       	rjmp	.+752    	; 0x1620 <__vector_8+0x364>
		return;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    1330:	40 98       	cbi	0x08, 0	; 8
    1332:	8f e7       	ldi	r24, 0x7F	; 127
    1334:	8e bd       	out	0x2e, r24	; 46
    1336:	0d b4       	in	r0, 0x2d	; 45
    1338:	07 fe       	sbrs	r0, 7
    133a:	fd cf       	rjmp	.-6      	; 0x1336 <__vector_8+0x7a>
    133c:	1e bc       	out	0x2e, r1	; 46
    133e:	0d b4       	in	r0, 0x2d	; 45
    1340:	07 fe       	sbrs	r0, 7
    1342:	fd cf       	rjmp	.-6      	; 0x133e <__vector_8+0x82>
    1344:	4e b5       	in	r20, 0x2e	; 46
    1346:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    1348:	4f 77       	andi	r20, 0x7F	; 127

	// check packet isn't too short or too long
	if(length < (RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD) || (length-RF_PACKET_OVERHEAD_SIZE) > rfSettings.pRxInfo->max_length){
    134a:	4c 30       	cpi	r20, 0x0C	; 12
    134c:	8c f0       	brlt	.+34     	; 0x1370 <__vector_8+0xb4>
    134e:	e0 91 26 06 	lds	r30, 0x0626
    1352:	f0 91 27 06 	lds	r31, 0x0627
    1356:	24 2f       	mov	r18, r20
    1358:	33 27       	eor	r19, r19
    135a:	27 fd       	sbrc	r18, 7
    135c:	30 95       	com	r19
    135e:	2b 50       	subi	r18, 0x0B	; 11
    1360:	30 40       	sbci	r19, 0x00	; 0
    1362:	84 81       	ldd	r24, Z+4	; 0x04
    1364:	99 27       	eor	r25, r25
    1366:	87 fd       	sbrc	r24, 7
    1368:	90 95       	com	r25
    136a:	82 17       	cp	r24, r18
    136c:	93 07       	cpc	r25, r19
    136e:	ac f5       	brge	.+106    	; 0x13da <__vector_8+0x11e>
		uint8_t tmp;
		FASTSPI_READ_FIFO_GARBAGE(length);
    1370:	40 98       	cbi	0x08, 0	; 8
    1372:	8f e7       	ldi	r24, 0x7F	; 127
    1374:	8e bd       	out	0x2e, r24	; 46
    1376:	0d b4       	in	r0, 0x2d	; 45
    1378:	07 fe       	sbrs	r0, 7
    137a:	fd cf       	rjmp	.-6      	; 0x1376 <__vector_8+0xba>
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	24 2f       	mov	r18, r20
    1382:	33 27       	eor	r19, r19
    1384:	27 fd       	sbrc	r18, 7
    1386:	30 95       	com	r19
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <__vector_8+0xda>
    138a:	1e bc       	out	0x2e, r1	; 46
    138c:	0d b4       	in	r0, 0x2d	; 45
    138e:	07 fe       	sbrs	r0, 7
    1390:	fd cf       	rjmp	.-6      	; 0x138c <__vector_8+0xd0>
    1392:	6f 5f       	subi	r22, 0xFF	; 255
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	86 2f       	mov	r24, r22
    1398:	99 27       	eor	r25, r25
    139a:	82 17       	cp	r24, r18
    139c:	93 07       	cpc	r25, r19
    139e:	14 f4       	brge	.+4      	; 0x13a4 <__vector_8+0xe8>
    13a0:	31 99       	sbic	0x06, 1	; 6
    13a2:	f3 cf       	rjmp	.-26     	; 0x138a <__vector_8+0xce>
    13a4:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_READ_FIFO_BYTE(tmp);
    13a6:	40 98       	cbi	0x08, 0	; 8
    13a8:	8f e7       	ldi	r24, 0x7F	; 127
    13aa:	8e bd       	out	0x2e, r24	; 46
    13ac:	0d b4       	in	r0, 0x2d	; 45
    13ae:	07 fe       	sbrs	r0, 7
    13b0:	fd cf       	rjmp	.-6      	; 0x13ac <__vector_8+0xf0>
    13b2:	1e bc       	out	0x2e, r1	; 46
    13b4:	0d b4       	in	r0, 0x2d	; 45
    13b6:	07 fe       	sbrs	r0, 7
    13b8:	fd cf       	rjmp	.-6      	; 0x13b4 <__vector_8+0xf8>
    13ba:	8e b5       	in	r24, 0x2e	; 46
    13bc:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    13be:	40 98       	cbi	0x08, 0	; 8
    13c0:	88 e0       	ldi	r24, 0x08	; 8
    13c2:	8e bd       	out	0x2e, r24	; 46
    13c4:	0d b4       	in	r0, 0x2d	; 45
    13c6:	07 fe       	sbrs	r0, 7
    13c8:	fd cf       	rjmp	.-6      	; 0x13c4 <__vector_8+0x108>
    13ca:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    13cc:	40 98       	cbi	0x08, 0	; 8
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	8e bd       	out	0x2e, r24	; 46
    13d2:	0d b4       	in	r0, 0x2d	; 45
    13d4:	07 fe       	sbrs	r0, 7
    13d6:	fd cf       	rjmp	.-6      	; 0x13d2 <__vector_8+0x116>
    13d8:	23 c1       	rjmp	.+582    	; 0x1620 <__vector_8+0x364>
		// printf("Bad length: %d\r\n",length);
		return;
	}

	// fill in packet length
	rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    13da:	e0 91 26 06 	lds	r30, 0x0626
    13de:	f0 91 27 06 	lds	r31, 0x0627
    13e2:	4c 50       	subi	r20, 0x0C	; 12
    13e4:	43 83       	std	Z+3, r20	; 0x03

	// get seq frame control and seqnum
	FASTSPI_READ_FIFO_NO_WAIT((uint8_t *) &frameControlField, 2);
    13e6:	40 98       	cbi	0x08, 0	; 8
    13e8:	8f e7       	ldi	r24, 0x7F	; 127
    13ea:	8e bd       	out	0x2e, r24	; 46
    13ec:	0d b4       	in	r0, 0x2d	; 45
    13ee:	07 fe       	sbrs	r0, 7
    13f0:	fd cf       	rjmp	.-6      	; 0x13ec <__vector_8+0x130>
    13f2:	fe 01       	movw	r30, r28
    13f4:	31 96       	adiw	r30, 0x01	; 1
    13f6:	9e 01       	movw	r18, r28
    13f8:	2d 5f       	subi	r18, 0xFD	; 253
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	1e bc       	out	0x2e, r1	; 46
    13fe:	0d b4       	in	r0, 0x2d	; 45
    1400:	07 fe       	sbrs	r0, 7
    1402:	fd cf       	rjmp	.-6      	; 0x13fe <__vector_8+0x142>
    1404:	8e b5       	in	r24, 0x2e	; 46
    1406:	81 93       	st	Z+, r24
    1408:	e2 17       	cp	r30, r18
    140a:	f3 07       	cpc	r31, r19
    140c:	b9 f7       	brne	.-18     	; 0x13fc <__vector_8+0x140>
    140e:	40 9a       	sbi	0x08, 0	; 8
	rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    1410:	e0 91 26 06 	lds	r30, 0x0626
    1414:	f0 91 27 06 	lds	r31, 0x0627
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	25 e0       	ldi	r18, 0x05	; 5
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	2a 95       	dec	r18
    1424:	e1 f7       	brne	.-8      	; 0x141e <__vector_8+0x162>
    1426:	81 70       	andi	r24, 0x01	; 1
    1428:	87 83       	std	Z+7, r24	; 0x07
	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    142a:	40 98       	cbi	0x08, 0	; 8
    142c:	8f e7       	ldi	r24, 0x7F	; 127
    142e:	8e bd       	out	0x2e, r24	; 46
    1430:	0d b4       	in	r0, 0x2d	; 45
    1432:	07 fe       	sbrs	r0, 7
    1434:	fd cf       	rjmp	.-6      	; 0x1430 <__vector_8+0x174>
    1436:	1e bc       	out	0x2e, r1	; 46
    1438:	0d b4       	in	r0, 0x2d	; 45
    143a:	07 fe       	sbrs	r0, 7
    143c:	fd cf       	rjmp	.-6      	; 0x1438 <__vector_8+0x17c>
    143e:	e0 91 26 06 	lds	r30, 0x0626
    1442:	f0 91 27 06 	lds	r31, 0x0627
    1446:	8e b5       	in	r24, 0x2e	; 46
    1448:	80 83       	st	Z, r24
    144a:	40 9a       	sbi	0x08, 0	; 8

	// don't need pan address
	FASTSPI_READ_FIFO_GARBAGE(4);
    144c:	40 98       	cbi	0x08, 0	; 8
    144e:	8f e7       	ldi	r24, 0x7F	; 127
    1450:	8e bd       	out	0x2e, r24	; 46
    1452:	0d b4       	in	r0, 0x2d	; 45
    1454:	07 fe       	sbrs	r0, 7
    1456:	fd cf       	rjmp	.-6      	; 0x1452 <__vector_8+0x196>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	07 c0       	rjmp	.+14     	; 0x146a <__vector_8+0x1ae>
    145c:	1e bc       	out	0x2e, r1	; 46
    145e:	0d b4       	in	r0, 0x2d	; 45
    1460:	07 fe       	sbrs	r0, 7
    1462:	fd cf       	rjmp	.-6      	; 0x145e <__vector_8+0x1a2>
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	11 f0       	breq	.+4      	; 0x146e <__vector_8+0x1b2>
    146a:	31 99       	sbic	0x06, 1	; 6
    146c:	f7 cf       	rjmp	.-18     	; 0x145c <__vector_8+0x1a0>
    146e:	40 9a       	sbi	0x08, 0	; 8

	// get source address
	FASTSPI_READ_FIFO_NO_WAIT((uint8_t *) &rfSettings.pRxInfo->srcAddr, 2);
    1470:	40 98       	cbi	0x08, 0	; 8
    1472:	8f e7       	ldi	r24, 0x7F	; 127
    1474:	8e bd       	out	0x2e, r24	; 46
    1476:	0d b4       	in	r0, 0x2d	; 45
    1478:	07 fe       	sbrs	r0, 7
    147a:	fd cf       	rjmp	.-6      	; 0x1476 <__vector_8+0x1ba>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	1e bc       	out	0x2e, r1	; 46
    1482:	0d b4       	in	r0, 0x2d	; 45
    1484:	07 fe       	sbrs	r0, 7
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <__vector_8+0x1c6>
    1488:	e0 91 26 06 	lds	r30, 0x0626
    148c:	f0 91 27 06 	lds	r31, 0x0627
    1490:	e2 0f       	add	r30, r18
    1492:	f3 1f       	adc	r31, r19
    1494:	8e b5       	in	r24, 0x2e	; 46
    1496:	81 83       	std	Z+1, r24	; 0x01
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	79 f7       	brne	.-34     	; 0x1480 <__vector_8+0x1c4>
    14a2:	40 9a       	sbi	0x08, 0	; 8

	// get payload, checksum, and footer
	FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    14a4:	40 98       	cbi	0x08, 0	; 8
    14a6:	8f e7       	ldi	r24, 0x7F	; 127
    14a8:	8e bd       	out	0x2e, r24	; 46
    14aa:	0d b4       	in	r0, 0x2d	; 45
    14ac:	07 fe       	sbrs	r0, 7
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <__vector_8+0x1ee>
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	11 c0       	rjmp	.+34     	; 0x14d8 <__vector_8+0x21c>
    14b6:	1e bc       	out	0x2e, r1	; 46
    14b8:	0d b4       	in	r0, 0x2d	; 45
    14ba:	07 fe       	sbrs	r0, 7
    14bc:	fd cf       	rjmp	.-6      	; 0x14b8 <__vector_8+0x1fc>
    14be:	e0 91 26 06 	lds	r30, 0x0626
    14c2:	f0 91 27 06 	lds	r31, 0x0627
    14c6:	05 80       	ldd	r0, Z+5	; 0x05
    14c8:	f6 81       	ldd	r31, Z+6	; 0x06
    14ca:	e0 2d       	mov	r30, r0
    14cc:	e6 0f       	add	r30, r22
    14ce:	f1 1d       	adc	r31, r1
    14d0:	8e b5       	in	r24, 0x2e	; 46
    14d2:	80 83       	st	Z, r24
    14d4:	4f 5f       	subi	r20, 0xFF	; 255
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	64 2f       	mov	r22, r20
    14da:	e0 91 26 06 	lds	r30, 0x0626
    14de:	f0 91 27 06 	lds	r31, 0x0627
    14e2:	24 2f       	mov	r18, r20
    14e4:	33 27       	eor	r19, r19
    14e6:	83 81       	ldd	r24, Z+3	; 0x03
    14e8:	99 27       	eor	r25, r25
    14ea:	87 fd       	sbrc	r24, 7
    14ec:	90 95       	com	r25
    14ee:	28 17       	cp	r18, r24
    14f0:	39 07       	cpc	r19, r25
    14f2:	0c f3       	brlt	.-62     	; 0x14b6 <__vector_8+0x1fa>
    14f4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1);
    14f6:	40 98       	cbi	0x08, 0	; 8
    14f8:	8f e7       	ldi	r24, 0x7F	; 127
    14fa:	8e bd       	out	0x2e, r24	; 46
    14fc:	0d b4       	in	r0, 0x2d	; 45
    14fe:	07 fc       	sbrc	r0, 7
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <__vector_8+0x25a>
    1502:	fc cf       	rjmp	.-8      	; 0x14fc <__vector_8+0x240>
    1504:	0d b4       	in	r0, 0x2d	; 45
    1506:	07 fe       	sbrs	r0, 7
    1508:	fd cf       	rjmp	.-6      	; 0x1504 <__vector_8+0x248>
    150a:	5e b5       	in	r21, 0x2e	; 46
    150c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_READ_FIFO_NO_WAIT((uint8_t *) pFooter, 2);
    150e:	40 98       	cbi	0x08, 0	; 8
    1510:	8f e7       	ldi	r24, 0x7F	; 127
    1512:	8e bd       	out	0x2e, r24	; 46
    1514:	02 c0       	rjmp	.+4      	; 0x151a <__vector_8+0x25e>
	// get source address
	FASTSPI_READ_FIFO_NO_WAIT((uint8_t *) &rfSettings.pRxInfo->srcAddr, 2);

	// get payload, checksum, and footer
	FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
	FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1);
    1516:	1e bc       	out	0x2e, r1	; 46
    1518:	f5 cf       	rjmp	.-22     	; 0x1504 <__vector_8+0x248>
	FASTSPI_READ_FIFO_NO_WAIT((uint8_t *) pFooter, 2);
    151a:	0d b4       	in	r0, 0x2d	; 45
    151c:	07 fe       	sbrs	r0, 7
    151e:	fd cf       	rjmp	.-6      	; 0x151a <__vector_8+0x25e>
    1520:	fe 01       	movw	r30, r28
    1522:	33 96       	adiw	r30, 0x03	; 3
    1524:	9e 01       	movw	r18, r28
    1526:	2b 5f       	subi	r18, 0xFB	; 251
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	1e bc       	out	0x2e, r1	; 46
    152c:	0d b4       	in	r0, 0x2d	; 45
    152e:	07 fe       	sbrs	r0, 7
    1530:	fd cf       	rjmp	.-6      	; 0x152c <__vector_8+0x270>
    1532:	8e b5       	in	r24, 0x2e	; 46
    1534:	81 93       	st	Z+, r24
    1536:	e2 17       	cp	r30, r18
    1538:	f3 07       	cpc	r31, r19
    153a:	b9 f7       	brne	.-18     	; 0x152a <__vector_8+0x26e>
    153c:	40 9a       	sbi	0x08, 0	; 8
	// signal strength
	rfSettings.pRxInfo->rssi = pFooter[0];
    153e:	e0 91 26 06 	lds	r30, 0x0626
    1542:	f0 91 27 06 	lds	r31, 0x0627
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	80 87       	std	Z+8, r24	; 0x08
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	0a c0       	rjmp	.+20     	; 0x1566 <__vector_8+0x2aa>

	// calculate checksum
	checksum = 0;
	for(i=0; i<rfSettings.pRxInfo->length; i++){
		checksum += rfSettings.pRxInfo->pPayload[i];
    1552:	e0 91 26 06 	lds	r30, 0x0626
    1556:	f0 91 27 06 	lds	r31, 0x0627
    155a:	85 81       	ldd	r24, Z+5	; 0x05
    155c:	96 81       	ldd	r25, Z+6	; 0x06
    155e:	a8 0f       	add	r26, r24
    1560:	b9 1f       	adc	r27, r25
    1562:	8c 91       	ld	r24, X
    1564:	48 0f       	add	r20, r24
    1566:	82 2f       	mov	r24, r18
	// signal strength
	rfSettings.pRxInfo->rssi = pFooter[0];

	// calculate checksum
	checksum = 0;
	for(i=0; i<rfSettings.pRxInfo->length; i++){
    1568:	e0 91 26 06 	lds	r30, 0x0626
    156c:	f0 91 27 06 	lds	r31, 0x0627
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	a8 2f       	mov	r26, r24
    1576:	bb 27       	eor	r27, r27
    1578:	83 81       	ldd	r24, Z+3	; 0x03
    157a:	99 27       	eor	r25, r25
    157c:	87 fd       	sbrc	r24, 7
    157e:	90 95       	com	r25
    1580:	a8 17       	cp	r26, r24
    1582:	b9 07       	cpc	r27, r25
    1584:	34 f3       	brlt	.-52     	; 0x1552 <__vector_8+0x296>
		checksum += rfSettings.pRxInfo->pPayload[i];
	}

	// check checksum
	if(checksum != rx_checksum){
    1586:	45 17       	cp	r20, r21
    1588:	d1 f0       	breq	.+52     	; 0x15be <__vector_8+0x302>
		uint8_t tmp;
		FASTSPI_READ_FIFO_BYTE(tmp);
    158a:	40 98       	cbi	0x08, 0	; 8
    158c:	8f e7       	ldi	r24, 0x7F	; 127
    158e:	8e bd       	out	0x2e, r24	; 46
    1590:	0d b4       	in	r0, 0x2d	; 45
    1592:	07 fe       	sbrs	r0, 7
    1594:	fd cf       	rjmp	.-6      	; 0x1590 <__vector_8+0x2d4>
    1596:	1e bc       	out	0x2e, r1	; 46
    1598:	0d b4       	in	r0, 0x2d	; 45
    159a:	07 fe       	sbrs	r0, 7
    159c:	fd cf       	rjmp	.-6      	; 0x1598 <__vector_8+0x2dc>
    159e:	8e b5       	in	r24, 0x2e	; 46
    15a0:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    15a2:	40 98       	cbi	0x08, 0	; 8
    15a4:	88 e0       	ldi	r24, 0x08	; 8
    15a6:	8e bd       	out	0x2e, r24	; 46
    15a8:	0d b4       	in	r0, 0x2d	; 45
    15aa:	07 fe       	sbrs	r0, 7
    15ac:	fd cf       	rjmp	.-6      	; 0x15a8 <__vector_8+0x2ec>
    15ae:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    15b0:	40 98       	cbi	0x08, 0	; 8
    15b2:	88 e0       	ldi	r24, 0x08	; 8
    15b4:	8e bd       	out	0x2e, r24	; 46
    15b6:	0d b4       	in	r0, 0x2d	; 45
    15b8:	07 fe       	sbrs	r0, 7
    15ba:	fd cf       	rjmp	.-6      	; 0x15b6 <__vector_8+0x2fa>
    15bc:	31 c0       	rjmp	.+98     	; 0x1620 <__vector_8+0x364>
		//printf("Checksum fail: %d %d\r\n", checksum, rx_checksum);
		return;
	}

	// if success mark read and do callback
	if(pFooter[1] * RF_CRC_OK_BM){
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	88 23       	and	r24, r24
    15c2:	a9 f0       	breq	.+42     	; 0x15ee <__vector_8+0x332>
		//printf("%p\r\n", _rf_rx_callback);
		if(_rf_rx_callback != NULL){
    15c4:	e0 91 51 04 	lds	r30, 0x0451
    15c8:	f0 91 52 04 	lds	r31, 0x0452
    15cc:	30 97       	sbiw	r30, 0x00	; 0
    15ce:	49 f0       	breq	.+18     	; 0x15e2 <__vector_8+0x326>
			//printf("call\r\n");
			rfSettings.pRxInfo = _rf_rx_callback(rfSettings.pRxInfo);
    15d0:	80 91 26 06 	lds	r24, 0x0626
    15d4:	90 91 27 06 	lds	r25, 0x0627
    15d8:	09 95       	icall
    15da:	90 93 27 06 	sts	0x0627, r25
    15de:	80 93 26 06 	sts	0x0626, r24
		}
		rx_ready++;
    15e2:	80 91 37 06 	lds	r24, 0x0637
    15e6:	8f 5f       	subi	r24, 0xFF	; 255
    15e8:	80 93 37 06 	sts	0x0637, r24
    15ec:	1a c0       	rjmp	.+52     	; 0x1622 <__vector_8+0x366>
		return;
	}else{
		uint8_t tmp;
		FASTSPI_READ_FIFO_BYTE(tmp);
    15ee:	40 98       	cbi	0x08, 0	; 8
    15f0:	8f e7       	ldi	r24, 0x7F	; 127
    15f2:	8e bd       	out	0x2e, r24	; 46
    15f4:	0d b4       	in	r0, 0x2d	; 45
    15f6:	07 fe       	sbrs	r0, 7
    15f8:	fd cf       	rjmp	.-6      	; 0x15f4 <__vector_8+0x338>
    15fa:	1e bc       	out	0x2e, r1	; 46
    15fc:	0d b4       	in	r0, 0x2d	; 45
    15fe:	07 fe       	sbrs	r0, 7
    1600:	fd cf       	rjmp	.-6      	; 0x15fc <__vector_8+0x340>
    1602:	8e b5       	in	r24, 0x2e	; 46
    1604:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    1606:	40 98       	cbi	0x08, 0	; 8
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	8e bd       	out	0x2e, r24	; 46
    160c:	0d b4       	in	r0, 0x2d	; 45
    160e:	07 fe       	sbrs	r0, 7
    1610:	fd cf       	rjmp	.-6      	; 0x160c <__vector_8+0x350>
    1612:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_SFLUSHRX);
    1614:	40 98       	cbi	0x08, 0	; 8
    1616:	88 e0       	ldi	r24, 0x08	; 8
    1618:	8e bd       	out	0x2e, r24	; 46
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fe       	sbrs	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <__vector_8+0x35e>
    1620:	40 9a       	sbi	0x08, 0	; 8
    1622:	24 96       	adiw	r28, 0x04	; 4
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	ff 91       	pop	r31
    1630:	ef 91       	pop	r30
    1632:	bf 91       	pop	r27
    1634:	af 91       	pop	r26
    1636:	9f 91       	pop	r25
    1638:	8f 91       	pop	r24
    163a:	7f 91       	pop	r23
    163c:	6f 91       	pop	r22
    163e:	5f 91       	pop	r21
    1640:	4f 91       	pop	r20
    1642:	3f 91       	pop	r19
    1644:	2f 91       	pop	r18
    1646:	0f 90       	pop	r0
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	0f 90       	pop	r0
    164c:	1f 90       	pop	r1
    164e:	18 95       	reti

00001650 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1650:	80 91 21 06 	lds	r24, 0x0621
    1654:	90 91 22 06 	lds	r25, 0x0622
    1658:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    165c:	40 98       	cbi	0x08, 0	; 8
    165e:	86 e0       	ldi	r24, 0x06	; 6
    1660:	8e bd       	out	0x2e, r24	; 46
    1662:	0d b4       	in	r0, 0x2d	; 45
    1664:	07 fe       	sbrs	r0, 7
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <rf_carrier_off+0x12>
    1668:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    166a:	80 91 21 06 	lds	r24, 0x0621
    166e:	90 91 22 06 	lds	r25, 0x0622
    1672:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1676:	08 95       	ret

00001678 <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1678:	80 91 21 06 	lds	r24, 0x0621
    167c:	90 91 22 06 	lds	r25, 0x0622
    1680:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif



        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    1684:	40 98       	cbi	0x08, 0	; 8
    1686:	84 e0       	ldi	r24, 0x04	; 4
    1688:	8e bd       	out	0x2e, r24	; 46
    168a:	0d b4       	in	r0, 0x2d	; 45
    168c:	07 fe       	sbrs	r0, 7
    168e:	fd cf       	rjmp	.-6      	; 0x168a <rf_carrier_on+0x12>
    1690:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1692:	80 91 21 06 	lds	r24, 0x0621
    1696:	90 91 22 06 	lds	r25, 0x0622
    169a:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    169e:	08 95       	ret

000016a0 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    16a0:	80 91 21 06 	lds	r24, 0x0621
    16a4:	90 91 22 06 	lds	r25, 0x0622
    16a8:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif


        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    16ac:	40 98       	cbi	0x08, 0	; 8
    16ae:	86 e0       	ldi	r24, 0x06	; 6
    16b0:	8e bd       	out	0x2e, r24	; 46
    16b2:	0d b4       	in	r0, 0x2d	; 45
    16b4:	07 fe       	sbrs	r0, 7
    16b6:	fd cf       	rjmp	.-6      	; 0x16b2 <rf_data_mode+0x12>
    16b8:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    16ba:	40 98       	cbi	0x08, 0	; 8
    16bc:	82 e1       	ldi	r24, 0x12	; 18
    16be:	8e bd       	out	0x2e, r24	; 46
    16c0:	0d b4       	in	r0, 0x2d	; 45
    16c2:	07 fe       	sbrs	r0, 7
    16c4:	fd cf       	rjmp	.-6      	; 0x16c0 <rf_data_mode+0x20>
    16c6:	85 e0       	ldi	r24, 0x05	; 5
    16c8:	8e bd       	out	0x2e, r24	; 46
    16ca:	0d b4       	in	r0, 0x2d	; 45
    16cc:	07 fe       	sbrs	r0, 7
    16ce:	fd cf       	rjmp	.-6      	; 0x16ca <rf_data_mode+0x2a>
    16d0:	1e bc       	out	0x2e, r1	; 46
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <rf_data_mode+0x32>
    16d8:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    16da:	40 98       	cbi	0x08, 0	; 8
    16dc:	8e e2       	ldi	r24, 0x2E	; 46
    16de:	8e bd       	out	0x2e, r24	; 46
    16e0:	0d b4       	in	r0, 0x2d	; 45
    16e2:	07 fe       	sbrs	r0, 7
    16e4:	fd cf       	rjmp	.-6      	; 0x16e0 <rf_data_mode+0x40>
    16e6:	1e bc       	out	0x2e, r1	; 46
    16e8:	0d b4       	in	r0, 0x2d	; 45
    16ea:	07 fe       	sbrs	r0, 7
    16ec:	fd cf       	rjmp	.-6      	; 0x16e8 <rf_data_mode+0x48>
    16ee:	1e bc       	out	0x2e, r1	; 46
    16f0:	0d b4       	in	r0, 0x2d	; 45
    16f2:	07 fe       	sbrs	r0, 7
    16f4:	fd cf       	rjmp	.-6      	; 0x16f0 <rf_data_mode+0x50>
    16f6:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    16f8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    16fc:	80 91 21 06 	lds	r24, 0x0621
    1700:	90 91 22 06 	lds	r25, 0x0622
    1704:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1708:	08 95       	ret

0000170a <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    170a:	80 91 21 06 	lds	r24, 0x0621
    170e:	90 91 22 06 	lds	r25, 0x0622
    1712:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    1716:	40 98       	cbi	0x08, 0	; 8
    1718:	86 e0       	ldi	r24, 0x06	; 6
    171a:	8e bd       	out	0x2e, r24	; 46
    171c:	0d b4       	in	r0, 0x2d	; 45
    171e:	07 fe       	sbrs	r0, 7
    1720:	fd cf       	rjmp	.-6      	; 0x171c <rf_test_mode+0x12>
    1722:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    1724:	40 98       	cbi	0x08, 0	; 8
    1726:	82 e1       	ldi	r24, 0x12	; 18
    1728:	8e bd       	out	0x2e, r24	; 46
    172a:	0d b4       	in	r0, 0x2d	; 45
    172c:	07 fe       	sbrs	r0, 7
    172e:	fd cf       	rjmp	.-6      	; 0x172a <rf_test_mode+0x20>
    1730:	85 e0       	ldi	r24, 0x05	; 5
    1732:	8e bd       	out	0x2e, r24	; 46
    1734:	0d b4       	in	r0, 0x2d	; 45
    1736:	07 fe       	sbrs	r0, 7
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <rf_test_mode+0x2a>
    173a:	88 e0       	ldi	r24, 0x08	; 8
    173c:	8e bd       	out	0x2e, r24	; 46
    173e:	0d b4       	in	r0, 0x2d	; 45
    1740:	07 fe       	sbrs	r0, 7
    1742:	fd cf       	rjmp	.-6      	; 0x173e <rf_test_mode+0x34>
    1744:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    1746:	40 98       	cbi	0x08, 0	; 8
    1748:	8e e2       	ldi	r24, 0x2E	; 46
    174a:	8e bd       	out	0x2e, r24	; 46
    174c:	0d b4       	in	r0, 0x2d	; 45
    174e:	07 fe       	sbrs	r0, 7
    1750:	fd cf       	rjmp	.-6      	; 0x174c <rf_test_mode+0x42>
    1752:	88 e1       	ldi	r24, 0x18	; 24
    1754:	8e bd       	out	0x2e, r24	; 46
    1756:	0d b4       	in	r0, 0x2d	; 45
    1758:	07 fe       	sbrs	r0, 7
    175a:	fd cf       	rjmp	.-6      	; 0x1756 <rf_test_mode+0x4c>
    175c:	1e bc       	out	0x2e, r1	; 46
    175e:	0d b4       	in	r0, 0x2d	; 45
    1760:	07 fe       	sbrs	r0, 7
    1762:	fd cf       	rjmp	.-6      	; 0x175e <rf_test_mode+0x54>
    1764:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    1766:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    176a:	80 91 21 06 	lds	r24, 0x0621
    176e:	90 91 22 06 	lds	r25, 0x0622
    1772:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1776:	08 95       	ret

00001778 <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    177e:	80 91 21 06 	lds	r24, 0x0621
    1782:	90 91 22 06 	lds	r25, 0x0622
    1786:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    178a:	11 27       	eor	r17, r17
    178c:	07 fd       	sbrc	r16, 7
    178e:	10 95       	com	r17
    1790:	30 2f       	mov	r19, r16
    1792:	22 27       	eor	r18, r18
    1794:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    1796:	40 98       	cbi	0x08, 0	; 8
    1798:	83 e1       	ldi	r24, 0x13	; 19
    179a:	8e bd       	out	0x2e, r24	; 46
    179c:	0d b4       	in	r0, 0x2d	; 45
    179e:	07 fe       	sbrs	r0, 7
    17a0:	fd cf       	rjmp	.-6      	; 0x179c <rf_set_cca_thresh+0x24>
    17a2:	83 2f       	mov	r24, r19
    17a4:	99 27       	eor	r25, r25
    17a6:	8e bd       	out	0x2e, r24	; 46
    17a8:	0d b4       	in	r0, 0x2d	; 45
    17aa:	07 fe       	sbrs	r0, 7
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <rf_set_cca_thresh+0x30>
    17ae:	2e bd       	out	0x2e, r18	; 46
    17b0:	0d b4       	in	r0, 0x2d	; 45
    17b2:	07 fe       	sbrs	r0, 7
    17b4:	fd cf       	rjmp	.-6      	; 0x17b0 <rf_set_cca_thresh+0x38>
    17b6:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    17b8:	80 91 21 06 	lds	r24, 0x0621
    17bc:	90 91 22 06 	lds	r25, 0x0622
    17c0:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	24 97       	sbiw	r28, 0x04	; 4
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    17de:	80 91 21 06 	lds	r24, 0x0621
    17e2:	90 91 22 06 	lds	r25, 0x0622
    17e6:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    17ea:	67 9b       	sbis	0x0c, 7	; 12
    17ec:	34 c2       	rjmp	.+1128   	; 0x1c56 <rf_polling_rx_packet+0x48c>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    17ee:	10 92 32 06 	sts	0x0632, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    17f2:	67 9b       	sbis	0x0c, 7	; 12
    17f4:	25 c0       	rjmp	.+74     	; 0x1840 <rf_polling_rx_packet+0x76>
    17f6:	31 99       	sbic	0x06, 1	; 6
    17f8:	23 c0       	rjmp	.+70     	; 0x1840 <rf_polling_rx_packet+0x76>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    17fa:	40 98       	cbi	0x08, 0	; 8
    17fc:	8f e7       	ldi	r24, 0x7F	; 127
    17fe:	8e bd       	out	0x2e, r24	; 46
    1800:	0d b4       	in	r0, 0x2d	; 45
    1802:	07 fe       	sbrs	r0, 7
    1804:	fd cf       	rjmp	.-6      	; 0x1800 <rf_polling_rx_packet+0x36>
    1806:	1e bc       	out	0x2e, r1	; 46
    1808:	0d b4       	in	r0, 0x2d	; 45
    180a:	07 fe       	sbrs	r0, 7
    180c:	fd cf       	rjmp	.-6      	; 0x1808 <rf_polling_rx_packet+0x3e>
    180e:	8e b5       	in	r24, 0x2e	; 46
    1810:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1812:	40 98       	cbi	0x08, 0	; 8
    1814:	88 e0       	ldi	r24, 0x08	; 8
    1816:	8e bd       	out	0x2e, r24	; 46
    1818:	0d b4       	in	r0, 0x2d	; 45
    181a:	07 fe       	sbrs	r0, 7
    181c:	fd cf       	rjmp	.-6      	; 0x1818 <rf_polling_rx_packet+0x4e>
    181e:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1820:	40 98       	cbi	0x08, 0	; 8
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	8e bd       	out	0x2e, r24	; 46
    1826:	0d b4       	in	r0, 0x2d	; 45
    1828:	07 fe       	sbrs	r0, 7
    182a:	fd cf       	rjmp	.-6      	; 0x1826 <rf_polling_rx_packet+0x5c>
    182c:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    182e:	80 91 21 06 	lds	r24, 0x0621
    1832:	90 91 22 06 	lds	r25, 0x0622
    1836:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	13 c2       	rjmp	.+1062   	; 0x1c66 <rf_polling_rx_packet+0x49c>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    1840:	40 98       	cbi	0x08, 0	; 8
    1842:	8f e7       	ldi	r24, 0x7F	; 127
    1844:	8e bd       	out	0x2e, r24	; 46
    1846:	0d b4       	in	r0, 0x2d	; 45
    1848:	07 fe       	sbrs	r0, 7
    184a:	fd cf       	rjmp	.-6      	; 0x1846 <rf_polling_rx_packet+0x7c>
    184c:	1e bc       	out	0x2e, r1	; 46
    184e:	0d b4       	in	r0, 0x2d	; 45
    1850:	07 fe       	sbrs	r0, 7
    1852:	fd cf       	rjmp	.-6      	; 0x184e <rf_polling_rx_packet+0x84>
    1854:	4e b5       	in	r20, 0x2e	; 46
    1856:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    1858:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length<=0){  
    185a:	19 f5       	brne	.+70     	; 0x18a2 <rf_polling_rx_packet+0xd8>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    185c:	40 98       	cbi	0x08, 0	; 8
    185e:	8f e7       	ldi	r24, 0x7F	; 127
    1860:	8e bd       	out	0x2e, r24	; 46
    1862:	0d b4       	in	r0, 0x2d	; 45
    1864:	07 fe       	sbrs	r0, 7
    1866:	fd cf       	rjmp	.-6      	; 0x1862 <rf_polling_rx_packet+0x98>
    1868:	1e bc       	out	0x2e, r1	; 46
    186a:	0d b4       	in	r0, 0x2d	; 45
    186c:	07 fe       	sbrs	r0, 7
    186e:	fd cf       	rjmp	.-6      	; 0x186a <rf_polling_rx_packet+0xa0>
    1870:	8e b5       	in	r24, 0x2e	; 46
    1872:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1874:	40 98       	cbi	0x08, 0	; 8
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	8e bd       	out	0x2e, r24	; 46
    187a:	0d b4       	in	r0, 0x2d	; 45
    187c:	07 fe       	sbrs	r0, 7
    187e:	fd cf       	rjmp	.-6      	; 0x187a <rf_polling_rx_packet+0xb0>
    1880:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1882:	40 98       	cbi	0x08, 0	; 8
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	8e bd       	out	0x2e, r24	; 46
    1888:	0d b4       	in	r0, 0x2d	; 45
    188a:	07 fe       	sbrs	r0, 7
    188c:	fd cf       	rjmp	.-6      	; 0x1888 <rf_polling_rx_packet+0xbe>
    188e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1890:	80 91 21 06 	lds	r24, 0x0621
    1894:	90 91 22 06 	lds	r25, 0x0622
    1898:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    189c:	8e ef       	ldi	r24, 0xFE	; 254
    189e:	9f ef       	ldi	r25, 0xFF	; 255
    18a0:	e2 c1       	rjmp	.+964    	; 0x1c66 <rf_polling_rx_packet+0x49c>
#endif
	return -2;
	}
    if (length < (RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD)/*RF_ACK_PACKET_SIZE*/ || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    18a2:	4c 30       	cpi	r20, 0x0C	; 12
    18a4:	8c f0       	brlt	.+34     	; 0x18c8 <rf_polling_rx_packet+0xfe>
    18a6:	e0 91 26 06 	lds	r30, 0x0626
    18aa:	f0 91 27 06 	lds	r31, 0x0627
    18ae:	24 2f       	mov	r18, r20
    18b0:	33 27       	eor	r19, r19
    18b2:	27 fd       	sbrc	r18, 7
    18b4:	30 95       	com	r19
    18b6:	2b 50       	subi	r18, 0x0B	; 11
    18b8:	30 40       	sbci	r19, 0x00	; 0
    18ba:	84 81       	ldd	r24, Z+4	; 0x04
    18bc:	99 27       	eor	r25, r25
    18be:	87 fd       	sbrc	r24, 7
    18c0:	90 95       	com	r25
    18c2:	82 17       	cp	r24, r18
    18c4:	93 07       	cpc	r25, r19
    18c6:	f4 f5       	brge	.+124    	; 0x1944 <rf_polling_rx_packet+0x17a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    18c8:	40 98       	cbi	0x08, 0	; 8
    18ca:	8f e7       	ldi	r24, 0x7F	; 127
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	0d b4       	in	r0, 0x2d	; 45
    18d0:	07 fe       	sbrs	r0, 7
    18d2:	fd cf       	rjmp	.-6      	; 0x18ce <rf_polling_rx_packet+0x104>
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	24 2f       	mov	r18, r20
    18da:	33 27       	eor	r19, r19
    18dc:	27 fd       	sbrc	r18, 7
    18de:	30 95       	com	r19
    18e0:	06 c0       	rjmp	.+12     	; 0x18ee <rf_polling_rx_packet+0x124>
    18e2:	1e bc       	out	0x2e, r1	; 46
    18e4:	0d b4       	in	r0, 0x2d	; 45
    18e6:	07 fe       	sbrs	r0, 7
    18e8:	fd cf       	rjmp	.-6      	; 0x18e4 <rf_polling_rx_packet+0x11a>
    18ea:	6f 5f       	subi	r22, 0xFF	; 255
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	86 2f       	mov	r24, r22
    18f0:	99 27       	eor	r25, r25
    18f2:	82 17       	cp	r24, r18
    18f4:	93 07       	cpc	r25, r19
    18f6:	14 f4       	brge	.+4      	; 0x18fc <rf_polling_rx_packet+0x132>
    18f8:	31 99       	sbic	0x06, 1	; 6
    18fa:	f3 cf       	rjmp	.-26     	; 0x18e2 <rf_polling_rx_packet+0x118>
    18fc:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    18fe:	40 98       	cbi	0x08, 0	; 8
    1900:	8f e7       	ldi	r24, 0x7F	; 127
    1902:	8e bd       	out	0x2e, r24	; 46
    1904:	0d b4       	in	r0, 0x2d	; 45
    1906:	07 fe       	sbrs	r0, 7
    1908:	fd cf       	rjmp	.-6      	; 0x1904 <rf_polling_rx_packet+0x13a>
    190a:	1e bc       	out	0x2e, r1	; 46
    190c:	0d b4       	in	r0, 0x2d	; 45
    190e:	07 fe       	sbrs	r0, 7
    1910:	fd cf       	rjmp	.-6      	; 0x190c <rf_polling_rx_packet+0x142>
    1912:	8e b5       	in	r24, 0x2e	; 46
    1914:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1916:	40 98       	cbi	0x08, 0	; 8
    1918:	88 e0       	ldi	r24, 0x08	; 8
    191a:	8e bd       	out	0x2e, r24	; 46
    191c:	0d b4       	in	r0, 0x2d	; 45
    191e:	07 fe       	sbrs	r0, 7
    1920:	fd cf       	rjmp	.-6      	; 0x191c <rf_polling_rx_packet+0x152>
    1922:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1924:	40 98       	cbi	0x08, 0	; 8
    1926:	88 e0       	ldi	r24, 0x08	; 8
    1928:	8e bd       	out	0x2e, r24	; 46
    192a:	0d b4       	in	r0, 0x2d	; 45
    192c:	07 fe       	sbrs	r0, 7
    192e:	fd cf       	rjmp	.-6      	; 0x192a <rf_polling_rx_packet+0x160>
    1930:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1932:	80 91 21 06 	lds	r24, 0x0621
    1936:	90 91 22 06 	lds	r25, 0x0622
    193a:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    193e:	8d ef       	ldi	r24, 0xFD	; 253
    1940:	9f ef       	ldi	r25, 0xFF	; 255
    1942:	91 c1       	rjmp	.+802    	; 0x1c66 <rf_polling_rx_packet+0x49c>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    1944:	e0 91 26 06 	lds	r30, 0x0626
    1948:	f0 91 27 06 	lds	r31, 0x0627
    194c:	4c 50       	subi	r20, 0x0C	; 12
    194e:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    1950:	40 98       	cbi	0x08, 0	; 8
    1952:	8f e7       	ldi	r24, 0x7F	; 127
    1954:	8e bd       	out	0x2e, r24	; 46
    1956:	0d b4       	in	r0, 0x2d	; 45
    1958:	07 fe       	sbrs	r0, 7
    195a:	fd cf       	rjmp	.-6      	; 0x1956 <rf_polling_rx_packet+0x18c>
    195c:	fe 01       	movw	r30, r28
    195e:	31 96       	adiw	r30, 0x01	; 1
    1960:	9e 01       	movw	r18, r28
    1962:	2d 5f       	subi	r18, 0xFD	; 253
    1964:	3f 4f       	sbci	r19, 0xFF	; 255
    1966:	1e bc       	out	0x2e, r1	; 46
    1968:	0d b4       	in	r0, 0x2d	; 45
    196a:	07 fe       	sbrs	r0, 7
    196c:	fd cf       	rjmp	.-6      	; 0x1968 <rf_polling_rx_packet+0x19e>
    196e:	8e b5       	in	r24, 0x2e	; 46
    1970:	81 93       	st	Z+, r24
    1972:	e2 17       	cp	r30, r18
    1974:	f3 07       	cpc	r31, r19
    1976:	b9 f7       	brne	.-18     	; 0x1966 <rf_polling_rx_packet+0x19c>
    1978:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    197a:	e0 91 26 06 	lds	r30, 0x0626
    197e:	f0 91 27 06 	lds	r31, 0x0627
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	65 e0       	ldi	r22, 0x05	; 5
    1988:	96 95       	lsr	r25
    198a:	87 95       	ror	r24
    198c:	6a 95       	dec	r22
    198e:	e1 f7       	brne	.-8      	; 0x1988 <rf_polling_rx_packet+0x1be>
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    1994:	40 98       	cbi	0x08, 0	; 8
    1996:	8f e7       	ldi	r24, 0x7F	; 127
    1998:	8e bd       	out	0x2e, r24	; 46
    199a:	0d b4       	in	r0, 0x2d	; 45
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <rf_polling_rx_packet+0x1d0>
    19a0:	1e bc       	out	0x2e, r1	; 46
    19a2:	0d b4       	in	r0, 0x2d	; 45
    19a4:	07 fe       	sbrs	r0, 7
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <rf_polling_rx_packet+0x1d8>
    19a8:	e0 91 26 06 	lds	r30, 0x0626
    19ac:	f0 91 27 06 	lds	r31, 0x0627
    19b0:	8e b5       	in	r24, 0x2e	; 46
    19b2:	80 83       	st	Z, r24
    19b4:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    19b6:	40 98       	cbi	0x08, 0	; 8
    19b8:	8f e7       	ldi	r24, 0x7F	; 127
    19ba:	8e bd       	out	0x2e, r24	; 46
    19bc:	0d b4       	in	r0, 0x2d	; 45
    19be:	07 fe       	sbrs	r0, 7
    19c0:	fd cf       	rjmp	.-6      	; 0x19bc <rf_polling_rx_packet+0x1f2>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <rf_polling_rx_packet+0x20a>
    19c6:	1e bc       	out	0x2e, r1	; 46
    19c8:	0d b4       	in	r0, 0x2d	; 45
    19ca:	07 fe       	sbrs	r0, 7
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <rf_polling_rx_packet+0x1fe>
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	84 30       	cpi	r24, 0x04	; 4
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <rf_polling_rx_packet+0x20e>
    19d4:	31 99       	sbic	0x06, 1	; 6
    19d6:	f7 cf       	rjmp	.-18     	; 0x19c6 <rf_polling_rx_packet+0x1fc>
    19d8:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    19da:	40 98       	cbi	0x08, 0	; 8
    19dc:	8f e7       	ldi	r24, 0x7F	; 127
    19de:	8e bd       	out	0x2e, r24	; 46
    19e0:	0d b4       	in	r0, 0x2d	; 45
    19e2:	07 fe       	sbrs	r0, 7
    19e4:	fd cf       	rjmp	.-6      	; 0x19e0 <rf_polling_rx_packet+0x216>
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	1e bc       	out	0x2e, r1	; 46
    19ec:	0d b4       	in	r0, 0x2d	; 45
    19ee:	07 fe       	sbrs	r0, 7
    19f0:	fd cf       	rjmp	.-6      	; 0x19ec <rf_polling_rx_packet+0x222>
    19f2:	e0 91 26 06 	lds	r30, 0x0626
    19f6:	f0 91 27 06 	lds	r31, 0x0627
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	8e b5       	in	r24, 0x2e	; 46
    1a00:	81 83       	std	Z+1, r24	; 0x01
    1a02:	2f 5f       	subi	r18, 0xFF	; 255
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	79 f7       	brne	.-34     	; 0x19ea <rf_polling_rx_packet+0x220>
    1a0c:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	83 ff       	sbrs	r24, 3
    1a14:	56 c0       	rjmp	.+172    	; 0x1ac2 <rf_polling_rx_packet+0x2f8>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    1a16:	40 98       	cbi	0x08, 0	; 8
    1a18:	8f e7       	ldi	r24, 0x7F	; 127
    1a1a:	8e bd       	out	0x2e, r24	; 46
    1a1c:	0d b4       	in	r0, 0x2d	; 45
    1a1e:	07 fe       	sbrs	r0, 7
    1a20:	fd cf       	rjmp	.-6      	; 0x1a1c <rf_polling_rx_packet+0x252>
    1a22:	ed e1       	ldi	r30, 0x1D	; 29
    1a24:	f6 e0       	ldi	r31, 0x06	; 6
    1a26:	1e bc       	out	0x2e, r1	; 46
    1a28:	0d b4       	in	r0, 0x2d	; 45
    1a2a:	07 fe       	sbrs	r0, 7
    1a2c:	fd cf       	rjmp	.-6      	; 0x1a28 <rf_polling_rx_packet+0x25e>
    1a2e:	8e b5       	in	r24, 0x2e	; 46
    1a30:	81 93       	st	Z+, r24
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	e1 32       	cpi	r30, 0x21	; 33
    1a36:	f8 07       	cpc	r31, r24
    1a38:	b1 f7       	brne	.-20     	; 0x1a26 <rf_polling_rx_packet+0x25c>
    1a3a:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    1a3c:	40 98       	cbi	0x08, 0	; 8
    1a3e:	89 e9       	ldi	r24, 0x99	; 153
    1a40:	8e bd       	out	0x2e, r24	; 46
    1a42:	0d b4       	in	r0, 0x2d	; 45
    1a44:	07 fe       	sbrs	r0, 7
    1a46:	fd cf       	rjmp	.-6      	; 0x1a42 <rf_polling_rx_packet+0x278>
    1a48:	80 e8       	ldi	r24, 0x80	; 128
    1a4a:	8e bd       	out	0x2e, r24	; 46
    1a4c:	0d b4       	in	r0, 0x2d	; 45
    1a4e:	07 fe       	sbrs	r0, 7
    1a50:	fd cf       	rjmp	.-6      	; 0x1a4c <rf_polling_rx_packet+0x282>
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	91 50       	subi	r25, 0x01	; 1
    1a56:	e9 2f       	mov	r30, r25
    1a58:	ff 27       	eor	r31, r31
    1a5a:	e3 5e       	subi	r30, 0xE3	; 227
    1a5c:	f9 4f       	sbci	r31, 0xF9	; 249
    1a5e:	80 81       	ld	r24, Z
    1a60:	8e bd       	out	0x2e, r24	; 46
    1a62:	0d b4       	in	r0, 0x2d	; 45
    1a64:	07 fe       	sbrs	r0, 7
    1a66:	fd cf       	rjmp	.-6      	; 0x1a62 <rf_polling_rx_packet+0x298>
    1a68:	99 23       	and	r25, r25
    1a6a:	a1 f7       	brne	.-24     	; 0x1a54 <rf_polling_rx_packet+0x28a>
    1a6c:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    1a6e:	40 98       	cbi	0x08, 0	; 8
    1a70:	8b e9       	ldi	r24, 0x9B	; 155
    1a72:	8e bd       	out	0x2e, r24	; 46
    1a74:	0d b4       	in	r0, 0x2d	; 45
    1a76:	07 fe       	sbrs	r0, 7
    1a78:	fd cf       	rjmp	.-6      	; 0x1a74 <rf_polling_rx_packet+0x2aa>
    1a7a:	80 e8       	ldi	r24, 0x80	; 128
    1a7c:	8e bd       	out	0x2e, r24	; 46
    1a7e:	0d b4       	in	r0, 0x2d	; 45
    1a80:	07 fe       	sbrs	r0, 7
    1a82:	fd cf       	rjmp	.-6      	; 0x1a7e <rf_polling_rx_packet+0x2b4>
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	91 50       	subi	r25, 0x01	; 1
    1a88:	e9 2f       	mov	r30, r25
    1a8a:	ff 27       	eor	r31, r31
    1a8c:	e1 5e       	subi	r30, 0xE1	; 225
    1a8e:	f9 4f       	sbci	r31, 0xF9	; 249
    1a90:	80 81       	ld	r24, Z
    1a92:	8e bd       	out	0x2e, r24	; 46
    1a94:	0d b4       	in	r0, 0x2d	; 45
    1a96:	07 fe       	sbrs	r0, 7
    1a98:	fd cf       	rjmp	.-6      	; 0x1a94 <rf_polling_rx_packet+0x2ca>
    1a9a:	99 23       	and	r25, r25
    1a9c:	a1 f7       	brne	.-24     	; 0x1a86 <rf_polling_rx_packet+0x2bc>
    1a9e:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    1aa0:	40 98       	cbi	0x08, 0	; 8
    1aa2:	8c e0       	ldi	r24, 0x0C	; 12
    1aa4:	8e bd       	out	0x2e, r24	; 46
    1aa6:	0d b4       	in	r0, 0x2d	; 45
    1aa8:	07 fe       	sbrs	r0, 7
    1aaa:	fd cf       	rjmp	.-6      	; 0x1aa6 <rf_polling_rx_packet+0x2dc>
    1aac:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 93 32 06 	sts	0x0632, r24
        			rfSettings.pRxInfo->length -= 4;
    1ab4:	e0 91 26 06 	lds	r30, 0x0626
    1ab8:	f0 91 27 06 	lds	r31, 0x0627
    1abc:	83 81       	ldd	r24, Z+3	; 0x03
    1abe:	84 50       	subi	r24, 0x04	; 4
    1ac0:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    1ac2:	40 98       	cbi	0x08, 0	; 8
    1ac4:	8f e7       	ldi	r24, 0x7F	; 127
    1ac6:	8e bd       	out	0x2e, r24	; 46
    1ac8:	0d b4       	in	r0, 0x2d	; 45
    1aca:	07 fe       	sbrs	r0, 7
    1acc:	fd cf       	rjmp	.-6      	; 0x1ac8 <rf_polling_rx_packet+0x2fe>
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	11 c0       	rjmp	.+34     	; 0x1af6 <rf_polling_rx_packet+0x32c>
    1ad4:	1e bc       	out	0x2e, r1	; 46
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <rf_polling_rx_packet+0x30c>
    1adc:	e0 91 26 06 	lds	r30, 0x0626
    1ae0:	f0 91 27 06 	lds	r31, 0x0627
    1ae4:	05 80       	ldd	r0, Z+5	; 0x05
    1ae6:	f6 81       	ldd	r31, Z+6	; 0x06
    1ae8:	e0 2d       	mov	r30, r0
    1aea:	e6 0f       	add	r30, r22
    1aec:	f1 1d       	adc	r31, r1
    1aee:	8e b5       	in	r24, 0x2e	; 46
    1af0:	80 83       	st	Z, r24
    1af2:	4f 5f       	subi	r20, 0xFF	; 255
    1af4:	5f 4f       	sbci	r21, 0xFF	; 255
    1af6:	64 2f       	mov	r22, r20
    1af8:	e0 91 26 06 	lds	r30, 0x0626
    1afc:	f0 91 27 06 	lds	r31, 0x0627
    1b00:	24 2f       	mov	r18, r20
    1b02:	33 27       	eor	r19, r19
    1b04:	83 81       	ldd	r24, Z+3	; 0x03
    1b06:	99 27       	eor	r25, r25
    1b08:	87 fd       	sbrc	r24, 7
    1b0a:	90 95       	com	r25
    1b0c:	28 17       	cp	r18, r24
    1b0e:	39 07       	cpc	r19, r25
    1b10:	0c f3       	brlt	.-62     	; 0x1ad4 <rf_polling_rx_packet+0x30a>
    1b12:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1b14:	40 98       	cbi	0x08, 0	; 8
    1b16:	8f e7       	ldi	r24, 0x7F	; 127
    1b18:	8e bd       	out	0x2e, r24	; 46
    1b1a:	0d b4       	in	r0, 0x2d	; 45
    1b1c:	07 fc       	sbrc	r0, 7
    1b1e:	0a c0       	rjmp	.+20     	; 0x1b34 <rf_polling_rx_packet+0x36a>
    1b20:	fc cf       	rjmp	.-8      	; 0x1b1a <rf_polling_rx_packet+0x350>
    1b22:	0d b4       	in	r0, 0x2d	; 45
    1b24:	07 fe       	sbrs	r0, 7
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <rf_polling_rx_packet+0x358>
    1b28:	5e b5       	in	r21, 0x2e	; 46
    1b2a:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1b2c:	40 98       	cbi	0x08, 0	; 8
    1b2e:	8f e7       	ldi	r24, 0x7F	; 127
    1b30:	8e bd       	out	0x2e, r24	; 46
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <rf_polling_rx_packet+0x36e>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1b34:	1e bc       	out	0x2e, r1	; 46
    1b36:	f5 cf       	rjmp	.-22     	; 0x1b22 <rf_polling_rx_packet+0x358>

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1b38:	0d b4       	in	r0, 0x2d	; 45
    1b3a:	07 fe       	sbrs	r0, 7
    1b3c:	fd cf       	rjmp	.-6      	; 0x1b38 <rf_polling_rx_packet+0x36e>
    1b3e:	fe 01       	movw	r30, r28
    1b40:	33 96       	adiw	r30, 0x03	; 3
    1b42:	9e 01       	movw	r18, r28
    1b44:	2b 5f       	subi	r18, 0xFB	; 251
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
    1b48:	1e bc       	out	0x2e, r1	; 46
    1b4a:	0d b4       	in	r0, 0x2d	; 45
    1b4c:	07 fe       	sbrs	r0, 7
    1b4e:	fd cf       	rjmp	.-6      	; 0x1b4a <rf_polling_rx_packet+0x380>
    1b50:	8e b5       	in	r24, 0x2e	; 46
    1b52:	81 93       	st	Z+, r24
    1b54:	e2 17       	cp	r30, r18
    1b56:	f3 07       	cpc	r31, r19
    1b58:	b9 f7       	brne	.-18     	; 0x1b48 <rf_polling_rx_packet+0x37e>
    1b5a:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    1b5c:	e0 91 26 06 	lds	r30, 0x0626
    1b60:	f0 91 27 06 	lds	r31, 0x0627
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 87       	std	Z+8, r24	; 0x08
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	0a c0       	rjmp	.+20     	; 0x1b84 <rf_polling_rx_packet+0x3ba>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    1b70:	e0 91 26 06 	lds	r30, 0x0626
    1b74:	f0 91 27 06 	lds	r31, 0x0627
    1b78:	85 81       	ldd	r24, Z+5	; 0x05
    1b7a:	96 81       	ldd	r25, Z+6	; 0x06
    1b7c:	a8 0f       	add	r26, r24
    1b7e:	b9 1f       	adc	r27, r25
    1b80:	8c 91       	ld	r24, X
    1b82:	48 0f       	add	r20, r24
    1b84:	82 2f       	mov	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    1b86:	e0 91 26 06 	lds	r30, 0x0626
    1b8a:	f0 91 27 06 	lds	r31, 0x0627
    1b8e:	2f 5f       	subi	r18, 0xFF	; 255
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	a8 2f       	mov	r26, r24
    1b94:	bb 27       	eor	r27, r27
    1b96:	83 81       	ldd	r24, Z+3	; 0x03
    1b98:	99 27       	eor	r25, r25
    1b9a:	87 fd       	sbrc	r24, 7
    1b9c:	90 95       	com	r25
    1b9e:	a8 17       	cp	r26, r24
    1ba0:	b9 07       	cpc	r27, r25
    1ba2:	34 f3       	brlt	.-52     	; 0x1b70 <rf_polling_rx_packet+0x3a6>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    1ba4:	45 17       	cp	r20, r21
    1ba6:	19 f1       	breq	.+70     	; 0x1bee <rf_polling_rx_packet+0x424>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    1ba8:	40 98       	cbi	0x08, 0	; 8
    1baa:	8f e7       	ldi	r24, 0x7F	; 127
    1bac:	8e bd       	out	0x2e, r24	; 46
    1bae:	0d b4       	in	r0, 0x2d	; 45
    1bb0:	07 fe       	sbrs	r0, 7
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <rf_polling_rx_packet+0x3e4>
    1bb4:	1e bc       	out	0x2e, r1	; 46
    1bb6:	0d b4       	in	r0, 0x2d	; 45
    1bb8:	07 fe       	sbrs	r0, 7
    1bba:	fd cf       	rjmp	.-6      	; 0x1bb6 <rf_polling_rx_packet+0x3ec>
    1bbc:	8e b5       	in	r24, 0x2e	; 46
    1bbe:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1bc0:	40 98       	cbi	0x08, 0	; 8
    1bc2:	88 e0       	ldi	r24, 0x08	; 8
    1bc4:	8e bd       	out	0x2e, r24	; 46
    1bc6:	0d b4       	in	r0, 0x2d	; 45
    1bc8:	07 fe       	sbrs	r0, 7
    1bca:	fd cf       	rjmp	.-6      	; 0x1bc6 <rf_polling_rx_packet+0x3fc>
    1bcc:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1bce:	40 98       	cbi	0x08, 0	; 8
    1bd0:	88 e0       	ldi	r24, 0x08	; 8
    1bd2:	8e bd       	out	0x2e, r24	; 46
    1bd4:	0d b4       	in	r0, 0x2d	; 45
    1bd6:	07 fe       	sbrs	r0, 7
    1bd8:	fd cf       	rjmp	.-6      	; 0x1bd4 <rf_polling_rx_packet+0x40a>
    1bda:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1bdc:	80 91 21 06 	lds	r24, 0x0621
    1be0:	90 91 22 06 	lds	r25, 0x0622
    1be4:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1be8:	8c ef       	ldi	r24, 0xFC	; 252
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	3c c0       	rjmp	.+120    	; 0x1c66 <rf_polling_rx_packet+0x49c>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	87 ff       	sbrs	r24, 7
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <rf_polling_rx_packet+0x446>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    1bf4:	80 91 37 06 	lds	r24, 0x0637
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	80 93 37 06 	sts	0x0637, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1bfe:	80 91 21 06 	lds	r24, 0x0621
    1c02:	90 91 22 06 	lds	r25, 0x0622
    1c06:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	2b c0       	rjmp	.+86     	; 0x1c66 <rf_polling_rx_packet+0x49c>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    1c10:	40 98       	cbi	0x08, 0	; 8
    1c12:	8f e7       	ldi	r24, 0x7F	; 127
    1c14:	8e bd       	out	0x2e, r24	; 46
    1c16:	0d b4       	in	r0, 0x2d	; 45
    1c18:	07 fe       	sbrs	r0, 7
    1c1a:	fd cf       	rjmp	.-6      	; 0x1c16 <rf_polling_rx_packet+0x44c>
    1c1c:	1e bc       	out	0x2e, r1	; 46
    1c1e:	0d b4       	in	r0, 0x2d	; 45
    1c20:	07 fe       	sbrs	r0, 7
    1c22:	fd cf       	rjmp	.-6      	; 0x1c1e <rf_polling_rx_packet+0x454>
    1c24:	8e b5       	in	r24, 0x2e	; 46
    1c26:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c28:	40 98       	cbi	0x08, 0	; 8
    1c2a:	88 e0       	ldi	r24, 0x08	; 8
    1c2c:	8e bd       	out	0x2e, r24	; 46
    1c2e:	0d b4       	in	r0, 0x2d	; 45
    1c30:	07 fe       	sbrs	r0, 7
    1c32:	fd cf       	rjmp	.-6      	; 0x1c2e <rf_polling_rx_packet+0x464>
    1c34:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c36:	40 98       	cbi	0x08, 0	; 8
    1c38:	88 e0       	ldi	r24, 0x08	; 8
    1c3a:	8e bd       	out	0x2e, r24	; 46
    1c3c:	0d b4       	in	r0, 0x2d	; 45
    1c3e:	07 fe       	sbrs	r0, 7
    1c40:	fd cf       	rjmp	.-6      	; 0x1c3c <rf_polling_rx_packet+0x472>
    1c42:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    1c44:	80 91 21 06 	lds	r24, 0x0621
    1c48:	90 91 22 06 	lds	r25, 0x0622
    1c4c:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1c50:	8b ef       	ldi	r24, 0xFB	; 251
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	08 c0       	rjmp	.+16     	; 0x1c66 <rf_polling_rx_packet+0x49c>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1c56:	80 91 21 06 	lds	r24, 0x0621
    1c5a:	90 91 22 06 	lds	r25, 0x0622
    1c5e:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	24 96       	adiw	r28, 0x04	; 4
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c78:	80 91 21 06 	lds	r24, 0x0621
    1c7c:	90 91 22 06 	lds	r25, 0x0622
    1c80:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    1c84:	10 92 2e 06 	sts	0x062E, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    1c88:	40 98       	cbi	0x08, 0	; 8
    1c8a:	86 e0       	ldi	r24, 0x06	; 6
    1c8c:	8e bd       	out	0x2e, r24	; 46
    1c8e:	0d b4       	in	r0, 0x2d	; 45
    1c90:	07 fe       	sbrs	r0, 7
    1c92:	fd cf       	rjmp	.-6      	; 0x1c8e <rf_rx_off+0x16>
    1c94:	40 9a       	sbi	0x08, 0	; 8
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	rx_ready=0;
    1c96:	10 92 37 06 	sts	0x0637, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1c9a:	80 91 21 06 	lds	r24, 0x0621
    1c9e:	90 91 22 06 	lds	r25, 0x0622
    1ca2:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
#endif
    DISABLE_FIFOP_INT();
    1ca6:	ef 98       	cbi	0x1d, 7	; 29
    1ca8:	08 95       	ret

00001caa <rf_polling_rx_on>:
    ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1caa:	80 91 21 06 	lds	r24, 0x0621
    1cae:	90 91 22 06 	lds	r25, 0x0622
    1cb2:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 93 2e 06 	sts	0x062E, r24
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    1cbc:	40 98       	cbi	0x08, 0	; 8
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	8e bd       	out	0x2e, r24	; 46
    1cc2:	0d b4       	in	r0, 0x2d	; 45
    1cc4:	07 fe       	sbrs	r0, 7
    1cc6:	fd cf       	rjmp	.-6      	; 0x1cc2 <rf_polling_rx_on+0x18>
    1cc8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1cca:	40 98       	cbi	0x08, 0	; 8
    1ccc:	88 e0       	ldi	r24, 0x08	; 8
    1cce:	8e bd       	out	0x2e, r24	; 46
    1cd0:	0d b4       	in	r0, 0x2d	; 45
    1cd2:	07 fe       	sbrs	r0, 7
    1cd4:	fd cf       	rjmp	.-6      	; 0x1cd0 <rf_polling_rx_on+0x26>
    1cd6:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1cd8:	10 92 37 06 	sts	0x0637, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1cdc:	80 91 21 06 	lds	r24, 0x0621
    1ce0:	90 91 22 06 	lds	r25, 0x0622
    1ce4:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1ce8:	08 95       	ret

00001cea <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1cea:	80 91 21 06 	lds	r24, 0x0621
    1cee:	90 91 22 06 	lds	r25, 0x0622
    1cf2:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	80 93 2e 06 	sts	0x062E, r24

#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SRXON);
    1cfc:	40 98       	cbi	0x08, 0	; 8
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	8e bd       	out	0x2e, r24	; 46
    1d02:	0d b4       	in	r0, 0x2d	; 45
    1d04:	07 fe       	sbrs	r0, 7
    1d06:	fd cf       	rjmp	.-6      	; 0x1d02 <rf_rx_on+0x18>
    1d08:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1d0a:	40 98       	cbi	0x08, 0	; 8
    1d0c:	88 e0       	ldi	r24, 0x08	; 8
    1d0e:	8e bd       	out	0x2e, r24	; 46
    1d10:	0d b4       	in	r0, 0x2d	; 45
    1d12:	07 fe       	sbrs	r0, 7
    1d14:	fd cf       	rjmp	.-6      	; 0x1d10 <rf_rx_on+0x26>
    1d16:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1d18:	10 92 37 06 	sts	0x0637, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1d1c:	80 91 21 06 	lds	r24, 0x0621
    1d20:	90 91 22 06 	lds	r25, 0x0622
    1d24:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
#endif
	FIFOP_INT_INIT();
    1d28:	80 91 6a 00 	lds	r24, 0x006A
    1d2c:	80 6c       	ori	r24, 0xC0	; 192
    1d2e:	80 93 6a 00 	sts	0x006A, r24
    1d32:	80 e8       	ldi	r24, 0x80	; 128
    1d34:	8c bb       	out	0x1c, r24	; 28
    ENABLE_FIFOP_INT();
    1d36:	ef 9a       	sbi	0x1d, 7	; 29
    1d38:	08 95       	ret

00001d3a <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    1d3a:	1f 93       	push	r17
    1d3c:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1d3e:	80 91 21 06 	lds	r24, 0x0621
    1d42:	90 91 22 06 	lds	r25, 0x0622
    1d46:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    1d4a:	21 2f       	mov	r18, r17
    1d4c:	33 27       	eor	r19, r19
    1d4e:	2f 71       	andi	r18, 0x1F	; 31
    1d50:	30 70       	andi	r19, 0x00	; 0
    1d52:	20 6e       	ori	r18, 0xE0	; 224
    1d54:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    1d56:	40 98       	cbi	0x08, 0	; 8
    1d58:	85 e1       	ldi	r24, 0x15	; 21
    1d5a:	8e bd       	out	0x2e, r24	; 46
    1d5c:	0d b4       	in	r0, 0x2d	; 45
    1d5e:	07 fe       	sbrs	r0, 7
    1d60:	fd cf       	rjmp	.-6      	; 0x1d5c <rf_tx_power+0x22>
    1d62:	83 2f       	mov	r24, r19
    1d64:	99 27       	eor	r25, r25
    1d66:	8e bd       	out	0x2e, r24	; 46
    1d68:	0d b4       	in	r0, 0x2d	; 45
    1d6a:	07 fe       	sbrs	r0, 7
    1d6c:	fd cf       	rjmp	.-6      	; 0x1d68 <rf_tx_power+0x2e>
    1d6e:	2e bd       	out	0x2e, r18	; 46
    1d70:	0d b4       	in	r0, 0x2d	; 45
    1d72:	07 fe       	sbrs	r0, 7
    1d74:	fd cf       	rjmp	.-6      	; 0x1d70 <rf_tx_power+0x36>
    1d76:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1d78:	80 91 21 06 	lds	r24, 0x0621
    1d7c:	90 91 22 06 	lds	r25, 0x0622
    1d80:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1d84:	1f 91       	pop	r17
    1d86:	08 95       	ret

00001d88 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	22 97       	sbiw	r28, 0x02	; 2
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1da6:	80 91 21 06 	lds	r24, 0x0621
    1daa:	90 91 22 06 	lds	r25, 0x0622
    1dae:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
if(security_enable)
    1db2:	50 91 23 06 	lds	r21, 0x0623
    1db6:	55 23       	and	r21, r21
    1db8:	39 f0       	breq	.+14     	; 0x1dc8 <rf_tx_packet+0x40>
    FASTSPI_STROBE(CC2420_STXENC);
    1dba:	40 98       	cbi	0x08, 0	; 8
    1dbc:	8d e0       	ldi	r24, 0x0D	; 13
    1dbe:	8e bd       	out	0x2e, r24	; 46
    1dc0:	0d b4       	in	r0, 0x2d	; 45
    1dc2:	07 fe       	sbrs	r0, 7
    1dc4:	fd cf       	rjmp	.-6      	; 0x1dc0 <rf_tx_packet+0x38>
    1dc6:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1dc8:	f8 01       	movw	r30, r16
    1dca:	42 81       	ldd	r20, Z+2	; 0x02
    1dcc:	64 2f       	mov	r22, r20
    1dce:	77 27       	eor	r23, r23
    1dd0:	67 fd       	sbrc	r22, 7
    1dd2:	70 95       	com	r23
    1dd4:	a0 e0       	ldi	r26, 0x00	; 0
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	08 c0       	rjmp	.+16     	; 0x1dec <rf_tx_packet+0x64>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    1ddc:	f8 01       	movw	r30, r16
    1dde:	83 81       	ldd	r24, Z+3	; 0x03
    1de0:	94 81       	ldd	r25, Z+4	; 0x04
    1de2:	e8 0e       	add	r14, r24
    1de4:	f9 1e       	adc	r15, r25
    1de6:	f7 01       	movw	r30, r14
    1de8:	80 81       	ld	r24, Z
    1dea:	a8 0f       	add	r26, r24
    1dec:	82 2f       	mov	r24, r18
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1df2:	e8 2e       	mov	r14, r24
    1df4:	ff 24       	eor	r15, r15
    1df6:	e6 16       	cp	r14, r22
    1df8:	f7 06       	cpc	r15, r23
    1dfa:	84 f3       	brlt	.-32     	; 0x1ddc <rf_tx_packet+0x54>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    1dfc:	94 2f       	mov	r25, r20
    1dfe:	94 5f       	subi	r25, 0xF4	; 244
    if(security_enable) packetLength+=4;  // for CTR counter
    1e00:	51 11       	cpse	r21, r1
    1e02:	9c 5f       	subi	r25, 0xFC	; 252

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    1e04:	67 99       	sbic	0x0c, 7	; 12
    1e06:	fe cf       	rjmp	.-4      	; 0x1e04 <rf_tx_packet+0x7c>
    1e08:	4e 99       	sbic	0x09, 6	; 9
    1e0a:	fc cf       	rjmp	.-8      	; 0x1e04 <rf_tx_packet+0x7c>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    1e0c:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1e0e:	40 98       	cbi	0x08, 0	; 8
    1e10:	89 e0       	ldi	r24, 0x09	; 9
    1e12:	8e bd       	out	0x2e, r24	; 46
    1e14:	0d b4       	in	r0, 0x2d	; 45
    1e16:	07 fe       	sbrs	r0, 7
    1e18:	fd cf       	rjmp	.-6      	; 0x1e14 <rf_tx_packet+0x8c>
    1e1a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1e1c:	40 98       	cbi	0x08, 0	; 8
    1e1e:	89 e0       	ldi	r24, 0x09	; 9
    1e20:	8e bd       	out	0x2e, r24	; 46
    1e22:	0d b4       	in	r0, 0x2d	; 45
    1e24:	07 fe       	sbrs	r0, 7
    1e26:	fd cf       	rjmp	.-6      	; 0x1e22 <rf_tx_packet+0x9a>
    1e28:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    1e2a:	40 98       	cbi	0x08, 0	; 8
    1e2c:	8e e3       	ldi	r24, 0x3E	; 62
    1e2e:	8e bd       	out	0x2e, r24	; 46
    1e30:	0d b4       	in	r0, 0x2d	; 45
    1e32:	07 fc       	sbrc	r0, 7
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <rf_tx_packet+0xb8>
    1e36:	fc cf       	rjmp	.-8      	; 0x1e30 <rf_tx_packet+0xa8>
    1e38:	0d b4       	in	r0, 0x2d	; 45
    1e3a:	07 fc       	sbrc	r0, 7
    1e3c:	30 c1       	rjmp	.+608    	; 0x209e <rf_tx_packet+0x316>
    1e3e:	fc cf       	rjmp	.-8      	; 0x1e38 <rf_tx_packet+0xb0>
    1e40:	9e bd       	out	0x2e, r25	; 46
    1e42:	fa cf       	rjmp	.-12     	; 0x1e38 <rf_tx_packet+0xb0>
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    1e44:	81 e6       	ldi	r24, 0x61	; 97
    1e46:	98 e8       	ldi	r25, 0x88	; 136
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    if(security_enable) frameControlField |= RF_SEC_BM;
    1e4c:	55 23       	and	r21, r21
    1e4e:	29 f0       	breq	.+10     	; 0x1e5a <rf_tx_packet+0xd2>
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	88 60       	ori	r24, 0x08	; 8
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1e5a:	40 98       	cbi	0x08, 0	; 8
    1e5c:	8e e3       	ldi	r24, 0x3E	; 62
    1e5e:	8e bd       	out	0x2e, r24	; 46
    1e60:	0d b4       	in	r0, 0x2d	; 45
    1e62:	07 fe       	sbrs	r0, 7
    1e64:	fd cf       	rjmp	.-6      	; 0x1e60 <rf_tx_packet+0xd8>
    1e66:	fe 01       	movw	r30, r28
    1e68:	31 96       	adiw	r30, 0x01	; 1
    1e6a:	9e 01       	movw	r18, r28
    1e6c:	2d 5f       	subi	r18, 0xFD	; 253
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	8e bd       	out	0x2e, r24	; 46
    1e74:	0d b4       	in	r0, 0x2d	; 45
    1e76:	07 fe       	sbrs	r0, 7
    1e78:	fd cf       	rjmp	.-6      	; 0x1e74 <rf_tx_packet+0xec>
    1e7a:	31 96       	adiw	r30, 0x01	; 1
    1e7c:	e2 17       	cp	r30, r18
    1e7e:	f3 07       	cpc	r31, r19
    1e80:	b9 f7       	brne	.-18     	; 0x1e70 <rf_tx_packet+0xe8>
    1e82:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    1e84:	40 98       	cbi	0x08, 0	; 8
    1e86:	8e e3       	ldi	r24, 0x3E	; 62
    1e88:	8e bd       	out	0x2e, r24	; 46
    1e8a:	0d b4       	in	r0, 0x2d	; 45
    1e8c:	07 fc       	sbrc	r0, 7
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <rf_tx_packet+0x112>
    1e90:	fc cf       	rjmp	.-8      	; 0x1e8a <rf_tx_packet+0x102>
    1e92:	0d b4       	in	r0, 0x2d	; 45
    1e94:	07 fc       	sbrc	r0, 7
    1e96:	0e c1       	rjmp	.+540    	; 0x20b4 <rf_tx_packet+0x32c>
    1e98:	fc cf       	rjmp	.-8      	; 0x1e92 <rf_tx_packet+0x10a>
    1e9a:	80 91 28 06 	lds	r24, 0x0628
    1e9e:	8e bd       	out	0x2e, r24	; 46
    1ea0:	f8 cf       	rjmp	.-16     	; 0x1e92 <rf_tx_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1ea2:	0d b4       	in	r0, 0x2d	; 45
    1ea4:	07 fe       	sbrs	r0, 7
    1ea6:	fd cf       	rjmp	.-6      	; 0x1ea2 <rf_tx_packet+0x11a>
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	f9 01       	movw	r30, r18
    1eae:	e6 5d       	subi	r30, 0xD6	; 214
    1eb0:	f9 4f       	sbci	r31, 0xF9	; 249
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e bd       	out	0x2e, r24	; 46
    1eb6:	0d b4       	in	r0, 0x2d	; 45
    1eb8:	07 fe       	sbrs	r0, 7
    1eba:	fd cf       	rjmp	.-6      	; 0x1eb6 <rf_tx_packet+0x12e>
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	99 f7       	brne	.-26     	; 0x1eac <rf_tx_packet+0x124>
    1ec6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1ec8:	40 98       	cbi	0x08, 0	; 8
    1eca:	8e e3       	ldi	r24, 0x3E	; 62
    1ecc:	8e bd       	out	0x2e, r24	; 46
    1ece:	0d b4       	in	r0, 0x2d	; 45
    1ed0:	07 fe       	sbrs	r0, 7
    1ed2:	fd cf       	rjmp	.-6      	; 0x1ece <rf_tx_packet+0x146>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	f8 01       	movw	r30, r16
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	8e bd       	out	0x2e, r24	; 46
    1ee2:	0d b4       	in	r0, 0x2d	; 45
    1ee4:	07 fe       	sbrs	r0, 7
    1ee6:	fd cf       	rjmp	.-6      	; 0x1ee2 <rf_tx_packet+0x15a>
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	99 f7       	brne	.-26     	; 0x1ed8 <rf_tx_packet+0x150>
    1ef2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1ef4:	40 98       	cbi	0x08, 0	; 8
    1ef6:	8e e3       	ldi	r24, 0x3E	; 62
    1ef8:	8e bd       	out	0x2e, r24	; 46
    1efa:	0d b4       	in	r0, 0x2d	; 45
    1efc:	07 fe       	sbrs	r0, 7
    1efe:	fd cf       	rjmp	.-6      	; 0x1efa <rf_tx_packet+0x172>
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	f9 01       	movw	r30, r18
    1f06:	e4 5d       	subi	r30, 0xD4	; 212
    1f08:	f9 4f       	sbci	r31, 0xF9	; 249
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8e bd       	out	0x2e, r24	; 46
    1f0e:	0d b4       	in	r0, 0x2d	; 45
    1f10:	07 fe       	sbrs	r0, 7
    1f12:	fd cf       	rjmp	.-6      	; 0x1f0e <rf_tx_packet+0x186>
    1f14:	2f 5f       	subi	r18, 0xFF	; 255
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	99 f7       	brne	.-26     	; 0x1f04 <rf_tx_packet+0x17c>
    1f1e:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    1f20:	55 23       	and	r21, r21
    1f22:	99 f0       	breq	.+38     	; 0x1f4a <rf_tx_packet+0x1c2>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    1f24:	40 98       	cbi	0x08, 0	; 8
    1f26:	8e e3       	ldi	r24, 0x3E	; 62
    1f28:	8e bd       	out	0x2e, r24	; 46
    1f2a:	0d b4       	in	r0, 0x2d	; 45
    1f2c:	07 fe       	sbrs	r0, 7
    1f2e:	fd cf       	rjmp	.-6      	; 0x1f2a <rf_tx_packet+0x1a2>
    1f30:	e3 e3       	ldi	r30, 0x33	; 51
    1f32:	f6 e0       	ldi	r31, 0x06	; 6
    1f34:	80 81       	ld	r24, Z
    1f36:	8e bd       	out	0x2e, r24	; 46
    1f38:	0d b4       	in	r0, 0x2d	; 45
    1f3a:	07 fe       	sbrs	r0, 7
    1f3c:	fd cf       	rjmp	.-6      	; 0x1f38 <rf_tx_packet+0x1b0>
    1f3e:	31 96       	adiw	r30, 0x01	; 1
    1f40:	86 e0       	ldi	r24, 0x06	; 6
    1f42:	e7 33       	cpi	r30, 0x37	; 55
    1f44:	f8 07       	cpc	r31, r24
    1f46:	b1 f7       	brne	.-20     	; 0x1f34 <rf_tx_packet+0x1ac>
    1f48:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1f4a:	40 98       	cbi	0x08, 0	; 8
    1f4c:	8e e3       	ldi	r24, 0x3E	; 62
    1f4e:	8e bd       	out	0x2e, r24	; 46
    1f50:	0d b4       	in	r0, 0x2d	; 45
    1f52:	07 fe       	sbrs	r0, 7
    1f54:	fd cf       	rjmp	.-6      	; 0x1f50 <rf_tx_packet+0x1c8>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <rf_tx_packet+0x1ee>
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	83 81       	ldd	r24, Z+3	; 0x03
    1f60:	94 81       	ldd	r25, Z+4	; 0x04
    1f62:	48 0f       	add	r20, r24
    1f64:	59 1f       	adc	r21, r25
    1f66:	fa 01       	movw	r30, r20
    1f68:	80 81       	ld	r24, Z
    1f6a:	8e bd       	out	0x2e, r24	; 46
    1f6c:	0d b4       	in	r0, 0x2d	; 45
    1f6e:	07 fe       	sbrs	r0, 7
    1f70:	fd cf       	rjmp	.-6      	; 0x1f6c <rf_tx_packet+0x1e4>
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	42 2f       	mov	r20, r18
    1f78:	55 27       	eor	r21, r21
    1f7a:	46 17       	cp	r20, r22
    1f7c:	57 07       	cpc	r21, r23
    1f7e:	74 f3       	brlt	.-36     	; 0x1f5c <rf_tx_packet+0x1d4>
    1f80:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1f82:	40 98       	cbi	0x08, 0	; 8
    1f84:	8e e3       	ldi	r24, 0x3E	; 62
    1f86:	8e bd       	out	0x2e, r24	; 46
    1f88:	0d b4       	in	r0, 0x2d	; 45
    1f8a:	07 fc       	sbrc	r0, 7
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <rf_tx_packet+0x210>
    1f8e:	fc cf       	rjmp	.-8      	; 0x1f88 <rf_tx_packet+0x200>
    1f90:	0d b4       	in	r0, 0x2d	; 45
    1f92:	07 fc       	sbrc	r0, 7
    1f94:	94 c0       	rjmp	.+296    	; 0x20be <rf_tx_packet+0x336>
    1f96:	fc cf       	rjmp	.-8      	; 0x1f90 <rf_tx_packet+0x208>
    1f98:	ae bd       	out	0x2e, r26	; 46
    1f9a:	fa cf       	rjmp	.-12     	; 0x1f90 <rf_tx_packet+0x208>

if (pRTI->cca == TRUE)
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    1f9c:	80 91 2e 06 	lds	r24, 0x062E
    1fa0:	88 23       	and	r24, r24
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <rf_tx_packet+0x22a>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1fa4:	40 98       	cbi	0x08, 0	; 8
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	8e bd       	out	0x2e, r24	; 46
    1faa:	0d b4       	in	r0, 0x2d	; 45
    1fac:	07 fe       	sbrs	r0, 7
    1fae:	fd cf       	rjmp	.-6      	; 0x1faa <rf_tx_packet+0x222>
    1fb0:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1fb2:	40 98       	cbi	0x08, 0	; 8
    1fb4:	1e bc       	out	0x2e, r1	; 46
    1fb6:	0d b4       	in	r0, 0x2d	; 45
    1fb8:	07 fe       	sbrs	r0, 7
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <rf_tx_packet+0x22e>
    1fbc:	8e b5       	in	r24, 0x2e	; 46
    1fbe:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1fc0:	81 ff       	sbrs	r24, 1
    1fc2:	f7 cf       	rjmp	.-18     	; 0x1fb2 <rf_tx_packet+0x22a>
    1fc4:	00 e0       	ldi	r16, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1fc6:	40 98       	cbi	0x08, 0	; 8
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	8e bd       	out	0x2e, r24	; 46
    1fcc:	0d b4       	in	r0, 0x2d	; 45
    1fce:	07 fe       	sbrs	r0, 7
    1fd0:	fd cf       	rjmp	.-6      	; 0x1fcc <rf_tx_packet+0x244>
    1fd2:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1fd4:	40 98       	cbi	0x08, 0	; 8
    1fd6:	1e bc       	out	0x2e, r1	; 46
    1fd8:	0d b4       	in	r0, 0x2d	; 45
    1fda:	07 fe       	sbrs	r0, 7
    1fdc:	fd cf       	rjmp	.-6      	; 0x1fd8 <rf_tx_packet+0x250>
    1fde:	1e b5       	in	r17, 0x2e	; 46
    1fe0:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1fe2:	0f 5f       	subi	r16, 0xFF	; 255
	  if (cnt > 100)
    1fe4:	05 36       	cpi	r16, 0x65	; 101
    1fe6:	51 f4       	brne	.+20     	; 0x1ffc <rf_tx_packet+0x274>
	    {
	      ENABLE_GLOBAL_INT ();
    1fe8:	78 94       	sei
	      nrk_sem_post(radio_sem);
    1fea:	80 91 21 06 	lds	r24, 0x0621
    1fee:	90 91 22 06 	lds	r25, 0x0622
    1ff2:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	68 c0       	rjmp	.+208    	; 0x20cc <rf_tx_packet+0x344>
	      return FALSE;
	    }
	  halWait (100);
    1ffc:	84 e6       	ldi	r24, 0x64	; 100
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    2004:	13 fd       	sbrc	r17, 3
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <rf_tx_packet+0x290>
    2008:	de cf       	rjmp	.-68     	; 0x1fc6 <rf_tx_packet+0x23e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    200a:	40 98       	cbi	0x08, 0	; 8
    200c:	84 e0       	ldi	r24, 0x04	; 4
    200e:	8e bd       	out	0x2e, r24	; 46
    2010:	0d b4       	in	r0, 0x2d	; 45
    2012:	07 fe       	sbrs	r0, 7
    2014:	fd cf       	rjmp	.-6      	; 0x2010 <rf_tx_packet+0x288>
    2016:	40 9a       	sbi	0x08, 0	; 8

  ENABLE_GLOBAL_INT();
    2018:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    201a:	4e 9b       	sbis	0x09, 6	; 9
    201c:	fe cf       	rjmp	.-4      	; 0x201a <rf_tx_packet+0x292>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    201e:	4e 99       	sbic	0x09, 6	; 9
    2020:	fe cf       	rjmp	.-4      	; 0x201e <rf_tx_packet+0x296>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    2022:	80 91 31 06 	lds	r24, 0x0631
    2026:	88 23       	and	r24, r24
    2028:	91 f0       	breq	.+36     	; 0x204e <rf_tx_packet+0x2c6>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    202a:	84 ea       	ldi	r24, 0xA4	; 164
    202c:	92 e0       	ldi	r25, 0x02	; 2
    202e:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>

	if(FIFO_IS_1)
    2032:	31 9b       	sbis	0x06, 1	; 6
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <rf_tx_packet+0x2ca>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    2036:	40 98       	cbi	0x08, 0	; 8
    2038:	8f e7       	ldi	r24, 0x7F	; 127
    203a:	8e bd       	out	0x2e, r24	; 46
    203c:	0d b4       	in	r0, 0x2d	; 45
    203e:	07 fe       	sbrs	r0, 7
    2040:	fd cf       	rjmp	.-6      	; 0x203c <rf_tx_packet+0x2b4>
    2042:	1e bc       	out	0x2e, r1	; 46
    2044:	0d b4       	in	r0, 0x2d	; 45
    2046:	07 fe       	sbrs	r0, 7
    2048:	fd cf       	rjmp	.-6      	; 0x2044 <rf_tx_packet+0x2bc>
    204a:	8e b5       	in	r24, 0x2e	; 46
    204c:	40 9a       	sbi	0x08, 0	; 8
    204e:	11 e0       	ldi	r17, 0x01	; 1
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <rf_tx_packet+0x2e8>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2052:	40 98       	cbi	0x08, 0	; 8
    2054:	88 e0       	ldi	r24, 0x08	; 8
    2056:	8e bd       	out	0x2e, r24	; 46
    2058:	0d b4       	in	r0, 0x2d	; 45
    205a:	07 fe       	sbrs	r0, 7
    205c:	fd cf       	rjmp	.-6      	; 0x2058 <rf_tx_packet+0x2d0>
    205e:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2060:	40 98       	cbi	0x08, 0	; 8
    2062:	88 e0       	ldi	r24, 0x08	; 8
    2064:	8e bd       	out	0x2e, r24	; 46
    2066:	0d b4       	in	r0, 0x2d	; 45
    2068:	07 fe       	sbrs	r0, 7
    206a:	fd cf       	rjmp	.-6      	; 0x2066 <rf_tx_packet+0x2de>
    206c:	40 9a       	sbi	0x08, 0	; 8
    206e:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    2070:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    2072:	40 98       	cbi	0x08, 0	; 8
    2074:	86 e0       	ldi	r24, 0x06	; 6
    2076:	8e bd       	out	0x2e, r24	; 46
    2078:	0d b4       	in	r0, 0x2d	; 45
    207a:	07 fe       	sbrs	r0, 7
    207c:	fd cf       	rjmp	.-6      	; 0x2078 <rf_tx_packet+0x2f0>
    207e:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2080:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2082:	80 91 28 06 	lds	r24, 0x0628
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	80 93 28 06 	sts	0x0628, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    208c:	80 91 21 06 	lds	r24, 0x0621
    2090:	90 91 22 06 	lds	r25, 0x0622
    2094:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
#endif
    return success;
    2098:	81 2f       	mov	r24, r17
    209a:	99 27       	eor	r25, r25
    209c:	17 c0       	rjmp	.+46     	; 0x20cc <rf_tx_packet+0x344>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    209e:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    20a0:	81 e4       	ldi	r24, 0x41	; 65
    20a2:	98 e8       	ldi	r25, 0x88	; 136
    20a4:	9a 83       	std	Y+2, r25	; 0x02
    20a6:	89 83       	std	Y+1, r24	; 0x01
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    20a8:	80 91 31 06 	lds	r24, 0x0631
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <rf_tx_packet+0x32a>
    20b0:	c9 ce       	rjmp	.-622    	; 0x1e44 <rf_tx_packet+0xbc>
    20b2:	cc ce       	rjmp	.-616    	; 0x1e4c <rf_tx_packet+0xc4>
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    20b4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    20b6:	40 98       	cbi	0x08, 0	; 8
    20b8:	8e e3       	ldi	r24, 0x3E	; 62
    20ba:	8e bd       	out	0x2e, r24	; 46
    20bc:	f2 ce       	rjmp	.-540    	; 0x1ea2 <rf_tx_packet+0x11a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    if(security_enable)
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    20be:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    20c0:	f8 01       	movw	r30, r16
    20c2:	85 81       	ldd	r24, Z+5	; 0x05
    20c4:	88 23       	and	r24, r24
    20c6:	09 f0       	breq	.+2      	; 0x20ca <rf_tx_packet+0x342>
    20c8:	69 cf       	rjmp	.-302    	; 0x1f9c <rf_tx_packet+0x214>
    20ca:	9f cf       	rjmp	.-194    	; 0x200a <rf_tx_packet+0x282>
    20cc:	22 96       	adiw	r28, 0x02	; 2
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    20e6:	bf 92       	push	r11
    20e8:	cf 92       	push	r12
    20ea:	df 92       	push	r13
    20ec:	ef 92       	push	r14
    20ee:	ff 92       	push	r15
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	22 97       	sbiw	r28, 0x02	; 2
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	8c 01       	movw	r16, r24
    210a:	6b 01       	movw	r12, r22
    210c:	7a 01       	movw	r14, r20
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    210e:	80 91 21 06 	lds	r24, 0x0621
    2112:	90 91 22 06 	lds	r25, 0x0622
    2116:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    211a:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
	// XXX 2 below are hacks...
#ifdef CC2420_OSC_OPT
	FASTSPI_STROBE(CC2420_SXOSCON);
	nrk_spin_wait_us(OSC_STARTUP_DELAY);
#endif
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    211e:	40 98       	cbi	0x08, 0	; 8
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	8e bd       	out	0x2e, r24	; 46
    2124:	0d b4       	in	r0, 0x2d	; 45
    2126:	07 fe       	sbrs	r0, 7
    2128:	fd cf       	rjmp	.-6      	; 0x2124 <rf_tx_tdma_packet+0x3e>
    212a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    212c:	40 98       	cbi	0x08, 0	; 8
    212e:	88 e0       	ldi	r24, 0x08	; 8
    2130:	8e bd       	out	0x2e, r24	; 46
    2132:	0d b4       	in	r0, 0x2d	; 45
    2134:	07 fe       	sbrs	r0, 7
    2136:	fd cf       	rjmp	.-6      	; 0x2132 <rf_tx_tdma_packet+0x4c>
    2138:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    213a:	67 99       	sbic	0x0c, 7	; 12
    213c:	fe cf       	rjmp	.-4      	; 0x213a <rf_tx_tdma_packet+0x54>
    213e:	4e 99       	sbic	0x09, 6	; 9
    2140:	fc cf       	rjmp	.-8      	; 0x213a <rf_tx_tdma_packet+0x54>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    2142:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2144:	40 98       	cbi	0x08, 0	; 8
    2146:	89 e0       	ldi	r24, 0x09	; 9
    2148:	8e bd       	out	0x2e, r24	; 46
    214a:	0d b4       	in	r0, 0x2d	; 45
    214c:	07 fe       	sbrs	r0, 7
    214e:	fd cf       	rjmp	.-6      	; 0x214a <rf_tx_tdma_packet+0x64>
    2150:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    2152:	40 98       	cbi	0x08, 0	; 8
    2154:	89 e0       	ldi	r24, 0x09	; 9
    2156:	8e bd       	out	0x2e, r24	; 46
    2158:	0d b4       	in	r0, 0x2d	; 45
    215a:	07 fe       	sbrs	r0, 7
    215c:	fd cf       	rjmp	.-6      	; 0x2158 <rf_tx_tdma_packet+0x72>
    215e:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2160:	f8 01       	movw	r30, r16
    2162:	62 81       	ldd	r22, Z+2	; 0x02
    2164:	46 2f       	mov	r20, r22
    2166:	55 27       	eor	r21, r21
    2168:	47 fd       	sbrc	r20, 7
    216a:	50 95       	com	r21
    216c:	bb 24       	eor	r11, r11
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	07 c0       	rjmp	.+14     	; 0x2182 <rf_tx_tdma_packet+0x9c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    2174:	f8 01       	movw	r30, r16
    2176:	83 81       	ldd	r24, Z+3	; 0x03
    2178:	94 81       	ldd	r25, Z+4	; 0x04
    217a:	a8 0f       	add	r26, r24
    217c:	b9 1f       	adc	r27, r25
    217e:	8c 91       	ld	r24, X
    2180:	b8 0e       	add	r11, r24
    2182:	82 2f       	mov	r24, r18
    2184:	2f 5f       	subi	r18, 0xFF	; 255
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2188:	a8 2f       	mov	r26, r24
    218a:	bb 27       	eor	r27, r27
    218c:	a4 17       	cp	r26, r20
    218e:	b5 07       	cpc	r27, r21
    2190:	8c f3       	brlt	.-30     	; 0x2174 <rf_tx_tdma_packet+0x8e>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    2192:	96 2f       	mov	r25, r22
    2194:	94 5f       	subi	r25, 0xF4	; 244
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2196:	40 98       	cbi	0x08, 0	; 8
    2198:	8e e3       	ldi	r24, 0x3E	; 62
    219a:	8e bd       	out	0x2e, r24	; 46
    219c:	0d b4       	in	r0, 0x2d	; 45
    219e:	07 fc       	sbrc	r0, 7
    21a0:	05 c0       	rjmp	.+10     	; 0x21ac <rf_tx_tdma_packet+0xc6>
    21a2:	fc cf       	rjmp	.-8      	; 0x219c <rf_tx_tdma_packet+0xb6>
    21a4:	0d b4       	in	r0, 0x2d	; 45
    21a6:	07 fc       	sbrc	r0, 7
    21a8:	16 c1       	rjmp	.+556    	; 0x23d6 <__stack+0x1d7>
    21aa:	fc cf       	rjmp	.-8      	; 0x21a4 <rf_tx_tdma_packet+0xbe>
    21ac:	9e bd       	out	0x2e, r25	; 46
    21ae:	fa cf       	rjmp	.-12     	; 0x21a4 <rf_tx_tdma_packet+0xbe>
    21b0:	81 e6       	ldi	r24, 0x61	; 97
    21b2:	98 e8       	ldi	r25, 0x88	; 136
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    21b8:	40 98       	cbi	0x08, 0	; 8
    21ba:	8e e3       	ldi	r24, 0x3E	; 62
    21bc:	8e bd       	out	0x2e, r24	; 46
    21be:	0d b4       	in	r0, 0x2d	; 45
    21c0:	07 fe       	sbrs	r0, 7
    21c2:	fd cf       	rjmp	.-6      	; 0x21be <rf_tx_tdma_packet+0xd8>
    21c4:	fe 01       	movw	r30, r28
    21c6:	31 96       	adiw	r30, 0x01	; 1
    21c8:	9e 01       	movw	r18, r28
    21ca:	2d 5f       	subi	r18, 0xFD	; 253
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	8e bd       	out	0x2e, r24	; 46
    21d2:	0d b4       	in	r0, 0x2d	; 45
    21d4:	07 fe       	sbrs	r0, 7
    21d6:	fd cf       	rjmp	.-6      	; 0x21d2 <rf_tx_tdma_packet+0xec>
    21d8:	31 96       	adiw	r30, 0x01	; 1
    21da:	e2 17       	cp	r30, r18
    21dc:	f3 07       	cpc	r31, r19
    21de:	b9 f7       	brne	.-18     	; 0x21ce <rf_tx_tdma_packet+0xe8>
    21e0:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    21e2:	40 98       	cbi	0x08, 0	; 8
    21e4:	8e e3       	ldi	r24, 0x3E	; 62
    21e6:	8e bd       	out	0x2e, r24	; 46
    21e8:	0d b4       	in	r0, 0x2d	; 45
    21ea:	07 fc       	sbrc	r0, 7
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <rf_tx_tdma_packet+0x112>
    21ee:	fc cf       	rjmp	.-8      	; 0x21e8 <rf_tx_tdma_packet+0x102>
    21f0:	0d b4       	in	r0, 0x2d	; 45
    21f2:	07 fc       	sbrc	r0, 7
    21f4:	f9 c0       	rjmp	.+498    	; 0x23e8 <__stack+0x1e9>
    21f6:	fc cf       	rjmp	.-8      	; 0x21f0 <rf_tx_tdma_packet+0x10a>
    21f8:	80 91 28 06 	lds	r24, 0x0628
    21fc:	8e bd       	out	0x2e, r24	; 46
    21fe:	f8 cf       	rjmp	.-16     	; 0x21f0 <rf_tx_tdma_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2200:	0d b4       	in	r0, 0x2d	; 45
    2202:	07 fe       	sbrs	r0, 7
    2204:	fd cf       	rjmp	.-6      	; 0x2200 <__stack+0x1>
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	f9 01       	movw	r30, r18
    220c:	e6 5d       	subi	r30, 0xD6	; 214
    220e:	f9 4f       	sbci	r31, 0xF9	; 249
    2210:	80 81       	ld	r24, Z
    2212:	8e bd       	out	0x2e, r24	; 46
    2214:	0d b4       	in	r0, 0x2d	; 45
    2216:	07 fe       	sbrs	r0, 7
    2218:	fd cf       	rjmp	.-6      	; 0x2214 <__stack+0x15>
    221a:	2f 5f       	subi	r18, 0xFF	; 255
    221c:	3f 4f       	sbci	r19, 0xFF	; 255
    221e:	22 30       	cpi	r18, 0x02	; 2
    2220:	31 05       	cpc	r19, r1
    2222:	99 f7       	brne	.-26     	; 0x220a <__stack+0xb>
    2224:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    2226:	40 98       	cbi	0x08, 0	; 8
    2228:	8e e3       	ldi	r24, 0x3E	; 62
    222a:	8e bd       	out	0x2e, r24	; 46
    222c:	0d b4       	in	r0, 0x2d	; 45
    222e:	07 fe       	sbrs	r0, 7
    2230:	fd cf       	rjmp	.-6      	; 0x222c <__stack+0x2d>
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	f8 01       	movw	r30, r16
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	8e bd       	out	0x2e, r24	; 46
    2240:	0d b4       	in	r0, 0x2d	; 45
    2242:	07 fe       	sbrs	r0, 7
    2244:	fd cf       	rjmp	.-6      	; 0x2240 <__stack+0x41>
    2246:	2f 5f       	subi	r18, 0xFF	; 255
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	99 f7       	brne	.-26     	; 0x2236 <__stack+0x37>
    2250:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    2252:	40 98       	cbi	0x08, 0	; 8
    2254:	8e e3       	ldi	r24, 0x3E	; 62
    2256:	8e bd       	out	0x2e, r24	; 46
    2258:	0d b4       	in	r0, 0x2d	; 45
    225a:	07 fe       	sbrs	r0, 7
    225c:	fd cf       	rjmp	.-6      	; 0x2258 <__stack+0x59>
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	f9 01       	movw	r30, r18
    2264:	e4 5d       	subi	r30, 0xD4	; 212
    2266:	f9 4f       	sbci	r31, 0xF9	; 249
    2268:	80 81       	ld	r24, Z
    226a:	8e bd       	out	0x2e, r24	; 46
    226c:	0d b4       	in	r0, 0x2d	; 45
    226e:	07 fe       	sbrs	r0, 7
    2270:	fd cf       	rjmp	.-6      	; 0x226c <__stack+0x6d>
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	99 f7       	brne	.-26     	; 0x2262 <__stack+0x63>
    227c:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    227e:	b7 01       	movw	r22, r14
    2280:	c6 01       	movw	r24, r12
    2282:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    2286:	f8 01       	movw	r30, r16
    2288:	85 81       	ldd	r24, Z+5	; 0x05
    228a:	88 23       	and	r24, r24
    228c:	c1 f1       	breq	.+112    	; 0x22fe <__stack+0xff>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    228e:	80 91 2e 06 	lds	r24, 0x062E
    2292:	88 23       	and	r24, r24
    2294:	39 f4       	brne	.+14     	; 0x22a4 <__stack+0xa5>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2296:	40 98       	cbi	0x08, 0	; 8
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	8e bd       	out	0x2e, r24	; 46
    229c:	0d b4       	in	r0, 0x2d	; 45
    229e:	07 fe       	sbrs	r0, 7
    22a0:	fd cf       	rjmp	.-6      	; 0x229c <__stack+0x9d>
    22a2:	40 9a       	sbi	0x08, 0	; 8
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    22a4:	40 98       	cbi	0x08, 0	; 8
    22a6:	1e bc       	out	0x2e, r1	; 46
    22a8:	0d b4       	in	r0, 0x2d	; 45
    22aa:	07 fe       	sbrs	r0, 7
    22ac:	fd cf       	rjmp	.-6      	; 0x22a8 <__stack+0xa9>
    22ae:	8e b5       	in	r24, 0x2e	; 46
    22b0:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    22b2:	81 ff       	sbrs	r24, 1
    22b4:	f7 cf       	rjmp	.-18     	; 0x22a4 <__stack+0xa5>
    22b6:	ee 24       	eor	r14, r14

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    22b8:	40 98       	cbi	0x08, 0	; 8
    22ba:	85 e0       	ldi	r24, 0x05	; 5
    22bc:	8e bd       	out	0x2e, r24	; 46
    22be:	0d b4       	in	r0, 0x2d	; 45
    22c0:	07 fe       	sbrs	r0, 7
    22c2:	fd cf       	rjmp	.-6      	; 0x22be <__stack+0xbf>
    22c4:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    22c6:	40 98       	cbi	0x08, 0	; 8
    22c8:	1e bc       	out	0x2e, r1	; 46
    22ca:	0d b4       	in	r0, 0x2d	; 45
    22cc:	07 fe       	sbrs	r0, 7
    22ce:	fd cf       	rjmp	.-6      	; 0x22ca <__stack+0xcb>
    22d0:	fe b4       	in	r15, 0x2e	; 46
    22d2:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    22d4:	e3 94       	inc	r14
	  if (cnt > 100)
    22d6:	f5 e6       	ldi	r31, 0x65	; 101
    22d8:	ef 16       	cp	r14, r31
    22da:	51 f4       	brne	.+20     	; 0x22f0 <__stack+0xf1>
	    {
	      ENABLE_GLOBAL_INT ();
    22dc:	78 94       	sei
		nrk_sem_post(radio_sem);
    22de:	80 91 21 06 	lds	r24, 0x0621
    22e2:	90 91 22 06 	lds	r25, 0x0622
    22e6:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	83 c0       	rjmp	.+262    	; 0x23f6 <__stack+0x1f7>
	      return FALSE;
	    }
	  halWait (100);
    22f0:	84 e6       	ldi	r24, 0x64	; 100
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    22f8:	f3 fc       	sbrc	r15, 3
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <__stack+0x10d>
    22fc:	dd cf       	rjmp	.-70     	; 0x22b8 <__stack+0xb9>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    22fe:	40 98       	cbi	0x08, 0	; 8
    2300:	84 e0       	ldi	r24, 0x04	; 4
    2302:	8e bd       	out	0x2e, r24	; 46
    2304:	0d b4       	in	r0, 0x2d	; 45
    2306:	07 fe       	sbrs	r0, 7
    2308:	fd cf       	rjmp	.-6      	; 0x2304 <__stack+0x105>
    230a:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    230c:	40 98       	cbi	0x08, 0	; 8
    230e:	8e e3       	ldi	r24, 0x3E	; 62
    2310:	8e bd       	out	0x2e, r24	; 46
    2312:	0d b4       	in	r0, 0x2d	; 45
    2314:	07 fe       	sbrs	r0, 7
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <__stack+0x113>
    2318:	f8 01       	movw	r30, r16
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	48 2f       	mov	r20, r24
    231e:	55 27       	eor	r21, r21
    2320:	47 fd       	sbrc	r20, 7
    2322:	50 95       	com	r21
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	0c c0       	rjmp	.+24     	; 0x2342 <__stack+0x143>
    232a:	f8 01       	movw	r30, r16
    232c:	83 81       	ldd	r24, Z+3	; 0x03
    232e:	94 81       	ldd	r25, Z+4	; 0x04
    2330:	a8 0f       	add	r26, r24
    2332:	b9 1f       	adc	r27, r25
    2334:	8c 91       	ld	r24, X
    2336:	8e bd       	out	0x2e, r24	; 46
    2338:	0d b4       	in	r0, 0x2d	; 45
    233a:	07 fe       	sbrs	r0, 7
    233c:	fd cf       	rjmp	.-6      	; 0x2338 <__stack+0x139>
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	a2 2f       	mov	r26, r18
    2344:	bb 27       	eor	r27, r27
    2346:	a4 17       	cp	r26, r20
    2348:	b5 07       	cpc	r27, r21
    234a:	7c f3       	brlt	.-34     	; 0x232a <__stack+0x12b>
    234c:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    234e:	40 98       	cbi	0x08, 0	; 8
    2350:	8e e3       	ldi	r24, 0x3E	; 62
    2352:	8e bd       	out	0x2e, r24	; 46
    2354:	0d b4       	in	r0, 0x2d	; 45
    2356:	07 fc       	sbrc	r0, 7
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <__stack+0x165>
    235a:	fc cf       	rjmp	.-8      	; 0x2354 <__stack+0x155>
    235c:	0d b4       	in	r0, 0x2d	; 45
    235e:	07 fc       	sbrc	r0, 7
    2360:	48 c0       	rjmp	.+144    	; 0x23f2 <__stack+0x1f3>
    2362:	fc cf       	rjmp	.-8      	; 0x235c <__stack+0x15d>
    2364:	be bc       	out	0x2e, r11	; 46
    2366:	fa cf       	rjmp	.-12     	; 0x235c <__stack+0x15d>

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    2368:	4e 9b       	sbis	0x09, 6	; 9
    236a:	fe cf       	rjmp	.-4      	; 0x2368 <__stack+0x169>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    236c:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    236e:	4e 99       	sbic	0x09, 6	; 9
    2370:	fe cf       	rjmp	.-4      	; 0x236e <__stack+0x16f>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2372:	40 98       	cbi	0x08, 0	; 8
    2374:	88 e0       	ldi	r24, 0x08	; 8
    2376:	8e bd       	out	0x2e, r24	; 46
    2378:	0d b4       	in	r0, 0x2d	; 45
    237a:	07 fe       	sbrs	r0, 7
    237c:	fd cf       	rjmp	.-6      	; 0x2378 <__stack+0x179>
    237e:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    2380:	40 98       	cbi	0x08, 0	; 8
    2382:	88 e0       	ldi	r24, 0x08	; 8
    2384:	8e bd       	out	0x2e, r24	; 46
    2386:	0d b4       	in	r0, 0x2d	; 45
    2388:	07 fe       	sbrs	r0, 7
    238a:	fd cf       	rjmp	.-6      	; 0x2386 <__stack+0x187>
    238c:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    238e:	40 98       	cbi	0x08, 0	; 8
    2390:	89 e0       	ldi	r24, 0x09	; 9
    2392:	8e bd       	out	0x2e, r24	; 46
    2394:	0d b4       	in	r0, 0x2d	; 45
    2396:	07 fe       	sbrs	r0, 7
    2398:	fd cf       	rjmp	.-6      	; 0x2394 <__stack+0x195>
    239a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    239c:	40 98       	cbi	0x08, 0	; 8
    239e:	89 e0       	ldi	r24, 0x09	; 9
    23a0:	8e bd       	out	0x2e, r24	; 46
    23a2:	0d b4       	in	r0, 0x2d	; 45
    23a4:	07 fe       	sbrs	r0, 7
    23a6:	fd cf       	rjmp	.-6      	; 0x23a2 <__stack+0x1a3>
    23a8:	40 9a       	sbi	0x08, 0	; 8

#ifdef CC2420_OSC_OPT
FASTSPI_STROBE(CC2420_SXOSCOFF);
#endif
FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    23aa:	40 98       	cbi	0x08, 0	; 8
    23ac:	86 e0       	ldi	r24, 0x06	; 6
    23ae:	8e bd       	out	0x2e, r24	; 46
    23b0:	0d b4       	in	r0, 0x2d	; 45
    23b2:	07 fe       	sbrs	r0, 7
    23b4:	fd cf       	rjmp	.-6      	; 0x23b0 <__stack+0x1b1>
    23b6:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    23b8:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    23ba:	80 91 28 06 	lds	r24, 0x0628
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	80 93 28 06 	sts	0x0628, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    23c4:	80 91 21 06 	lds	r24, 0x0621
    23c8:	90 91 22 06 	lds	r25, 0x0622
    23cc:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <__stack+0x1f7>
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    23d6:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    23d8:	f8 01       	movw	r30, r16
    23da:	86 81       	ldd	r24, Z+6	; 0x06
    23dc:	88 23       	and	r24, r24
    23de:	09 f0       	breq	.+2      	; 0x23e2 <__stack+0x1e3>
    23e0:	e7 ce       	rjmp	.-562    	; 0x21b0 <rf_tx_tdma_packet+0xca>
    23e2:	81 e4       	ldi	r24, 0x41	; 65
    23e4:	98 e8       	ldi	r25, 0x88	; 136
    23e6:	e6 ce       	rjmp	.-564    	; 0x21b4 <rf_tx_tdma_packet+0xce>
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    23e8:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    23ea:	40 98       	cbi	0x08, 0	; 8
    23ec:	8e e3       	ldi	r24, 0x3E	; 62
    23ee:	8e bd       	out	0x2e, r24	; 46
    23f0:	07 cf       	rjmp	.-498    	; 0x2200 <__stack+0x1>
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    23f2:	40 9a       	sbi	0x08, 0	; 8
    23f4:	b9 cf       	rjmp	.-142    	; 0x2368 <__stack+0x169>
    23f6:	22 96       	adiw	r28, 0x02	; 2
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	bf 90       	pop	r11
    2414:	08 95       	ret

00002416 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	22 97       	sbiw	r28, 0x02	; 2
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    242e:	90 93 2d 06 	sts	0x062D, r25
    2432:	80 93 2c 06 	sts	0x062C, r24
    nrk_spin_wait_us(500);
    2436:	84 ef       	ldi	r24, 0xF4	; 244
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    243e:	40 98       	cbi	0x08, 0	; 8
    2440:	8a ee       	ldi	r24, 0xEA	; 234
    2442:	8e bd       	out	0x2e, r24	; 46
    2444:	0d b4       	in	r0, 0x2d	; 45
    2446:	07 fe       	sbrs	r0, 7
    2448:	fd cf       	rjmp	.-6      	; 0x2444 <rf_addr_decode_set_my_mac+0x2e>
    244a:	80 e8       	ldi	r24, 0x80	; 128
    244c:	8e bd       	out	0x2e, r24	; 46
    244e:	0d b4       	in	r0, 0x2d	; 45
    2450:	07 fe       	sbrs	r0, 7
    2452:	fd cf       	rjmp	.-6      	; 0x244e <rf_addr_decode_set_my_mac+0x38>
    2454:	fe 01       	movw	r30, r28
    2456:	31 96       	adiw	r30, 0x01	; 1
    2458:	9e 01       	movw	r18, r28
    245a:	2d 5f       	subi	r18, 0xFD	; 253
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	8e bd       	out	0x2e, r24	; 46
    2462:	0d b4       	in	r0, 0x2d	; 45
    2464:	07 fe       	sbrs	r0, 7
    2466:	fd cf       	rjmp	.-6      	; 0x2462 <rf_addr_decode_set_my_mac+0x4c>
    2468:	31 96       	adiw	r30, 0x01	; 1
    246a:	e2 17       	cp	r30, r18
    246c:	f3 07       	cpc	r31, r19
    246e:	b9 f7       	brne	.-18     	; 0x245e <rf_addr_decode_set_my_mac+0x48>
    2470:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2472:	84 ef       	ldi	r24, 0xF4	; 244
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    247a:	22 96       	adiw	r28, 0x02	; 2
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	22 97       	sbiw	r28, 0x02	; 2
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	8c 01       	movw	r16, r24
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    24ba:	84 e6       	ldi	r24, 0x64	; 100
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    24c2:	78 01       	movw	r14, r16
    24c4:	c1 2c       	mov	r12, r1
    24c6:	01 e0       	ldi	r16, 0x01	; 1
    24c8:	d0 2e       	mov	r13, r16
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    24ca:	3e 01       	movw	r6, r28
    24cc:	08 94       	sec
    24ce:	61 1c       	adc	r6, r1
    24d0:	71 1c       	adc	r7, r1
    24d2:	13 e0       	ldi	r17, 0x03	; 3
    24d4:	81 2e       	mov	r8, r17
    24d6:	91 2c       	mov	r9, r1
    24d8:	8c 0e       	add	r8, r28
    24da:	9d 1e       	adc	r9, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    24dc:	f7 01       	movw	r30, r14
    24de:	80 81       	ld	r24, Z
    24e0:	21 81       	ldd	r18, Z+1	; 0x01
    24e2:	33 27       	eor	r19, r19
    24e4:	99 27       	eor	r25, r25
    24e6:	98 2f       	mov	r25, r24
    24e8:	88 27       	eor	r24, r24
    24ea:	28 2b       	or	r18, r24
    24ec:	39 2b       	or	r19, r25
    24ee:	3a 83       	std	Y+2, r19	; 0x02
    24f0:	29 83       	std	Y+1, r18	; 0x01
   	nrk_spin_wait_us(100); 
    24f2:	84 e6       	ldi	r24, 0x64	; 100
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    24fa:	40 98       	cbi	0x08, 0	; 8
    24fc:	8c 2d       	mov	r24, r12
    24fe:	80 68       	ori	r24, 0x80	; 128
    2500:	8e bd       	out	0x2e, r24	; 46
    2502:	0d b4       	in	r0, 0x2d	; 45
    2504:	07 fe       	sbrs	r0, 7
    2506:	fd cf       	rjmp	.-6      	; 0x2502 <rf_security_set_key+0x76>
    2508:	c6 01       	movw	r24, r12
    250a:	95 95       	asr	r25
    250c:	87 95       	ror	r24
    250e:	80 7c       	andi	r24, 0xC0	; 192
    2510:	8e bd       	out	0x2e, r24	; 46
    2512:	0d b4       	in	r0, 0x2d	; 45
    2514:	07 fe       	sbrs	r0, 7
    2516:	fd cf       	rjmp	.-6      	; 0x2512 <rf_security_set_key+0x86>
    2518:	83 01       	movw	r16, r6
    251a:	53 01       	movw	r10, r6
    251c:	f5 01       	movw	r30, r10
    251e:	80 81       	ld	r24, Z
    2520:	8e bd       	out	0x2e, r24	; 46
    2522:	0d b4       	in	r0, 0x2d	; 45
    2524:	07 fe       	sbrs	r0, 7
    2526:	fd cf       	rjmp	.-6      	; 0x2522 <rf_security_set_key+0x96>
    2528:	08 94       	sec
    252a:	a1 1c       	adc	r10, r1
    252c:	b1 1c       	adc	r11, r1
    252e:	a8 14       	cp	r10, r8
    2530:	b9 04       	cpc	r11, r9
    2532:	a1 f7       	brne	.-24     	; 0x251c <rf_security_set_key+0x90>
    2534:	40 9a       	sbi	0x08, 0	; 8
    2536:	08 94       	sec
    2538:	e1 1c       	adc	r14, r1
    253a:	f1 1c       	adc	r15, r1
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	c8 0e       	add	r12, r24
    2542:	d9 1e       	adc	r13, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    2544:	90 e1       	ldi	r25, 0x10	; 16
    2546:	c9 16       	cp	r12, r25
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	d9 06       	cpc	r13, r25
    254c:	39 f6       	brne	.-114    	; 0x24dc <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    254e:	84 e6       	ldi	r24, 0x64	; 100
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    2556:	20 e1       	ldi	r18, 0x10	; 16
    2558:	31 e0       	ldi	r19, 0x01	; 1
    255a:	40 e4       	ldi	r20, 0x40	; 64
    255c:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    255e:	1a 82       	std	Y+2, r1	; 0x02
    2560:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    2562:	40 98       	cbi	0x08, 0	; 8
    2564:	84 2f       	mov	r24, r20
    2566:	80 68       	ori	r24, 0x80	; 128
    2568:	8e bd       	out	0x2e, r24	; 46
    256a:	0d b4       	in	r0, 0x2d	; 45
    256c:	07 fe       	sbrs	r0, 7
    256e:	fd cf       	rjmp	.-6      	; 0x256a <rf_security_set_key+0xde>
    2570:	ca 01       	movw	r24, r20
    2572:	95 95       	asr	r25
    2574:	87 95       	ror	r24
    2576:	80 7c       	andi	r24, 0xC0	; 192
    2578:	8e bd       	out	0x2e, r24	; 46
    257a:	0d b4       	in	r0, 0x2d	; 45
    257c:	07 fe       	sbrs	r0, 7
    257e:	fd cf       	rjmp	.-6      	; 0x257a <rf_security_set_key+0xee>
    2580:	f8 01       	movw	r30, r16
    2582:	80 81       	ld	r24, Z
    2584:	8e bd       	out	0x2e, r24	; 46
    2586:	0d b4       	in	r0, 0x2d	; 45
    2588:	07 fe       	sbrs	r0, 7
    258a:	fd cf       	rjmp	.-6      	; 0x2586 <rf_security_set_key+0xfa>
    258c:	31 96       	adiw	r30, 0x01	; 1
    258e:	ea 15       	cp	r30, r10
    2590:	fb 05       	cpc	r31, r11
    2592:	b9 f7       	brne	.-18     	; 0x2582 <rf_security_set_key+0xf6>
    2594:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    2596:	40 98       	cbi	0x08, 0	; 8
    2598:	82 2f       	mov	r24, r18
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	8e bd       	out	0x2e, r24	; 46
    259e:	0d b4       	in	r0, 0x2d	; 45
    25a0:	07 fe       	sbrs	r0, 7
    25a2:	fd cf       	rjmp	.-6      	; 0x259e <rf_security_set_key+0x112>
    25a4:	c9 01       	movw	r24, r18
    25a6:	95 95       	asr	r25
    25a8:	87 95       	ror	r24
    25aa:	80 7c       	andi	r24, 0xC0	; 192
    25ac:	8e bd       	out	0x2e, r24	; 46
    25ae:	0d b4       	in	r0, 0x2d	; 45
    25b0:	07 fe       	sbrs	r0, 7
    25b2:	fd cf       	rjmp	.-6      	; 0x25ae <rf_security_set_key+0x122>
    25b4:	f8 01       	movw	r30, r16
    25b6:	80 81       	ld	r24, Z
    25b8:	8e bd       	out	0x2e, r24	; 46
    25ba:	0d b4       	in	r0, 0x2d	; 45
    25bc:	07 fe       	sbrs	r0, 7
    25be:	fd cf       	rjmp	.-6      	; 0x25ba <rf_security_set_key+0x12e>
    25c0:	31 96       	adiw	r30, 0x01	; 1
    25c2:	ea 15       	cp	r30, r10
    25c4:	fb 05       	cpc	r31, r11
    25c6:	b9 f7       	brne	.-18     	; 0x25b6 <rf_security_set_key+0x12a>
    25c8:	40 9a       	sbi	0x08, 0	; 8
    25ca:	2e 5f       	subi	r18, 0xFE	; 254
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	4e 5f       	subi	r20, 0xFE	; 254
    25d0:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    25d2:	e1 e0       	ldi	r30, 0x01	; 1
    25d4:	2e 31       	cpi	r18, 0x1E	; 30
    25d6:	3e 07       	cpc	r19, r30
    25d8:	11 f6       	brne	.-124    	; 0x255e <rf_security_set_key+0xd2>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    25e2:	40 98       	cbi	0x08, 0	; 8
    25e4:	8e ec       	ldi	r24, 0xCE	; 206
    25e6:	8e bd       	out	0x2e, r24	; 46
    25e8:	0d b4       	in	r0, 0x2d	; 45
    25ea:	07 fe       	sbrs	r0, 7
    25ec:	fd cf       	rjmp	.-6      	; 0x25e8 <rf_security_set_key+0x15c>
    25ee:	80 e8       	ldi	r24, 0x80	; 128
    25f0:	8e bd       	out	0x2e, r24	; 46
    25f2:	0d b4       	in	r0, 0x2d	; 45
    25f4:	07 fe       	sbrs	r0, 7
    25f6:	fd cf       	rjmp	.-6      	; 0x25f2 <rf_security_set_key+0x166>
    25f8:	f8 01       	movw	r30, r16
    25fa:	80 81       	ld	r24, Z
    25fc:	8e bd       	out	0x2e, r24	; 46
    25fe:	0d b4       	in	r0, 0x2d	; 45
    2600:	07 fe       	sbrs	r0, 7
    2602:	fd cf       	rjmp	.-6      	; 0x25fe <rf_security_set_key+0x172>
    2604:	31 96       	adiw	r30, 0x01	; 1
    2606:	ea 15       	cp	r30, r10
    2608:	fb 05       	cpc	r31, r11
    260a:	b9 f7       	brne	.-18     	; 0x25fa <rf_security_set_key+0x16e>
    260c:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    260e:	40 98       	cbi	0x08, 0	; 8
    2610:	8e e9       	ldi	r24, 0x9E	; 158
    2612:	8e bd       	out	0x2e, r24	; 46
    2614:	0d b4       	in	r0, 0x2d	; 45
    2616:	07 fe       	sbrs	r0, 7
    2618:	fd cf       	rjmp	.-6      	; 0x2614 <rf_security_set_key+0x188>
    261a:	80 e8       	ldi	r24, 0x80	; 128
    261c:	8e bd       	out	0x2e, r24	; 46
    261e:	0d b4       	in	r0, 0x2d	; 45
    2620:	07 fe       	sbrs	r0, 7
    2622:	fd cf       	rjmp	.-6      	; 0x261e <rf_security_set_key+0x192>
    2624:	f8 01       	movw	r30, r16
    2626:	80 81       	ld	r24, Z
    2628:	8e bd       	out	0x2e, r24	; 46
    262a:	0d b4       	in	r0, 0x2d	; 45
    262c:	07 fe       	sbrs	r0, 7
    262e:	fd cf       	rjmp	.-6      	; 0x262a <rf_security_set_key+0x19e>
    2630:	0f 5f       	subi	r16, 0xFF	; 255
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	0a 15       	cp	r16, r10
    2636:	1b 05       	cpc	r17, r11
    2638:	a9 f7       	brne	.-22     	; 0x2624 <rf_security_set_key+0x198>
    263a:	40 9a       	sbi	0x08, 0	; 8
    263c:	22 96       	adiw	r28, 0x02	; 2
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	7f 90       	pop	r7
    2662:	6f 90       	pop	r6
    2664:	08 95       	ret

00002666 <rf_power_up>:
}

void rf_power_up()
{

    DISABLE_GLOBAL_INT();
    2666:	f8 94       	cli
    FASTSPI_STROBE(CC2420_SXOSCON);
    2668:	40 98       	cbi	0x08, 0	; 8
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	8e bd       	out	0x2e, r24	; 46
    266e:	0d b4       	in	r0, 0x2d	; 45
    2670:	07 fe       	sbrs	r0, 7
    2672:	fd cf       	rjmp	.-6      	; 0x266e <rf_power_up+0x8>
    2674:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(OSC_STARTUP_DELAY);
    2676:	88 ee       	ldi	r24, 0xE8	; 232
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    ENABLE_GLOBAL_INT();
    267e:	78 94       	sei
    2680:	08 95       	ret

00002682 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    2682:	1f 93       	push	r17
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    268c:	80 91 21 06 	lds	r24, 0x0621
    2690:	90 91 22 06 	lds	r25, 0x0622
    2694:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2698:	40 98       	cbi	0x08, 0	; 8
    269a:	88 e0       	ldi	r24, 0x08	; 8
    269c:	8e bd       	out	0x2e, r24	; 46
    269e:	0d b4       	in	r0, 0x2d	; 45
    26a0:	07 fe       	sbrs	r0, 7
    26a2:	fd cf       	rjmp	.-6      	; 0x269e <rf_set_rx+0x1c>
    26a4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    26a6:	40 98       	cbi	0x08, 0	; 8
    26a8:	88 e0       	ldi	r24, 0x08	; 8
    26aa:	8e bd       	out	0x2e, r24	; 46
    26ac:	0d b4       	in	r0, 0x2d	; 45
    26ae:	07 fe       	sbrs	r0, 7
    26b0:	fd cf       	rjmp	.-6      	; 0x26ac <rf_set_rx+0x2a>
    26b2:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    26b4:	81 2f       	mov	r24, r17
    26b6:	0e 94 71 07 	call	0xee2	; 0xee2 <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    26ba:	d0 93 27 06 	sts	0x0627, r29
    26be:	c0 93 26 06 	sts	0x0626, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    26c2:	80 91 21 06 	lds	r24, 0x0621
    26c6:	90 91 22 06 	lds	r25, 0x0622
    26ca:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	08 95       	ret

000026d6 <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    26d6:	1f 93       	push	r17
    26d8:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    26da:	80 91 21 06 	lds	r24, 0x0621
    26de:	90 91 22 06 	lds	r25, 0x0622
    26e2:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    26e6:	81 2f       	mov	r24, r17
    26e8:	0e 94 71 07 	call	0xee2	; 0xee2 <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    26ec:	80 91 21 06 	lds	r24, 0x0621
    26f0:	90 91 22 06 	lds	r25, 0x0622
    26f4:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
    26f8:	1f 91       	pop	r17
    26fa:	08 95       	ret

000026fc <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	22 97       	sbiw	r28, 0x02	; 2
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	8c 01       	movw	r16, r24
    271c:	d6 2e       	mov	r13, r22
    271e:	5a 83       	std	Y+2, r21	; 0x02
    2720:	49 83       	std	Y+1, r20	; 0x01
    2722:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    2724:	6a e0       	ldi	r22, 0x0A	; 10
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	0e 94 50 20 	call	0x40a0	; 0x40a0 <nrk_sem_create>
    272c:	90 93 22 06 	sts	0x0622, r25
    2730:	80 93 21 06 	sts	0x0621, r24
    if (radio_sem == NULL)
    2734:	89 2b       	or	r24, r25
    2736:	31 f4       	brne	.+12     	; 0x2744 <rf_init+0x48>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    2738:	0e 94 97 23 	call	0x472e	; 0x472e <nrk_get_pid>
    273c:	68 2f       	mov	r22, r24
    273e:	8f e0       	ldi	r24, 0x0F	; 15
    2740:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    2744:	80 91 21 06 	lds	r24, 0x0621
    2748:	90 91 22 06 	lds	r25, 0x0622
    274c:	0e 94 1d 22 	call	0x443a	; 0x443a <nrk_sem_pend>
  if (v == NRK_ERROR) {
    2750:	8f 3f       	cpi	r24, 0xFF	; 255
    2752:	21 f4       	brne	.+8      	; 0x275c <rf_init+0x60>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    2754:	8c e1       	ldi	r24, 0x1C	; 28
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    275c:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    275e:	88 ee       	ldi	r24, 0xE8	; 232
    2760:	93 e0       	ldi	r25, 0x03	; 3
    2762:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>
    SET_RESET_ACTIVE();
    2766:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>
    SET_RESET_INACTIVE();
    2770:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    2772:	84 e6       	ldi	r24, 0x64	; 100
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 b6 19 	call	0x336c	; 0x336c <halWait>
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();
	//rf_rx_callback = NULL;

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    277a:	f8 94       	cli

    FASTSPI_STROBE(CC2420_SXOSCON);
    277c:	40 98       	cbi	0x08, 0	; 8
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	8e bd       	out	0x2e, r24	; 46
    2782:	0d b4       	in	r0, 0x2d	; 45
    2784:	07 fe       	sbrs	r0, 7
    2786:	fd cf       	rjmp	.-6      	; 0x2782 <rf_init+0x86>
    2788:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    278a:	82 ee       	ldi	r24, 0xE2	; 226
    278c:	92 e0       	ldi	r25, 0x02	; 2
    278e:	90 93 25 06 	sts	0x0625, r25
    2792:	80 93 24 06 	sts	0x0624, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    2796:	40 98       	cbi	0x08, 0	; 8
    2798:	81 e1       	ldi	r24, 0x11	; 17
    279a:	8e bd       	out	0x2e, r24	; 46
    279c:	0d b4       	in	r0, 0x2d	; 45
    279e:	07 fe       	sbrs	r0, 7
    27a0:	fd cf       	rjmp	.-6      	; 0x279c <rf_init+0xa0>
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	8e bd       	out	0x2e, r24	; 46
    27a6:	0d b4       	in	r0, 0x2d	; 45
    27a8:	07 fe       	sbrs	r0, 7
    27aa:	fd cf       	rjmp	.-6      	; 0x27a6 <rf_init+0xaa>
    27ac:	82 ee       	ldi	r24, 0xE2	; 226
    27ae:	8e bd       	out	0x2e, r24	; 46
    27b0:	0d b4       	in	r0, 0x2d	; 45
    27b2:	07 fe       	sbrs	r0, 7
    27b4:	fd cf       	rjmp	.-6      	; 0x27b0 <rf_init+0xb4>
    27b6:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    27b8:	40 98       	cbi	0x08, 0	; 8
    27ba:	82 e1       	ldi	r24, 0x12	; 18
    27bc:	8e bd       	out	0x2e, r24	; 46
    27be:	0d b4       	in	r0, 0x2d	; 45
    27c0:	07 fe       	sbrs	r0, 7
    27c2:	fd cf       	rjmp	.-6      	; 0x27be <rf_init+0xc2>
    27c4:	85 e0       	ldi	r24, 0x05	; 5
    27c6:	8e bd       	out	0x2e, r24	; 46
    27c8:	0d b4       	in	r0, 0x2d	; 45
    27ca:	07 fe       	sbrs	r0, 7
    27cc:	fd cf       	rjmp	.-6      	; 0x27c8 <rf_init+0xcc>
    27ce:	1e bc       	out	0x2e, r1	; 46
    27d0:	0d b4       	in	r0, 0x2d	; 45
    27d2:	07 fe       	sbrs	r0, 7
    27d4:	fd cf       	rjmp	.-6      	; 0x27d0 <rf_init+0xd4>
    27d6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    27d8:	40 98       	cbi	0x08, 0	; 8
    27da:	8c e1       	ldi	r24, 0x1C	; 28
    27dc:	8e bd       	out	0x2e, r24	; 46
    27de:	0d b4       	in	r0, 0x2d	; 45
    27e0:	07 fe       	sbrs	r0, 7
    27e2:	fd cf       	rjmp	.-6      	; 0x27de <rf_init+0xe2>
    27e4:	1e bc       	out	0x2e, r1	; 46
    27e6:	0d b4       	in	r0, 0x2d	; 45
    27e8:	07 fe       	sbrs	r0, 7
    27ea:	fd cf       	rjmp	.-6      	; 0x27e6 <rf_init+0xea>
    27ec:	8f e7       	ldi	r24, 0x7F	; 127
    27ee:	8e bd       	out	0x2e, r24	; 46
    27f0:	0d b4       	in	r0, 0x2d	; 45
    27f2:	07 fe       	sbrs	r0, 7
    27f4:	fd cf       	rjmp	.-6      	; 0x27f0 <rf_init+0xf4>
    27f6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    27f8:	40 98       	cbi	0x08, 0	; 8
    27fa:	89 e1       	ldi	r24, 0x19	; 25
    27fc:	8e bd       	out	0x2e, r24	; 46
    27fe:	0d b4       	in	r0, 0x2d	; 45
    2800:	07 fe       	sbrs	r0, 7
    2802:	fd cf       	rjmp	.-6      	; 0x27fe <rf_init+0x102>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	8e bd       	out	0x2e, r24	; 46
    2808:	0d b4       	in	r0, 0x2d	; 45
    280a:	07 fe       	sbrs	r0, 7
    280c:	fd cf       	rjmp	.-6      	; 0x2808 <rf_init+0x10c>
    280e:	84 ec       	ldi	r24, 0xC4	; 196
    2810:	8e bd       	out	0x2e, r24	; 46
    2812:	0d b4       	in	r0, 0x2d	; 45
    2814:	07 fe       	sbrs	r0, 7
    2816:	fd cf       	rjmp	.-6      	; 0x2812 <rf_init+0x116>
    2818:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    281a:	40 98       	cbi	0x08, 0	; 8
    281c:	87 e1       	ldi	r24, 0x17	; 23
    281e:	8e bd       	out	0x2e, r24	; 46
    2820:	0d b4       	in	r0, 0x2d	; 45
    2822:	07 fe       	sbrs	r0, 7
    2824:	fd cf       	rjmp	.-6      	; 0x2820 <rf_init+0x124>
    2826:	8a e1       	ldi	r24, 0x1A	; 26
    2828:	8e bd       	out	0x2e, r24	; 46
    282a:	0d b4       	in	r0, 0x2d	; 45
    282c:	07 fe       	sbrs	r0, 7
    282e:	fd cf       	rjmp	.-6      	; 0x282a <rf_init+0x12e>
    2830:	86 e5       	ldi	r24, 0x56	; 86
    2832:	8e bd       	out	0x2e, r24	; 46
    2834:	0d b4       	in	r0, 0x2d	; 45
    2836:	07 fe       	sbrs	r0, 7
    2838:	fd cf       	rjmp	.-6      	; 0x2834 <rf_init+0x138>
    283a:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    283c:	84 ef       	ldi	r24, 0xF4	; 244
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    2844:	40 98       	cbi	0x08, 0	; 8
    2846:	88 ee       	ldi	r24, 0xE8	; 232
    2848:	8e bd       	out	0x2e, r24	; 46
    284a:	0d b4       	in	r0, 0x2d	; 45
    284c:	07 fe       	sbrs	r0, 7
    284e:	fd cf       	rjmp	.-6      	; 0x284a <rf_init+0x14e>
    2850:	80 e8       	ldi	r24, 0x80	; 128
    2852:	8e bd       	out	0x2e, r24	; 46
    2854:	0d b4       	in	r0, 0x2d	; 45
    2856:	07 fe       	sbrs	r0, 7
    2858:	fd cf       	rjmp	.-6      	; 0x2854 <rf_init+0x158>
    285a:	fe 01       	movw	r30, r28
    285c:	31 96       	adiw	r30, 0x01	; 1
    285e:	9e 01       	movw	r18, r28
    2860:	2d 5f       	subi	r18, 0xFD	; 253
    2862:	3f 4f       	sbci	r19, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	8e bd       	out	0x2e, r24	; 46
    2868:	0d b4       	in	r0, 0x2d	; 45
    286a:	07 fe       	sbrs	r0, 7
    286c:	fd cf       	rjmp	.-6      	; 0x2868 <rf_init+0x16c>
    286e:	31 96       	adiw	r30, 0x01	; 1
    2870:	e2 17       	cp	r30, r18
    2872:	f3 07       	cpc	r31, r19
    2874:	b9 f7       	brne	.-18     	; 0x2864 <rf_init+0x168>
    2876:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    2878:	84 ef       	ldi	r24, 0xF4	; 244
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    2880:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    2882:	8d 2d       	mov	r24, r13
    2884:	0e 94 71 07 	call	0xee2	; 0xee2 <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    2888:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    288a:	10 93 27 06 	sts	0x0627, r17
    288e:	00 93 26 06 	sts	0x0626, r16
	rfSettings.panId = panId;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	90 93 2b 06 	sts	0x062B, r25
    289a:	80 93 2a 06 	sts	0x062A, r24
	rfSettings.myAddr = myAddr;
    289e:	f0 92 2d 06 	sts	0x062D, r15
    28a2:	e0 92 2c 06 	sts	0x062C, r14
	rfSettings.txSeqNumber = 0;
    28a6:	10 92 28 06 	sts	0x0628, r1
        rfSettings.receiveOn = FALSE;
    28aa:	10 92 2e 06 	sts	0x062E, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    28ae:	0e 94 90 07 	call	0xf20	; 0xf20 <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    28b2:	80 91 21 06 	lds	r24, 0x0621
    28b6:	90 91 22 06 	lds	r25, 0x0622
    28ba:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_sem_post>
  if (v == NRK_ERROR) {
    28be:	8f 3f       	cpi	r24, 0xFF	; 255
    28c0:	39 f4       	brne	.+14     	; 0x28d0 <rf_init+0x1d4>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    28c2:	8f ee       	ldi	r24, 0xEF	; 239
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
    _nrk_errno_set (2);
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    28d0:	10 92 31 06 	sts	0x0631, r1
security_enable=0;
    28d4:	10 92 23 06 	sts	0x0623, r1
last_pkt_encrypted=0;
    28d8:	10 92 32 06 	sts	0x0632, r1
    28dc:	22 96       	adiw	r28, 0x02	; 2
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	08 95       	ret

000028f8 <cc259x_tx>:
}


void cc259x_tx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    28f8:	80 91 1f 02 	lds	r24, 0x021F
    28fc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <nrk_gpio_set>
    nrk_gpio_set(NRK_DEBUG_0);
    2900:	80 91 1e 02 	lds	r24, 0x021E
    2904:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <nrk_gpio_set>
    2908:	08 95       	ret

0000290a <cc259x_rx>:
	_rf_rx_callback = callback;
}

void cc259x_rx()
{
    nrk_gpio_set(NRK_DEBUG_1);
    290a:	80 91 1f 02 	lds	r24, 0x021F
    290e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <nrk_gpio_set>
    nrk_gpio_clr(NRK_DEBUG_0);
    2912:	80 91 1e 02 	lds	r24, 0x021E
    2916:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_gpio_clr>
    291a:	08 95       	ret

0000291c <getc1>:
    291c:	20 91 53 04 	lds	r18, 0x0453
    2920:	80 91 54 04 	lds	r24, 0x0454
    2924:	28 17       	cp	r18, r24
    2926:	81 f0       	breq	.+32     	; 0x2948 <getc1+0x2c>
    2928:	e2 2f       	mov	r30, r18
    292a:	ff 27       	eor	r31, r31
    292c:	eb 5a       	subi	r30, 0xAB	; 171
    292e:	fb 4f       	sbci	r31, 0xFB	; 251
    2930:	e0 81       	ld	r30, Z
    2932:	82 2f       	mov	r24, r18
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 93 53 04 	sts	0x0453, r24
    293a:	80 31       	cpi	r24, 0x10	; 16
    293c:	11 f4       	brne	.+4      	; 0x2942 <getc1+0x26>
    293e:	10 92 53 04 	sts	0x0453, r1
    2942:	8e 2f       	mov	r24, r30
    2944:	99 27       	eor	r25, r25
    2946:	08 95       	ret
    2948:	80 91 c8 00 	lds	r24, 0x00C8
    294c:	87 ff       	sbrs	r24, 7
    294e:	fc cf       	rjmp	.-8      	; 0x2948 <getc1+0x2c>
    2950:	80 91 c8 00 	lds	r24, 0x00C8
    2954:	8f 77       	andi	r24, 0x7F	; 127
    2956:	80 93 c8 00 	sts	0x00C8, r24
    295a:	80 91 ce 00 	lds	r24, 0x00CE
    295e:	99 27       	eor	r25, r25
    2960:	08 95       	ret

00002962 <nrk_uart_data_ready>:
    2962:	88 23       	and	r24, r24
    2964:	51 f4       	brne	.+20     	; 0x297a <nrk_uart_data_ready+0x18>
    2966:	80 91 c0 00 	lds	r24, 0x00C0
    296a:	99 27       	eor	r25, r25
    296c:	87 fd       	sbrc	r24, 7
    296e:	90 95       	com	r25
    2970:	88 27       	eor	r24, r24
    2972:	99 0f       	add	r25, r25
    2974:	88 1f       	adc	r24, r24
    2976:	99 27       	eor	r25, r25
    2978:	08 95       	ret
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	19 f0       	breq	.+6      	; 0x2984 <nrk_uart_data_ready+0x22>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	08 95       	ret
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	90 91 53 04 	lds	r25, 0x0453
    298c:	80 91 54 04 	lds	r24, 0x0454
    2990:	98 17       	cp	r25, r24
    2992:	11 f0       	breq	.+4      	; 0x2998 <nrk_uart_data_ready+0x36>
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	c9 01       	movw	r24, r18
    299a:	08 95       	ret

0000299c <PORT_INIT>:
    299c:	85 b7       	in	r24, 0x35	; 53
    299e:	80 61       	ori	r24, 0x10	; 16
    29a0:	85 bf       	out	0x35, r24	; 53
    29a2:	86 e0       	ldi	r24, 0x06	; 6
    29a4:	84 b9       	out	0x04, r24	; 4
    29a6:	85 b9       	out	0x05, r24	; 5
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	87 b9       	out	0x07, r24	; 7
    29ac:	88 b9       	out	0x08, r24	; 8
    29ae:	8c e3       	ldi	r24, 0x3C	; 60
    29b0:	8d b9       	out	0x0d, r24	; 13
    29b2:	8b e0       	ldi	r24, 0x0B	; 11
    29b4:	8a b9       	out	0x0a, r24	; 10
    29b6:	8e e3       	ldi	r24, 0x3E	; 62
    29b8:	8e b9       	out	0x0e, r24	; 14
    29ba:	88 e7       	ldi	r24, 0x78	; 120
    29bc:	81 b9       	out	0x01, r24	; 1
    29be:	16 9a       	sbi	0x02, 6	; 2
    29c0:	08 95       	ret

000029c2 <nrk_setup_ports>:
    29c2:	0e 94 ce 14 	call	0x299c	; 0x299c <PORT_INIT>
    29c6:	80 e5       	ldi	r24, 0x50	; 80
    29c8:	8c bd       	out	0x2c, r24	; 44
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	8d bd       	out	0x2d, r24	; 45
    29ce:	08 95       	ret

000029d0 <nrk_gpio_set>:
    29d0:	8f 3f       	cpi	r24, 0xFF	; 255
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <nrk_gpio_set+0x6>
    29d4:	7f c0       	rjmp	.+254    	; 0x2ad4 <nrk_gpio_set+0x104>
    29d6:	48 2f       	mov	r20, r24
    29d8:	55 27       	eor	r21, r21
    29da:	9a 01       	movw	r18, r20
    29dc:	27 70       	andi	r18, 0x07	; 7
    29de:	30 70       	andi	r19, 0x00	; 0
    29e0:	22 30       	cpi	r18, 0x02	; 2
    29e2:	31 05       	cpc	r19, r1
    29e4:	a9 f1       	breq	.+106    	; 0x2a50 <nrk_gpio_set+0x80>
    29e6:	23 30       	cpi	r18, 0x03	; 3
    29e8:	31 05       	cpc	r19, r1
    29ea:	44 f4       	brge	.+16     	; 0x29fc <nrk_gpio_set+0x2c>
    29ec:	21 15       	cp	r18, r1
    29ee:	31 05       	cpc	r19, r1
    29f0:	89 f0       	breq	.+34     	; 0x2a14 <nrk_gpio_set+0x44>
    29f2:	21 30       	cpi	r18, 0x01	; 1
    29f4:	31 05       	cpc	r19, r1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <nrk_gpio_set+0x2a>
    29f8:	6d c0       	rjmp	.+218    	; 0x2ad4 <nrk_gpio_set+0x104>
    29fa:	1c c0       	rjmp	.+56     	; 0x2a34 <nrk_gpio_set+0x64>
    29fc:	24 30       	cpi	r18, 0x04	; 4
    29fe:	31 05       	cpc	r19, r1
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <nrk_gpio_set+0x34>
    2a02:	46 c0       	rjmp	.+140    	; 0x2a90 <nrk_gpio_set+0xc0>
    2a04:	24 30       	cpi	r18, 0x04	; 4
    2a06:	31 05       	cpc	r19, r1
    2a08:	9c f1       	brlt	.+102    	; 0x2a70 <nrk_gpio_set+0xa0>
    2a0a:	25 30       	cpi	r18, 0x05	; 5
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <nrk_gpio_set+0x42>
    2a10:	61 c0       	rjmp	.+194    	; 0x2ad4 <nrk_gpio_set+0x104>
    2a12:	4e c0       	rjmp	.+156    	; 0x2ab0 <nrk_gpio_set+0xe0>
    2a14:	22 b1       	in	r18, 0x02	; 2
    2a16:	a3 e0       	ldi	r26, 0x03	; 3
    2a18:	56 95       	lsr	r21
    2a1a:	47 95       	ror	r20
    2a1c:	aa 95       	dec	r26
    2a1e:	e1 f7       	brne	.-8      	; 0x2a18 <nrk_gpio_set+0x48>
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <nrk_gpio_set+0x5a>
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	4a 95       	dec	r20
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <nrk_gpio_set+0x56>
    2a2e:	28 2b       	or	r18, r24
    2a30:	22 b9       	out	0x02, r18	; 2
    2a32:	4d c0       	rjmp	.+154    	; 0x2ace <nrk_gpio_set+0xfe>
    2a34:	85 b1       	in	r24, 0x05	; 5
    2a36:	f3 e0       	ldi	r31, 0x03	; 3
    2a38:	56 95       	lsr	r21
    2a3a:	47 95       	ror	r20
    2a3c:	fa 95       	dec	r31
    2a3e:	e1 f7       	brne	.-8      	; 0x2a38 <nrk_gpio_set+0x68>
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <nrk_gpio_set+0x76>
    2a42:	22 0f       	add	r18, r18
    2a44:	33 1f       	adc	r19, r19
    2a46:	4a 95       	dec	r20
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <nrk_gpio_set+0x72>
    2a4a:	82 2b       	or	r24, r18
    2a4c:	85 b9       	out	0x05, r24	; 5
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <nrk_gpio_set+0xfe>
    2a50:	28 b1       	in	r18, 0x08	; 8
    2a52:	e3 e0       	ldi	r30, 0x03	; 3
    2a54:	56 95       	lsr	r21
    2a56:	47 95       	ror	r20
    2a58:	ea 95       	dec	r30
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <nrk_gpio_set+0x84>
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <nrk_gpio_set+0x96>
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	4a 95       	dec	r20
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <nrk_gpio_set+0x92>
    2a6a:	28 2b       	or	r18, r24
    2a6c:	28 b9       	out	0x08, r18	; 8
    2a6e:	2f c0       	rjmp	.+94     	; 0x2ace <nrk_gpio_set+0xfe>
    2a70:	2b b1       	in	r18, 0x0b	; 11
    2a72:	73 e0       	ldi	r23, 0x03	; 3
    2a74:	56 95       	lsr	r21
    2a76:	47 95       	ror	r20
    2a78:	7a 95       	dec	r23
    2a7a:	e1 f7       	brne	.-8      	; 0x2a74 <nrk_gpio_set+0xa4>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <nrk_gpio_set+0xb6>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	4a 95       	dec	r20
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <nrk_gpio_set+0xb2>
    2a8a:	28 2b       	or	r18, r24
    2a8c:	2b b9       	out	0x0b, r18	; 11
    2a8e:	1f c0       	rjmp	.+62     	; 0x2ace <nrk_gpio_set+0xfe>
    2a90:	2e b1       	in	r18, 0x0e	; 14
    2a92:	63 e0       	ldi	r22, 0x03	; 3
    2a94:	56 95       	lsr	r21
    2a96:	47 95       	ror	r20
    2a98:	6a 95       	dec	r22
    2a9a:	e1 f7       	brne	.-8      	; 0x2a94 <nrk_gpio_set+0xc4>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <nrk_gpio_set+0xd6>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	4a 95       	dec	r20
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <nrk_gpio_set+0xd2>
    2aaa:	28 2b       	or	r18, r24
    2aac:	2e b9       	out	0x0e, r18	; 14
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <nrk_gpio_set+0xfe>
    2ab0:	21 b3       	in	r18, 0x11	; 17
    2ab2:	33 e0       	ldi	r19, 0x03	; 3
    2ab4:	56 95       	lsr	r21
    2ab6:	47 95       	ror	r20
    2ab8:	3a 95       	dec	r19
    2aba:	e1 f7       	brne	.-8      	; 0x2ab4 <nrk_gpio_set+0xe4>
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <nrk_gpio_set+0xf6>
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	4a 95       	dec	r20
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <nrk_gpio_set+0xf2>
    2aca:	28 2b       	or	r18, r24
    2acc:	21 bb       	out	0x11, r18	; 17
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	08 95       	ret
    2ad4:	8f ef       	ldi	r24, 0xFF	; 255
    2ad6:	9f ef       	ldi	r25, 0xFF	; 255
    2ad8:	08 95       	ret

00002ada <nrk_gpio_clr>:
    2ada:	8f 3f       	cpi	r24, 0xFF	; 255
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <nrk_gpio_clr+0x6>
    2ade:	86 c0       	rjmp	.+268    	; 0x2bec <nrk_gpio_clr+0x112>
    2ae0:	48 2f       	mov	r20, r24
    2ae2:	55 27       	eor	r21, r21
    2ae4:	9a 01       	movw	r18, r20
    2ae6:	27 70       	andi	r18, 0x07	; 7
    2ae8:	30 70       	andi	r19, 0x00	; 0
    2aea:	22 30       	cpi	r18, 0x02	; 2
    2aec:	31 05       	cpc	r19, r1
    2aee:	c1 f1       	breq	.+112    	; 0x2b60 <nrk_gpio_clr+0x86>
    2af0:	23 30       	cpi	r18, 0x03	; 3
    2af2:	31 05       	cpc	r19, r1
    2af4:	44 f4       	brge	.+16     	; 0x2b06 <nrk_gpio_clr+0x2c>
    2af6:	21 15       	cp	r18, r1
    2af8:	31 05       	cpc	r19, r1
    2afa:	89 f0       	breq	.+34     	; 0x2b1e <nrk_gpio_clr+0x44>
    2afc:	21 30       	cpi	r18, 0x01	; 1
    2afe:	31 05       	cpc	r19, r1
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <nrk_gpio_clr+0x2a>
    2b02:	74 c0       	rjmp	.+232    	; 0x2bec <nrk_gpio_clr+0x112>
    2b04:	1d c0       	rjmp	.+58     	; 0x2b40 <nrk_gpio_clr+0x66>
    2b06:	24 30       	cpi	r18, 0x04	; 4
    2b08:	31 05       	cpc	r19, r1
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <nrk_gpio_clr+0x34>
    2b0c:	4b c0       	rjmp	.+150    	; 0x2ba4 <nrk_gpio_clr+0xca>
    2b0e:	24 30       	cpi	r18, 0x04	; 4
    2b10:	31 05       	cpc	r19, r1
    2b12:	bc f1       	brlt	.+110    	; 0x2b82 <nrk_gpio_clr+0xa8>
    2b14:	25 30       	cpi	r18, 0x05	; 5
    2b16:	31 05       	cpc	r19, r1
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <nrk_gpio_clr+0x42>
    2b1a:	68 c0       	rjmp	.+208    	; 0x2bec <nrk_gpio_clr+0x112>
    2b1c:	54 c0       	rjmp	.+168    	; 0x2bc6 <nrk_gpio_clr+0xec>
    2b1e:	22 b1       	in	r18, 0x02	; 2
    2b20:	73 e0       	ldi	r23, 0x03	; 3
    2b22:	56 95       	lsr	r21
    2b24:	47 95       	ror	r20
    2b26:	7a 95       	dec	r23
    2b28:	e1 f7       	brne	.-8      	; 0x2b22 <nrk_gpio_clr+0x48>
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <nrk_gpio_clr+0x5a>
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	4a 95       	dec	r20
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <nrk_gpio_clr+0x56>
    2b38:	80 95       	com	r24
    2b3a:	82 23       	and	r24, r18
    2b3c:	82 b9       	out	0x02, r24	; 2
    2b3e:	53 c0       	rjmp	.+166    	; 0x2be6 <nrk_gpio_clr+0x10c>
    2b40:	95 b1       	in	r25, 0x05	; 5
    2b42:	63 e0       	ldi	r22, 0x03	; 3
    2b44:	56 95       	lsr	r21
    2b46:	47 95       	ror	r20
    2b48:	6a 95       	dec	r22
    2b4a:	e1 f7       	brne	.-8      	; 0x2b44 <nrk_gpio_clr+0x6a>
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <nrk_gpio_clr+0x78>
    2b4e:	22 0f       	add	r18, r18
    2b50:	33 1f       	adc	r19, r19
    2b52:	4a 95       	dec	r20
    2b54:	e2 f7       	brpl	.-8      	; 0x2b4e <nrk_gpio_clr+0x74>
    2b56:	82 2f       	mov	r24, r18
    2b58:	80 95       	com	r24
    2b5a:	89 23       	and	r24, r25
    2b5c:	85 b9       	out	0x05, r24	; 5
    2b5e:	43 c0       	rjmp	.+134    	; 0x2be6 <nrk_gpio_clr+0x10c>
    2b60:	28 b1       	in	r18, 0x08	; 8
    2b62:	33 e0       	ldi	r19, 0x03	; 3
    2b64:	56 95       	lsr	r21
    2b66:	47 95       	ror	r20
    2b68:	3a 95       	dec	r19
    2b6a:	e1 f7       	brne	.-8      	; 0x2b64 <nrk_gpio_clr+0x8a>
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <nrk_gpio_clr+0x9c>
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	4a 95       	dec	r20
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <nrk_gpio_clr+0x98>
    2b7a:	80 95       	com	r24
    2b7c:	82 23       	and	r24, r18
    2b7e:	88 b9       	out	0x08, r24	; 8
    2b80:	32 c0       	rjmp	.+100    	; 0x2be6 <nrk_gpio_clr+0x10c>
    2b82:	2b b1       	in	r18, 0x0b	; 11
    2b84:	93 e0       	ldi	r25, 0x03	; 3
    2b86:	56 95       	lsr	r21
    2b88:	47 95       	ror	r20
    2b8a:	9a 95       	dec	r25
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <nrk_gpio_clr+0xac>
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <nrk_gpio_clr+0xbe>
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	4a 95       	dec	r20
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <nrk_gpio_clr+0xba>
    2b9c:	80 95       	com	r24
    2b9e:	82 23       	and	r24, r18
    2ba0:	8b b9       	out	0x0b, r24	; 11
    2ba2:	21 c0       	rjmp	.+66     	; 0x2be6 <nrk_gpio_clr+0x10c>
    2ba4:	2e b1       	in	r18, 0x0e	; 14
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	56 95       	lsr	r21
    2baa:	47 95       	ror	r20
    2bac:	8a 95       	dec	r24
    2bae:	e1 f7       	brne	.-8      	; 0x2ba8 <nrk_gpio_clr+0xce>
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <nrk_gpio_clr+0xe0>
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	4a 95       	dec	r20
    2bbc:	e2 f7       	brpl	.-8      	; 0x2bb6 <nrk_gpio_clr+0xdc>
    2bbe:	80 95       	com	r24
    2bc0:	82 23       	and	r24, r18
    2bc2:	8e b9       	out	0x0e, r24	; 14
    2bc4:	10 c0       	rjmp	.+32     	; 0x2be6 <nrk_gpio_clr+0x10c>
    2bc6:	21 b3       	in	r18, 0x11	; 17
    2bc8:	b3 e0       	ldi	r27, 0x03	; 3
    2bca:	56 95       	lsr	r21
    2bcc:	47 95       	ror	r20
    2bce:	ba 95       	dec	r27
    2bd0:	e1 f7       	brne	.-8      	; 0x2bca <nrk_gpio_clr+0xf0>
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <nrk_gpio_clr+0x102>
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	4a 95       	dec	r20
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <nrk_gpio_clr+0xfe>
    2be0:	80 95       	com	r24
    2be2:	82 23       	and	r24, r18
    2be4:	81 bb       	out	0x11, r24	; 17
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	08 95       	ret
    2bec:	8f ef       	ldi	r24, 0xFF	; 255
    2bee:	9f ef       	ldi	r25, 0xFF	; 255
    2bf0:	08 95       	ret

00002bf2 <nrk_gpio_get>:
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	a9 f1       	breq	.+106    	; 0x2c60 <nrk_gpio_get+0x6e>
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	33 27       	eor	r19, r19
    2bfa:	c9 01       	movw	r24, r18
    2bfc:	87 70       	andi	r24, 0x07	; 7
    2bfe:	90 70       	andi	r25, 0x00	; 0
    2c00:	82 30       	cpi	r24, 0x02	; 2
    2c02:	91 05       	cpc	r25, r1
    2c04:	a9 f0       	breq	.+42     	; 0x2c30 <nrk_gpio_get+0x3e>
    2c06:	83 30       	cpi	r24, 0x03	; 3
    2c08:	91 05       	cpc	r25, r1
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <nrk_gpio_get+0x24>
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <nrk_gpio_get+0x36>
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	31 f5       	brne	.+76     	; 0x2c60 <nrk_gpio_get+0x6e>
    2c14:	0b c0       	rjmp	.+22     	; 0x2c2c <nrk_gpio_get+0x3a>
    2c16:	84 30       	cpi	r24, 0x04	; 4
    2c18:	91 05       	cpc	r25, r1
    2c1a:	71 f0       	breq	.+28     	; 0x2c38 <nrk_gpio_get+0x46>
    2c1c:	84 30       	cpi	r24, 0x04	; 4
    2c1e:	91 05       	cpc	r25, r1
    2c20:	4c f0       	brlt	.+18     	; 0x2c34 <nrk_gpio_get+0x42>
    2c22:	05 97       	sbiw	r24, 0x05	; 5
    2c24:	e9 f4       	brne	.+58     	; 0x2c60 <nrk_gpio_get+0x6e>
    2c26:	0a c0       	rjmp	.+20     	; 0x2c3c <nrk_gpio_get+0x4a>
    2c28:	80 b1       	in	r24, 0x00	; 0
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <nrk_gpio_get+0x4c>
    2c2c:	83 b1       	in	r24, 0x03	; 3
    2c2e:	07 c0       	rjmp	.+14     	; 0x2c3e <nrk_gpio_get+0x4c>
    2c30:	86 b1       	in	r24, 0x06	; 6
    2c32:	05 c0       	rjmp	.+10     	; 0x2c3e <nrk_gpio_get+0x4c>
    2c34:	89 b1       	in	r24, 0x09	; 9
    2c36:	03 c0       	rjmp	.+6      	; 0x2c3e <nrk_gpio_get+0x4c>
    2c38:	8c b1       	in	r24, 0x0c	; 12
    2c3a:	01 c0       	rjmp	.+2      	; 0x2c3e <nrk_gpio_get+0x4c>
    2c3c:	8f b1       	in	r24, 0x0f	; 15
    2c3e:	99 27       	eor	r25, r25
    2c40:	e3 e0       	ldi	r30, 0x03	; 3
    2c42:	36 95       	lsr	r19
    2c44:	27 95       	ror	r18
    2c46:	ea 95       	dec	r30
    2c48:	e1 f7       	brne	.-8      	; 0x2c42 <nrk_gpio_get+0x50>
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <nrk_gpio_get+0x5e>
    2c4c:	95 95       	asr	r25
    2c4e:	87 95       	ror	r24
    2c50:	2a 95       	dec	r18
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <nrk_gpio_get+0x5a>
    2c54:	99 27       	eor	r25, r25
    2c56:	87 fd       	sbrc	r24, 7
    2c58:	90 95       	com	r25
    2c5a:	81 70       	andi	r24, 0x01	; 1
    2c5c:	90 70       	andi	r25, 0x00	; 0
    2c5e:	08 95       	ret
    2c60:	8f ef       	ldi	r24, 0xFF	; 255
    2c62:	9f ef       	ldi	r25, 0xFF	; 255
    2c64:	08 95       	ret

00002c66 <nrk_gpio_toggle>:
    2c66:	8f 3f       	cpi	r24, 0xFF	; 255
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <nrk_gpio_toggle+0x6>
    2c6a:	03 c1       	rjmp	.+518    	; 0x2e72 <nrk_gpio_toggle+0x20c>
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	33 27       	eor	r19, r19
    2c70:	a9 01       	movw	r20, r18
    2c72:	47 70       	andi	r20, 0x07	; 7
    2c74:	50 70       	andi	r21, 0x00	; 0
    2c76:	42 30       	cpi	r20, 0x02	; 2
    2c78:	51 05       	cpc	r21, r1
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <nrk_gpio_toggle+0x18>
    2c7c:	5c c0       	rjmp	.+184    	; 0x2d36 <nrk_gpio_toggle+0xd0>
    2c7e:	43 30       	cpi	r20, 0x03	; 3
    2c80:	51 05       	cpc	r21, r1
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <nrk_gpio_toggle+0x2e>
    2c84:	41 15       	cp	r20, r1
    2c86:	51 05       	cpc	r21, r1
    2c88:	91 f0       	breq	.+36     	; 0x2cae <nrk_gpio_toggle+0x48>
    2c8a:	41 30       	cpi	r20, 0x01	; 1
    2c8c:	51 05       	cpc	r21, r1
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <nrk_gpio_toggle+0x2c>
    2c90:	f0 c0       	rjmp	.+480    	; 0x2e72 <nrk_gpio_toggle+0x20c>
    2c92:	34 c0       	rjmp	.+104    	; 0x2cfc <nrk_gpio_toggle+0x96>
    2c94:	44 30       	cpi	r20, 0x04	; 4
    2c96:	51 05       	cpc	r21, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <nrk_gpio_toggle+0x36>
    2c9a:	9b c0       	rjmp	.+310    	; 0x2dd2 <nrk_gpio_toggle+0x16c>
    2c9c:	44 30       	cpi	r20, 0x04	; 4
    2c9e:	51 05       	cpc	r21, r1
    2ca0:	0c f4       	brge	.+2      	; 0x2ca4 <nrk_gpio_toggle+0x3e>
    2ca2:	70 c0       	rjmp	.+224    	; 0x2d84 <nrk_gpio_toggle+0x11e>
    2ca4:	45 30       	cpi	r20, 0x05	; 5
    2ca6:	51 05       	cpc	r21, r1
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <nrk_gpio_toggle+0x46>
    2caa:	e3 c0       	rjmp	.+454    	; 0x2e72 <nrk_gpio_toggle+0x20c>
    2cac:	b9 c0       	rjmp	.+370    	; 0x2e20 <nrk_gpio_toggle+0x1ba>
    2cae:	80 b1       	in	r24, 0x00	; 0
    2cb0:	a9 01       	movw	r20, r18
    2cb2:	73 e0       	ldi	r23, 0x03	; 3
    2cb4:	56 95       	lsr	r21
    2cb6:	47 95       	ror	r20
    2cb8:	7a 95       	dec	r23
    2cba:	e1 f7       	brne	.-8      	; 0x2cb4 <nrk_gpio_toggle+0x4e>
    2cbc:	99 27       	eor	r25, r25
    2cbe:	04 2e       	mov	r0, r20
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <nrk_gpio_toggle+0x60>
    2cc2:	95 95       	asr	r25
    2cc4:	87 95       	ror	r24
    2cc6:	0a 94       	dec	r0
    2cc8:	e2 f7       	brpl	.-8      	; 0x2cc2 <nrk_gpio_toggle+0x5c>
    2cca:	80 fd       	sbrc	r24, 0
    2ccc:	0b c0       	rjmp	.+22     	; 0x2ce4 <nrk_gpio_toggle+0x7e>
    2cce:	22 b1       	in	r18, 0x02	; 2
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <nrk_gpio_toggle+0x74>
    2cd6:	88 0f       	add	r24, r24
    2cd8:	99 1f       	adc	r25, r25
    2cda:	4a 95       	dec	r20
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <nrk_gpio_toggle+0x70>
    2cde:	28 2b       	or	r18, r24
    2ce0:	22 b9       	out	0x02, r18	; 2
    2ce2:	c4 c0       	rjmp	.+392    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2ce4:	22 b1       	in	r18, 0x02	; 2
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <nrk_gpio_toggle+0x8a>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	4a 95       	dec	r20
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <nrk_gpio_toggle+0x86>
    2cf4:	80 95       	com	r24
    2cf6:	82 23       	and	r24, r18
    2cf8:	82 b9       	out	0x02, r24	; 2
    2cfa:	b8 c0       	rjmp	.+368    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2cfc:	83 b1       	in	r24, 0x03	; 3
    2cfe:	63 e0       	ldi	r22, 0x03	; 3
    2d00:	36 95       	lsr	r19
    2d02:	27 95       	ror	r18
    2d04:	6a 95       	dec	r22
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <nrk_gpio_toggle+0x9a>
    2d08:	99 27       	eor	r25, r25
    2d0a:	02 2e       	mov	r0, r18
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <nrk_gpio_toggle+0xac>
    2d0e:	95 95       	asr	r25
    2d10:	87 95       	ror	r24
    2d12:	0a 94       	dec	r0
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <nrk_gpio_toggle+0xa8>
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <nrk_gpio_toggle+0xb6>
    2d18:	44 0f       	add	r20, r20
    2d1a:	55 1f       	adc	r21, r21
    2d1c:	2a 95       	dec	r18
    2d1e:	e2 f7       	brpl	.-8      	; 0x2d18 <nrk_gpio_toggle+0xb2>
    2d20:	80 fd       	sbrc	r24, 0
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <nrk_gpio_toggle+0xc4>
    2d24:	85 b1       	in	r24, 0x05	; 5
    2d26:	84 2b       	or	r24, r20
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <nrk_gpio_toggle+0xcc>
    2d2a:	95 b1       	in	r25, 0x05	; 5
    2d2c:	84 2f       	mov	r24, r20
    2d2e:	80 95       	com	r24
    2d30:	89 23       	and	r24, r25
    2d32:	85 b9       	out	0x05, r24	; 5
    2d34:	9b c0       	rjmp	.+310    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2d36:	86 b1       	in	r24, 0x06	; 6
    2d38:	a9 01       	movw	r20, r18
    2d3a:	93 e0       	ldi	r25, 0x03	; 3
    2d3c:	56 95       	lsr	r21
    2d3e:	47 95       	ror	r20
    2d40:	9a 95       	dec	r25
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <nrk_gpio_toggle+0xd6>
    2d44:	99 27       	eor	r25, r25
    2d46:	04 2e       	mov	r0, r20
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <nrk_gpio_toggle+0xe8>
    2d4a:	95 95       	asr	r25
    2d4c:	87 95       	ror	r24
    2d4e:	0a 94       	dec	r0
    2d50:	e2 f7       	brpl	.-8      	; 0x2d4a <nrk_gpio_toggle+0xe4>
    2d52:	80 fd       	sbrc	r24, 0
    2d54:	0b c0       	rjmp	.+22     	; 0x2d6c <nrk_gpio_toggle+0x106>
    2d56:	28 b1       	in	r18, 0x08	; 8
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <nrk_gpio_toggle+0xfc>
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	4a 95       	dec	r20
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <nrk_gpio_toggle+0xf8>
    2d66:	28 2b       	or	r18, r24
    2d68:	28 b9       	out	0x08, r18	; 8
    2d6a:	80 c0       	rjmp	.+256    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2d6c:	28 b1       	in	r18, 0x08	; 8
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <nrk_gpio_toggle+0x112>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	4a 95       	dec	r20
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <nrk_gpio_toggle+0x10e>
    2d7c:	80 95       	com	r24
    2d7e:	82 23       	and	r24, r18
    2d80:	88 b9       	out	0x08, r24	; 8
    2d82:	74 c0       	rjmp	.+232    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2d84:	89 b1       	in	r24, 0x09	; 9
    2d86:	a9 01       	movw	r20, r18
    2d88:	b3 e0       	ldi	r27, 0x03	; 3
    2d8a:	56 95       	lsr	r21
    2d8c:	47 95       	ror	r20
    2d8e:	ba 95       	dec	r27
    2d90:	e1 f7       	brne	.-8      	; 0x2d8a <nrk_gpio_toggle+0x124>
    2d92:	99 27       	eor	r25, r25
    2d94:	04 2e       	mov	r0, r20
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <nrk_gpio_toggle+0x136>
    2d98:	95 95       	asr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	0a 94       	dec	r0
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <nrk_gpio_toggle+0x132>
    2da0:	80 fd       	sbrc	r24, 0
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <nrk_gpio_toggle+0x154>
    2da4:	2b b1       	in	r18, 0x0b	; 11
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <nrk_gpio_toggle+0x14a>
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	4a 95       	dec	r20
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <nrk_gpio_toggle+0x146>
    2db4:	28 2b       	or	r18, r24
    2db6:	2b b9       	out	0x0b, r18	; 11
    2db8:	59 c0       	rjmp	.+178    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2dba:	2b b1       	in	r18, 0x0b	; 11
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <nrk_gpio_toggle+0x160>
    2dc2:	88 0f       	add	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	4a 95       	dec	r20
    2dc8:	e2 f7       	brpl	.-8      	; 0x2dc2 <nrk_gpio_toggle+0x15c>
    2dca:	80 95       	com	r24
    2dcc:	82 23       	and	r24, r18
    2dce:	8b b9       	out	0x0b, r24	; 11
    2dd0:	4d c0       	rjmp	.+154    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2dd2:	8c b1       	in	r24, 0x0c	; 12
    2dd4:	a9 01       	movw	r20, r18
    2dd6:	a3 e0       	ldi	r26, 0x03	; 3
    2dd8:	56 95       	lsr	r21
    2dda:	47 95       	ror	r20
    2ddc:	aa 95       	dec	r26
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <nrk_gpio_toggle+0x172>
    2de0:	99 27       	eor	r25, r25
    2de2:	04 2e       	mov	r0, r20
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <nrk_gpio_toggle+0x184>
    2de6:	95 95       	asr	r25
    2de8:	87 95       	ror	r24
    2dea:	0a 94       	dec	r0
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <nrk_gpio_toggle+0x180>
    2dee:	80 fd       	sbrc	r24, 0
    2df0:	0b c0       	rjmp	.+22     	; 0x2e08 <nrk_gpio_toggle+0x1a2>
    2df2:	2e b1       	in	r18, 0x0e	; 14
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <nrk_gpio_toggle+0x198>
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	4a 95       	dec	r20
    2e00:	e2 f7       	brpl	.-8      	; 0x2dfa <nrk_gpio_toggle+0x194>
    2e02:	28 2b       	or	r18, r24
    2e04:	2e b9       	out	0x0e, r18	; 14
    2e06:	32 c0       	rjmp	.+100    	; 0x2e6c <nrk_gpio_toggle+0x206>
    2e08:	2e b1       	in	r18, 0x0e	; 14
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <nrk_gpio_toggle+0x1ae>
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	4a 95       	dec	r20
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <nrk_gpio_toggle+0x1aa>
    2e18:	80 95       	com	r24
    2e1a:	82 23       	and	r24, r18
    2e1c:	8e b9       	out	0x0e, r24	; 14
    2e1e:	26 c0       	rjmp	.+76     	; 0x2e6c <nrk_gpio_toggle+0x206>
    2e20:	8f b1       	in	r24, 0x0f	; 15
    2e22:	a9 01       	movw	r20, r18
    2e24:	f3 e0       	ldi	r31, 0x03	; 3
    2e26:	56 95       	lsr	r21
    2e28:	47 95       	ror	r20
    2e2a:	fa 95       	dec	r31
    2e2c:	e1 f7       	brne	.-8      	; 0x2e26 <nrk_gpio_toggle+0x1c0>
    2e2e:	99 27       	eor	r25, r25
    2e30:	04 2e       	mov	r0, r20
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <nrk_gpio_toggle+0x1d2>
    2e34:	95 95       	asr	r25
    2e36:	87 95       	ror	r24
    2e38:	0a 94       	dec	r0
    2e3a:	e2 f7       	brpl	.-8      	; 0x2e34 <nrk_gpio_toggle+0x1ce>
    2e3c:	80 fd       	sbrc	r24, 0
    2e3e:	0b c0       	rjmp	.+22     	; 0x2e56 <nrk_gpio_toggle+0x1f0>
    2e40:	21 b3       	in	r18, 0x11	; 17
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <nrk_gpio_toggle+0x1e6>
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	4a 95       	dec	r20
    2e4e:	e2 f7       	brpl	.-8      	; 0x2e48 <nrk_gpio_toggle+0x1e2>
    2e50:	28 2b       	or	r18, r24
    2e52:	21 bb       	out	0x11, r18	; 17
    2e54:	0b c0       	rjmp	.+22     	; 0x2e6c <nrk_gpio_toggle+0x206>
    2e56:	21 b3       	in	r18, 0x11	; 17
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <nrk_gpio_toggle+0x1fc>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	4a 95       	dec	r20
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <nrk_gpio_toggle+0x1f8>
    2e66:	80 95       	com	r24
    2e68:	82 23       	and	r24, r18
    2e6a:	81 bb       	out	0x11, r24	; 17
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	08 95       	ret
    2e72:	8f ef       	ldi	r24, 0xFF	; 255
    2e74:	9f ef       	ldi	r25, 0xFF	; 255
    2e76:	08 95       	ret

00002e78 <nrk_gpio_direction>:
    2e78:	8f 3f       	cpi	r24, 0xFF	; 255
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <nrk_gpio_direction+0x6>
    2e7c:	1b c1       	rjmp	.+566    	; 0x30b4 <nrk_gpio_direction+0x23c>
    2e7e:	48 2f       	mov	r20, r24
    2e80:	55 27       	eor	r21, r21
    2e82:	66 23       	and	r22, r22
    2e84:	09 f0       	breq	.+2      	; 0x2e88 <nrk_gpio_direction+0x10>
    2e86:	99 c0       	rjmp	.+306    	; 0x2fba <nrk_gpio_direction+0x142>
    2e88:	ca 01       	movw	r24, r20
    2e8a:	87 70       	andi	r24, 0x07	; 7
    2e8c:	90 70       	andi	r25, 0x00	; 0
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	91 05       	cpc	r25, r1
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <nrk_gpio_direction+0x1e>
    2e94:	3e c0       	rjmp	.+124    	; 0x2f12 <nrk_gpio_direction+0x9a>
    2e96:	83 30       	cpi	r24, 0x03	; 3
    2e98:	91 05       	cpc	r25, r1
    2e9a:	3c f4       	brge	.+14     	; 0x2eaa <nrk_gpio_direction+0x32>
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	89 f0       	breq	.+34     	; 0x2ec2 <nrk_gpio_direction+0x4a>
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <nrk_gpio_direction+0x30>
    2ea6:	06 c1       	rjmp	.+524    	; 0x30b4 <nrk_gpio_direction+0x23c>
    2ea8:	21 c0       	rjmp	.+66     	; 0x2eec <nrk_gpio_direction+0x74>
    2eaa:	84 30       	cpi	r24, 0x04	; 4
    2eac:	91 05       	cpc	r25, r1
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <nrk_gpio_direction+0x3a>
    2eb0:	5a c0       	rjmp	.+180    	; 0x2f66 <nrk_gpio_direction+0xee>
    2eb2:	84 30       	cpi	r24, 0x04	; 4
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	0c f4       	brge	.+2      	; 0x2eba <nrk_gpio_direction+0x42>
    2eb8:	41 c0       	rjmp	.+130    	; 0x2f3c <nrk_gpio_direction+0xc4>
    2eba:	05 97       	sbiw	r24, 0x05	; 5
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <nrk_gpio_direction+0x48>
    2ebe:	fa c0       	rjmp	.+500    	; 0x30b4 <nrk_gpio_direction+0x23c>
    2ec0:	67 c0       	rjmp	.+206    	; 0x2f90 <nrk_gpio_direction+0x118>
    2ec2:	31 b1       	in	r19, 0x01	; 1
    2ec4:	b3 e0       	ldi	r27, 0x03	; 3
    2ec6:	56 95       	lsr	r21
    2ec8:	47 95       	ror	r20
    2eca:	ba 95       	dec	r27
    2ecc:	e1 f7       	brne	.-8      	; 0x2ec6 <nrk_gpio_direction+0x4e>
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <nrk_gpio_direction+0x60>
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	4a 95       	dec	r20
    2eda:	e2 f7       	brpl	.-8      	; 0x2ed4 <nrk_gpio_direction+0x5c>
    2edc:	28 2f       	mov	r18, r24
    2ede:	20 95       	com	r18
    2ee0:	23 23       	and	r18, r19
    2ee2:	21 b9       	out	0x01, r18	; 1
    2ee4:	22 b1       	in	r18, 0x02	; 2
    2ee6:	82 2b       	or	r24, r18
    2ee8:	82 b9       	out	0x02, r24	; 2
    2eea:	e1 c0       	rjmp	.+450    	; 0x30ae <nrk_gpio_direction+0x236>
    2eec:	24 b1       	in	r18, 0x04	; 4
    2eee:	a3 e0       	ldi	r26, 0x03	; 3
    2ef0:	56 95       	lsr	r21
    2ef2:	47 95       	ror	r20
    2ef4:	aa 95       	dec	r26
    2ef6:	e1 f7       	brne	.-8      	; 0x2ef0 <nrk_gpio_direction+0x78>
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <nrk_gpio_direction+0x86>
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	4a 95       	dec	r20
    2f00:	e2 f7       	brpl	.-8      	; 0x2efa <nrk_gpio_direction+0x82>
    2f02:	98 2f       	mov	r25, r24
    2f04:	80 95       	com	r24
    2f06:	82 23       	and	r24, r18
    2f08:	84 b9       	out	0x04, r24	; 4
    2f0a:	85 b1       	in	r24, 0x05	; 5
    2f0c:	98 2b       	or	r25, r24
    2f0e:	95 b9       	out	0x05, r25	; 5
    2f10:	ce c0       	rjmp	.+412    	; 0x30ae <nrk_gpio_direction+0x236>
    2f12:	37 b1       	in	r19, 0x07	; 7
    2f14:	f3 e0       	ldi	r31, 0x03	; 3
    2f16:	56 95       	lsr	r21
    2f18:	47 95       	ror	r20
    2f1a:	fa 95       	dec	r31
    2f1c:	e1 f7       	brne	.-8      	; 0x2f16 <nrk_gpio_direction+0x9e>
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <nrk_gpio_direction+0xb0>
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	4a 95       	dec	r20
    2f2a:	e2 f7       	brpl	.-8      	; 0x2f24 <nrk_gpio_direction+0xac>
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	20 95       	com	r18
    2f30:	23 23       	and	r18, r19
    2f32:	27 b9       	out	0x07, r18	; 7
    2f34:	28 b1       	in	r18, 0x08	; 8
    2f36:	82 2b       	or	r24, r18
    2f38:	88 b9       	out	0x08, r24	; 8
    2f3a:	b9 c0       	rjmp	.+370    	; 0x30ae <nrk_gpio_direction+0x236>
    2f3c:	3a b1       	in	r19, 0x0a	; 10
    2f3e:	e3 e0       	ldi	r30, 0x03	; 3
    2f40:	56 95       	lsr	r21
    2f42:	47 95       	ror	r20
    2f44:	ea 95       	dec	r30
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <nrk_gpio_direction+0xc8>
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <nrk_gpio_direction+0xda>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	4a 95       	dec	r20
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <nrk_gpio_direction+0xd6>
    2f56:	28 2f       	mov	r18, r24
    2f58:	20 95       	com	r18
    2f5a:	23 23       	and	r18, r19
    2f5c:	2a b9       	out	0x0a, r18	; 10
    2f5e:	2b b1       	in	r18, 0x0b	; 11
    2f60:	82 2b       	or	r24, r18
    2f62:	8b b9       	out	0x0b, r24	; 11
    2f64:	a4 c0       	rjmp	.+328    	; 0x30ae <nrk_gpio_direction+0x236>
    2f66:	3d b1       	in	r19, 0x0d	; 13
    2f68:	73 e0       	ldi	r23, 0x03	; 3
    2f6a:	56 95       	lsr	r21
    2f6c:	47 95       	ror	r20
    2f6e:	7a 95       	dec	r23
    2f70:	e1 f7       	brne	.-8      	; 0x2f6a <nrk_gpio_direction+0xf2>
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <nrk_gpio_direction+0x104>
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	4a 95       	dec	r20
    2f7e:	e2 f7       	brpl	.-8      	; 0x2f78 <nrk_gpio_direction+0x100>
    2f80:	28 2f       	mov	r18, r24
    2f82:	20 95       	com	r18
    2f84:	23 23       	and	r18, r19
    2f86:	2d b9       	out	0x0d, r18	; 13
    2f88:	2e b1       	in	r18, 0x0e	; 14
    2f8a:	82 2b       	or	r24, r18
    2f8c:	8e b9       	out	0x0e, r24	; 14
    2f8e:	8f c0       	rjmp	.+286    	; 0x30ae <nrk_gpio_direction+0x236>
    2f90:	30 b3       	in	r19, 0x10	; 16
    2f92:	63 e0       	ldi	r22, 0x03	; 3
    2f94:	56 95       	lsr	r21
    2f96:	47 95       	ror	r20
    2f98:	6a 95       	dec	r22
    2f9a:	e1 f7       	brne	.-8      	; 0x2f94 <nrk_gpio_direction+0x11c>
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <nrk_gpio_direction+0x12e>
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	4a 95       	dec	r20
    2fa8:	e2 f7       	brpl	.-8      	; 0x2fa2 <nrk_gpio_direction+0x12a>
    2faa:	28 2f       	mov	r18, r24
    2fac:	20 95       	com	r18
    2fae:	23 23       	and	r18, r19
    2fb0:	20 bb       	out	0x10, r18	; 16
    2fb2:	21 b3       	in	r18, 0x11	; 17
    2fb4:	82 2b       	or	r24, r18
    2fb6:	81 bb       	out	0x11, r24	; 17
    2fb8:	7a c0       	rjmp	.+244    	; 0x30ae <nrk_gpio_direction+0x236>
    2fba:	9a 01       	movw	r18, r20
    2fbc:	27 70       	andi	r18, 0x07	; 7
    2fbe:	30 70       	andi	r19, 0x00	; 0
    2fc0:	22 30       	cpi	r18, 0x02	; 2
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	a9 f1       	breq	.+106    	; 0x3030 <nrk_gpio_direction+0x1b8>
    2fc6:	23 30       	cpi	r18, 0x03	; 3
    2fc8:	31 05       	cpc	r19, r1
    2fca:	44 f4       	brge	.+16     	; 0x2fdc <nrk_gpio_direction+0x164>
    2fcc:	21 15       	cp	r18, r1
    2fce:	31 05       	cpc	r19, r1
    2fd0:	89 f0       	breq	.+34     	; 0x2ff4 <nrk_gpio_direction+0x17c>
    2fd2:	21 30       	cpi	r18, 0x01	; 1
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <nrk_gpio_direction+0x162>
    2fd8:	6d c0       	rjmp	.+218    	; 0x30b4 <nrk_gpio_direction+0x23c>
    2fda:	1c c0       	rjmp	.+56     	; 0x3014 <nrk_gpio_direction+0x19c>
    2fdc:	24 30       	cpi	r18, 0x04	; 4
    2fde:	31 05       	cpc	r19, r1
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <nrk_gpio_direction+0x16c>
    2fe2:	46 c0       	rjmp	.+140    	; 0x3070 <nrk_gpio_direction+0x1f8>
    2fe4:	24 30       	cpi	r18, 0x04	; 4
    2fe6:	31 05       	cpc	r19, r1
    2fe8:	9c f1       	brlt	.+102    	; 0x3050 <nrk_gpio_direction+0x1d8>
    2fea:	25 30       	cpi	r18, 0x05	; 5
    2fec:	31 05       	cpc	r19, r1
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <nrk_gpio_direction+0x17a>
    2ff0:	61 c0       	rjmp	.+194    	; 0x30b4 <nrk_gpio_direction+0x23c>
    2ff2:	4e c0       	rjmp	.+156    	; 0x3090 <nrk_gpio_direction+0x218>
    2ff4:	21 b1       	in	r18, 0x01	; 1
    2ff6:	33 e0       	ldi	r19, 0x03	; 3
    2ff8:	56 95       	lsr	r21
    2ffa:	47 95       	ror	r20
    2ffc:	3a 95       	dec	r19
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <nrk_gpio_direction+0x180>
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <nrk_gpio_direction+0x192>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	4a 95       	dec	r20
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <nrk_gpio_direction+0x18e>
    300e:	28 2b       	or	r18, r24
    3010:	21 b9       	out	0x01, r18	; 1
    3012:	4d c0       	rjmp	.+154    	; 0x30ae <nrk_gpio_direction+0x236>
    3014:	84 b1       	in	r24, 0x04	; 4
    3016:	93 e0       	ldi	r25, 0x03	; 3
    3018:	56 95       	lsr	r21
    301a:	47 95       	ror	r20
    301c:	9a 95       	dec	r25
    301e:	e1 f7       	brne	.-8      	; 0x3018 <nrk_gpio_direction+0x1a0>
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <nrk_gpio_direction+0x1ae>
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	4a 95       	dec	r20
    3028:	e2 f7       	brpl	.-8      	; 0x3022 <nrk_gpio_direction+0x1aa>
    302a:	82 2b       	or	r24, r18
    302c:	84 b9       	out	0x04, r24	; 4
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <nrk_gpio_direction+0x236>
    3030:	27 b1       	in	r18, 0x07	; 7
    3032:	b3 e0       	ldi	r27, 0x03	; 3
    3034:	56 95       	lsr	r21
    3036:	47 95       	ror	r20
    3038:	ba 95       	dec	r27
    303a:	e1 f7       	brne	.-8      	; 0x3034 <nrk_gpio_direction+0x1bc>
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <nrk_gpio_direction+0x1ce>
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	4a 95       	dec	r20
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <nrk_gpio_direction+0x1ca>
    304a:	28 2b       	or	r18, r24
    304c:	27 b9       	out	0x07, r18	; 7
    304e:	2f c0       	rjmp	.+94     	; 0x30ae <nrk_gpio_direction+0x236>
    3050:	2a b1       	in	r18, 0x0a	; 10
    3052:	a3 e0       	ldi	r26, 0x03	; 3
    3054:	56 95       	lsr	r21
    3056:	47 95       	ror	r20
    3058:	aa 95       	dec	r26
    305a:	e1 f7       	brne	.-8      	; 0x3054 <nrk_gpio_direction+0x1dc>
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <nrk_gpio_direction+0x1ee>
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	4a 95       	dec	r20
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <nrk_gpio_direction+0x1ea>
    306a:	28 2b       	or	r18, r24
    306c:	2a b9       	out	0x0a, r18	; 10
    306e:	1f c0       	rjmp	.+62     	; 0x30ae <nrk_gpio_direction+0x236>
    3070:	2d b1       	in	r18, 0x0d	; 13
    3072:	f3 e0       	ldi	r31, 0x03	; 3
    3074:	56 95       	lsr	r21
    3076:	47 95       	ror	r20
    3078:	fa 95       	dec	r31
    307a:	e1 f7       	brne	.-8      	; 0x3074 <nrk_gpio_direction+0x1fc>
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <nrk_gpio_direction+0x20e>
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	4a 95       	dec	r20
    3088:	e2 f7       	brpl	.-8      	; 0x3082 <nrk_gpio_direction+0x20a>
    308a:	28 2b       	or	r18, r24
    308c:	2d b9       	out	0x0d, r18	; 13
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <nrk_gpio_direction+0x236>
    3090:	20 b3       	in	r18, 0x10	; 16
    3092:	e3 e0       	ldi	r30, 0x03	; 3
    3094:	56 95       	lsr	r21
    3096:	47 95       	ror	r20
    3098:	ea 95       	dec	r30
    309a:	e1 f7       	brne	.-8      	; 0x3094 <nrk_gpio_direction+0x21c>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <nrk_gpio_direction+0x22e>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	4a 95       	dec	r20
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <nrk_gpio_direction+0x22a>
    30aa:	28 2b       	or	r18, r24
    30ac:	20 bb       	out	0x10, r18	; 16
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	08 95       	ret
    30b4:	8f ef       	ldi	r24, 0xFF	; 255
    30b6:	9f ef       	ldi	r25, 0xFF	; 255
    30b8:	08 95       	ret

000030ba <nrk_get_button>:
    30ba:	88 23       	and	r24, r24
    30bc:	19 f0       	breq	.+6      	; 0x30c4 <nrk_get_button+0xa>
    30be:	8f ef       	ldi	r24, 0xFF	; 255
    30c0:	9f ef       	ldi	r25, 0xFF	; 255
    30c2:	08 95       	ret
    30c4:	80 b1       	in	r24, 0x00	; 0
    30c6:	99 27       	eor	r25, r25
    30c8:	87 fd       	sbrc	r24, 7
    30ca:	90 95       	com	r25
    30cc:	80 95       	com	r24
    30ce:	90 95       	com	r25
    30d0:	88 27       	eor	r24, r24
    30d2:	99 0f       	add	r25, r25
    30d4:	88 1f       	adc	r24, r24
    30d6:	99 27       	eor	r25, r25
    30d8:	08 95       	ret

000030da <nrk_led_toggle>:
    30da:	00 97       	sbiw	r24, 0x00	; 0
    30dc:	11 f4       	brne	.+4      	; 0x30e2 <nrk_led_toggle+0x8>
    30de:	84 e1       	ldi	r24, 0x14	; 20
    30e0:	09 c0       	rjmp	.+18     	; 0x30f4 <nrk_led_toggle+0x1a>
    30e2:	81 30       	cpi	r24, 0x01	; 1
    30e4:	91 05       	cpc	r25, r1
    30e6:	11 f4       	brne	.+4      	; 0x30ec <nrk_led_toggle+0x12>
    30e8:	8c e1       	ldi	r24, 0x1C	; 28
    30ea:	04 c0       	rjmp	.+8      	; 0x30f4 <nrk_led_toggle+0x1a>
    30ec:	82 30       	cpi	r24, 0x02	; 2
    30ee:	91 05       	cpc	r25, r1
    30f0:	31 f4       	brne	.+12     	; 0x30fe <nrk_led_toggle+0x24>
    30f2:	84 e2       	ldi	r24, 0x24	; 36
    30f4:	0e 94 33 16 	call	0x2c66	; 0x2c66 <nrk_gpio_toggle>
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	08 95       	ret
    30fe:	03 97       	sbiw	r24, 0x03	; 3
    3100:	19 f0       	breq	.+6      	; 0x3108 <nrk_led_toggle+0x2e>
    3102:	8f ef       	ldi	r24, 0xFF	; 255
    3104:	9f ef       	ldi	r25, 0xFF	; 255
    3106:	08 95       	ret
    3108:	8c e2       	ldi	r24, 0x2C	; 44
    310a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <nrk_gpio_toggle>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	08 95       	ret

00003114 <nrk_led_clr>:
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	11 f4       	brne	.+4      	; 0x311c <nrk_led_clr+0x8>
    3118:	84 e1       	ldi	r24, 0x14	; 20
    311a:	09 c0       	rjmp	.+18     	; 0x312e <nrk_led_clr+0x1a>
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	91 05       	cpc	r25, r1
    3120:	11 f4       	brne	.+4      	; 0x3126 <nrk_led_clr+0x12>
    3122:	8c e1       	ldi	r24, 0x1C	; 28
    3124:	04 c0       	rjmp	.+8      	; 0x312e <nrk_led_clr+0x1a>
    3126:	82 30       	cpi	r24, 0x02	; 2
    3128:	91 05       	cpc	r25, r1
    312a:	31 f4       	brne	.+12     	; 0x3138 <nrk_led_clr+0x24>
    312c:	84 e2       	ldi	r24, 0x24	; 36
    312e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <nrk_gpio_set>
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	08 95       	ret
    3138:	03 97       	sbiw	r24, 0x03	; 3
    313a:	19 f0       	breq	.+6      	; 0x3142 <nrk_led_clr+0x2e>
    313c:	8f ef       	ldi	r24, 0xFF	; 255
    313e:	9f ef       	ldi	r25, 0xFF	; 255
    3140:	08 95       	ret
    3142:	8c e2       	ldi	r24, 0x2C	; 44
    3144:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <nrk_gpio_set>
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	08 95       	ret

0000314e <nrk_led_set>:
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	11 f4       	brne	.+4      	; 0x3156 <nrk_led_set+0x8>
    3152:	84 e1       	ldi	r24, 0x14	; 20
    3154:	09 c0       	rjmp	.+18     	; 0x3168 <nrk_led_set+0x1a>
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	91 05       	cpc	r25, r1
    315a:	11 f4       	brne	.+4      	; 0x3160 <nrk_led_set+0x12>
    315c:	8c e1       	ldi	r24, 0x1C	; 28
    315e:	04 c0       	rjmp	.+8      	; 0x3168 <nrk_led_set+0x1a>
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	91 05       	cpc	r25, r1
    3164:	31 f4       	brne	.+12     	; 0x3172 <nrk_led_set+0x24>
    3166:	84 e2       	ldi	r24, 0x24	; 36
    3168:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_gpio_clr>
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	08 95       	ret
    3172:	03 97       	sbiw	r24, 0x03	; 3
    3174:	19 f0       	breq	.+6      	; 0x317c <nrk_led_set+0x2e>
    3176:	8f ef       	ldi	r24, 0xFF	; 255
    3178:	9f ef       	ldi	r25, 0xFF	; 255
    317a:	08 95       	ret
    317c:	8c e2       	ldi	r24, 0x2C	; 44
    317e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_gpio_clr>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	08 95       	ret

00003188 <nrk_gpio_pullups>:
    3188:	88 23       	and	r24, r24
    318a:	19 f0       	breq	.+6      	; 0x3192 <nrk_gpio_pullups+0xa>
    318c:	85 b7       	in	r24, 0x35	; 53
    318e:	8f 7e       	andi	r24, 0xEF	; 239
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <nrk_gpio_pullups+0xe>
    3192:	85 b7       	in	r24, 0x35	; 53
    3194:	80 61       	ori	r24, 0x10	; 16
    3196:	85 bf       	out	0x35, r24	; 53
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	08 95       	ret

0000319e <putc0>:
    319e:	98 2f       	mov	r25, r24
    31a0:	80 91 c0 00 	lds	r24, 0x00C0
    31a4:	85 ff       	sbrs	r24, 5
    31a6:	fc cf       	rjmp	.-8      	; 0x31a0 <putc0+0x2>
    31a8:	80 91 c0 00 	lds	r24, 0x00C0
    31ac:	8f 7d       	andi	r24, 0xDF	; 223
    31ae:	80 93 c0 00 	sts	0x00C0, r24
    31b2:	90 93 c6 00 	sts	0x00C6, r25
    31b6:	08 95       	ret

000031b8 <putc1>:
    31b8:	98 2f       	mov	r25, r24
    31ba:	80 91 c8 00 	lds	r24, 0x00C8
    31be:	85 ff       	sbrs	r24, 5
    31c0:	fc cf       	rjmp	.-8      	; 0x31ba <putc1+0x2>
    31c2:	90 93 ce 00 	sts	0x00CE, r25
    31c6:	08 95       	ret

000031c8 <setup_uart0>:
    31c8:	29 2f       	mov	r18, r25
    31ca:	33 27       	eor	r19, r19
    31cc:	20 93 c5 00 	sts	0x00C5, r18
    31d0:	80 93 c4 00 	sts	0x00C4, r24
    31d4:	86 e0       	ldi	r24, 0x06	; 6
    31d6:	80 93 c2 00 	sts	0x00C2, r24
    31da:	e1 ec       	ldi	r30, 0xC1	; 193
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	8b 7f       	andi	r24, 0xFB	; 251
    31e2:	80 83       	st	Z, r24
    31e4:	a0 ec       	ldi	r26, 0xC0	; 192
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	8c 91       	ld	r24, X
    31ea:	82 60       	ori	r24, 0x02	; 2
    31ec:	8c 93       	st	X, r24
    31ee:	80 81       	ld	r24, Z
    31f0:	88 61       	ori	r24, 0x18	; 24
    31f2:	80 83       	st	Z, r24
    31f4:	08 95       	ret

000031f6 <setup_uart1>:
    31f6:	29 2f       	mov	r18, r25
    31f8:	33 27       	eor	r19, r19
    31fa:	20 93 cd 00 	sts	0x00CD, r18
    31fe:	80 93 cc 00 	sts	0x00CC, r24
    3202:	86 e0       	ldi	r24, 0x06	; 6
    3204:	80 93 ca 00 	sts	0x00CA, r24
    3208:	e9 ec       	ldi	r30, 0xC9	; 201
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	8b 7f       	andi	r24, 0xFB	; 251
    3210:	80 83       	st	Z, r24
    3212:	a8 ec       	ldi	r26, 0xC8	; 200
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	8c 91       	ld	r24, X
    3218:	82 60       	ori	r24, 0x02	; 2
    321a:	8c 93       	st	X, r24
    321c:	80 81       	ld	r24, Z
    321e:	88 61       	ori	r24, 0x18	; 24
    3220:	80 83       	st	Z, r24
    3222:	08 95       	ret

00003224 <getc0>:
    3224:	80 91 c0 00 	lds	r24, 0x00C0
    3228:	87 ff       	sbrs	r24, 7
    322a:	fc cf       	rjmp	.-8      	; 0x3224 <getc0>
    322c:	80 91 c0 00 	lds	r24, 0x00C0
    3230:	8f 77       	andi	r24, 0x7F	; 127
    3232:	80 93 c0 00 	sts	0x00C0, r24
    3236:	80 91 c6 00 	lds	r24, 0x00C6
    323a:	99 27       	eor	r25, r25
    323c:	08 95       	ret

0000323e <nrk_setup_uart>:
    323e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <setup_uart1>
    3242:	6e e8       	ldi	r22, 0x8E	; 142
    3244:	74 e1       	ldi	r23, 0x14	; 20
    3246:	8c ed       	ldi	r24, 0xDC	; 220
    3248:	98 e1       	ldi	r25, 0x18	; 24
    324a:	0e 94 43 38 	call	0x7086	; 0x7086 <fdevopen>
    324e:	90 93 ff 06 	sts	0x06FF, r25
    3252:	80 93 fe 06 	sts	0x06FE, r24
    3256:	6e e8       	ldi	r22, 0x8E	; 142
    3258:	74 e1       	ldi	r23, 0x14	; 20
    325a:	8c ed       	ldi	r24, 0xDC	; 220
    325c:	98 e1       	ldi	r25, 0x18	; 24
    325e:	0e 94 43 38 	call	0x7086	; 0x7086 <fdevopen>
    3262:	90 93 fd 06 	sts	0x06FD, r25
    3266:	80 93 fc 06 	sts	0x06FC, r24
    326a:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <nrk_signal_create>
    326e:	80 93 65 04 	sts	0x0465, r24
    3272:	8f 3f       	cpi	r24, 0xFF	; 255
    3274:	19 f4       	brne	.+6      	; 0x327c <nrk_setup_uart+0x3e>
    3276:	8e e0       	ldi	r24, 0x0E	; 14
    3278:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
    327c:	10 92 53 04 	sts	0x0453, r1
    3280:	10 92 54 04 	sts	0x0454, r1
    3284:	80 91 c9 00 	lds	r24, 0x00C9
    3288:	80 68       	ori	r24, 0x80	; 128
    328a:	80 93 c9 00 	sts	0x00C9, r24
    328e:	08 95       	ret

00003290 <nrk_uart_rx_signal_get>:
    3290:	80 91 65 04 	lds	r24, 0x0465
    3294:	8f 3f       	cpi	r24, 0xFF	; 255
    3296:	19 f4       	brne	.+6      	; 0x329e <nrk_uart_rx_signal_get+0xe>
    3298:	8e e0       	ldi	r24, 0x0E	; 14
    329a:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
    329e:	80 91 65 04 	lds	r24, 0x0465
    32a2:	99 27       	eor	r25, r25
    32a4:	87 fd       	sbrc	r24, 7
    32a6:	90 95       	com	r25
    32a8:	08 95       	ret

000032aa <nrk_kprintf>:
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	ec 01       	movw	r28, r24
    32b0:	07 c0       	rjmp	.+14     	; 0x32c0 <nrk_kprintf+0x16>
    32b2:	60 91 fe 06 	lds	r22, 0x06FE
    32b6:	70 91 ff 06 	lds	r23, 0x06FF
    32ba:	99 27       	eor	r25, r25
    32bc:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    32c0:	fe 01       	movw	r30, r28
    32c2:	21 96       	adiw	r28, 0x01	; 1
    32c4:	84 91       	lpm	r24, Z
    32c6:	88 23       	and	r24, r24
    32c8:	a1 f7       	brne	.-24     	; 0x32b2 <nrk_kprintf+0x8>
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <__vector_36>:

    32d0:	1f 92       	push	r1
    32d2:	0f 92       	push	r0
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	0f 92       	push	r0
    32d8:	11 24       	eor	r1, r1
    32da:	2f 93       	push	r18
    32dc:	3f 93       	push	r19
    32de:	4f 93       	push	r20
    32e0:	5f 93       	push	r21
    32e2:	6f 93       	push	r22
    32e4:	7f 93       	push	r23
    32e6:	8f 93       	push	r24
    32e8:	9f 93       	push	r25
    32ea:	af 93       	push	r26
    32ec:	bf 93       	push	r27
    32ee:	ef 93       	push	r30
    32f0:	ff 93       	push	r31
    32f2:	80 91 c9 00 	lds	r24, 0x00C9
    32f6:	8f 77       	andi	r24, 0x7F	; 127
    32f8:	80 93 c9 00 	sts	0x00C9, r24
    32fc:	80 91 c8 00 	lds	r24, 0x00C8
    3300:	87 ff       	sbrs	r24, 7
    3302:	fc cf       	rjmp	.-8      	; 0x32fc <__vector_36+0x2c>
    3304:	80 91 c8 00 	lds	r24, 0x00C8
    3308:	8f 77       	andi	r24, 0x7F	; 127
    330a:	80 93 c8 00 	sts	0x00C8, r24
    330e:	90 91 ce 00 	lds	r25, 0x00CE
    3312:	80 91 54 04 	lds	r24, 0x0454
    3316:	e8 2f       	mov	r30, r24
    3318:	ff 27       	eor	r31, r31
    331a:	eb 5a       	subi	r30, 0xAB	; 171
    331c:	fb 4f       	sbci	r31, 0xFB	; 251
    331e:	90 83       	st	Z, r25
    3320:	8f 5f       	subi	r24, 0xFF	; 255
    3322:	80 93 54 04 	sts	0x0454, r24
    3326:	80 31       	cpi	r24, 0x10	; 16
    3328:	11 f4       	brne	.+4      	; 0x332e <__vector_36+0x5e>
    332a:	10 92 54 04 	sts	0x0454, r1
    332e:	80 91 65 04 	lds	r24, 0x0465
    3332:	0e 94 1f 21 	call	0x423e	; 0x423e <nrk_event_signal>
    3336:	80 91 c8 00 	lds	r24, 0x00C8
    333a:	8f 77       	andi	r24, 0x7F	; 127
    333c:	80 93 c8 00 	sts	0x00C8, r24
    3340:	80 91 c9 00 	lds	r24, 0x00C9
    3344:	80 68       	ori	r24, 0x80	; 128
    3346:	80 93 c9 00 	sts	0x00C9, r24
    334a:	ff 91       	pop	r31
    334c:	ef 91       	pop	r30
    334e:	bf 91       	pop	r27
    3350:	af 91       	pop	r26
    3352:	9f 91       	pop	r25
    3354:	8f 91       	pop	r24
    3356:	7f 91       	pop	r23
    3358:	6f 91       	pop	r22
    335a:	5f 91       	pop	r21
    335c:	4f 91       	pop	r20
    335e:	3f 91       	pop	r19
    3360:	2f 91       	pop	r18
    3362:	0f 90       	pop	r0
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	0f 90       	pop	r0
    3368:	1f 90       	pop	r1
    336a:	18 95       	reti

0000336c <halWait>:
	...
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	d1 f7       	brne	.-12     	; 0x336c <halWait>
    3378:	08 95       	ret

0000337a <read_eeprom_current_image_checksum>:
    337a:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    337c:	a7 e0       	ldi	r26, 0x07	; 7
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    3384:	80 2d       	mov	r24, r0
    3386:	80 83       	st	Z, r24
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	08 95       	ret

0000338e <write_eeprom_current_image_checksum>:
    338e:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3390:	80 81       	ld	r24, Z
    3392:	a7 e0       	ldi	r26, 0x07	; 7
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	08 2e       	mov	r0, r24
    3398:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <__eeprom_write_byte_1F2021>
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	08 95       	ret

000033a2 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    33a2:	dc 01       	movw	r26, r24
    33a4:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33a8:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    33aa:	99 27       	eor	r25, r25
    33ac:	08 95       	ret

000033ae <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    33ae:	fc 01       	movw	r30, r24
    33b0:	a0 e0       	ldi	r26, 0x00	; 0
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33b8:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Chipcon Development Team 
    33ba:	43 83       	std	Z+3, r20	; 0x03
    33bc:	a1 e0       	ldi	r26, 0x01	; 1
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33c4:	80 2d       	mov	r24, r0
*******************************************************************************/
    33c6:	82 83       	std	Z+2, r24	; 0x02
    33c8:	a2 e0       	ldi	r26, 0x02	; 2
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33d0:	30 2d       	mov	r19, r0

    33d2:	31 83       	std	Z+1, r19	; 0x01
    33d4:	a3 e0       	ldi	r26, 0x03	; 3
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33dc:	90 2d       	mov	r25, r0
#include <include.h>
    33de:	90 83       	st	Z, r25
    33e0:	a4 e0       	ldi	r26, 0x04	; 4
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    33e8:	20 2d       	mov	r18, r0
#include <ulib.h>

//-------------------------------------------------------------------------------------------------------
    33ea:	83 0f       	add	r24, r19
//	void rfWaitForCrystalOscillator(void)
    33ec:	84 0f       	add	r24, r20
//
//	DESCRIPTION:
    33ee:	89 0f       	add	r24, r25
    33f0:	28 17       	cp	r18, r24
    33f2:	19 f4       	brne	.+6      	; 0x33fa <read_eeprom_mac_address+0x4c>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	08 95       	ret
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	9f ef       	ldi	r25, 0xFF	; 255
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
    33fe:	08 95       	ret

00003400 <read_eeprom_channel>:
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    3400:	fc 01       	movw	r30, r24
    3402:	a5 e0       	ldi	r26, 0x05	; 5
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    340a:	80 2d       	mov	r24, r0
void halRfWaitForCrystalOscillator(void) {
    340c:	80 83       	st	Z, r24
    uint8_t spiStatusByte;

    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	08 95       	ret

00003414 <read_eeprom_load_img_pages>:
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator

    3414:	fc 01       	movw	r30, r24
    3416:	a6 e0       	ldi	r26, 0x06	; 6
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    341e:	80 2d       	mov	r24, r0
    3420:	80 83       	st	Z, r24
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	08 95       	ret

00003428 <read_eeprom_aes_key>:
    3428:	ac 01       	movw	r20, r24
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	d9 01       	movw	r26, r18
    3430:	18 96       	adiw	r26, 0x08	; 8
    3432:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <__eeprom_read_byte_1F2021>
    3436:	80 2d       	mov	r24, r0
    3438:	fa 01       	movw	r30, r20
    343a:	e2 0f       	add	r30, r18
    343c:	f3 1f       	adc	r31, r19
    343e:	80 83       	st	Z, r24
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	20 31       	cpi	r18, 0x10	; 16
    3446:	31 05       	cpc	r19, r1
    3448:	91 f7       	brne	.-28     	; 0x342e <read_eeprom_aes_key+0x6>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	08 95       	ret

00003450 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3450:	dc 01       	movw	r26, r24
    3452:	06 2e       	mov	r0, r22
    3454:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <__eeprom_write_byte_1F2021>
    3458:	08 95       	ret

0000345a <write_eeprom_load_img_pages>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    345a:	fc 01       	movw	r30, r24
    345c:	80 81       	ld	r24, Z
    345e:	a6 e0       	ldi	r26, 0x06	; 6
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	08 2e       	mov	r0, r24
    3464:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <__eeprom_write_byte_1F2021>
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	08 95       	ret

0000346e <write_eeprom_aes_key>:
    346e:	ac 01       	movw	r20, r24
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	d9 01       	movw	r26, r18
    3476:	18 96       	adiw	r26, 0x08	; 8
    3478:	fa 01       	movw	r30, r20
    347a:	e2 0f       	add	r30, r18
    347c:	f3 1f       	adc	r31, r19
    347e:	80 81       	ld	r24, Z
    3480:	08 2e       	mov	r0, r24
    3482:	0e 94 5a 3b 	call	0x76b4	; 0x76b4 <__eeprom_write_byte_1F2021>
    3486:	2f 5f       	subi	r18, 0xFF	; 255
    3488:	3f 4f       	sbci	r19, 0xFF	; 255
    348a:	20 31       	cpi	r18, 0x10	; 16
    348c:	31 05       	cpc	r19, r1
    348e:	91 f7       	brne	.-28     	; 0x3474 <write_eeprom_aes_key+0x6>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	08 95       	ret

00003496 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3496:	f8 94       	cli
    3498:	08 95       	ret

0000349a <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    349a:	78 94       	sei
    349c:	08 95       	ret

0000349e <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    349e:	85 e6       	ldi	r24, 0x65	; 101
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	08 95       	ret

000034a4 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    34a4:	0e 94 b4 29 	call	0x5368	; 0x5368 <_nrk_scheduler>
    34a8:	08 95       	ret

000034aa <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	ec 01       	movw	r28, r24
    34b8:	8b 01       	movw	r16, r22
    34ba:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	82 30       	cpi	r24, 0x02	; 2
    34c0:	21 f0       	breq	.+8      	; 0x34ca <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    34c2:	80 91 c6 06 	lds	r24, 0x06C6
    34c6:	88 83       	st	Y, r24
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    34ca:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    34cc:	80 91 c6 06 	lds	r24, 0x06C6
    34d0:	84 30       	cpi	r24, 0x04	; 4
    34d2:	20 f0       	brcs	.+8      	; 0x34dc <nrk_TCB_init+0x32>
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	87 e0       	ldi	r24, 0x07	; 7
    34d8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    34dc:	89 85       	ldd	r24, Y+9	; 0x09
    34de:	82 30       	cpi	r24, 0x02	; 2
    34e0:	29 f0       	breq	.+10     	; 0x34ec <nrk_TCB_init+0x42>
    34e2:	80 91 c6 06 	lds	r24, 0x06C6
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	80 93 c6 06 	sts	0x06C6, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    34ec:	80 91 c6 06 	lds	r24, 0x06C6
    34f0:	88 23       	and	r24, r24
    34f2:	19 f4       	brne	.+6      	; 0x34fa <nrk_TCB_init+0x50>
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	80 93 c6 06 	sts	0x06C6, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    34fa:	88 81       	ld	r24, Y
    34fc:	99 27       	eor	r25, r25
    34fe:	87 fd       	sbrc	r24, 7
    3500:	90 95       	com	r25
    3502:	fc 01       	movw	r30, r24
    3504:	45 e0       	ldi	r20, 0x05	; 5
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	4a 95       	dec	r20
    350c:	e1 f7       	brne	.-8      	; 0x3506 <nrk_TCB_init+0x5c>
    350e:	e8 0f       	add	r30, r24
    3510:	f9 1f       	adc	r31, r25
    3512:	e6 5c       	subi	r30, 0xC6	; 198
    3514:	f9 4f       	sbci	r31, 0xF9	; 249
    3516:	11 83       	std	Z+1, r17	; 0x01
    3518:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    351a:	88 81       	ld	r24, Y
    351c:	99 27       	eor	r25, r25
    351e:	87 fd       	sbrc	r24, 7
    3520:	90 95       	com	r25
    3522:	fc 01       	movw	r30, r24
    3524:	35 e0       	ldi	r19, 0x05	; 5
    3526:	ee 0f       	add	r30, r30
    3528:	ff 1f       	adc	r31, r31
    352a:	3a 95       	dec	r19
    352c:	e1 f7       	brne	.-8      	; 0x3526 <nrk_TCB_init+0x7c>
    352e:	e8 0f       	add	r30, r24
    3530:	f9 1f       	adc	r31, r25
    3532:	e6 5c       	subi	r30, 0xC6	; 198
    3534:	f9 4f       	sbci	r31, 0xF9	; 249
    3536:	88 85       	ldd	r24, Y+8	; 0x08
    3538:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    353a:	88 81       	ld	r24, Y
    353c:	99 27       	eor	r25, r25
    353e:	87 fd       	sbrc	r24, 7
    3540:	90 95       	com	r25
    3542:	fc 01       	movw	r30, r24
    3544:	25 e0       	ldi	r18, 0x05	; 5
    3546:	ee 0f       	add	r30, r30
    3548:	ff 1f       	adc	r31, r31
    354a:	2a 95       	dec	r18
    354c:	e1 f7       	brne	.-8      	; 0x3546 <nrk_TCB_init+0x9c>
    354e:	e8 0f       	add	r30, r24
    3550:	f9 1f       	adc	r31, r25
    3552:	e6 5c       	subi	r30, 0xC6	; 198
    3554:	f9 4f       	sbci	r31, 0xF9	; 249
    3556:	83 e0       	ldi	r24, 0x03	; 3
    3558:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    355a:	28 81       	ld	r18, Y
    355c:	82 2f       	mov	r24, r18
    355e:	99 27       	eor	r25, r25
    3560:	87 fd       	sbrc	r24, 7
    3562:	90 95       	com	r25
    3564:	fc 01       	movw	r30, r24
    3566:	05 e0       	ldi	r16, 0x05	; 5
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	0a 95       	dec	r16
    356e:	e1 f7       	brne	.-8      	; 0x3568 <nrk_TCB_init+0xbe>
    3570:	e8 0f       	add	r30, r24
    3572:	f9 1f       	adc	r31, r25
    3574:	e6 5c       	subi	r30, 0xC6	; 198
    3576:	f9 4f       	sbci	r31, 0xF9	; 249
    3578:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    357a:	88 81       	ld	r24, Y
    357c:	99 27       	eor	r25, r25
    357e:	87 fd       	sbrc	r24, 7
    3580:	90 95       	com	r25
    3582:	fc 01       	movw	r30, r24
    3584:	15 e0       	ldi	r17, 0x05	; 5
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	1a 95       	dec	r17
    358c:	e1 f7       	brne	.-8      	; 0x3586 <nrk_TCB_init+0xdc>
    358e:	e8 0f       	add	r30, r24
    3590:	f9 1f       	adc	r31, r25
    3592:	e6 5c       	subi	r30, 0xC6	; 198
    3594:	f9 4f       	sbci	r31, 0xF9	; 249
    3596:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    3598:	08 81       	ld	r16, Y
    359a:	11 27       	eor	r17, r17
    359c:	07 fd       	sbrc	r16, 7
    359e:	10 95       	com	r17
    35a0:	ce 01       	movw	r24, r28
    35a2:	0b 96       	adiw	r24, 0x0b	; 11
    35a4:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
    35a8:	f8 01       	movw	r30, r16
    35aa:	b5 e0       	ldi	r27, 0x05	; 5
    35ac:	ee 0f       	add	r30, r30
    35ae:	ff 1f       	adc	r31, r31
    35b0:	ba 95       	dec	r27
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <nrk_TCB_init+0x102>
    35b4:	e0 0f       	add	r30, r16
    35b6:	f1 1f       	adc	r31, r17
    35b8:	e6 5c       	subi	r30, 0xC6	; 198
    35ba:	f9 4f       	sbci	r31, 0xF9	; 249
    35bc:	94 8f       	std	Z+28, r25	; 0x1c
    35be:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    35c0:	08 81       	ld	r16, Y
    35c2:	11 27       	eor	r17, r17
    35c4:	07 fd       	sbrc	r16, 7
    35c6:	10 95       	com	r17
    35c8:	ce 01       	movw	r24, r28
    35ca:	4b 96       	adiw	r24, 0x1b	; 27
    35cc:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
    35d0:	f8 01       	movw	r30, r16
    35d2:	a5 e0       	ldi	r26, 0x05	; 5
    35d4:	ee 0f       	add	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	aa 95       	dec	r26
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <nrk_TCB_init+0x12a>
    35dc:	e0 0f       	add	r30, r16
    35de:	f1 1f       	adc	r31, r17
    35e0:	e6 5c       	subi	r30, 0xC6	; 198
    35e2:	f9 4f       	sbci	r31, 0xF9	; 249
    35e4:	96 8b       	std	Z+22, r25	; 0x16
    35e6:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    35e8:	88 81       	ld	r24, Y
    35ea:	99 27       	eor	r25, r25
    35ec:	87 fd       	sbrc	r24, 7
    35ee:	90 95       	com	r25
    35f0:	fc 01       	movw	r30, r24
    35f2:	75 e0       	ldi	r23, 0x05	; 5
    35f4:	ee 0f       	add	r30, r30
    35f6:	ff 1f       	adc	r31, r31
    35f8:	7a 95       	dec	r23
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <nrk_TCB_init+0x14a>
    35fc:	e8 0f       	add	r30, r24
    35fe:	f9 1f       	adc	r31, r25
    3600:	e6 5c       	subi	r30, 0xC6	; 198
    3602:	f9 4f       	sbci	r31, 0xF9	; 249
    3604:	85 89       	ldd	r24, Z+21	; 0x15
    3606:	96 89       	ldd	r25, Z+22	; 0x16
    3608:	23 8d       	ldd	r18, Z+27	; 0x1b
    360a:	34 8d       	ldd	r19, Z+28	; 0x1c
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	90 8f       	std	Z+24, r25	; 0x18
    3612:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    3614:	08 81       	ld	r16, Y
    3616:	11 27       	eor	r17, r17
    3618:	07 fd       	sbrc	r16, 7
    361a:	10 95       	com	r17
    361c:	ce 01       	movw	r24, r28
    361e:	43 96       	adiw	r24, 0x13	; 19
    3620:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
    3624:	f8 01       	movw	r30, r16
    3626:	65 e0       	ldi	r22, 0x05	; 5
    3628:	ee 0f       	add	r30, r30
    362a:	ff 1f       	adc	r31, r31
    362c:	6a 95       	dec	r22
    362e:	e1 f7       	brne	.-8      	; 0x3628 <nrk_TCB_init+0x17e>
    3630:	e0 0f       	add	r30, r16
    3632:	f1 1f       	adc	r31, r17
    3634:	e6 5c       	subi	r30, 0xC6	; 198
    3636:	f9 4f       	sbci	r31, 0xF9	; 249
    3638:	96 8f       	std	Z+30, r25	; 0x1e
    363a:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    363c:	88 81       	ld	r24, Y
    363e:	99 27       	eor	r25, r25
    3640:	87 fd       	sbrc	r24, 7
    3642:	90 95       	com	r25
    3644:	fc 01       	movw	r30, r24
    3646:	55 e0       	ldi	r21, 0x05	; 5
    3648:	ee 0f       	add	r30, r30
    364a:	ff 1f       	adc	r31, r31
    364c:	5a 95       	dec	r21
    364e:	e1 f7       	brne	.-8      	; 0x3648 <nrk_TCB_init+0x19e>
    3650:	e8 0f       	add	r30, r24
    3652:	f9 1f       	adc	r31, r25
    3654:	e6 5c       	subi	r30, 0xC6	; 198
    3656:	f9 4f       	sbci	r31, 0xF9	; 249
    3658:	85 8d       	ldd	r24, Z+29	; 0x1d
    365a:	96 8d       	ldd	r25, Z+30	; 0x1e
    365c:	92 8f       	std	Z+26, r25	; 0x1a
    365e:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3660:	88 81       	ld	r24, Y
    3662:	99 27       	eor	r25, r25
    3664:	87 fd       	sbrc	r24, 7
    3666:	90 95       	com	r25
    3668:	fc 01       	movw	r30, r24
    366a:	45 e0       	ldi	r20, 0x05	; 5
    366c:	ee 0f       	add	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	4a 95       	dec	r20
    3672:	e1 f7       	brne	.-8      	; 0x366c <nrk_TCB_init+0x1c2>
    3674:	e8 0f       	add	r30, r24
    3676:	f9 1f       	adc	r31, r25
    3678:	e6 5c       	subi	r30, 0xC6	; 198
    367a:	f9 4f       	sbci	r31, 0xF9	; 249
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	90 a3       	std	Z+32, r25	; 0x20
    3682:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3684:	88 81       	ld	r24, Y
    3686:	99 27       	eor	r25, r25
    3688:	87 fd       	sbrc	r24, 7
    368a:	90 95       	com	r25
    368c:	fc 01       	movw	r30, r24
    368e:	35 e0       	ldi	r19, 0x05	; 5
    3690:	ee 0f       	add	r30, r30
    3692:	ff 1f       	adc	r31, r31
    3694:	3a 95       	dec	r19
    3696:	e1 f7       	brne	.-8      	; 0x3690 <nrk_TCB_init+0x1e6>
    3698:	e8 0f       	add	r30, r24
    369a:	f9 1f       	adc	r31, r25
    369c:	e6 5c       	subi	r30, 0xC6	; 198
    369e:	f9 4f       	sbci	r31, 0xF9	; 249
    36a0:	f3 82       	std	Z+3, r15	; 0x03
    36a2:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    36a4:	88 81       	ld	r24, Y
    36a6:	99 27       	eor	r25, r25
    36a8:	87 fd       	sbrc	r24, 7
    36aa:	90 95       	com	r25
    36ac:	fc 01       	movw	r30, r24
    36ae:	25 e0       	ldi	r18, 0x05	; 5
    36b0:	ee 0f       	add	r30, r30
    36b2:	ff 1f       	adc	r31, r31
    36b4:	2a 95       	dec	r18
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <nrk_TCB_init+0x206>
    36b8:	e8 0f       	add	r30, r24
    36ba:	f9 1f       	adc	r31, r25
    36bc:	e6 5c       	subi	r30, 0xC6	; 198
    36be:	f9 4f       	sbci	r31, 0xF9	; 249
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	08 95       	ret

000036d6 <nrk_start>:




void nrk_start (void)
{
    36d6:	8f 92       	push	r8
    36d8:	9f 92       	push	r9
    36da:	af 92       	push	r10
    36dc:	bf 92       	push	r11
    36de:	cf 92       	push	r12
    36e0:	df 92       	push	r13
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	62 e4       	ldi	r22, 0x42	; 66
    36f0:	a6 2e       	mov	r10, r22
    36f2:	66 e0       	ldi	r22, 0x06	; 6
    36f4:	b6 2e       	mov	r11, r22
    36f6:	cc 24       	eor	r12, r12
    36f8:	dd 24       	eor	r13, r13
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    36fa:	45 01       	movw	r8, r10




void nrk_start (void)
{
    36fc:	ec 2c       	mov	r14, r12
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    36fe:	f5 01       	movw	r30, r10
    3700:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    3702:	ff ef       	ldi	r31, 0xFF	; 255
    3704:	ff 16       	cp	r15, r31
    3706:	91 f0       	breq	.+36     	; 0x372c <nrk_start+0x56>
    3708:	e4 01       	movw	r28, r8
    370a:	00 e0       	ldi	r16, 0x00	; 0
    370c:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    370e:	e0 16       	cp	r14, r16
    3710:	39 f0       	breq	.+14     	; 0x3720 <nrk_start+0x4a>
    3712:	88 81       	ld	r24, Y
    3714:	f8 16       	cp	r15, r24
    3716:	21 f4       	brne	.+8      	; 0x3720 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    3718:	6f 2d       	mov	r22, r15
    371a:	85 e0       	ldi	r24, 0x05	; 5
    371c:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    3720:	0f 5f       	subi	r16, 0xFF	; 255
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	a1 96       	adiw	r28, 0x21	; 33
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3726:	04 30       	cpi	r16, 0x04	; 4
    3728:	11 05       	cpc	r17, r1
    372a:	89 f7       	brne	.-30     	; 0x370e <nrk_start+0x38>
    372c:	08 94       	sec
    372e:	c1 1c       	adc	r12, r1
    3730:	d1 1c       	adc	r13, r1
    3732:	81 e2       	ldi	r24, 0x21	; 33
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	a8 0e       	add	r10, r24
    3738:	b9 1e       	adc	r11, r25
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    373a:	94 e0       	ldi	r25, 0x04	; 4
    373c:	c9 16       	cp	r12, r25
    373e:	d1 04       	cpc	r13, r1
    3740:	e9 f6       	brne	.-70     	; 0x36fc <nrk_start+0x26>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3742:	0e 94 ac 22 	call	0x4558	; 0x4558 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3746:	28 2f       	mov	r18, r24
    3748:	33 27       	eor	r19, r19
    374a:	27 fd       	sbrc	r18, 7
    374c:	30 95       	com	r19
    374e:	f9 01       	movw	r30, r18
    3750:	55 e0       	ldi	r21, 0x05	; 5
    3752:	ee 0f       	add	r30, r30
    3754:	ff 1f       	adc	r31, r31
    3756:	5a 95       	dec	r21
    3758:	e1 f7       	brne	.-8      	; 0x3752 <nrk_start+0x7c>
    375a:	e2 0f       	add	r30, r18
    375c:	f3 1f       	adc	r31, r19
    375e:	e6 5c       	subi	r30, 0xC6	; 198
    3760:	f9 4f       	sbci	r31, 0xF9	; 249
    3762:	32 85       	ldd	r19, Z+10	; 0x0a
    3764:	30 93 d9 06 	sts	0x06D9, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3768:	21 e2       	ldi	r18, 0x21	; 33
    376a:	82 02       	muls	r24, r18
    376c:	c0 01       	movw	r24, r0
    376e:	11 24       	eor	r1, r1
    3770:	86 5c       	subi	r24, 0xC6	; 198
    3772:	99 4f       	sbci	r25, 0xF9	; 249
    3774:	90 93 d8 06 	sts	0x06D8, r25
    3778:	80 93 d7 06 	sts	0x06D7, r24
    377c:	90 93 c9 06 	sts	0x06C9, r25
    3780:	80 93 c8 06 	sts	0x06C8, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    3784:	30 93 ca 06 	sts	0x06CA, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3788:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <nrk_target_start>
    nrk_stack_pointer_init(); 
    378c:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    3790:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <nrk_start_high_ready_task>
    3794:	ff cf       	rjmp	.-2      	; 0x3794 <nrk_start+0xbe>

00003796 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	a3 97       	sbiw	r28, 0x23	; 35
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	f8 94       	cli
    37a8:	de bf       	out	0x3e, r29	; 62
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    37ae:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <nrk_signal_create>
    37b2:	80 93 c7 06 	sts	0x06C7, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    37b6:	8f 3f       	cpi	r24, 0xFF	; 255
    37b8:	21 f4       	brne	.+8      	; 0x37c2 <nrk_init+0x2c>
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	8e e0       	ldi	r24, 0x0E	; 14
    37be:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    37c2:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    37c6:	08 2f       	mov	r16, r24
    37c8:	11 27       	eor	r17, r17
    37ca:	00 ff       	sbrs	r16, 0
    37cc:	04 c0       	rjmp	.+8      	; 0x37d6 <nrk_init+0x40>
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	86 e0       	ldi	r24, 0x06	; 6
    37d2:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    37d6:	01 ff       	sbrs	r16, 1
    37d8:	04 c0       	rjmp	.+8      	; 0x37e2 <nrk_init+0x4c>
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	84 e1       	ldi	r24, 0x14	; 20
    37de:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    37e2:	02 ff       	sbrs	r16, 2
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <nrk_init+0x58>
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	83 e1       	ldi	r24, 0x13	; 19
    37ea:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    37ee:	10 92 ca 06 	sts	0x06CA, r1
    nrk_cur_task_TCB = NULL;
    37f2:	10 92 d8 06 	sts	0x06D8, r1
    37f6:	10 92 d7 06 	sts	0x06D7, r1
    
    nrk_high_ready_TCB = NULL;
    37fa:	10 92 c9 06 	sts	0x06C9, r1
    37fe:	10 92 c8 06 	sts	0x06C8, r1
    nrk_high_ready_prio = 0; 
    3802:	10 92 d9 06 	sts	0x06D9, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    3806:	10 92 d6 06 	sts	0x06D6, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    380a:	8f ef       	ldi	r24, 0xFF	; 255
    380c:	80 93 c0 06 	sts	0x06C0, r24
    nrk_sem_list[i].value=-1;
    3810:	80 93 c2 06 	sts	0x06C2, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3814:	80 93 c1 06 	sts	0x06C1, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3818:	80 93 c3 06 	sts	0x06C3, r24
    nrk_sem_list[i].value=-1;
    381c:	80 93 c5 06 	sts	0x06C5, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3820:	80 93 c4 06 	sts	0x06C4, r24
    3824:	ea e3       	ldi	r30, 0x3A	; 58
    3826:	f6 e0       	ldi	r31, 0x06	; 6
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3828:	83 e6       	ldi	r24, 0x63	; 99
    382a:	82 87       	std	Z+10, r24	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    382c:	8f ef       	ldi	r24, 0xFF	; 255
    382e:	80 87       	std	Z+8, r24	; 0x08
    3830:	b1 96       	adiw	r30, 0x21	; 33
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    3832:	26 e0       	ldi	r18, 0x06	; 6
    3834:	ee 3b       	cpi	r30, 0xBE	; 190
    3836:	f2 07       	cpc	r31, r18
    3838:	b9 f7       	brne	.-18     	; 0x3828 <nrk_init+0x92>
    383a:	ea ed       	ldi	r30, 0xDA	; 218
    383c:	f6 e0       	ldi	r31, 0x06	; 6
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    383e:	cf 01       	movw	r24, r30
    3840:	05 96       	adiw	r24, 0x05	; 5
    3842:	94 83       	std	Z+4, r25	; 0x04
    3844:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3846:	f7 83       	std	Z+7, r31	; 0x07
    3848:	e6 83       	std	Z+6, r30	; 0x06
    384a:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    384c:	26 e0       	ldi	r18, 0x06	; 6
    384e:	8e 3e       	cpi	r24, 0xEE	; 238
    3850:	92 07       	cpc	r25, r18
    3852:	a9 f7       	brne	.-22     	; 0x383e <nrk_init+0xa8>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3854:	10 92 dc 06 	sts	0x06DC, r1
    3858:	10 92 db 06 	sts	0x06DB, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    385c:	10 92 f2 06 	sts	0x06F2, r1
    3860:	10 92 f1 06 	sts	0x06F1, r1
	_head_node = NULL;
    3864:	10 92 cd 06 	sts	0x06CD, r1
    3868:	10 92 cc 06 	sts	0x06CC, r1
	_free_node = &_nrk_readyQ[0];
    386c:	44 97       	sbiw	r24, 0x14	; 20
    386e:	90 93 39 06 	sts	0x0639, r25
    3872:	80 93 38 06 	sts	0x0638, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3876:	60 e9       	ldi	r22, 0x90	; 144
    3878:	79 e2       	ldi	r23, 0x29	; 41
    387a:	8e 01       	movw	r16, r28
    387c:	0f 5f       	subi	r16, 0xFF	; 255
    387e:	1f 4f       	sbci	r17, 0xFF	; 255
    3880:	c8 01       	movw	r24, r16
    3882:	0e 94 69 2f 	call	0x5ed2	; 0x5ed2 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	67 e9       	ldi	r22, 0x97	; 151
    388c:	75 e0       	ldi	r23, 0x05	; 5
    388e:	c8 01       	movw	r24, r16
    3890:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3894:	85 e5       	ldi	r24, 0x55	; 85
    3896:	80 93 97 05 	sts	0x0597, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    389a:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    389c:	1c 86       	std	Y+12, r1	; 0x0c
    389e:	1d 86       	std	Y+13, r1	; 0x0d
    38a0:	1e 86       	std	Y+14, r1	; 0x0e
    38a2:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    38a4:	18 8a       	std	Y+16, r1	; 0x10
    38a6:	19 8a       	std	Y+17, r1	; 0x11
    38a8:	1a 8a       	std	Y+18, r1	; 0x12
    38aa:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    38ac:	1c 8a       	std	Y+20, r1	; 0x14
    38ae:	1d 8a       	std	Y+21, r1	; 0x15
    38b0:	1e 8a       	std	Y+22, r1	; 0x16
    38b2:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    38b4:	18 8e       	std	Y+24, r1	; 0x18
    38b6:	19 8e       	std	Y+25, r1	; 0x19
    38b8:	1a 8e       	std	Y+26, r1	; 0x1a
    38ba:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    38bc:	1c 8e       	std	Y+28, r1	; 0x1c
    38be:	1d 8e       	std	Y+29, r1	; 0x1d
    38c0:	1e 8e       	std	Y+30, r1	; 0x1e
    38c2:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    38c4:	18 a2       	std	Y+32, r1	; 0x20
    38c6:	19 a2       	std	Y+33, r1	; 0x21
    38c8:	1a a2       	std	Y+34, r1	; 0x22
    38ca:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    38cc:	91 e0       	ldi	r25, 0x01	; 1
    38ce:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    38d4:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    38d6:	c8 01       	movw	r24, r16
    38d8:	0e 94 89 25 	call	0x4b12	; 0x4b12 <nrk_activate_task>
    38dc:	a3 96       	adiw	r28, 0x23	; 35
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	1f 91       	pop	r17
    38ee:	0f 91       	pop	r16
    38f0:	08 95       	ret

000038f2 <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    38f2:	f8 94       	cli
    38f4:	ff cf       	rjmp	.-2      	; 0x38f4 <nrk_halt+0x2>

000038f6 <_nrk_errno_set>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    38f6:	e0 91 d7 06 	lds	r30, 0x06D7
    38fa:	f0 91 d8 06 	lds	r31, 0x06D8
    38fe:	84 87       	std	Z+12, r24	; 0x0c
    3900:	08 95       	ret

00003902 <nrk_errno_get>:

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    3902:	e0 91 d7 06 	lds	r30, 0x06D7
    3906:	f0 91 d8 06 	lds	r31, 0x06D8
    390a:	84 85       	ldd	r24, Z+12	; 0x0c

inline void nrk_int_enable(void) {
    390c:	99 27       	eor	r25, r25
    390e:	08 95       	ret

00003910 <nrk_error_get>:
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif
    3910:	dc 01       	movw	r26, r24
    3912:	fb 01       	movw	r30, r22

    3914:	80 91 96 05 	lds	r24, 0x0596
    3918:	88 23       	and	r24, r24
    391a:	19 f4       	brne	.+6      	; 0x3922 <nrk_error_get+0x12>
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	08 95       	ret
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    3922:	80 83       	st	Z, r24
    _nrk_reserve_init();
    3924:	80 91 66 04 	lds	r24, 0x0466
    3928:	8c 93       	st	X, r24
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    #endif

    392e:	08 95       	ret

00003930 <pause>:
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	21 97       	sbiw	r28, 0x01	; 1
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	de bf       	out	0x3e, r29	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	cd bf       	out	0x3d, r28	; 61
    3944:	19 82       	std	Y+1, r1	; 0x01
    3946:	07 c0       	rjmp	.+14     	; 0x3956 <pause+0x26>
    3948:	80 ed       	ldi	r24, 0xD0	; 208
    394a:	97 e0       	ldi	r25, 0x07	; 7
    394c:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	8f 5f       	subi	r24, 0xFF	; 255
    3954:	89 83       	std	Y+1, r24	; 0x01
    3956:	89 81       	ldd	r24, Y+1	; 0x01
    3958:	84 36       	cpi	r24, 0x64	; 100
    395a:	b0 f3       	brcs	.-20     	; 0x3948 <pause+0x18>
    395c:	21 96       	adiw	r28, 0x01	; 1
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	df 91       	pop	r29
    396a:	cf 91       	pop	r28
    396c:	08 95       	ret

0000396e <blink_dot>:
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	0e 94 a7 18 	call	0x314e	; 0x314e <nrk_led_set>
    3976:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    3982:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3986:	08 95       	ret

00003988 <blink_dash>:
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	0e 94 a7 18 	call	0x314e	; 0x314e <nrk_led_set>
    3990:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3994:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3998:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    39a4:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    39a8:	08 95       	ret

000039aa <blink_morse_code_error>:
    39aa:	ef 92       	push	r14
    39ac:	ff 92       	push	r15
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
    39ba:	23 97       	sbiw	r28, 0x03	; 3
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	99 27       	eor	r25, r25
    39c8:	9f 93       	push	r25
    39ca:	8f 93       	push	r24
    39cc:	8f e3       	ldi	r24, 0x3F	; 63
    39ce:	92 e0       	ldi	r25, 0x02	; 2
    39d0:	9f 93       	push	r25
    39d2:	8f 93       	push	r24
    39d4:	8e 01       	movw	r16, r28
    39d6:	0f 5f       	subi	r16, 0xFF	; 255
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	1f 93       	push	r17
    39dc:	0f 93       	push	r16
    39de:	0e 94 0f 39 	call	0x721e	; 0x721e <sprintf>
    39e2:	ee 24       	eor	r14, r14
    39e4:	ff 24       	eor	r15, r15
    39e6:	8d b7       	in	r24, 0x3d	; 61
    39e8:	9e b7       	in	r25, 0x3e	; 62
    39ea:	06 96       	adiw	r24, 0x06	; 6
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	9e bf       	out	0x3e, r25	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	8d bf       	out	0x3d, r24	; 61
    39f6:	73 c0       	rjmp	.+230    	; 0x3ade <blink_morse_code_error+0x134>
    39f8:	a0 0f       	add	r26, r16
    39fa:	b1 1f       	adc	r27, r17
    39fc:	8c 91       	ld	r24, X
    39fe:	84 33       	cpi	r24, 0x34	; 52
    3a00:	d1 f1       	breq	.+116    	; 0x3a76 <blink_morse_code_error+0xcc>
    3a02:	85 33       	cpi	r24, 0x35	; 53
    3a04:	70 f4       	brcc	.+28     	; 0x3a22 <blink_morse_code_error+0x78>
    3a06:	81 33       	cpi	r24, 0x31	; 49
    3a08:	f9 f0       	breq	.+62     	; 0x3a48 <blink_morse_code_error+0x9e>
    3a0a:	82 33       	cpi	r24, 0x32	; 50
    3a0c:	20 f4       	brcc	.+8      	; 0x3a16 <blink_morse_code_error+0x6c>
    3a0e:	80 33       	cpi	r24, 0x30	; 48
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <blink_morse_code_error+0x6a>
    3a12:	5c c0       	rjmp	.+184    	; 0x3acc <blink_morse_code_error+0x122>
    3a14:	16 c0       	rjmp	.+44     	; 0x3a42 <blink_morse_code_error+0x98>
    3a16:	82 33       	cpi	r24, 0x32	; 50
    3a18:	11 f1       	breq	.+68     	; 0x3a5e <blink_morse_code_error+0xb4>
    3a1a:	83 33       	cpi	r24, 0x33	; 51
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <blink_morse_code_error+0x76>
    3a1e:	56 c0       	rjmp	.+172    	; 0x3acc <blink_morse_code_error+0x122>
    3a20:	23 c0       	rjmp	.+70     	; 0x3a68 <blink_morse_code_error+0xbe>
    3a22:	87 33       	cpi	r24, 0x37	; 55
    3a24:	c9 f1       	breq	.+114    	; 0x3a98 <blink_morse_code_error+0xee>
    3a26:	88 33       	cpi	r24, 0x38	; 56
    3a28:	30 f4       	brcc	.+12     	; 0x3a36 <blink_morse_code_error+0x8c>
    3a2a:	85 33       	cpi	r24, 0x35	; 53
    3a2c:	69 f1       	breq	.+90     	; 0x3a88 <blink_morse_code_error+0xde>
    3a2e:	86 33       	cpi	r24, 0x36	; 54
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <blink_morse_code_error+0x8a>
    3a32:	4c c0       	rjmp	.+152    	; 0x3acc <blink_morse_code_error+0x122>
    3a34:	2c c0       	rjmp	.+88     	; 0x3a8e <blink_morse_code_error+0xe4>
    3a36:	88 33       	cpi	r24, 0x38	; 56
    3a38:	b1 f1       	breq	.+108    	; 0x3aa6 <blink_morse_code_error+0xfc>
    3a3a:	89 33       	cpi	r24, 0x39	; 57
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <blink_morse_code_error+0x96>
    3a3e:	46 c0       	rjmp	.+140    	; 0x3acc <blink_morse_code_error+0x122>
    3a40:	3b c0       	rjmp	.+118    	; 0x3ab8 <blink_morse_code_error+0x10e>
    3a42:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <blink_morse_code_error+0xa2>
    3a48:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a4c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a50:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a54:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a58:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a5c:	37 c0       	rjmp	.+110    	; 0x3acc <blink_morse_code_error+0x122>
    3a5e:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a62:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a66:	f4 cf       	rjmp	.-24     	; 0x3a50 <blink_morse_code_error+0xa6>
    3a68:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a6c:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a70:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a74:	ef cf       	rjmp	.-34     	; 0x3a54 <blink_morse_code_error+0xaa>
    3a76:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a7a:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a7e:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a82:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a86:	e8 cf       	rjmp	.-48     	; 0x3a58 <blink_morse_code_error+0xae>
    3a88:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a8c:	02 c0       	rjmp	.+4      	; 0x3a92 <blink_morse_code_error+0xe8>
    3a8e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a92:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3a96:	04 c0       	rjmp	.+8      	; 0x3aa0 <blink_morse_code_error+0xf6>
    3a98:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3a9c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3aa0:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3aa4:	06 c0       	rjmp	.+12     	; 0x3ab2 <blink_morse_code_error+0x108>
    3aa6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3aaa:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3aae:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3ab2:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3ab6:	08 c0       	rjmp	.+16     	; 0x3ac8 <blink_morse_code_error+0x11e>
    3ab8:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3abc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3ac0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3ac4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <blink_dash>
    3ac8:	0e 94 b7 1c 	call	0x396e	; 0x396e <blink_dot>
    3acc:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3ad0:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3ad4:	0e 94 98 1c 	call	0x3930	; 0x3930 <pause>
    3ad8:	08 94       	sec
    3ada:	e1 1c       	adc	r14, r1
    3adc:	f1 1c       	adc	r15, r1
    3ade:	ae 2d       	mov	r26, r14
    3ae0:	bb 27       	eor	r27, r27
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	01 90       	ld	r0, Z+
    3ae6:	00 20       	and	r0, r0
    3ae8:	e9 f7       	brne	.-6      	; 0x3ae4 <blink_morse_code_error+0x13a>
    3aea:	31 97       	sbiw	r30, 0x01	; 1
    3aec:	e0 1b       	sub	r30, r16
    3aee:	f1 0b       	sbc	r31, r17
    3af0:	ae 17       	cp	r26, r30
    3af2:	bf 07       	cpc	r27, r31
    3af4:	08 f4       	brcc	.+2      	; 0x3af8 <blink_morse_code_error+0x14e>
    3af6:	80 cf       	rjmp	.-256    	; 0x39f8 <blink_morse_code_error+0x4e>
    3af8:	23 96       	adiw	r28, 0x03	; 3
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	08 95       	ret

00003b12 <nrk_error_print>:
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    3b12:	2f 92       	push	r2
    3b14:	3f 92       	push	r3
    3b16:	4f 92       	push	r4
    3b18:	5f 92       	push	r5
    3b1a:	6f 92       	push	r6
    3b1c:	7f 92       	push	r7
    3b1e:	8f 92       	push	r8
    3b20:	9f 92       	push	r9
    3b22:	af 92       	push	r10
    3b24:	bf 92       	push	r11
    3b26:	cf 92       	push	r12
    3b28:	df 92       	push	r13
    3b2a:	ef 92       	push	r14
    3b2c:	ff 92       	push	r15
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
{
    nrk_sem_list[i].count=-1;
    3b36:	80 91 96 05 	lds	r24, 0x0596
    3b3a:	88 23       	and	r24, r24
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <nrk_error_print+0x2e>
    3b3e:	d2 c0       	rjmp	.+420    	; 0x3ce4 <nrk_error_print+0x1d2>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    3b40:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    3b44:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	
    3b48:	64 e7       	ldi	r22, 0x74	; 116
    3b4a:	26 2e       	mov	r2, r22
    3b4c:	63 e0       	ldi	r22, 0x03	; 3
    3b4e:	36 2e       	mov	r3, r22
    3b50:	57 e8       	ldi	r21, 0x87	; 135
    3b52:	45 2e       	mov	r4, r21
    3b54:	53 e0       	ldi	r21, 0x03	; 3
    3b56:	55 2e       	mov	r5, r21
    3b58:	4a e9       	ldi	r20, 0x9A	; 154
    3b5a:	64 2e       	mov	r6, r20
    3b5c:	43 e0       	ldi	r20, 0x03	; 3
    3b5e:	74 2e       	mov	r7, r20
    3b60:	32 eb       	ldi	r19, 0xB2	; 178
    3b62:	83 2e       	mov	r8, r19
    3b64:	33 e0       	ldi	r19, 0x03	; 3
    3b66:	93 2e       	mov	r9, r19
    3b68:	28 ec       	ldi	r18, 0xC8	; 200
    3b6a:	a2 2e       	mov	r10, r18
    3b6c:	23 e0       	ldi	r18, 0x03	; 3
    3b6e:	b2 2e       	mov	r11, r18
    3b70:	93 ee       	ldi	r25, 0xE3	; 227
    3b72:	c9 2e       	mov	r12, r25
    3b74:	93 e0       	ldi	r25, 0x03	; 3
    3b76:	d9 2e       	mov	r13, r25
    3b78:	89 ef       	ldi	r24, 0xF9	; 249
    3b7a:	e8 2e       	mov	r14, r24
    3b7c:	83 e0       	ldi	r24, 0x03	; 3
    3b7e:	f8 2e       	mov	r15, r24
    3b80:	cd e0       	ldi	r28, 0x0D	; 13
    3b82:	d4 e0       	ldi	r29, 0x04	; 4
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
    3b84:	88 e3       	ldi	r24, 0x38	; 56
    3b86:	94 e0       	ldi	r25, 0x04	; 4
    3b88:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
	
    3b8c:	80 91 66 04 	lds	r24, 0x0466
    3b90:	99 27       	eor	r25, r25
    3b92:	9f 93       	push	r25
    3b94:	8f 93       	push	r24
    3b96:	8f e3       	ldi	r24, 0x3F	; 63
    3b98:	92 e0       	ldi	r25, 0x02	; 2
    3b9a:	9f 93       	push	r25
    3b9c:	8f 93       	push	r24
    3b9e:	0e 94 be 38 	call	0x717c	; 0x717c <printf>

    3ba2:	84 e3       	ldi	r24, 0x34	; 52
    3ba4:	94 e0       	ldi	r25, 0x04	; 4
    3ba6:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	80 91 96 05 	lds	r24, 0x0596
    3bb6:	87 31       	cpi	r24, 0x17	; 23
    3bb8:	10 f0       	brcs	.+4      	; 0x3bbe <nrk_error_print+0xac>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3bba:	10 92 96 05 	sts	0x0596, r1
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3bbe:	80 91 96 05 	lds	r24, 0x0596
    3bc2:	99 27       	eor	r25, r25
    3bc4:	aa 27       	eor	r26, r26
    3bc6:	bb 27       	eor	r27, r27
    3bc8:	fc 01       	movw	r30, r24
    3bca:	31 97       	sbiw	r30, 0x01	; 1
    3bcc:	e5 31       	cpi	r30, 0x15	; 21
    3bce:	f1 05       	cpc	r31, r1
    3bd0:	08 f0       	brcs	.+2      	; 0x3bd4 <nrk_error_print+0xc2>
    3bd2:	3f c0       	rjmp	.+126    	; 0x3c52 <nrk_error_print+0x140>
    3bd4:	ea 59       	subi	r30, 0x9A	; 154
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	ee 0f       	add	r30, r30
    3bda:	ff 1f       	adc	r31, r31
    3bdc:	05 90       	lpm	r0, Z+
    3bde:	f4 91       	lpm	r31, Z
    3be0:	e0 2d       	mov	r30, r0
    3be2:	09 94       	ijmp
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
    3be4:	ce 01       	movw	r24, r28
    3be6:	37 c0       	rjmp	.+110    	; 0x3c56 <nrk_error_print+0x144>
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    3be8:	c7 01       	movw	r24, r14
    3bea:	35 c0       	rjmp	.+106    	; 0x3c56 <nrk_error_print+0x144>
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    3bec:	c6 01       	movw	r24, r12
    3bee:	33 c0       	rjmp	.+102    	; 0x3c56 <nrk_error_print+0x144>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
    3bf0:	c5 01       	movw	r24, r10
    3bf2:	31 c0       	rjmp	.+98     	; 0x3c56 <nrk_error_print+0x144>
	
}

    3bf4:	c4 01       	movw	r24, r8
    3bf6:	2f c0       	rjmp	.+94     	; 0x3c56 <nrk_error_print+0x144>



    3bf8:	c3 01       	movw	r24, r6
    3bfa:	2d c0       	rjmp	.+90     	; 0x3c56 <nrk_error_print+0x144>



    3bfc:	c2 01       	movw	r24, r4
    3bfe:	2b c0       	rjmp	.+86     	; 0x3c56 <nrk_error_print+0x144>

void nrk_start (void)
{
    3c00:	c1 01       	movw	r24, r2
    3c02:	29 c0       	rjmp	.+82     	; 0x3c56 <nrk_error_print+0x144>
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    3c04:	86 e5       	ldi	r24, 0x56	; 86
    3c06:	93 e0       	ldi	r25, 0x03	; 3
    3c08:	26 c0       	rjmp	.+76     	; 0x3c56 <nrk_error_print+0x144>
//	unsigned char *stkc;

	/*
    3c0a:	81 e3       	ldi	r24, 0x31	; 49
    3c0c:	93 e0       	ldi	r25, 0x03	; 3
    3c0e:	23 c0       	rjmp	.+70     	; 0x3c56 <nrk_error_print+0x144>
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    3c10:	85 e2       	ldi	r24, 0x25	; 37
    3c12:	93 e0       	ldi	r25, 0x03	; 3
    3c14:	20 c0       	rjmp	.+64     	; 0x3c56 <nrk_error_print+0x144>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
    3c16:	8a e0       	ldi	r24, 0x0A	; 10
    3c18:	93 e0       	ldi	r25, 0x03	; 3
    3c1a:	1d c0       	rjmp	.+58     	; 0x3c56 <nrk_error_print+0x144>
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    3c1c:	8b ef       	ldi	r24, 0xFB	; 251
    3c1e:	92 e0       	ldi	r25, 0x02	; 2
    3c20:	1a c0       	rjmp	.+52     	; 0x3c56 <nrk_error_print+0x144>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
    3c22:	87 ee       	ldi	r24, 0xE7	; 231
    3c24:	92 e0       	ldi	r25, 0x02	; 2
    3c26:	17 c0       	rjmp	.+46     	; 0x3c56 <nrk_error_print+0x144>
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    3c28:	86 ed       	ldi	r24, 0xD6	; 214
    3c2a:	92 e0       	ldi	r25, 0x02	; 2
    3c2c:	14 c0       	rjmp	.+40     	; 0x3c56 <nrk_error_print+0x144>

			}
		}
    3c2e:	82 ec       	ldi	r24, 0xC2	; 194
    3c30:	92 e0       	ldi	r25, 0x02	; 2
    3c32:	11 c0       	rjmp	.+34     	; 0x3c56 <nrk_error_print+0x144>
	}

    }
    3c34:	82 ea       	ldi	r24, 0xA2	; 162
    3c36:	92 e0       	ldi	r25, 0x02	; 2
    3c38:	0e c0       	rjmp	.+28     	; 0x3c56 <nrk_error_print+0x144>

    task_ID = nrk_get_high_ready_task_ID();	
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3c3a:	8a e8       	ldi	r24, 0x8A	; 138
    3c3c:	92 e0       	ldi	r25, 0x02	; 2
    3c3e:	0b c0       	rjmp	.+22     	; 0x3c56 <nrk_error_print+0x144>
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
    3c40:	8f e6       	ldi	r24, 0x6F	; 111
    3c42:	92 e0       	ldi	r25, 0x02	; 2
    3c44:	08 c0       	rjmp	.+16     	; 0x3c56 <nrk_error_print+0x144>
//    nrk_stack_pointer_restore();

    /*
    3c46:	8e e5       	ldi	r24, 0x5E	; 94
    3c48:	92 e0       	ldi	r25, 0x02	; 2
    3c4a:	05 c0       	rjmp	.+10     	; 0x3c56 <nrk_error_print+0x144>
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    3c4c:	8f e4       	ldi	r24, 0x4F	; 79
    3c4e:	92 e0       	ldi	r25, 0x02	; 2
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <nrk_error_print+0x144>
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    3c52:	88 e4       	ldi	r24, 0x48	; 72
    3c54:	92 e0       	ldi	r25, 0x02	; 2
    3c56:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    3c5a:	60 91 fe 06 	lds	r22, 0x06FE
    3c5e:	70 91 ff 06 	lds	r23, 0x06FF
    3c62:	8d e0       	ldi	r24, 0x0D	; 13
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    //TODO: this way on msp
    3c6a:	60 91 fe 06 	lds	r22, 0x06FE
    3c6e:	70 91 ff 06 	lds	r23, 0x06FF
    3c72:	8a e0       	ldi	r24, 0x0A	; 10
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    3c7a:	00 e0       	ldi	r16, 0x00	; 0
    3c7c:	82 e0       	ldi	r24, 0x02	; 2
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0e 94 a7 18 	call	0x314e	; 0x314e <nrk_led_set>
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    3c8c:	10 e0       	ldi	r17, 0x00	; 0
    3c8e:	88 ee       	ldi	r24, 0xE8	; 232
    3c90:	93 e0       	ldi	r25, 0x03	; 3
    3c92:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    3c96:	1f 5f       	subi	r17, 0xFF	; 255
    3c98:	14 36       	cpi	r17, 0x64	; 100
    3c9a:	c9 f7       	brne	.-14     	; 0x3c8e <nrk_error_print+0x17c>
    3c9c:	83 e0       	ldi	r24, 0x03	; 3
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	0e 94 a7 18 	call	0x314e	; 0x314e <nrk_led_set>
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    3cac:	10 e0       	ldi	r17, 0x00	; 0
    3cae:	88 ee       	ldi	r24, 0xE8	; 232
    3cb0:	93 e0       	ldi	r25, 0x03	; 3
    3cb2:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
    3cb6:	1f 5f       	subi	r17, 0xFF	; 255
    3cb8:	14 36       	cpi	r17, 0x64	; 100
    3cba:	c9 f7       	brne	.-14     	; 0x3cae <nrk_error_print+0x19c>
    3cbc:	0f 5f       	subi	r16, 0xFF	; 255
    3cbe:	04 31       	cpi	r16, 0x14	; 20
    3cc0:	e9 f6       	brne	.-70     	; 0x3c7c <nrk_error_print+0x16a>
    3cc2:	82 e0       	ldi	r24, 0x02	; 2
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    3cca:	83 e0       	ldi	r24, 0x03	; 3
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 8a 18 	call	0x3114	; 0x3114 <nrk_led_clr>
    3cd2:	80 91 66 04 	lds	r24, 0x0466
    3cd6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <blink_morse_code_error>
    3cda:	80 91 96 05 	lds	r24, 0x0596
    3cde:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <blink_morse_code_error>
    3ce2:	50 cf       	rjmp	.-352    	; 0x3b84 <nrk_error_print+0x72>
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	ff 90       	pop	r15
    3cf2:	ef 90       	pop	r14
    3cf4:	df 90       	pop	r13
    3cf6:	cf 90       	pop	r12
    3cf8:	bf 90       	pop	r11
    3cfa:	af 90       	pop	r10
    3cfc:	9f 90       	pop	r9
    3cfe:	8f 90       	pop	r8
    3d00:	7f 90       	pop	r7
    3d02:	6f 90       	pop	r6
    3d04:	5f 90       	pop	r5
    3d06:	4f 90       	pop	r4
    3d08:	3f 90       	pop	r3
    3d0a:	2f 90       	pop	r2
    3d0c:	08 95       	ret

00003d0e <nrk_kernel_error_add>:
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    3d0e:	80 93 96 05 	sts	0x0596, r24
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3d12:	60 93 66 04 	sts	0x0466, r22

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif


    3d16:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nrk_error_print>
    3d1a:	08 95       	ret

00003d1c <nrk_error_add>:
 */
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
    3d1c:	80 93 96 05 	sts	0x0596, r24
	
    3d20:	e0 91 d7 06 	lds	r30, 0x06D7
    3d24:	f0 91 d8 06 	lds	r31, 0x06D8
    3d28:	80 85       	ldd	r24, Z+8	; 0x08
    3d2a:	80 93 66 04 	sts	0x0466, r24
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3d2e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nrk_error_print>
    3d32:	08 95       	ret

00003d34 <nrk_stack_check_pid>:
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    3d34:	99 27       	eor	r25, r25
    3d36:	87 fd       	sbrc	r24, 7
    3d38:	90 95       	com	r25
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	25 e0       	ldi	r18, 0x05	; 5
    3d3e:	ee 0f       	add	r30, r30
    3d40:	ff 1f       	adc	r31, r31
    3d42:	2a 95       	dec	r18
    3d44:	e1 f7       	brne	.-8      	; 0x3d3e <nrk_stack_check_pid+0xa>
    3d46:	e8 0f       	add	r30, r24
    3d48:	f9 1f       	adc	r31, r25
    3d4a:	e6 5c       	subi	r30, 0xC6	; 198
    3d4c:	f9 4f       	sbci	r31, 0xF9	; 249
    3d4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d50:	b3 81       	ldd	r27, Z+3	; 0x03

   #ifdef NRK_WATCHDOG
    3d52:	8c 91       	ld	r24, X
    3d54:	85 35       	cpi	r24, 0x55	; 85
    3d56:	29 f0       	breq	.+10     	; 0x3d62 <nrk_stack_check_pid+0x2e>
    if(nrk_watchdog_check()==NRK_ERROR) 
    3d58:	85 e5       	ldi	r24, 0x55	; 85
    3d5a:	8c 93       	st	X, r24
    3d5c:	8f ef       	ldi	r24, 0xFF	; 255
    3d5e:	9f ef       	ldi	r25, 0xFF	; 255
    3d60:	08 95       	ret
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	80 50       	subi	r24, 0x00	; 0
    3d68:	92 42       	sbci	r25, 0x22	; 34
    3d6a:	18 f4       	brcc	.+6      	; 0x3d72 <nrk_stack_check_pid+0x3e>
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	08 95       	ret
    #endif
    3d72:	82 e1       	ldi	r24, 0x12	; 18
    3d74:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	9f ef       	ldi	r25, 0xFF	; 255
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    3d7c:	08 95       	ret

00003d7e <dump_stack_info>:
#include <stdio.h>
#include <nrk_includes.h> 
#include <ulib.h>
#include <nrk.h>
#include <nrk_task.h>
#include <nrk_idle_task.h>
    3d7e:	6f 92       	push	r6
    3d80:	7f 92       	push	r7
    3d82:	8f 92       	push	r8
    3d84:	9f 92       	push	r9
    3d86:	af 92       	push	r10
    3d88:	bf 92       	push	r11
    3d8a:	cf 92       	push	r12
    3d8c:	df 92       	push	r13
    3d8e:	ef 92       	push	r14
    3d90:	ff 92       	push	r15
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
#include <nrk_defs.h>
#include <nrk_cpu.h>
#include <nrk_scheduler.h>
#include <nrk_error.h>
#include <nrk_events.h>
    3d9a:	84 e4       	ldi	r24, 0x44	; 68
    3d9c:	94 e0       	ldi	r25, 0x04	; 4
    3d9e:	0e 94 55 19 	call	0x32aa	; 0x32aa <nrk_kprintf>
#include <nrk_stack_check.h>
#include <nrk_status.h>
    3da2:	e0 91 d7 06 	lds	r30, 0x06D7
    3da6:	f0 91 d8 06 	lds	r31, 0x06D8
    3daa:	80 85       	ldd	r24, Z+8	; 0x08
    3dac:	99 27       	eor	r25, r25
    3dae:	87 fd       	sbrc	r24, 7
    3db0:	90 95       	com	r25
    3db2:	9f 93       	push	r25
    3db4:	8f 93       	push	r24
    3db6:	82 e4       	ldi	r24, 0x42	; 66
    3db8:	92 e0       	ldi	r25, 0x02	; 2
    3dba:	9f 93       	push	r25
    3dbc:	8f 93       	push	r24
    3dbe:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
#include <nrk_watchdog.h>
    3dc2:	e0 91 d7 06 	lds	r30, 0x06D7
    3dc6:	f0 91 d8 06 	lds	r31, 0x06D8
    3dca:	02 81       	ldd	r16, Z+2	; 0x02
    3dcc:	13 81       	ldd	r17, Z+3	; 0x03
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
    3dce:	1f 93       	push	r17
    3dd0:	0f 93       	push	r16
    3dd2:	8b e4       	ldi	r24, 0x4B	; 75
    3dd4:	92 e0       	ldi	r25, 0x02	; 2
    3dd6:	9f 93       	push	r25
    3dd8:	8f 93       	push	r24
    3dda:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
#include <nrk_cfg.h>
    3dde:	f8 01       	movw	r30, r16
    3de0:	80 81       	ld	r24, Z
    3de2:	99 27       	eor	r25, r25
    3de4:	9f 93       	push	r25
    3de6:	8f 93       	push	r24
    3de8:	58 e5       	ldi	r21, 0x58	; 88
    3dea:	c5 2e       	mov	r12, r21
    3dec:	52 e0       	ldi	r21, 0x02	; 2
    3dee:	d5 2e       	mov	r13, r21
    3df0:	df 92       	push	r13
    3df2:	cf 92       	push	r12
    3df4:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
    3df8:	e0 91 d7 06 	lds	r30, 0x06D7
    3dfc:	f0 91 d8 06 	lds	r31, 0x06D8
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	9f 93       	push	r25
    3e06:	8f 93       	push	r24
    3e08:	45 e6       	ldi	r20, 0x65	; 101
    3e0a:	e4 2e       	mov	r14, r20
    3e0c:	42 e0       	ldi	r20, 0x02	; 2
    3e0e:	f4 2e       	mov	r15, r20
    3e10:	ff 92       	push	r15
    3e12:	ef 92       	push	r14
    3e14:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
  DISABLE_GLOBAL_INT();
    3e18:	80 91 d7 06 	lds	r24, 0x06D7
    3e1c:	90 91 d8 06 	lds	r25, 0x06D8
    3e20:	9f 93       	push	r25
    3e22:	8f 93       	push	r24
    3e24:	0f e6       	ldi	r16, 0x6F	; 111
    3e26:	12 e0       	ldi	r17, 0x02	; 2
    3e28:	1f 93       	push	r17
    3e2a:	0f 93       	push	r16
    3e2c:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
    3e30:	ca e3       	ldi	r28, 0x3A	; 58
    3e32:	d6 e0       	ldi	r29, 0x06	; 6
    3e34:	aa 24       	eor	r10, r10
    3e36:	bb 24       	eor	r11, r11
    3e38:	8d b7       	in	r24, 0x3d	; 61
    3e3a:	9e b7       	in	r25, 0x3e	; 62
    3e3c:	44 96       	adiw	r24, 0x14	; 20
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	9e bf       	out	0x3e, r25	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	8d bf       	out	0x3d, r24	; 61
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    3e48:	3f e7       	ldi	r19, 0x7F	; 127
    3e4a:	63 2e       	mov	r6, r19
    3e4c:	32 e0       	ldi	r19, 0x02	; 2
    3e4e:	73 2e       	mov	r7, r19
uint8_t nrk_task_init_cnt;
    3e50:	46 01       	movw	r8, r12


void nrk_halt()
    3e52:	67 01       	movw	r12, r14
{
    3e54:	78 01       	movw	r14, r16
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    3e56:	0a 81       	ldd	r16, Y+2	; 0x02
    3e58:	1b 81       	ldd	r17, Y+3	; 0x03
};

    3e5a:	1f 93       	push	r17
    3e5c:	0f 93       	push	r16
    3e5e:	bf 92       	push	r11
    3e60:	af 92       	push	r10
    3e62:	7f 92       	push	r7
    3e64:	6f 92       	push	r6
    3e66:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
uint8_t nrk_task_init_cnt;
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	80 81       	ld	r24, Z
    3e6e:	99 27       	eor	r25, r25
    3e70:	9f 93       	push	r25
    3e72:	8f 93       	push	r24
    3e74:	9f 92       	push	r9
    3e76:	8f 92       	push	r8
    3e78:	0e 94 be 38 	call	0x717c	; 0x717c <printf>


void nrk_halt()
    3e7c:	88 81       	ld	r24, Y
    3e7e:	99 81       	ldd	r25, Y+1	; 0x01
    3e80:	9f 93       	push	r25
    3e82:	8f 93       	push	r24
    3e84:	df 92       	push	r13
    3e86:	cf 92       	push	r12
    3e88:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
{
    3e8c:	df 93       	push	r29
    3e8e:	cf 93       	push	r28
    3e90:	ff 92       	push	r15
    3e92:	ef 92       	push	r14
    3e94:	0e 94 be 38 	call	0x717c	; 0x717c <printf>
    3e98:	08 94       	sec
    3e9a:	a1 1c       	adc	r10, r1
    3e9c:	b1 1c       	adc	r11, r1
    3e9e:	a1 96       	adiw	r28, 0x21	; 33
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    3ea0:	8d b7       	in	r24, 0x3d	; 61
    3ea2:	9e b7       	in	r25, 0x3e	; 62
    3ea4:	42 96       	adiw	r24, 0x12	; 18
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	9e bf       	out	0x3e, r25	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	8d bf       	out	0x3d, r24	; 61
    3eb0:	94 e0       	ldi	r25, 0x04	; 4
    3eb2:	a9 16       	cp	r10, r25
    3eb4:	b1 04       	cpc	r11, r1
    3eb6:	79 f6       	brne	.-98     	; 0x3e56 <dump_stack_info+0xd8>
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	ef 90       	pop	r14
    3ec4:	df 90       	pop	r13
    3ec6:	cf 90       	pop	r12
    3ec8:	bf 90       	pop	r11
    3eca:	af 90       	pop	r10
    3ecc:	9f 90       	pop	r9
    3ece:	8f 90       	pop	r8
    3ed0:	7f 90       	pop	r7
    3ed2:	6f 90       	pop	r6
    3ed4:	08 95       	ret

00003ed6 <nrk_stack_check>:
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
	
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3eda:	e0 91 d7 06 	lds	r30, 0x06D7
    3ede:	f0 91 d8 06 	lds	r31, 0x06D8
    3ee2:	c2 81       	ldd	r28, Z+2	; 0x02
    3ee4:	d3 81       	ldd	r29, Z+3	; 0x03
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    3ee6:	88 81       	ld	r24, Y
    3ee8:	85 35       	cpi	r24, 0x55	; 85
    3eea:	39 f0       	breq	.+14     	; 0x3efa <nrk_stack_check+0x24>
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3eec:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <dump_stack_info>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
#endif
    3ef6:	85 e5       	ldi	r24, 0x55	; 85
    3ef8:	88 83       	st	Y, r24
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    3efa:	e0 91 d7 06 	lds	r30, 0x06D7
    3efe:	f0 91 d8 06 	lds	r31, 0x06D8
    3f02:	80 81       	ld	r24, Z
    3f04:	91 81       	ldd	r25, Z+1	; 0x01
    3f06:	80 50       	subi	r24, 0x00	; 0
    3f08:	92 42       	sbci	r25, 0x22	; 34
    3f0a:	28 f0       	brcs	.+10     	; 0x3f16 <nrk_stack_check+0x40>
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif
    3f0c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <dump_stack_info>

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
    3f10:	82 e1       	ldi	r24, 0x12	; 18
    3f12:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	08 95       	ret

00003f1c <nrk_signal_create>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    3f1c:	40 91 ef 04 	lds	r20, 0x04EF
    3f20:	50 91 f0 04 	lds	r21, 0x04F0
    3f24:	60 91 f1 04 	lds	r22, 0x04F1
    3f28:	70 91 f2 04 	lds	r23, 0x04F2
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	db 01       	movw	r26, r22
    3f32:	ca 01       	movw	r24, r20
    3f34:	02 2e       	mov	r0, r18
    3f36:	04 c0       	rjmp	.+8      	; 0x3f40 <nrk_signal_create+0x24>
    3f38:	b6 95       	lsr	r27
    3f3a:	a7 95       	ror	r26
    3f3c:	97 95       	ror	r25
    3f3e:	87 95       	ror	r24
    3f40:	0a 94       	dec	r0
    3f42:	d2 f7       	brpl	.-12     	; 0x3f38 <nrk_signal_create+0x1c>
    3f44:	81 70       	andi	r24, 0x01	; 1
    3f46:	90 70       	andi	r25, 0x00	; 0
    3f48:	89 2b       	or	r24, r25
    3f4a:	e9 f4       	brne	.+58     	; 0x3f86 <nrk_signal_create+0x6a>

inline void nrk_int_disable(void) {
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	a0 e0       	ldi	r26, 0x00	; 0
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	02 2e       	mov	r0, r18
    3f56:	04 c0       	rjmp	.+8      	; 0x3f60 <nrk_signal_create+0x44>
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	aa 1f       	adc	r26, r26
    3f5e:	bb 1f       	adc	r27, r27
    3f60:	0a 94       	dec	r0
    3f62:	d2 f7       	brpl	.-12     	; 0x3f58 <nrk_signal_create+0x3c>
    3f64:	84 2b       	or	r24, r20
    3f66:	95 2b       	or	r25, r21
    3f68:	a6 2b       	or	r26, r22
    3f6a:	b7 2b       	or	r27, r23
    3f6c:	80 93 ef 04 	sts	0x04EF, r24
    3f70:	90 93 f0 04 	sts	0x04F0, r25
    3f74:	a0 93 f1 04 	sts	0x04F1, r26
    3f78:	b0 93 f2 04 	sts	0x04F2, r27
  DISABLE_GLOBAL_INT();
    3f7c:	82 2f       	mov	r24, r18
    3f7e:	99 27       	eor	r25, r25
    3f80:	87 fd       	sbrc	r24, 7
    3f82:	90 95       	com	r25
    3f84:	08 95       	ret
    3f86:	2f 5f       	subi	r18, 0xFF	; 255
    3f88:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
    3f8a:	20 32       	cpi	r18, 0x20	; 32
    3f8c:	31 05       	cpc	r19, r1
    3f8e:	81 f6       	brne	.-96     	; 0x3f30 <nrk_signal_create+0x14>
    3f90:	8f ef       	ldi	r24, 0xFF	; 255
    3f92:	9f ef       	ldi	r25, 0xFF	; 255
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    3f94:	08 95       	ret

00003f96 <nrk_signal_get_registered_mask>:
uint8_t nrk_task_init_cnt;


    3f96:	e0 91 d7 06 	lds	r30, 0x06D7
    3f9a:	f0 91 d8 06 	lds	r31, 0x06D8
    3f9e:	65 85       	ldd	r22, Z+13	; 0x0d
    3fa0:	76 85       	ldd	r23, Z+14	; 0x0e
    3fa2:	87 85       	ldd	r24, Z+15	; 0x0f
    3fa4:	90 89       	ldd	r25, Z+16	; 0x10
    3fa6:	08 95       	ret

00003fa8 <nrk_signal_unregister>:
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif
    3fa8:	ef 92       	push	r14
    3faa:	ff 92       	push	r15
    3fac:	0f 93       	push	r16
    3fae:	1f 93       	push	r17



    3fb0:	21 e0       	ldi	r18, 0x01	; 1
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	04 c0       	rjmp	.+8      	; 0x3fc2 <nrk_signal_unregister+0x1a>
    3fba:	22 0f       	add	r18, r18
    3fbc:	33 1f       	adc	r19, r19
    3fbe:	44 1f       	adc	r20, r20
    3fc0:	55 1f       	adc	r21, r21
    3fc2:	8a 95       	dec	r24
    3fc4:	d2 f7       	brpl	.-12     	; 0x3fba <nrk_signal_unregister+0x12>

   #ifdef NRK_REBOOT_ON_ERROR
    3fc6:	e0 91 d7 06 	lds	r30, 0x06D7
    3fca:	f0 91 d8 06 	lds	r31, 0x06D8
    3fce:	e5 84       	ldd	r14, Z+13	; 0x0d
    3fd0:	f6 84       	ldd	r15, Z+14	; 0x0e
    3fd2:	07 85       	ldd	r16, Z+15	; 0x0f
    3fd4:	10 89       	ldd	r17, Z+16	; 0x10
    3fd6:	da 01       	movw	r26, r20
    3fd8:	c9 01       	movw	r24, r18
    3fda:	8e 21       	and	r24, r14
    3fdc:	9f 21       	and	r25, r15
    3fde:	a0 23       	and	r26, r16
    3fe0:	b1 23       	and	r27, r17
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	a1 05       	cpc	r26, r1
    3fe6:	b1 05       	cpc	r27, r1
    3fe8:	19 f4       	brne	.+6      	; 0x3ff0 <nrk_signal_unregister+0x48>
    3fea:	8f ef       	ldi	r24, 0xFF	; 255
    3fec:	9f ef       	ldi	r25, 0xFF	; 255
    3fee:	1a c0       	rjmp	.+52     	; 0x4024 <nrk_signal_unregister+0x7c>
   #ifndef NRK_WATCHDOG
   while(1)
    3ff0:	20 95       	com	r18
    3ff2:	30 95       	com	r19
    3ff4:	40 95       	com	r20
    3ff6:	50 95       	com	r21
    3ff8:	e2 22       	and	r14, r18
    3ffa:	f3 22       	and	r15, r19
    3ffc:	04 23       	and	r16, r20
    3ffe:	15 23       	and	r17, r21
    4000:	e5 86       	std	Z+13, r14	; 0x0d
    4002:	f6 86       	std	Z+14, r15	; 0x0e
    4004:	07 87       	std	Z+15, r16	; 0x0f
    4006:	10 8b       	std	Z+16, r17	; 0x10
	   {
    4008:	81 89       	ldd	r24, Z+17	; 0x11
    400a:	92 89       	ldd	r25, Z+18	; 0x12
    400c:	a3 89       	ldd	r26, Z+19	; 0x13
    400e:	b4 89       	ldd	r27, Z+20	; 0x14
    4010:	82 23       	and	r24, r18
    4012:	93 23       	and	r25, r19
    4014:	a4 23       	and	r26, r20
    4016:	b5 23       	and	r27, r21
    4018:	81 8b       	std	Z+17, r24	; 0x11
    401a:	92 8b       	std	Z+18, r25	; 0x12
    401c:	a3 8b       	std	Z+19, r26	; 0x13
    401e:	b4 8b       	std	Z+20, r27	; 0x14
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	1f 91       	pop	r17
    4026:	0f 91       	pop	r16
    4028:	ff 90       	pop	r15
    402a:	ef 90       	pop	r14
    402c:	08 95       	ret

0000402e <nrk_signal_register>:
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
    402e:	68 2f       	mov	r22, r24
    4030:	77 27       	eor	r23, r23
    4032:	67 fd       	sbrc	r22, 7
    4034:	70 95       	com	r23
    4036:	80 91 ef 04 	lds	r24, 0x04EF
    403a:	90 91 f0 04 	lds	r25, 0x04F0
    403e:	a0 91 f1 04 	lds	r26, 0x04F1
    4042:	b0 91 f2 04 	lds	r27, 0x04F2
    4046:	06 2e       	mov	r0, r22
    4048:	04 c0       	rjmp	.+8      	; 0x4052 <nrk_signal_register+0x24>
    404a:	b6 95       	lsr	r27
    404c:	a7 95       	ror	r26
    404e:	97 95       	ror	r25
    4050:	87 95       	ror	r24
    4052:	0a 94       	dec	r0
    4054:	d2 f7       	brpl	.-12     	; 0x404a <nrk_signal_register+0x1c>
    4056:	81 70       	andi	r24, 0x01	; 1
    4058:	90 70       	andi	r25, 0x00	; 0
    405a:	89 2b       	or	r24, r25
    405c:	19 f4       	brne	.+6      	; 0x4064 <nrk_signal_register+0x36>
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	9f ef       	ldi	r25, 0xFF	; 255
    4062:	08 95       	ret
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    4064:	e0 91 d7 06 	lds	r30, 0x06D7
    4068:	f0 91 d8 06 	lds	r31, 0x06D8
    406c:	21 e0       	ldi	r18, 0x01	; 1
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	04 c0       	rjmp	.+8      	; 0x407e <nrk_signal_register+0x50>
    4076:	22 0f       	add	r18, r18
    4078:	33 1f       	adc	r19, r19
    407a:	44 1f       	adc	r20, r20
    407c:	55 1f       	adc	r21, r21
    407e:	6a 95       	dec	r22
    4080:	d2 f7       	brpl	.-12     	; 0x4076 <nrk_signal_register+0x48>
    4082:	85 85       	ldd	r24, Z+13	; 0x0d
    4084:	96 85       	ldd	r25, Z+14	; 0x0e
    4086:	a7 85       	ldd	r26, Z+15	; 0x0f
    4088:	b0 89       	ldd	r27, Z+16	; 0x10
    408a:	82 2b       	or	r24, r18
    408c:	93 2b       	or	r25, r19
    408e:	a4 2b       	or	r26, r20
    4090:	b5 2b       	or	r27, r21
    4092:	85 87       	std	Z+13, r24	; 0x0d
    4094:	96 87       	std	Z+14, r25	; 0x0e
    4096:	a7 87       	std	Z+15, r26	; 0x0f
    4098:	b0 8b       	std	Z+16, r27	; 0x10
    409a:	81 e0       	ldi	r24, 0x01	; 1
    409c:	90 e0       	ldi	r25, 0x00	; 0
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    409e:	08 95       	ret

000040a0 <nrk_sem_create>:
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    40a0:	38 2f       	mov	r19, r24
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    40a2:	80 91 d6 06 	lds	r24, 0x06D6
    40a6:	88 23       	and	r24, r24
    40a8:	19 f0       	breq	.+6      	; 0x40b0 <nrk_sem_create+0x10>
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	08 95       	ret
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    40b0:	80 91 c0 06 	lds	r24, 0x06C0
    40b4:	8f 3f       	cpi	r24, 0xFF	; 255
    40b6:	11 f4       	brne	.+4      	; 0x40bc <nrk_sem_create+0x1c>
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	07 c0       	rjmp	.+14     	; 0x40ca <nrk_sem_create+0x2a>
    40bc:	80 91 c3 06 	lds	r24, 0x06C3
    40c0:	8f 3f       	cpi	r24, 0xFF	; 255
    40c2:	11 f0       	breq	.+4      	; 0x40c8 <nrk_sem_create+0x28>
    40c4:	22 e0       	ldi	r18, 0x02	; 2
    40c6:	01 c0       	rjmp	.+2      	; 0x40ca <nrk_sem_create+0x2a>
    40c8:	21 e0       	ldi	r18, 0x01	; 1
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    40ca:	82 2f       	mov	r24, r18
    40cc:	99 27       	eor	r25, r25
    40ce:	fc 01       	movw	r30, r24
    40d0:	ee 0f       	add	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	e8 0f       	add	r30, r24
    40d6:	f9 1f       	adc	r31, r25
    40d8:	e0 54       	subi	r30, 0x40	; 64
    40da:	f9 4f       	sbci	r31, 0xF9	; 249
    40dc:	32 83       	std	Z+2, r19	; 0x02
 
    40de:	30 83       	st	Z, r19
	
    40e0:	61 83       	std	Z+1, r22	; 0x01
	         
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	80 93 d6 06 	sts	0x06D6, r24

    40e8:	83 e0       	ldi	r24, 0x03	; 3
    40ea:	28 9f       	mul	r18, r24
    40ec:	c0 01       	movw	r24, r0
    40ee:	11 24       	eor	r1, r1
    40f0:	80 54       	subi	r24, 0x40	; 64
    40f2:	99 4f       	sbci	r25, 0xF9	; 249
			
    40f4:	08 95       	ret

000040f6 <nrk_get_resource_index>:
    return NRK_OK;

}


/*
    40f6:	26 e0       	ldi	r18, 0x06	; 6
    40f8:	80 3c       	cpi	r24, 0xC0	; 192
    40fa:	92 07       	cpc	r25, r18
    40fc:	11 f4       	brne	.+4      	; 0x4102 <nrk_get_resource_index+0xc>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	07 c0       	rjmp	.+14     	; 0x4110 <nrk_get_resource_index+0x1a>
    4102:	83 5c       	subi	r24, 0xC3	; 195
    4104:	96 40       	sbci	r25, 0x06	; 6
    4106:	19 f0       	breq	.+6      	; 0x410e <nrk_get_resource_index+0x18>
    4108:	8f ef       	ldi	r24, 0xFF	; 255
    410a:	9f ef       	ldi	r25, 0xFF	; 255
    410c:	08 95       	ret
    410e:	81 e0       	ldi	r24, 0x01	; 1
 * _nrk_timer_tick() 
    4110:	99 27       	eor	r25, r25
    4112:	87 fd       	sbrc	r24, 7
    4114:	90 95       	com	r25
 *
 * This function is called by the interrupt timer0.
    4116:	08 95       	ret

00004118 <nrk_sem_delete>:


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
	
    //  Already in critical section so no needenter critical section
    4118:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <nrk_get_resource_index>
    if(Task->Type!=IDLE_TASK)
    	Task->task_ID=nrk_task_init_cnt;
    411c:	8f 3f       	cpi	r24, 0xFF	; 255
    411e:	11 f4       	brne	.+4      	; 0x4124 <nrk_sem_delete+0xc>
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	02 c0       	rjmp	.+4      	; 0x4128 <nrk_sem_delete+0x10>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    4124:	82 30       	cpi	r24, 0x02	; 2
    4126:	29 f4       	brne	.+10     	; 0x4132 <nrk_sem_delete+0x1a>
    4128:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
    412c:	8f ef       	ldi	r24, 0xFF	; 255
    412e:	9f ef       	ldi	r25, 0xFF	; 255
    4130:	08 95       	ret

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    4132:	99 27       	eor	r25, r25
    4134:	87 fd       	sbrc	r24, 7
    4136:	90 95       	com	r25
    4138:	fc 01       	movw	r30, r24
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	e8 0f       	add	r30, r24
    4140:	f9 1f       	adc	r31, r25
    4142:	e0 54       	subi	r30, 0x40	; 64
    4144:	f9 4f       	sbci	r31, 0xF9	; 249
    4146:	8f ef       	ldi	r24, 0xFF	; 255
    4148:	80 83       	st	Z, r24
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    414a:	82 83       	std	Z+2, r24	; 0x02
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    414c:	81 83       	std	Z+1, r24	; 0x01
    //initialize member of TCB structure
    414e:	80 91 d6 06 	lds	r24, 0x06D6
    4152:	81 50       	subi	r24, 0x01	; 1
    4154:	80 93 d6 06 	sts	0x06D6, r24
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    415c:	08 95       	ret

0000415e <nrk_sem_query>:
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}

    415e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <nrk_get_resource_index>

    4162:	8f 3f       	cpi	r24, 0xFF	; 255
    4164:	11 f4       	brne	.+4      	; 0x416a <nrk_sem_query+0xc>
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	02 c0       	rjmp	.+4      	; 0x416e <nrk_sem_query+0x10>

    416a:	82 30       	cpi	r24, 0x02	; 2
    416c:	29 f4       	brne	.+10     	; 0x4178 <nrk_sem_query+0x1a>
    416e:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
    4172:	8f ef       	ldi	r24, 0xFF	; 255
    4174:	9f ef       	ldi	r25, 0xFF	; 255
    4176:	08 95       	ret


    4178:	99 27       	eor	r25, r25
    417a:	87 fd       	sbrc	r24, 7
    417c:	90 95       	com	r25
    417e:	fc 01       	movw	r30, r24
    4180:	ee 0f       	add	r30, r30
    4182:	ff 1f       	adc	r31, r31
    4184:	e8 0f       	add	r30, r24
    4186:	f9 1f       	adc	r31, r25
    4188:	e0 54       	subi	r30, 0x40	; 64
    418a:	f9 4f       	sbci	r31, 0xF9	; 249
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	99 27       	eor	r25, r25
    4190:	87 fd       	sbrc	r24, 7
    4192:	90 95       	com	r25

    4194:	08 95       	ret

00004196 <nrk_sem_post>:
			}
		}
	}

    }

    4196:	1f 93       	push	r17
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    task_ID = nrk_get_high_ready_task_ID();	
    419c:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <nrk_get_resource_index>
    41a0:	18 2f       	mov	r17, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    41a2:	8f 3f       	cpi	r24, 0xFF	; 255
    41a4:	11 f4       	brne	.+4      	; 0x41aa <nrk_sem_post+0x14>
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	03 c0       	rjmp	.+6      	; 0x41b0 <nrk_sem_post+0x1a>
    nrk_cur_task_prio = nrk_high_ready_prio;
    41aa:	82 30       	cpi	r24, 0x02	; 2
    41ac:	31 f4       	brne	.+12     	; 0x41ba <nrk_sem_post+0x24>
    41ae:	82 e0       	ldi	r24, 0x02	; 2
    41b0:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
    41b4:	8f ef       	ldi	r24, 0xFF	; 255
    41b6:	9f ef       	ldi	r25, 0xFF	; 255
    41b8:	3e c0       	rjmp	.+124    	; 0x4236 <nrk_sem_post+0xa0>
		
//    nrk_stack_pointer_restore();
    41ba:	99 27       	eor	r25, r25
    41bc:	87 fd       	sbrc	r24, 7
    41be:	90 95       	com	r25
    41c0:	ec 01       	movw	r28, r24
    41c2:	cc 0f       	add	r28, r28
    41c4:	dd 1f       	adc	r29, r29
    41c6:	c8 0f       	add	r28, r24
    41c8:	d9 1f       	adc	r29, r25
    41ca:	c0 54       	subi	r28, 0x40	; 64
    41cc:	d9 4f       	sbci	r29, 0xF9	; 249
    41ce:	9a 81       	ldd	r25, Y+2	; 0x02
    41d0:	88 81       	ld	r24, Y
    41d2:	98 17       	cp	r25, r24
    41d4:	74 f5       	brge	.+92     	; 0x4232 <nrk_sem_post+0x9c>

    /*
    #ifdef KERNEL_STK_ARRAY
    41d6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    41da:	8a 81       	ldd	r24, Y+2	; 0x02
    41dc:	8f 5f       	subi	r24, 0xFF	; 255
    41de:	8a 83       	std	Y+2, r24	; 0x02
    	stkc = NRK_KERNEL_STK_TOP;
    41e0:	e0 91 d7 06 	lds	r30, 0x06D7
    41e4:	f0 91 d8 06 	lds	r31, 0x06D8
    41e8:	14 82       	std	Z+4, r1	; 0x04
    41ea:	e1 e4       	ldi	r30, 0x41	; 65
    41ec:	f6 e0       	ldi	r31, 0x06	; 6
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    41ee:	21 2f       	mov	r18, r17
    41f0:	33 27       	eor	r19, r19
    41f2:	27 fd       	sbrc	r18, 7
    41f4:	30 95       	com	r19
    41f6:	43 2f       	mov	r20, r19
    41f8:	53 2f       	mov	r21, r19
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    41fa:	80 81       	ld	r24, Z
    41fc:	82 30       	cpi	r24, 0x02	; 2
    41fe:	91 f4       	brne	.+36     	; 0x4224 <nrk_sem_post+0x8e>
    
    4200:	82 85       	ldd	r24, Z+10	; 0x0a
    4202:	93 85       	ldd	r25, Z+11	; 0x0b
    4204:	a4 85       	ldd	r26, Z+12	; 0x0c
    4206:	b5 85       	ldd	r27, Z+13	; 0x0d
    4208:	82 17       	cp	r24, r18
    420a:	93 07       	cpc	r25, r19
    420c:	a4 07       	cpc	r26, r20
    420e:	b5 07       	cpc	r27, r21
    4210:	49 f4       	brne	.+18     	; 0x4224 <nrk_sem_post+0x8e>
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4212:	83 e0       	ldi	r24, 0x03	; 3
    4214:	82 83       	std	Z+2, r24	; 0x02
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    4216:	17 86       	std	Z+15, r1	; 0x0f
    4218:	16 86       	std	Z+14, r1	; 0x0e
*/
    421a:	10 82       	st	Z, r1
    nrk_target_start();
    421c:	12 86       	std	Z+10, r1	; 0x0a
    421e:	13 86       	std	Z+11, r1	; 0x0b
    4220:	14 86       	std	Z+12, r1	; 0x0c
    4222:	15 86       	std	Z+13, r1	; 0x0d
    4224:	b1 96       	adiw	r30, 0x21	; 33
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4226:	86 e0       	ldi	r24, 0x06	; 6
    4228:	e5 3c       	cpi	r30, 0xC5	; 197
    422a:	f8 07       	cpc	r31, r24
    422c:	31 f7       	brne	.-52     	; 0x41fa <nrk_sem_post+0x64>
*/
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    422e:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	1f 91       	pop	r17
    423c:	08 95       	ret

0000423e <nrk_event_signal>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    423e:	df 92       	push	r13
    4240:	ef 92       	push	r14
    4242:	ff 92       	push	r15
    4244:	0f 93       	push	r16
    4246:	1f 93       	push	r17
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    4248:	e1 e0       	ldi	r30, 0x01	; 1
    424a:	ee 2e       	mov	r14, r30
    424c:	f1 2c       	mov	r15, r1
    424e:	01 2d       	mov	r16, r1
    4250:	11 2d       	mov	r17, r1
    4252:	04 c0       	rjmp	.+8      	; 0x425c <nrk_event_signal+0x1e>
    4254:	ee 0c       	add	r14, r14
    4256:	ff 1c       	adc	r15, r15
    4258:	00 1f       	adc	r16, r16
    425a:	11 1f       	adc	r17, r17
    425c:	8a 95       	dec	r24
    425e:	d2 f7       	brpl	.-12     	; 0x4254 <nrk_event_signal+0x16>
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    4260:	80 91 ef 04 	lds	r24, 0x04EF
    4264:	90 91 f0 04 	lds	r25, 0x04F0
    4268:	a0 91 f1 04 	lds	r26, 0x04F1
    426c:	b0 91 f2 04 	lds	r27, 0x04F2
    4270:	8e 21       	and	r24, r14
    4272:	9f 21       	and	r25, r15
    4274:	a0 23       	and	r26, r16
    4276:	b1 23       	and	r27, r17
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	a1 05       	cpc	r26, r1
    427c:	b1 05       	cpc	r27, r1
    427e:	11 f4       	brne	.+4      	; 0x4284 <nrk_event_signal+0x46>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	43 c0       	rjmp	.+134    	; 0x430a <nrk_event_signal+0xcc>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    4284:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    4288:	e1 e4       	ldi	r30, 0x41	; 65
    428a:	f6 e0       	ldi	r31, 0x06	; 6
    428c:	dd 24       	eor	r13, r13
    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    428e:	80 81       	ld	r24, Z
    4290:	81 30       	cpi	r24, 0x01	; 1
    4292:	b9 f4       	brne	.+46     	; 0x42c2 <nrk_event_signal+0x84>

    4294:	82 85       	ldd	r24, Z+10	; 0x0a
    4296:	93 85       	ldd	r25, Z+11	; 0x0b
    4298:	a4 85       	ldd	r26, Z+12	; 0x0c
    429a:	b5 85       	ldd	r27, Z+13	; 0x0d
    429c:	8e 21       	and	r24, r14
    429e:	9f 21       	and	r25, r15
    42a0:	a0 23       	and	r26, r16
    42a2:	b1 23       	and	r27, r17
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	a1 05       	cpc	r26, r1
    42a8:	b1 05       	cpc	r27, r1
    42aa:	59 f0       	breq	.+22     	; 0x42c2 <nrk_event_signal+0x84>
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    42ac:	83 e0       	ldi	r24, 0x03	; 3
    42ae:	82 83       	std	Z+2, r24	; 0x02
   #endif
    42b0:	17 86       	std	Z+15, r1	; 0x0f
    42b2:	16 86       	std	Z+14, r1	; 0x0e

    42b4:	10 82       	st	Z, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    42b6:	e2 86       	std	Z+10, r14	; 0x0a
    42b8:	f3 86       	std	Z+11, r15	; 0x0b
    42ba:	04 87       	std	Z+12, r16	; 0x0c
    42bc:	15 87       	std	Z+13, r17	; 0x0d
    42be:	dd 24       	eor	r13, r13
    42c0:	d3 94       	inc	r13
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

    42c2:	80 81       	ld	r24, Z
    42c4:	82 30       	cpi	r24, 0x02	; 2
    42c6:	a1 f4       	brne	.+40     	; 0x42f0 <nrk_event_signal+0xb2>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    42c8:	82 85       	ldd	r24, Z+10	; 0x0a
    42ca:	93 85       	ldd	r25, Z+11	; 0x0b
    42cc:	a4 85       	ldd	r26, Z+12	; 0x0c
    42ce:	b5 85       	ldd	r27, Z+13	; 0x0d
    42d0:	8e 15       	cp	r24, r14
    42d2:	9f 05       	cpc	r25, r15
    42d4:	a0 07       	cpc	r26, r16
    42d6:	b1 07       	cpc	r27, r17
    42d8:	59 f4       	brne	.+22     	; 0x42f0 <nrk_event_signal+0xb2>
{
    nrk_sem_list[i].count=-1;
    42da:	83 e0       	ldi	r24, 0x03	; 3
    42dc:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].value=-1;
    42de:	17 86       	std	Z+15, r1	; 0x0f
    42e0:	16 86       	std	Z+14, r1	; 0x0e
    nrk_sem_list[i].resource_ceiling=-1;
    42e2:	10 82       	st	Z, r1
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    42e4:	12 86       	std	Z+10, r1	; 0x0a
    42e6:	13 86       	std	Z+11, r1	; 0x0b
    42e8:	14 86       	std	Z+12, r1	; 0x0c
    42ea:	15 86       	std	Z+13, r1	; 0x0d
    42ec:	dd 24       	eor	r13, r13
    42ee:	d3 94       	inc	r13
    42f0:	b1 96       	adiw	r30, 0x21	; 33
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    42f2:	86 e0       	ldi	r24, 0x06	; 6
    42f4:	e5 3c       	cpi	r30, 0xC5	; 197
    42f6:	f8 07       	cpc	r31, r24
    42f8:	51 f6       	brne	.-108    	; 0x428e <nrk_event_signal+0x50>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    42fa:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
        }
    42fe:	dd 20       	and	r13, r13
    4300:	19 f0       	breq	.+6      	; 0x4308 <nrk_event_signal+0xca>
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	05 c0       	rjmp	.+10     	; 0x4312 <nrk_event_signal+0xd4>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    4308:	82 e0       	ldi	r24, 0x02	; 2
    430a:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
    430e:	8f ef       	ldi	r24, 0xFF	; 255
    4310:	9f ef       	ldi	r25, 0xFF	; 255
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	ff 90       	pop	r15
    4318:	ef 90       	pop	r14
    431a:	df 90       	pop	r13
    431c:	08 95       	ret

0000431e <nrk_signal_delete>:
void nrk_halt()
{
nrk_int_disable();
while(1);
}

    431e:	ef 92       	push	r14
    4320:	ff 92       	push	r15
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    432a:	c8 2f       	mov	r28, r24
    432c:	dd 27       	eor	r29, r29
    432e:	c7 fd       	sbrc	r28, 7
    4330:	d0 95       	com	r29
    4332:	f1 e0       	ldi	r31, 0x01	; 1
    4334:	ef 2e       	mov	r14, r31
    4336:	f1 2c       	mov	r15, r1
    4338:	01 2d       	mov	r16, r1
    433a:	11 2d       	mov	r17, r1
    433c:	0c 2e       	mov	r0, r28
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <nrk_signal_delete+0x2a>
    4340:	ee 0c       	add	r14, r14
    4342:	ff 1c       	adc	r15, r15
    4344:	00 1f       	adc	r16, r16
    4346:	11 1f       	adc	r17, r17
    4348:	0a 94       	dec	r0
    434a:	d2 f7       	brpl	.-12     	; 0x4340 <nrk_signal_delete+0x22>
 *  - Init event list
 *  - Create idle task
    434c:	80 91 ef 04 	lds	r24, 0x04EF
    4350:	90 91 f0 04 	lds	r25, 0x04F0
    4354:	a0 91 f1 04 	lds	r26, 0x04F1
    4358:	b0 91 f2 04 	lds	r27, 0x04F2
    435c:	8e 21       	and	r24, r14
    435e:	9f 21       	and	r25, r15
    4360:	a0 23       	and	r26, r16
    4362:	b1 23       	and	r27, r17
    4364:	00 97       	sbiw	r24, 0x00	; 0
    4366:	a1 05       	cpc	r26, r1
    4368:	b1 05       	cpc	r27, r1
    436a:	19 f4       	brne	.+6      	; 0x4372 <nrk_signal_delete+0x54>
    436c:	8f ef       	ldi	r24, 0xFF	; 255
    436e:	9f ef       	ldi	r25, 0xFF	; 255
    4370:	5d c0       	rjmp	.+186    	; 0x442c <nrk_signal_delete+0x10e>
 */
void nrk_init()
    4372:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    4376:	ea e3       	ldi	r30, 0x3A	; 58
    4378:	f6 e0       	ldi	r31, 0x06	; 6
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    437a:	a8 01       	movw	r20, r16
    437c:	97 01       	movw	r18, r14
    437e:	20 95       	com	r18
    4380:	30 95       	com	r19
    4382:	40 95       	com	r20
    4384:	50 95       	com	r21
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
	
    4386:	80 85       	ldd	r24, Z+8	; 0x08
    4388:	8f 3f       	cpi	r24, 0xFF	; 255
    438a:	41 f1       	breq	.+80     	; 0x43dc <nrk_signal_delete+0xbe>
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    438c:	85 85       	ldd	r24, Z+13	; 0x0d
    438e:	96 85       	ldd	r25, Z+14	; 0x0e
    4390:	a7 85       	ldd	r26, Z+15	; 0x0f
    4392:	b0 89       	ldd	r27, Z+16	; 0x10
    4394:	8e 15       	cp	r24, r14
    4396:	9f 05       	cpc	r25, r15
    4398:	a0 07       	cpc	r26, r16
    439a:	b1 07       	cpc	r27, r17
    439c:	39 f4       	brne	.+14     	; 0x43ac <nrk_signal_delete+0x8e>
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    439e:	11 8a       	std	Z+17, r1	; 0x11
    43a0:	12 8a       	std	Z+18, r1	; 0x12
    43a2:	13 8a       	std	Z+19, r1	; 0x13
    43a4:	14 8a       	std	Z+20, r1	; 0x14
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    43a6:	17 82       	std	Z+7, r1	; 0x07
   i=_nrk_startup_error();
    43a8:	83 e0       	ldi	r24, 0x03	; 3
    43aa:	81 87       	std	Z+9, r24	; 0x09
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    43ac:	85 85       	ldd	r24, Z+13	; 0x0d
    43ae:	96 85       	ldd	r25, Z+14	; 0x0e
    43b0:	a7 85       	ldd	r26, Z+15	; 0x0f
    43b2:	b0 89       	ldd	r27, Z+16	; 0x10
    43b4:	82 23       	and	r24, r18
    43b6:	93 23       	and	r25, r19
    43b8:	a4 23       	and	r26, r20
    43ba:	b5 23       	and	r27, r21
    43bc:	85 87       	std	Z+13, r24	; 0x0d
    43be:	96 87       	std	Z+14, r25	; 0x0e
    43c0:	a7 87       	std	Z+15, r26	; 0x0f
    43c2:	b0 8b       	std	Z+16, r27	; 0x10
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    43c4:	81 89       	ldd	r24, Z+17	; 0x11
    43c6:	92 89       	ldd	r25, Z+18	; 0x12
    43c8:	a3 89       	ldd	r26, Z+19	; 0x13
    43ca:	b4 89       	ldd	r27, Z+20	; 0x14
    43cc:	82 23       	and	r24, r18
    43ce:	93 23       	and	r25, r19
    43d0:	a4 23       	and	r26, r20
    43d2:	b5 23       	and	r27, r21
    43d4:	81 8b       	std	Z+17, r24	; 0x11
    43d6:	92 8b       	std	Z+18, r25	; 0x12
    43d8:	a3 8b       	std	Z+19, r26	; 0x13
    43da:	b4 8b       	std	Z+20, r27	; 0x14
    43dc:	b1 96       	adiw	r30, 0x21	; 33
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    43de:	86 e0       	ldi	r24, 0x06	; 6
    43e0:	ee 3b       	cpi	r30, 0xBE	; 190
    43e2:	f8 07       	cpc	r31, r24
    43e4:	81 f6       	brne	.-96     	; 0x4386 <nrk_signal_delete+0x68>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    43e6:	2e ef       	ldi	r18, 0xFE	; 254
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f ef       	ldi	r20, 0xFF	; 255
    43ec:	5f ef       	ldi	r21, 0xFF	; 255
    43ee:	04 c0       	rjmp	.+8      	; 0x43f8 <nrk_signal_delete+0xda>
    43f0:	22 0f       	add	r18, r18
    43f2:	33 1f       	adc	r19, r19
    43f4:	44 1f       	adc	r20, r20
    43f6:	55 1f       	adc	r21, r21
    43f8:	ca 95       	dec	r28
    43fa:	d2 f7       	brpl	.-12     	; 0x43f0 <nrk_signal_delete+0xd2>
    43fc:	80 91 ef 04 	lds	r24, 0x04EF
    4400:	90 91 f0 04 	lds	r25, 0x04F0
    4404:	a0 91 f1 04 	lds	r26, 0x04F1
    4408:	b0 91 f2 04 	lds	r27, 0x04F2
    440c:	82 23       	and	r24, r18
    440e:	93 23       	and	r25, r19
    4410:	a4 23       	and	r26, r20
    4412:	b5 23       	and	r27, r21
    4414:	80 93 ef 04 	sts	0x04EF, r24
    4418:	90 93 f0 04 	sts	0x04F0, r25
    441c:	a0 93 f1 04 	sts	0x04F1, r26
    4420:	b0 93 f2 04 	sts	0x04F2, r27
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    4424:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ff 90       	pop	r15
    4436:	ef 90       	pop	r14
    4438:	08 95       	ret

0000443a <nrk_sem_pend>:



void nrk_start (void)
{
	int8_t task_ID;
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
	uint8_t i,j;
//	NRK_STK *x;
    4440:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <nrk_get_resource_index>
    4444:	18 2f       	mov	r17, r24
//	unsigned char *stkc;
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	11 f4       	brne	.+4      	; 0x444e <nrk_sem_pend+0x14>
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	03 c0       	rjmp	.+6      	; 0x4454 <nrk_sem_pend+0x1a>

    444e:	82 30       	cpi	r24, 0x02	; 2
    4450:	31 f4       	brne	.+12     	; 0x445e <nrk_sem_pend+0x24>
    4452:	82 e0       	ldi	r24, 0x02	; 2
    4454:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_nrk_errno_set>
    4458:	8f ef       	ldi	r24, 0xFF	; 255
    445a:	9f ef       	ldi	r25, 0xFF	; 255
    445c:	3e c0       	rjmp	.+124    	; 0x44da <nrk_sem_pend+0xa0>
	/*
		- Get highest priority task from rdy list
    445e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
		- set cur prio and start the task 
    4462:	81 2f       	mov	r24, r17
    4464:	99 27       	eor	r25, r25
    4466:	87 fd       	sbrc	r24, 7
    4468:	90 95       	com	r25
    446a:	ec 01       	movw	r28, r24
    446c:	cc 0f       	add	r28, r28
    446e:	dd 1f       	adc	r29, r29
    4470:	c8 0f       	add	r28, r24
    4472:	d9 1f       	adc	r29, r25
    4474:	c0 54       	subi	r28, 0x40	; 64
    4476:	d9 4f       	sbci	r29, 0xF9	; 249
    4478:	8a 81       	ldd	r24, Y+2	; 0x02
    447a:	88 23       	and	r24, r24
    447c:	d9 f4       	brne	.+54     	; 0x44b4 <nrk_sem_pend+0x7a>
	*/
    // Check to make sure all tasks unique
    447e:	e0 91 d7 06 	lds	r30, 0x06D7
    4482:	f0 91 d8 06 	lds	r31, 0x06D8
    4486:	87 81       	ldd	r24, Z+7	; 0x07
    4488:	82 60       	ori	r24, 0x02	; 2
    448a:	87 83       	std	Z+7, r24	; 0x07
    for(i=0; i<NRK_MAX_TASKS; i++ )
    448c:	e0 91 d7 06 	lds	r30, 0x06D7
    4490:	f0 91 d8 06 	lds	r31, 0x06D8
    4494:	81 2f       	mov	r24, r17
    4496:	99 27       	eor	r25, r25
    4498:	87 fd       	sbrc	r24, 7
    449a:	90 95       	com	r25
    449c:	a9 2f       	mov	r26, r25
    449e:	b9 2f       	mov	r27, r25
    44a0:	81 8b       	std	Z+17, r24	; 0x11
    44a2:	92 8b       	std	Z+18, r25	; 0x12
    44a4:	a3 8b       	std	Z+19, r26	; 0x13
    44a6:	b4 8b       	std	Z+20, r27	; 0x14
    {
	task_ID = nrk_task_TCB[i].task_ID;
    44a8:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
	// only check activated tasks
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0e 94 b6 24 	call	0x496c	; 0x496c <nrk_wait_until_ticks>
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    44b4:	8a 81       	ldd	r24, Y+2	; 0x02
    44b6:	81 50       	subi	r24, 0x01	; 1
    44b8:	8a 83       	std	Y+2, r24	; 0x02
		{
    44ba:	e0 91 d7 06 	lds	r30, 0x06D7
    44be:	f0 91 d8 06 	lds	r31, 0x06D8
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	83 87       	std	Z+11, r24	; 0x0b
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    44c6:	e0 91 d7 06 	lds	r30, 0x06D7
    44ca:	f0 91 d8 06 	lds	r31, 0x06D8
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	84 83       	std	Z+4, r24	; 0x04
			{
    44d2:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	08 95       	ret

000044e2 <nrk_event_wait>:
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    44e2:	9b 01       	movw	r18, r22
    44e4:	ac 01       	movw	r20, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
    44e6:	e0 91 d7 06 	lds	r30, 0x06D7
    44ea:	f0 91 d8 06 	lds	r31, 0x06D8
    44ee:	85 85       	ldd	r24, Z+13	; 0x0d
    44f0:	96 85       	ldd	r25, Z+14	; 0x0e
    44f2:	a7 85       	ldd	r26, Z+15	; 0x0f
    44f4:	b0 89       	ldd	r27, Z+16	; 0x10
    44f6:	82 23       	and	r24, r18
    44f8:	93 23       	and	r25, r19
    44fa:	a4 23       	and	r26, r20
    44fc:	b5 23       	and	r27, r21
    44fe:	00 97       	sbiw	r24, 0x00	; 0
    4500:	a1 05       	cpc	r26, r1
    4502:	b1 05       	cpc	r27, r1
    4504:	29 f4       	brne	.+10     	; 0x4510 <nrk_event_wait+0x2e>
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	70 e0       	ldi	r23, 0x00	; 0
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	08 95       	ret
	
	
    4510:	21 8b       	std	Z+17, r18	; 0x11
    4512:	32 8b       	std	Z+18, r19	; 0x12
    4514:	43 8b       	std	Z+19, r20	; 0x13
    4516:	54 8b       	std	Z+20, r21	; 0x14

    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	87 83       	std	Z+7, r24	; 0x07
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    451c:	00 90 c7 06 	lds	r0, 0x06C7
    4520:	04 c0       	rjmp	.+8      	; 0x452a <nrk_event_wait+0x48>
    4522:	56 95       	lsr	r21
    4524:	47 95       	ror	r20
    4526:	37 95       	ror	r19
    4528:	27 95       	ror	r18
    452a:	0a 94       	dec	r0
    452c:	d2 f7       	brpl	.-12     	; 0x4522 <nrk_event_wait+0x40>
    452e:	c9 01       	movw	r24, r18
    4530:	81 70       	andi	r24, 0x01	; 1
    4532:	90 70       	andi	r25, 0x00	; 0
    4534:	89 2b       	or	r24, r25
    4536:	19 f0       	breq	.+6      	; 0x453e <nrk_event_wait+0x5c>
	IdleTask.cpu_reserve.secs = 0;
    4538:	0e 94 57 24 	call	0x48ae	; 0x48ae <nrk_wait_until_nw>
    453c:	04 c0       	rjmp	.+8      	; 0x4546 <nrk_event_wait+0x64>
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 b6 24 	call	0x496c	; 0x496c <nrk_wait_until_ticks>
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    4546:	e0 91 d7 06 	lds	r30, 0x06D7
    454a:	f0 91 d8 06 	lds	r31, 0x06D8
    454e:	61 89       	ldd	r22, Z+17	; 0x11
    4550:	72 89       	ldd	r23, Z+18	; 0x12
    4552:	83 89       	ldd	r24, Z+19	; 0x13
    4554:	94 89       	ldd	r25, Z+20	; 0x14
	IdleTask.Type = IDLE_TASK;
    4556:	08 95       	ret

00004558 <nrk_get_high_ready_task_ID>:
#include <nrk_error.h>
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
    4558:	e0 91 cc 06 	lds	r30, 0x06CC
    455c:	f0 91 cd 06 	lds	r31, 0x06CD
    4560:	80 81       	ld	r24, Z
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    4562:	99 27       	eor	r25, r25
    4564:	08 95       	ret

00004566 <nrk_print_readyQ>:
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    4566:	e0 91 cc 06 	lds	r30, 0x06CC
    456a:	f0 91 cd 06 	lds	r31, 0x06CD
    456e:	03 c0       	rjmp	.+6      	; 0x4576 <nrk_print_readyQ+0x10>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};
    4570:	03 80       	ldd	r0, Z+3	; 0x03
    4572:	f4 81       	ldd	r31, Z+4	; 0x04
    4574:	e0 2d       	mov	r30, r0

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

inline void nrk_int_enable(void) {
    4576:	30 97       	sbiw	r30, 0x00	; 0
    4578:	d9 f7       	brne	.-10     	; 0x4570 <nrk_print_readyQ+0xa>
    457a:	08 95       	ret

0000457c <nrk_add_to_readyQ>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
    4580:	48 2f       	mov	r20, r24
while(1);
}

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    4582:	c0 91 38 06 	lds	r28, 0x0638
    4586:	d0 91 39 06 	lds	r29, 0x0639
    458a:	20 97       	sbiw	r28, 0x00	; 0
    458c:	09 f4       	brne	.+2      	; 0x4590 <nrk_add_to_readyQ+0x14>
    458e:	7a c0       	rjmp	.+244    	; 0x4684 <nrk_add_to_readyQ+0x108>
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    4590:	a0 91 cc 06 	lds	r26, 0x06CC
    4594:	b0 91 cd 06 	lds	r27, 0x06CD
{
	
    uint8_t i;	
    4598:	10 97       	sbiw	r26, 0x00	; 0
    459a:	b9 f1       	breq	.+110    	; 0x460a <nrk_add_to_readyQ+0x8e>
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    459c:	99 27       	eor	r25, r25
    459e:	87 fd       	sbrc	r24, 7
    45a0:	90 95       	com	r25
    45a2:	9c 01       	movw	r18, r24
    45a4:	65 e0       	ldi	r22, 0x05	; 5
    45a6:	22 0f       	add	r18, r18
    45a8:	33 1f       	adc	r19, r19
    45aa:	6a 95       	dec	r22
    45ac:	e1 f7       	brne	.-8      	; 0x45a6 <nrk_add_to_readyQ+0x2a>
    45ae:	28 0f       	add	r18, r24
    45b0:	39 1f       	adc	r19, r25
    45b2:	26 5c       	subi	r18, 0xC6	; 198
    45b4:	39 4f       	sbci	r19, 0xF9	; 249
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    45b6:	8c 91       	ld	r24, X
    45b8:	99 27       	eor	r25, r25
    45ba:	bc 01       	movw	r22, r24
    45bc:	55 e0       	ldi	r21, 0x05	; 5
    45be:	66 0f       	add	r22, r22
    45c0:	77 1f       	adc	r23, r23
    45c2:	5a 95       	dec	r21
    45c4:	e1 f7       	brne	.-8      	; 0x45be <nrk_add_to_readyQ+0x42>
    45c6:	68 0f       	add	r22, r24
    45c8:	79 1f       	adc	r23, r25
    45ca:	66 5c       	subi	r22, 0xC6	; 198
    45cc:	79 4f       	sbci	r23, 0xF9	; 249
    45ce:	fb 01       	movw	r30, r22
    45d0:	84 81       	ldd	r24, Z+4	; 0x04
    45d2:	88 23       	and	r24, r24
    45d4:	29 f0       	breq	.+10     	; 0x45e0 <nrk_add_to_readyQ+0x64>
   nrk_wakeup_signal = nrk_signal_create();
    45d6:	93 85       	ldd	r25, Z+11	; 0x0b
    45d8:	f9 01       	movw	r30, r18
    45da:	82 85       	ldd	r24, Z+10	; 0x0a
    45dc:	98 17       	cp	r25, r24
    45de:	a8 f0       	brcs	.+42     	; 0x460a <nrk_add_to_readyQ+0x8e>
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    45e0:	f9 01       	movw	r30, r18
    45e2:	84 81       	ldd	r24, Z+4	; 0x04
    45e4:	88 23       	and	r24, r24
    45e6:	31 f0       	breq	.+12     	; 0x45f4 <nrk_add_to_readyQ+0x78>
   i=_nrk_startup_error();
    45e8:	fb 01       	movw	r30, r22
    45ea:	92 85       	ldd	r25, Z+10	; 0x0a
    45ec:	f9 01       	movw	r30, r18
    45ee:	83 85       	ldd	r24, Z+11	; 0x0b
    45f0:	98 17       	cp	r25, r24
    45f2:	58 f0       	brcs	.+22     	; 0x460a <nrk_add_to_readyQ+0x8e>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    45f4:	fb 01       	movw	r30, r22
    45f6:	92 85       	ldd	r25, Z+10	; 0x0a
    45f8:	f9 01       	movw	r30, r18
    45fa:	82 85       	ldd	r24, Z+10	; 0x0a
    45fc:	98 17       	cp	r25, r24
    45fe:	28 f0       	brcs	.+10     	; 0x460a <nrk_add_to_readyQ+0x8e>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    4600:	fd 01       	movw	r30, r26
    4602:	a3 81       	ldd	r26, Z+3	; 0x03
    4604:	b4 81       	ldd	r27, Z+4	; 0x04
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
    4606:	10 97       	sbiw	r26, 0x00	; 0
    4608:	b1 f6       	brne	.-84     	; 0x45b6 <nrk_add_to_readyQ+0x3a>
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif




    460a:	48 83       	st	Y, r20
   #ifdef NRK_REBOOT_ON_ERROR
    460c:	e0 91 38 06 	lds	r30, 0x0638
    4610:	f0 91 39 06 	lds	r31, 0x0639
    4614:	23 81       	ldd	r18, Z+3	; 0x03
    4616:	34 81       	ldd	r19, Z+4	; 0x04
    4618:	30 93 39 06 	sts	0x0639, r19
    461c:	20 93 38 06 	sts	0x0638, r18
   #ifndef NRK_WATCHDOG
   while(1)
    4620:	80 91 cc 06 	lds	r24, 0x06CC
    4624:	90 91 cd 06 	lds	r25, 0x06CD
    4628:	a8 17       	cp	r26, r24
    462a:	b9 07       	cpc	r27, r25
    462c:	a1 f4       	brne	.+40     	; 0x4656 <nrk_add_to_readyQ+0xda>
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    462e:	10 97       	sbiw	r26, 0x00	; 0
    4630:	31 f0       	breq	.+12     	; 0x463e <nrk_add_to_readyQ+0xc2>
    		for (i = 0; i < 100; i++)
    4632:	bc 83       	std	Y+4, r27	; 0x04
    4634:	ab 83       	std	Y+3, r26	; 0x03
      			nrk_spin_wait_us (1000);
    4636:	1a 82       	std	Y+2, r1	; 0x02
    4638:	19 82       	std	Y+1, r1	; 0x01
	   }
    463a:	fd 01       	movw	r30, r26
    463c:	05 c0       	rjmp	.+10     	; 0x4648 <nrk_add_to_readyQ+0xcc>
   #endif
   #endif

    463e:	1c 82       	std	Y+4, r1	; 0x04
    4640:	1b 82       	std	Y+3, r1	; 0x03
   #ifdef NRK_WATCHDOG
    4642:	1a 82       	std	Y+2, r1	; 0x02
    4644:	19 82       	std	Y+1, r1	; 0x01
    if(nrk_watchdog_check()==NRK_ERROR) 
    4646:	f9 01       	movw	r30, r18
    4648:	d2 83       	std	Z+2, r29	; 0x02
    464a:	c1 83       	std	Z+1, r28	; 0x01
	{
    	nrk_watchdog_disable();
    464c:	d0 93 cd 06 	sts	0x06CD, r29
    4650:	c0 93 cc 06 	sts	0x06CC, r28
    4654:	17 c0       	rjmp	.+46     	; 0x4684 <nrk_add_to_readyQ+0x108>
    4656:	fd 01       	movw	r30, r26
    4658:	81 81       	ldd	r24, Z+1	; 0x01
    465a:	92 81       	ldd	r25, Z+2	; 0x02
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    #endif
    465c:	a2 17       	cp	r26, r18
    465e:	b3 07       	cpc	r27, r19
    4660:	51 f0       	breq	.+20     	; 0x4676 <nrk_add_to_readyQ+0xfa>
  
  // nrk_stack_pointer_init(); 
/* 
    4662:	9a 83       	std	Y+2, r25	; 0x02
    4664:	89 83       	std	Y+1, r24	; 0x01
    #ifdef KERNEL_STK_ARRAY
    4666:	bc 83       	std	Y+4, r27	; 0x04
    4668:	ab 83       	std	Y+3, r26	; 0x03
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    466a:	81 81       	ldd	r24, Z+1	; 0x01
    466c:	92 81       	ldd	r25, Z+2	; 0x02
    466e:	fc 01       	movw	r30, r24
    4670:	d4 83       	std	Z+4, r29	; 0x04
    4672:	c3 83       	std	Z+3, r28	; 0x03
    4674:	04 c0       	rjmp	.+8      	; 0x467e <nrk_add_to_readyQ+0x102>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    4676:	1c 82       	std	Y+4, r1	; 0x04
    4678:	1b 82       	std	Y+3, r1	; 0x03
    	stkc = NRK_KERNEL_STK_TOP;
    467a:	9a 83       	std	Y+2, r25	; 0x02
    467c:	89 83       	std	Y+1, r24	; 0x01
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    467e:	fd 01       	movw	r30, r26
    4680:	d2 83       	std	Z+2, r29	; 0x02
    4682:	c1 83       	std	Z+1, r28	; 0x01
    4684:	df 91       	pop	r29
    4686:	cf 91       	pop	r28
    4688:	08 95       	ret

0000468a <nrk_rem_from_readyQ>:
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    468a:	cf 93       	push	r28
    468c:	df 93       	push	r29
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
    468e:	a0 91 cc 06 	lds	r26, 0x06CC
    4692:	b0 91 cd 06 	lds	r27, 0x06CD
    4696:	10 97       	sbiw	r26, 0x00	; 0
    4698:	09 f4       	brne	.+2      	; 0x469c <nrk_rem_from_readyQ+0x12>
    469a:	46 c0       	rjmp	.+140    	; 0x4728 <nrk_rem_from_readyQ+0x9e>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    469c:	48 2f       	mov	r20, r24
    469e:	55 27       	eor	r21, r21
    46a0:	47 fd       	sbrc	r20, 7
    46a2:	50 95       	com	r21
    46a4:	8c 91       	ld	r24, X
    46a6:	99 27       	eor	r25, r25
    46a8:	84 17       	cp	r24, r20
    46aa:	95 07       	cpc	r25, r21
    46ac:	69 f4       	brne	.+26     	; 0x46c8 <nrk_rem_from_readyQ+0x3e>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    46ae:	ed 01       	movw	r28, r26
    46b0:	eb 81       	ldd	r30, Y+3	; 0x03
    46b2:	fc 81       	ldd	r31, Y+4	; 0x04
    46b4:	f0 93 cd 06 	sts	0x06CD, r31
    46b8:	e0 93 cc 06 	sts	0x06CC, r30
	}
    46bc:	12 82       	std	Z+2, r1	; 0x02
    46be:	11 82       	std	Z+1, r1	; 0x01
    46c0:	16 c0       	rjmp	.+44     	; 0x46ee <nrk_rem_from_readyQ+0x64>
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    46c2:	d9 01       	movw	r26, r18
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    46c4:	23 2b       	or	r18, r19
    46c6:	81 f1       	breq	.+96     	; 0x4728 <nrk_rem_from_readyQ+0x9e>
    46c8:	8c 91       	ld	r24, X
    46ca:	99 27       	eor	r25, r25
    46cc:	fd 01       	movw	r30, r26
    46ce:	23 81       	ldd	r18, Z+3	; 0x03
    46d0:	34 81       	ldd	r19, Z+4	; 0x04
    46d2:	84 17       	cp	r24, r20
    46d4:	95 07       	cpc	r25, r21
    46d6:	a9 f7       	brne	.-22     	; 0x46c2 <nrk_rem_from_readyQ+0x38>
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	

    46d8:	c1 81       	ldd	r28, Z+1	; 0x01
    46da:	d2 81       	ldd	r29, Z+2	; 0x02
    46dc:	3c 83       	std	Y+4, r19	; 0x04
    46de:	2b 83       	std	Y+3, r18	; 0x03
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    46e0:	83 81       	ldd	r24, Z+3	; 0x03
    46e2:	94 81       	ldd	r25, Z+4	; 0x04
    46e4:	00 97       	sbiw	r24, 0x00	; 0
    46e6:	19 f0       	breq	.+6      	; 0x46ee <nrk_rem_from_readyQ+0x64>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    46e8:	fc 01       	movw	r30, r24
    46ea:	d2 83       	std	Z+2, r29	; 0x02
    46ec:	c1 83       	std	Z+1, r28	; 0x01
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    46ee:	e0 91 38 06 	lds	r30, 0x0638
    46f2:	f0 91 39 06 	lds	r31, 0x0639
    46f6:	30 97       	sbiw	r30, 0x00	; 0
    46f8:	41 f4       	brne	.+16     	; 0x470a <nrk_rem_from_readyQ+0x80>
	IdleTask.offset.secs = 0;
    46fa:	b0 93 39 06 	sts	0x0639, r27
    46fe:	a0 93 38 06 	sts	0x0638, r26
	IdleTask.offset.nano_secs = 0;
    4702:	ed 01       	movw	r28, r26
    4704:	1c 82       	std	Y+4, r1	; 0x04
    4706:	1b 82       	std	Y+3, r1	; 0x03
    4708:	09 c0       	rjmp	.+18     	; 0x471c <nrk_rem_from_readyQ+0x92>
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    470a:	ed 01       	movw	r28, r26
    470c:	fc 83       	std	Y+4, r31	; 0x04
    470e:	eb 83       	std	Y+3, r30	; 0x03
	nrk_activate_task(&IdleTask);
    4710:	b2 83       	std	Z+2, r27	; 0x02
    4712:	a1 83       	std	Z+1, r26	; 0x01
	
    4714:	b0 93 39 06 	sts	0x0639, r27
    4718:	a0 93 38 06 	sts	0x0638, r26
}

    471c:	e0 91 38 06 	lds	r30, 0x0638
    4720:	f0 91 39 06 	lds	r31, 0x0639
    4724:	12 82       	std	Z+2, r1	; 0x02
    4726:	11 82       	std	Z+1, r1	; 0x01
    4728:	df 91       	pop	r29
    472a:	cf 91       	pop	r28
    472c:	08 95       	ret

0000472e <nrk_get_pid>:
    472e:	e0 91 d7 06 	lds	r30, 0x06D7
    4732:	f0 91 d8 06 	lds	r31, 0x06D8
    4736:	80 85       	ldd	r24, Z+8	; 0x08
    4738:	99 27       	eor	r25, r25
    473a:	08 95       	ret

0000473c <_nrk_wait_for_scheduler>:
    473c:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <nrk_idle>
    4740:	e0 91 d7 06 	lds	r30, 0x06D7
    4744:	f0 91 d8 06 	lds	r31, 0x06D8
    4748:	85 81       	ldd	r24, Z+5	; 0x05
    474a:	88 23       	and	r24, r24
    474c:	b9 f7       	brne	.-18     	; 0x473c <_nrk_wait_for_scheduler>
    474e:	08 95       	ret

00004750 <nrk_wait>:
    4750:	ff 92       	push	r15
    4752:	0f 93       	push	r16
    4754:	1f 93       	push	r17
    4756:	cf 93       	push	r28
    4758:	df 93       	push	r29
    475a:	cd b7       	in	r28, 0x3d	; 61
    475c:	de b7       	in	r29, 0x3e	; 62
    475e:	28 97       	sbiw	r28, 0x08	; 8
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	f8 94       	cli
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	29 83       	std	Y+1, r18	; 0x01
    476c:	3a 83       	std	Y+2, r19	; 0x02
    476e:	4b 83       	std	Y+3, r20	; 0x03
    4770:	5c 83       	std	Y+4, r21	; 0x04
    4772:	6d 83       	std	Y+5, r22	; 0x05
    4774:	7e 83       	std	Y+6, r23	; 0x06
    4776:	8f 83       	std	Y+7, r24	; 0x07
    4778:	98 87       	std	Y+8, r25	; 0x08
    477a:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <nrk_stack_check>
    477e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    4782:	e0 91 d7 06 	lds	r30, 0x06D7
    4786:	f0 91 d8 06 	lds	r31, 0x06D8
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	85 83       	std	Z+5, r24	; 0x05
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	90 a3       	std	Z+32, r25	; 0x20
    4794:	87 8f       	std	Z+31, r24	; 0x1f
    4796:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    479a:	f8 2e       	mov	r15, r24
    479c:	ce 01       	movw	r24, r28
    479e:	01 96       	adiw	r24, 0x01	; 1
    47a0:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
    47a4:	e0 91 d7 06 	lds	r30, 0x06D7
    47a8:	f0 91 d8 06 	lds	r31, 0x06D8
    47ac:	0f 2d       	mov	r16, r15
    47ae:	11 27       	eor	r17, r17
    47b0:	80 0f       	add	r24, r16
    47b2:	91 1f       	adc	r25, r17
    47b4:	96 8b       	std	Z+22, r25	; 0x16
    47b6:	85 8b       	std	Z+21, r24	; 0x15
    47b8:	87 ef       	ldi	r24, 0xF7	; 247
    47ba:	8f 15       	cp	r24, r15
    47bc:	70 f0       	brcs	.+28     	; 0x47da <nrk_wait+0x8a>
    47be:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    47c2:	0e 5f       	subi	r16, 0xFE	; 254
    47c4:	1f 4f       	sbci	r17, 0xFF	; 255
    47c6:	99 27       	eor	r25, r25
    47c8:	80 17       	cp	r24, r16
    47ca:	91 07       	cpc	r25, r17
    47cc:	34 f0       	brlt	.+12     	; 0x47da <nrk_wait+0x8a>
    47ce:	8f 2d       	mov	r24, r15
    47d0:	8e 5f       	subi	r24, 0xFE	; 254
    47d2:	80 93 1c 06 	sts	0x061C, r24
    47d6:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    47da:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    47de:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	28 96       	adiw	r28, 0x08	; 8
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	ff 90       	pop	r15
    47fc:	08 95       	ret

000047fe <nrk_wait_until>:
    47fe:	8f 92       	push	r8
    4800:	9f 92       	push	r9
    4802:	af 92       	push	r10
    4804:	bf 92       	push	r11
    4806:	cf 92       	push	r12
    4808:	df 92       	push	r13
    480a:	ef 92       	push	r14
    480c:	ff 92       	push	r15
    480e:	0f 93       	push	r16
    4810:	1f 93       	push	r17
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	cd b7       	in	r28, 0x3d	; 61
    4818:	de b7       	in	r29, 0x3e	; 62
    481a:	60 97       	sbiw	r28, 0x10	; 16
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	f8 94       	cli
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	cd bf       	out	0x3d, r28	; 61
    4826:	29 87       	std	Y+9, r18	; 0x09
    4828:	3a 87       	std	Y+10, r19	; 0x0a
    482a:	4b 87       	std	Y+11, r20	; 0x0b
    482c:	5c 87       	std	Y+12, r21	; 0x0c
    482e:	6d 87       	std	Y+13, r22	; 0x0d
    4830:	7e 87       	std	Y+14, r23	; 0x0e
    4832:	8f 87       	std	Y+15, r24	; 0x0f
    4834:	98 8b       	std	Y+16, r25	; 0x10
    4836:	ce 01       	movw	r24, r28
    4838:	01 96       	adiw	r24, 0x01	; 1
    483a:	0e 94 35 29 	call	0x526a	; 0x526a <nrk_time_get>
    483e:	89 80       	ldd	r8, Y+1	; 0x01
    4840:	9a 80       	ldd	r9, Y+2	; 0x02
    4842:	ab 80       	ldd	r10, Y+3	; 0x03
    4844:	bc 80       	ldd	r11, Y+4	; 0x04
    4846:	cd 80       	ldd	r12, Y+5	; 0x05
    4848:	de 80       	ldd	r13, Y+6	; 0x06
    484a:	ef 80       	ldd	r14, Y+7	; 0x07
    484c:	f8 84       	ldd	r15, Y+8	; 0x08
    484e:	09 85       	ldd	r16, Y+9	; 0x09
    4850:	1a 85       	ldd	r17, Y+10	; 0x0a
    4852:	2b 85       	ldd	r18, Y+11	; 0x0b
    4854:	3c 85       	ldd	r19, Y+12	; 0x0c
    4856:	4d 85       	ldd	r20, Y+13	; 0x0d
    4858:	5e 85       	ldd	r21, Y+14	; 0x0e
    485a:	6f 85       	ldd	r22, Y+15	; 0x0f
    485c:	78 89       	ldd	r23, Y+16	; 0x10
    485e:	ce 01       	movw	r24, r28
    4860:	09 96       	adiw	r24, 0x09	; 9
    4862:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <nrk_time_sub>
    4866:	8f 3f       	cpi	r24, 0xFF	; 255
    4868:	19 f4       	brne	.+6      	; 0x4870 <nrk_wait_until+0x72>
    486a:	8f ef       	ldi	r24, 0xFF	; 255
    486c:	9f ef       	ldi	r25, 0xFF	; 255
    486e:	0c c0       	rjmp	.+24     	; 0x4888 <nrk_wait_until+0x8a>
    4870:	29 85       	ldd	r18, Y+9	; 0x09
    4872:	3a 85       	ldd	r19, Y+10	; 0x0a
    4874:	4b 85       	ldd	r20, Y+11	; 0x0b
    4876:	5c 85       	ldd	r21, Y+12	; 0x0c
    4878:	6d 85       	ldd	r22, Y+13	; 0x0d
    487a:	7e 85       	ldd	r23, Y+14	; 0x0e
    487c:	8f 85       	ldd	r24, Y+15	; 0x0f
    487e:	98 89       	ldd	r25, Y+16	; 0x10
    4880:	0e 94 a8 23 	call	0x4750	; 0x4750 <nrk_wait>
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	60 96       	adiw	r28, 0x10	; 16
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	ff 90       	pop	r15
    489e:	ef 90       	pop	r14
    48a0:	df 90       	pop	r13
    48a2:	cf 90       	pop	r12
    48a4:	bf 90       	pop	r11
    48a6:	af 90       	pop	r10
    48a8:	9f 90       	pop	r9
    48aa:	8f 90       	pop	r8
    48ac:	08 95       	ret

000048ae <nrk_wait_until_nw>:
    48ae:	1f 93       	push	r17
    48b0:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    48b4:	e0 91 d7 06 	lds	r30, 0x06D7
    48b8:	f0 91 d8 06 	lds	r31, 0x06D8
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	85 83       	std	Z+5, r24	; 0x05
    48c0:	86 83       	std	Z+6, r24	; 0x06
    48c2:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    48c6:	18 2f       	mov	r17, r24
    48c8:	88 3f       	cpi	r24, 0xF8	; 248
    48ca:	80 f4       	brcc	.+32     	; 0x48ec <nrk_wait_until_nw+0x3e>
    48cc:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    48d0:	21 2f       	mov	r18, r17
    48d2:	33 27       	eor	r19, r19
    48d4:	2e 5f       	subi	r18, 0xFE	; 254
    48d6:	3f 4f       	sbci	r19, 0xFF	; 255
    48d8:	99 27       	eor	r25, r25
    48da:	82 17       	cp	r24, r18
    48dc:	93 07       	cpc	r25, r19
    48de:	34 f0       	brlt	.+12     	; 0x48ec <nrk_wait_until_nw+0x3e>
    48e0:	81 2f       	mov	r24, r17
    48e2:	8e 5f       	subi	r24, 0xFE	; 254
    48e4:	80 93 1c 06 	sts	0x061C, r24
    48e8:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    48ec:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    48f0:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	1f 91       	pop	r17
    48fa:	08 95       	ret

000048fc <nrk_set_next_wakeup>:
    48fc:	1f 93       	push	r17
    48fe:	cf 93       	push	r28
    4900:	df 93       	push	r29
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
    4906:	28 97       	sbiw	r28, 0x08	; 8
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	f8 94       	cli
    490c:	de bf       	out	0x3e, r29	; 62
    490e:	0f be       	out	0x3f, r0	; 63
    4910:	cd bf       	out	0x3d, r28	; 61
    4912:	29 83       	std	Y+1, r18	; 0x01
    4914:	3a 83       	std	Y+2, r19	; 0x02
    4916:	4b 83       	std	Y+3, r20	; 0x03
    4918:	5c 83       	std	Y+4, r21	; 0x04
    491a:	6d 83       	std	Y+5, r22	; 0x05
    491c:	7e 83       	std	Y+6, r23	; 0x06
    491e:	8f 83       	std	Y+7, r24	; 0x07
    4920:	98 87       	std	Y+8, r25	; 0x08
    4922:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    4926:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    492a:	18 2f       	mov	r17, r24
    492c:	ce 01       	movw	r24, r28
    492e:	01 96       	adiw	r24, 0x01	; 1
    4930:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <_nrk_time_to_ticks>
    4934:	83 30       	cpi	r24, 0x03	; 3
    4936:	91 05       	cpc	r25, r1
    4938:	18 f4       	brcc	.+6      	; 0x4940 <nrk_set_next_wakeup+0x44>
    493a:	8f ef       	ldi	r24, 0xFF	; 255
    493c:	9f ef       	ldi	r25, 0xFF	; 255
    493e:	0c c0       	rjmp	.+24     	; 0x4958 <nrk_set_next_wakeup+0x5c>
    4940:	e0 91 d7 06 	lds	r30, 0x06D7
    4944:	f0 91 d8 06 	lds	r31, 0x06D8
    4948:	81 0f       	add	r24, r17
    494a:	91 1d       	adc	r25, r1
    494c:	96 8b       	std	Z+22, r25	; 0x16
    494e:	85 8b       	std	Z+21, r24	; 0x15
    4950:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	28 96       	adiw	r28, 0x08	; 8
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	de bf       	out	0x3e, r29	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	cd bf       	out	0x3d, r28	; 61
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	1f 91       	pop	r17
    496a:	08 95       	ret

0000496c <nrk_wait_until_ticks>:
    496c:	0f 93       	push	r16
    496e:	1f 93       	push	r17
    4970:	8c 01       	movw	r16, r24
    4972:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    4976:	e0 91 d7 06 	lds	r30, 0x06D7
    497a:	f0 91 d8 06 	lds	r31, 0x06D8
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	85 83       	std	Z+5, r24	; 0x05
    4982:	16 8b       	std	Z+22, r17	; 0x16
    4984:	05 8b       	std	Z+21, r16	; 0x15
    4986:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    498a:	08 2f       	mov	r16, r24
    498c:	88 3f       	cpi	r24, 0xF8	; 248
    498e:	80 f4       	brcc	.+32     	; 0x49b0 <nrk_wait_until_ticks+0x44>
    4990:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    4994:	20 2f       	mov	r18, r16
    4996:	33 27       	eor	r19, r19
    4998:	2e 5f       	subi	r18, 0xFE	; 254
    499a:	3f 4f       	sbci	r19, 0xFF	; 255
    499c:	99 27       	eor	r25, r25
    499e:	82 17       	cp	r24, r18
    49a0:	93 07       	cpc	r25, r19
    49a2:	34 f0       	brlt	.+12     	; 0x49b0 <nrk_wait_until_ticks+0x44>
    49a4:	80 2f       	mov	r24, r16
    49a6:	8e 5f       	subi	r24, 0xFE	; 254
    49a8:	80 93 1c 06 	sts	0x061C, r24
    49ac:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    49b0:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    49b4:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>
    49b8:	81 e0       	ldi	r24, 0x01	; 1
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	1f 91       	pop	r17
    49be:	0f 91       	pop	r16
    49c0:	08 95       	ret

000049c2 <nrk_wait_ticks>:
    return (NRK_VERSION);
}


    49c2:	ff 92       	push	r15
    49c4:	0f 93       	push	r16
    49c6:	1f 93       	push	r17
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
    49cc:	8c 01       	movw	r16, r24
    49ce:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    49d2:	e0 91 d7 06 	lds	r30, 0x06D7
    49d6:	f0 91 d8 06 	lds	r31, 0x06D8
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	85 83       	std	Z+5, r24	; 0x05
    49de:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    49e2:	f8 2e       	mov	r15, r24
    49e4:	e0 91 d7 06 	lds	r30, 0x06D7
    49e8:	f0 91 d8 06 	lds	r31, 0x06D8
    49ec:	c8 2f       	mov	r28, r24
    49ee:	dd 27       	eor	r29, r29
    49f0:	0c 0f       	add	r16, r28
    49f2:	1d 1f       	adc	r17, r29
    49f4:	16 8b       	std	Z+22, r17	; 0x16
    49f6:	05 8b       	std	Z+21, r16	; 0x15
    49f8:	87 ef       	ldi	r24, 0xF7	; 247
    49fa:	8f 15       	cp	r24, r15
    49fc:	68 f0       	brcs	.+26     	; 0x4a18 <nrk_wait_ticks+0x56>
    49fe:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    4a02:	22 96       	adiw	r28, 0x02	; 2
    4a04:	99 27       	eor	r25, r25
    4a06:	8c 17       	cp	r24, r28
    4a08:	9d 07       	cpc	r25, r29
    4a0a:	34 f0       	brlt	.+12     	; 0x4a18 <nrk_wait_ticks+0x56>
    4a0c:	8f 2d       	mov	r24, r15
    4a0e:	8e 5f       	subi	r24, 0xFE	; 254
    4a10:	80 93 1c 06 	sts	0x061C, r24
    4a14:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    4a18:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    4a1c:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    4a2c:	ff 90       	pop	r15
    4a2e:	08 95       	ret

00004a30 <nrk_wait_until_next_n_periods>:
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    4a30:	1f 93       	push	r17
    4a32:	cf 93       	push	r28
    4a34:	df 93       	push	r29
    4a36:	ec 01       	movw	r28, r24
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 
    4a38:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <nrk_stack_check>
	
	         
    4a3c:	20 97       	sbiw	r28, 0x00	; 0
    4a3e:	11 f4       	brne	.+4      	; 0x4a44 <nrk_wait_until_next_n_periods+0x14>
    4a40:	c1 e0       	ldi	r28, 0x01	; 1
    4a42:	d0 e0       	ldi	r29, 0x00	; 0

			
    return NRK_OK;
    4a44:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>

    4a48:	e0 91 d7 06 	lds	r30, 0x06D7
    4a4c:	f0 91 d8 06 	lds	r31, 0x06D8
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	85 83       	std	Z+5, r24	; 0x05
}
    4a54:	d0 a3       	std	Z+32, r29	; 0x20
    4a56:	c7 8f       	std	Z+31, r28	; 0x1f

    4a58:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    4a5c:	18 2f       	mov	r17, r24

/*
 * _nrk_timer_tick() 
 *
 * This function is called by the interrupt timer0.
    4a5e:	88 3f       	cpi	r24, 0xF8	; 248
    4a60:	80 f4       	brcc	.+32     	; 0x4a82 <nrk_wait_until_next_n_periods+0x52>
 * It calls the scheduler.
    4a62:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    4a66:	21 2f       	mov	r18, r17
    4a68:	33 27       	eor	r19, r19
    4a6a:	2e 5f       	subi	r18, 0xFE	; 254
    4a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6e:	99 27       	eor	r25, r25
    4a70:	82 17       	cp	r24, r18
    4a72:	93 07       	cpc	r25, r19
    4a74:	34 f0       	brlt	.+12     	; 0x4a82 <nrk_wait_until_next_n_periods+0x52>
 */
    4a76:	81 2f       	mov	r24, r17
    4a78:	8e 5f       	subi	r24, 0xFE	; 254
void _nrk_timer_tick(void)
    4a7a:	80 93 1c 06 	sts	0x061C, r24
{
    4a7e:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

    4a82:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
	_nrk_scheduler();
    4a86:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>

  	return;
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	df 91       	pop	r29
    4a90:	cf 91       	pop	r28
    4a92:	1f 91       	pop	r17
    4a94:	08 95       	ret

00004a96 <nrk_wait_until_next_period>:
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
}

    4a96:	1f 93       	push	r17

int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    4a98:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <nrk_stack_check>
	
    //  Already in critical section so no needenter critical section
    4a9c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    if(Task->Type!=IDLE_TASK)
    4aa0:	e0 91 d7 06 	lds	r30, 0x06D7
    4aa4:	f0 91 d8 06 	lds	r31, 0x06D8
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	90 a3       	std	Z+32, r25	; 0x20
    4aae:	87 8f       	std	Z+31, r24	; 0x1f
    	Task->task_ID=nrk_task_init_cnt;
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	85 83       	std	Z+5, r24	; 0x05
    else Task->task_ID=NRK_IDLE_TASK_ID;
    4ab4:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    4ab8:	18 2f       	mov	r17, r24

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    4aba:	88 3f       	cpi	r24, 0xF8	; 248
    4abc:	80 f4       	brcc	.+32     	; 0x4ade <nrk_wait_until_next_period+0x48>
    //initialize member of TCB structure
    4abe:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    4ac2:	21 2f       	mov	r18, r17
    4ac4:	33 27       	eor	r19, r19
    4ac6:	2e 5f       	subi	r18, 0xFE	; 254
    4ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aca:	99 27       	eor	r25, r25
    4acc:	82 17       	cp	r24, r18
    4ace:	93 07       	cpc	r25, r19
    4ad0:	34 f0       	brlt	.+12     	; 0x4ade <nrk_wait_until_next_period+0x48>
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    4ad2:	81 2f       	mov	r24, r17
    4ad4:	8e 5f       	subi	r24, 0xFE	; 254
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    4ad6:	80 93 1c 06 	sts	0x061C, r24
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    4ada:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    4ade:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    4ae2:	0e 94 9e 23 	call	0x473c	; 0x473c <_nrk_wait_for_scheduler>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	1f 91       	pop	r17
    4aec:	08 95       	ret

00004aee <nrk_terminate_task>:
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    4aee:	e0 91 d7 06 	lds	r30, 0x06D7
    4af2:	f0 91 d8 06 	lds	r31, 0x06D8
    4af6:	80 85       	ldd	r24, Z+8	; 0x08
    4af8:	0e 94 45 23 	call	0x468a	; 0x468a <nrk_rem_from_readyQ>
*/
    4afc:	e0 91 d7 06 	lds	r30, 0x06D7
    4b00:	f0 91 d8 06 	lds	r31, 0x06D8
    4b04:	84 e0       	ldi	r24, 0x04	; 4
    4b06:	81 87       	std	Z+9, r24	; 0x09
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	
    4b08:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <nrk_wait_until_next_period>

    // you should never get here    
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	08 95       	ret

00004b12 <nrk_activate_task>:





void nrk_start (void)
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	ec 01       	movw	r28, r24
{
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    4b20:	4b 81       	ldd	r20, Y+3	; 0x03
    4b22:	5c 81       	ldd	r21, Y+4	; 0x04
    4b24:	69 81       	ldd	r22, Y+1	; 0x01
    4b26:	7a 81       	ldd	r23, Y+2	; 0x02
    4b28:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2c:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <nrk_task_stk_init>
    4b30:	bc 01       	movw	r22, r24
//	unsigned char *stkc;

	/*
		- Get highest priority task from rdy list
    4b32:	8f 81       	ldd	r24, Y+7	; 0x07
    4b34:	88 23       	and	r24, r24
    4b36:	69 f0       	breq	.+26     	; 0x4b52 <nrk_activate_task+0x40>
		- set cur prio and start the task 
    4b38:	4b 81       	ldd	r20, Y+3	; 0x03
    4b3a:	5c 81       	ldd	r21, Y+4	; 0x04
    4b3c:	ee 24       	eor	r14, r14
    4b3e:	ff 24       	eor	r15, r15
    4b40:	00 e0       	ldi	r16, 0x00	; 0
    4b42:	10 e0       	ldi	r17, 0x00	; 0
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	ce 01       	movw	r24, r28
    4b4a:	0e 94 55 1a 	call	0x34aa	; 0x34aa <nrk_TCB_init>
	*/
    4b4e:	1f 82       	std	Y+7, r1	; 0x07
    4b50:	16 c0       	rjmp	.+44     	; 0x4b7e <nrk_activate_task+0x6c>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    4b52:	88 81       	ld	r24, Y
    4b54:	99 27       	eor	r25, r25
    4b56:	87 fd       	sbrc	r24, 7
    4b58:	90 95       	com	r25
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	a5 e0       	ldi	r26, 0x05	; 5
    4b5e:	ee 0f       	add	r30, r30
    4b60:	ff 1f       	adc	r31, r31
    4b62:	aa 95       	dec	r26
    4b64:	e1 f7       	brne	.-8      	; 0x4b5e <nrk_activate_task+0x4c>
    4b66:	e8 0f       	add	r30, r24
    4b68:	f9 1f       	adc	r31, r25
    4b6a:	e6 5c       	subi	r30, 0xC6	; 198
    4b6c:	f9 4f       	sbci	r31, 0xF9	; 249
    4b6e:	81 85       	ldd	r24, Z+9	; 0x09
    4b70:	83 30       	cpi	r24, 0x03	; 3
    4b72:	19 f0       	breq	.+6      	; 0x4b7a <nrk_activate_task+0x68>
    4b74:	8f ef       	ldi	r24, 0xFF	; 255
    4b76:	9f ef       	ldi	r25, 0xFF	; 255
    4b78:	1b c0       	rjmp	.+54     	; 0x4bb0 <nrk_activate_task+0x9e>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    4b7a:	71 83       	std	Z+1, r23	; 0x01
    4b7c:	60 83       	st	Z, r22
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
//    nrk_stack_pointer_restore();

    4b7e:	88 81       	ld	r24, Y
    4b80:	99 27       	eor	r25, r25
    4b82:	87 fd       	sbrc	r24, 7
    4b84:	90 95       	com	r25
    4b86:	fc 01       	movw	r30, r24
    4b88:	75 e0       	ldi	r23, 0x05	; 5
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	ff 1f       	adc	r31, r31
    4b8e:	7a 95       	dec	r23
    4b90:	e1 f7       	brne	.-8      	; 0x4b8a <nrk_activate_task+0x78>
    4b92:	e8 0f       	add	r30, r24
    4b94:	f9 1f       	adc	r31, r25
    4b96:	e6 5c       	subi	r30, 0xC6	; 198
    4b98:	f9 4f       	sbci	r31, 0xF9	; 249
    4b9a:	85 89       	ldd	r24, Z+21	; 0x15
    4b9c:	96 89       	ldd	r25, Z+22	; 0x16
    4b9e:	89 2b       	or	r24, r25
    4ba0:	29 f4       	brne	.+10     	; 0x4bac <nrk_activate_task+0x9a>
    /*
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	81 87       	std	Z+9, r24	; 0x09
    #ifdef KERNEL_STK_ARRAY
    4ba6:	88 81       	ld	r24, Y
    4ba8:	0e 94 be 22 	call	0x457c	; 0x457c <nrk_add_to_readyQ>
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	0f 91       	pop	r16
    4bb8:	ff 90       	pop	r15
    4bba:	ef 90       	pop	r14
    4bbc:	08 95       	ret

00004bbe <nrk_time_sub>:

void nrk_halt()
{
nrk_int_disable();
while(1);
}
    4bbe:	8f 92       	push	r8
    4bc0:	9f 92       	push	r9
    4bc2:	af 92       	push	r10
    4bc4:	bf 92       	push	r11
    4bc6:	cf 92       	push	r12
    4bc8:	df 92       	push	r13
    4bca:	ef 92       	push	r14
    4bcc:	ff 92       	push	r15
    4bce:	0f 93       	push	r16
    4bd0:	1f 93       	push	r17
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
    4bda:	60 97       	sbiw	r28, 0x10	; 16
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	fc 01       	movw	r30, r24
    4be8:	09 83       	std	Y+1, r16	; 0x01
    4bea:	1a 83       	std	Y+2, r17	; 0x02
    4bec:	2b 83       	std	Y+3, r18	; 0x03
    4bee:	3c 83       	std	Y+4, r19	; 0x04
    4bf0:	4d 83       	std	Y+5, r20	; 0x05
    4bf2:	5e 83       	std	Y+6, r21	; 0x06
    4bf4:	6f 83       	std	Y+7, r22	; 0x07
    4bf6:	78 87       	std	Y+8, r23	; 0x08
    4bf8:	89 86       	std	Y+9, r8	; 0x09
    4bfa:	9a 86       	std	Y+10, r9	; 0x0a
    4bfc:	ab 86       	std	Y+11, r10	; 0x0b
    4bfe:	bc 86       	std	Y+12, r11	; 0x0c
    4c00:	cd 86       	std	Y+13, r12	; 0x0d
    4c02:	de 86       	std	Y+14, r13	; 0x0e
    4c04:	ef 86       	std	Y+15, r14	; 0x0f
    4c06:	f8 8a       	std	Y+16, r15	; 0x10
    4c08:	2d 81       	ldd	r18, Y+5	; 0x05
    4c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    4c0c:	4f 81       	ldd	r20, Y+7	; 0x07
    4c0e:	58 85       	ldd	r21, Y+8	; 0x08
    4c10:	89 81       	ldd	r24, Y+1	; 0x01
    4c12:	9a 81       	ldd	r25, Y+2	; 0x02
    4c14:	ab 81       	ldd	r26, Y+3	; 0x03
    4c16:	bc 81       	ldd	r27, Y+4	; 0x04
    4c18:	ad 84       	ldd	r10, Y+13	; 0x0d
    4c1a:	be 84       	ldd	r11, Y+14	; 0x0e
    4c1c:	cf 84       	ldd	r12, Y+15	; 0x0f
    4c1e:	d8 88       	ldd	r13, Y+16	; 0x10
    4c20:	e9 84       	ldd	r14, Y+9	; 0x09
    4c22:	fa 84       	ldd	r15, Y+10	; 0x0a
    4c24:	0b 85       	ldd	r16, Y+11	; 0x0b
    4c26:	1c 85       	ldd	r17, Y+12	; 0x0c

    4c28:	8e 15       	cp	r24, r14
    4c2a:	9f 05       	cpc	r25, r15
    4c2c:	a0 07       	cpc	r26, r16
    4c2e:	b1 07       	cpc	r27, r17
    4c30:	08 f4       	brcc	.+2      	; 0x4c34 <nrk_time_sub+0x76>
    4c32:	3f c0       	rjmp	.+126    	; 0x4cb2 <nrk_time_sub+0xf4>
/**
    4c34:	e8 16       	cp	r14, r24
    4c36:	f9 06       	cpc	r15, r25
    4c38:	0a 07       	cpc	r16, r26
    4c3a:	1b 07       	cpc	r17, r27
    4c3c:	91 f4       	brne	.+36     	; 0x4c62 <nrk_time_sub+0xa4>
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    4c3e:	2a 15       	cp	r18, r10
    4c40:	3b 05       	cpc	r19, r11
    4c42:	4c 05       	cpc	r20, r12
    4c44:	5d 05       	cpc	r21, r13
    4c46:	a8 f1       	brcs	.+106    	; 0x4cb2 <nrk_time_sub+0xf4>
 *  - Init global variables
    4c48:	2a 19       	sub	r18, r10
    4c4a:	3b 09       	sbc	r19, r11
    4c4c:	4c 09       	sbc	r20, r12
    4c4e:	5d 09       	sbc	r21, r13
    4c50:	24 83       	std	Z+4, r18	; 0x04
    4c52:	35 83       	std	Z+5, r19	; 0x05
    4c54:	46 83       	std	Z+6, r20	; 0x06
    4c56:	57 83       	std	Z+7, r21	; 0x07
 *  - Init event list
    4c58:	10 82       	st	Z, r1
    4c5a:	11 82       	std	Z+1, r1	; 0x01
    4c5c:	12 82       	std	Z+2, r1	; 0x02
    4c5e:	13 82       	std	Z+3, r1	; 0x03
    4c60:	1c c0       	rjmp	.+56     	; 0x4c9a <nrk_time_sub+0xdc>
 *  - Create idle task
 */
void nrk_init()
    4c62:	2a 15       	cp	r18, r10
    4c64:	3b 05       	cpc	r19, r11
    4c66:	4c 05       	cpc	r20, r12
    4c68:	5d 05       	cpc	r21, r13
    4c6a:	d0 f4       	brcc	.+52     	; 0x4ca0 <nrk_time_sub+0xe2>
{
	
    uint8_t i;	
//    unsigned char *stkc;
    4c6c:	01 97       	sbiw	r24, 0x01	; 1
    4c6e:	a1 09       	sbc	r26, r1
    4c70:	b1 09       	sbc	r27, r1
    4c72:	8e 19       	sub	r24, r14
    4c74:	9f 09       	sbc	r25, r15
    4c76:	a0 0b       	sbc	r26, r16
    4c78:	b1 0b       	sbc	r27, r17
    4c7a:	80 83       	st	Z, r24
    4c7c:	91 83       	std	Z+1, r25	; 0x01
    4c7e:	a2 83       	std	Z+2, r26	; 0x02
    4c80:	b3 83       	std	Z+3, r27	; 0x03
	
    4c82:	20 50       	subi	r18, 0x00	; 0
    4c84:	36 43       	sbci	r19, 0x36	; 54
    4c86:	45 46       	sbci	r20, 0x65	; 101
    4c88:	54 4c       	sbci	r21, 0xC4	; 196
    4c8a:	2a 19       	sub	r18, r10
    4c8c:	3b 09       	sbc	r19, r11
    4c8e:	4c 09       	sbc	r20, r12
    4c90:	5d 09       	sbc	r21, r13
    4c92:	24 83       	std	Z+4, r18	; 0x04
    4c94:	35 83       	std	Z+5, r19	; 0x05
    4c96:	46 83       	std	Z+6, r20	; 0x06
    4c98:	57 83       	std	Z+7, r21	; 0x07
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	0b c0       	rjmp	.+22     	; 0x4cb6 <nrk_time_sub+0xf8>
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    4ca0:	8e 19       	sub	r24, r14
    4ca2:	9f 09       	sbc	r25, r15
    4ca4:	a0 0b       	sbc	r26, r16
    4ca6:	b1 0b       	sbc	r27, r17
    4ca8:	80 83       	st	Z, r24
    4caa:	91 83       	std	Z+1, r25	; 0x01
    4cac:	a2 83       	std	Z+2, r26	; 0x02
    4cae:	b3 83       	std	Z+3, r27	; 0x03
    4cb0:	ec cf       	rjmp	.-40     	; 0x4c8a <nrk_time_sub+0xcc>
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    4cb2:	8f ef       	ldi	r24, 0xFF	; 255
    4cb4:	9f ef       	ldi	r25, 0xFF	; 255
    4cb6:	60 96       	adiw	r28, 0x10	; 16
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	08 95       	ret

00004cdc <nrk_time_compact_nanos>:
   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
    4cdc:	fc 01       	movw	r30, r24
    4cde:	13 c0       	rjmp	.+38     	; 0x4d06 <nrk_time_compact_nanos+0x2a>
      			nrk_spin_wait_us (1000);
	   }
   #endif
    4ce0:	80 50       	subi	r24, 0x00	; 0
    4ce2:	9a 4c       	sbci	r25, 0xCA	; 202
    4ce4:	aa 49       	sbci	r26, 0x9A	; 154
    4ce6:	bb 43       	sbci	r27, 0x3B	; 59
    4ce8:	84 83       	std	Z+4, r24	; 0x04
    4cea:	95 83       	std	Z+5, r25	; 0x05
    4cec:	a6 83       	std	Z+6, r26	; 0x06
    4cee:	b7 83       	std	Z+7, r27	; 0x07
   #endif
    4cf0:	80 81       	ld	r24, Z
    4cf2:	91 81       	ldd	r25, Z+1	; 0x01
    4cf4:	a2 81       	ldd	r26, Z+2	; 0x02
    4cf6:	b3 81       	ldd	r27, Z+3	; 0x03
    4cf8:	01 96       	adiw	r24, 0x01	; 1
    4cfa:	a1 1d       	adc	r26, r1
    4cfc:	b1 1d       	adc	r27, r1
    4cfe:	80 83       	st	Z, r24
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	a2 83       	std	Z+2, r26	; 0x02
    4d04:	b3 83       	std	Z+3, r27	; 0x03
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
    4d06:	84 81       	ldd	r24, Z+4	; 0x04
    4d08:	95 81       	ldd	r25, Z+5	; 0x05
    4d0a:	a6 81       	ldd	r26, Z+6	; 0x06
    4d0c:	b7 81       	ldd	r27, Z+7	; 0x07
    4d0e:	80 30       	cpi	r24, 0x00	; 0
    4d10:	2a ec       	ldi	r18, 0xCA	; 202
    4d12:	92 07       	cpc	r25, r18
    4d14:	2a e9       	ldi	r18, 0x9A	; 154
    4d16:	a2 07       	cpc	r26, r18
    4d18:	2b e3       	ldi	r18, 0x3B	; 59
    4d1a:	b2 07       	cpc	r27, r18
    4d1c:	08 f7       	brcc	.-62     	; 0x4ce0 <nrk_time_compact_nanos+0x4>
    4d1e:	08 95       	ret

00004d20 <nrk_time_add>:
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    4d20:	8f 92       	push	r8
    4d22:	9f 92       	push	r9
    4d24:	af 92       	push	r10
    4d26:	bf 92       	push	r11
    4d28:	cf 92       	push	r12
    4d2a:	df 92       	push	r13
    4d2c:	ef 92       	push	r14
    4d2e:	ff 92       	push	r15
    4d30:	0f 93       	push	r16
    4d32:	1f 93       	push	r17
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	cd b7       	in	r28, 0x3d	; 61
    4d3a:	de b7       	in	r29, 0x3e	; 62
    4d3c:	60 97       	sbiw	r28, 0x10	; 16
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	fc 01       	movw	r30, r24
    4d4a:	09 83       	std	Y+1, r16	; 0x01
    4d4c:	1a 83       	std	Y+2, r17	; 0x02
    4d4e:	2b 83       	std	Y+3, r18	; 0x03
    4d50:	3c 83       	std	Y+4, r19	; 0x04
    4d52:	4d 83       	std	Y+5, r20	; 0x05
    4d54:	5e 83       	std	Y+6, r21	; 0x06
    4d56:	6f 83       	std	Y+7, r22	; 0x07
    4d58:	78 87       	std	Y+8, r23	; 0x08
    4d5a:	89 86       	std	Y+9, r8	; 0x09
    4d5c:	9a 86       	std	Y+10, r9	; 0x0a
    4d5e:	ab 86       	std	Y+11, r10	; 0x0b
    4d60:	bc 86       	std	Y+12, r11	; 0x0c
    4d62:	cd 86       	std	Y+13, r12	; 0x0d
    4d64:	de 86       	std	Y+14, r13	; 0x0e
    4d66:	ef 86       	std	Y+15, r14	; 0x0f
    4d68:	f8 8a       	std	Y+16, r15	; 0x10
    4d6a:	ad 80       	ldd	r10, Y+5	; 0x05
    4d6c:	be 80       	ldd	r11, Y+6	; 0x06
    4d6e:	cf 80       	ldd	r12, Y+7	; 0x07
    4d70:	d8 84       	ldd	r13, Y+8	; 0x08
    4d72:	ed 84       	ldd	r14, Y+13	; 0x0d
    4d74:	fe 84       	ldd	r15, Y+14	; 0x0e
    4d76:	0f 85       	ldd	r16, Y+15	; 0x0f
    4d78:	18 89       	ldd	r17, Y+16	; 0x10
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    4d7a:	89 85       	ldd	r24, Y+9	; 0x09
    4d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4d80:	bc 85       	ldd	r27, Y+12	; 0x0c
    4d82:	29 81       	ldd	r18, Y+1	; 0x01
    4d84:	3a 81       	ldd	r19, Y+2	; 0x02
    4d86:	4b 81       	ldd	r20, Y+3	; 0x03
    4d88:	5c 81       	ldd	r21, Y+4	; 0x04
    4d8a:	82 0f       	add	r24, r18
    4d8c:	93 1f       	adc	r25, r19
    4d8e:	a4 1f       	adc	r26, r20
    4d90:	b5 1f       	adc	r27, r21
    4d92:	80 83       	st	Z, r24
    4d94:	91 83       	std	Z+1, r25	; 0x01
    4d96:	a2 83       	std	Z+2, r26	; 0x02
    4d98:	b3 83       	std	Z+3, r27	; 0x03
#endif
    4d9a:	ea 0c       	add	r14, r10
    4d9c:	fb 1c       	adc	r15, r11
    4d9e:	0c 1d       	adc	r16, r12
    4da0:	1d 1d       	adc	r17, r13
    4da2:	e4 82       	std	Z+4, r14	; 0x04
    4da4:	f5 82       	std	Z+5, r15	; 0x05
    4da6:	06 83       	std	Z+6, r16	; 0x06
    4da8:	17 83       	std	Z+7, r17	; 0x07

    4daa:	cf 01       	movw	r24, r30
    4dac:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <nrk_time_compact_nanos>
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	60 96       	adiw	r28, 0x10	; 16
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	cd bf       	out	0x3d, r28	; 61
    4dc0:	df 91       	pop	r29
    4dc2:	cf 91       	pop	r28
    4dc4:	1f 91       	pop	r17
    4dc6:	0f 91       	pop	r16
    4dc8:	ff 90       	pop	r15
    4dca:	ef 90       	pop	r14
    4dcc:	df 90       	pop	r13
    4dce:	cf 90       	pop	r12
    4dd0:	bf 90       	pop	r11
    4dd2:	af 90       	pop	r10
    4dd4:	9f 90       	pop	r9
    4dd6:	8f 90       	pop	r8
    4dd8:	08 95       	ret

00004dda <nrk_time_set>:
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    4dda:	60 93 ce 06 	sts	0x06CE, r22
    4dde:	70 93 cf 06 	sts	0x06CF, r23
    4de2:	80 93 d0 06 	sts	0x06D0, r24
    4de6:	90 93 d1 06 	sts	0x06D1, r25
    #endif
    4dea:	20 93 d2 06 	sts	0x06D2, r18
    4dee:	30 93 d3 06 	sts	0x06D3, r19
    4df2:	40 93 d4 06 	sts	0x06D4, r20
    4df6:	50 93 d5 06 	sts	0x06D5, r21
    4dfa:	08 95       	ret

00004dfc <_nrk_time_to_ticks>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
    4dfc:	2f 92       	push	r2
    4dfe:	3f 92       	push	r3
    4e00:	4f 92       	push	r4
    4e02:	5f 92       	push	r5
    4e04:	6f 92       	push	r6
    4e06:	7f 92       	push	r7
    4e08:	8f 92       	push	r8
    4e0a:	9f 92       	push	r9
    4e0c:	af 92       	push	r10
    4e0e:	bf 92       	push	r11
    4e10:	cf 92       	push	r12
    4e12:	df 92       	push	r13
    4e14:	ef 92       	push	r14
    4e16:	ff 92       	push	r15
    4e18:	0f 93       	push	r16
    4e1a:	1f 93       	push	r17
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	cd b7       	in	r28, 0x3d	; 61
    4e22:	de b7       	in	r29, 0x3e	; 62
    4e24:	28 97       	sbiw	r28, 0x08	; 8
    4e26:	0f b6       	in	r0, 0x3f	; 63
    4e28:	f8 94       	cli
    4e2a:	de bf       	out	0x3e, r29	; 62
    4e2c:	0f be       	out	0x3f, r0	; 63
    4e2e:	cd bf       	out	0x3d, r28	; 61
    4e30:	fc 01       	movw	r30, r24
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    4e32:	c0 80       	ld	r12, Z
    4e34:	d1 80       	ldd	r13, Z+1	; 0x01
    4e36:	e2 80       	ldd	r14, Z+2	; 0x02
    4e38:	f3 80       	ldd	r15, Z+3	; 0x03
    4e3a:	64 81       	ldd	r22, Z+4	; 0x04
    4e3c:	75 81       	ldd	r23, Z+5	; 0x05
    4e3e:	86 81       	ldd	r24, Z+6	; 0x06
    4e40:	97 81       	ldd	r25, Z+7	; 0x07
    4e42:	c1 14       	cp	r12, r1
    4e44:	d1 04       	cpc	r13, r1
    4e46:	e1 04       	cpc	r14, r1
    4e48:	f1 04       	cpc	r15, r1
    4e4a:	09 f4       	brne	.+2      	; 0x4e4e <_nrk_time_to_ticks+0x52>
    4e4c:	a6 c0       	rjmp	.+332    	; 0x4f9a <_nrk_time_to_ticks+0x19e>
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    4e4e:	22 e4       	ldi	r18, 0x42	; 66
    4e50:	c2 16       	cp	r12, r18
    4e52:	d1 04       	cpc	r13, r1
    4e54:	e1 04       	cpc	r14, r1
    4e56:	f1 04       	cpc	r15, r1
    4e58:	18 f0       	brcs	.+6      	; 0x4e60 <_nrk_time_to_ticks+0x64>
    4e5a:	80 e0       	ldi	r24, 0x00	; 0
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	a4 c0       	rjmp	.+328    	; 0x4fa8 <_nrk_time_to_ticks+0x1ac>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    4e60:	1b 01       	movw	r2, r22
    4e62:	2c 01       	movw	r4, r24
    4e64:	66 24       	eor	r6, r6
    4e66:	77 24       	eor	r7, r7
    4e68:	88 24       	eor	r8, r8
    4e6a:	99 24       	eor	r9, r9
    4e6c:	aa 24       	eor	r10, r10
    4e6e:	bb 24       	eor	r11, r11
    4e70:	6e c0       	rjmp	.+220    	; 0x4f4e <_nrk_time_to_ticks+0x152>
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    4e72:	19 82       	std	Y+1, r1	; 0x01
    4e74:	8a ec       	ldi	r24, 0xCA	; 202
    4e76:	8a 83       	std	Y+2, r24	; 0x02
    4e78:	ea e9       	ldi	r30, 0x9A	; 154
    4e7a:	eb 83       	std	Y+3, r30	; 0x03
    4e7c:	fb e3       	ldi	r31, 0x3B	; 59
    4e7e:	fc 83       	std	Y+4, r31	; 0x04
    4e80:	1d 82       	std	Y+5, r1	; 0x05
    4e82:	1e 82       	std	Y+6, r1	; 0x06
    4e84:	1f 82       	std	Y+7, r1	; 0x07
    4e86:	18 86       	std	Y+8, r1	; 0x08
    4e88:	00 e0       	ldi	r16, 0x00	; 0
    4e8a:	02 0d       	add	r16, r2
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	02 15       	cp	r16, r2
    4e90:	08 f0       	brcs	.+2      	; 0x4e94 <_nrk_time_to_ticks+0x98>
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	1a 81       	ldd	r17, Y+2	; 0x02
    4e96:	13 0d       	add	r17, r3
    4e98:	a1 e0       	ldi	r26, 0x01	; 1
    4e9a:	13 15       	cp	r17, r3
    4e9c:	08 f0       	brcs	.+2      	; 0x4ea0 <_nrk_time_to_ticks+0xa4>
    4e9e:	a0 e0       	ldi	r26, 0x00	; 0
    4ea0:	81 0f       	add	r24, r17
    4ea2:	91 e0       	ldi	r25, 0x01	; 1
    4ea4:	81 17       	cp	r24, r17
    4ea6:	08 f0       	brcs	.+2      	; 0x4eaa <_nrk_time_to_ticks+0xae>
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	a9 2b       	or	r26, r25
    4eac:	18 2f       	mov	r17, r24
    4eae:	2b 81       	ldd	r18, Y+3	; 0x03
    4eb0:	24 0d       	add	r18, r4
    4eb2:	b1 e0       	ldi	r27, 0x01	; 1
    4eb4:	24 15       	cp	r18, r4
    4eb6:	08 f0       	brcs	.+2      	; 0x4eba <_nrk_time_to_ticks+0xbe>
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	8a 2f       	mov	r24, r26
    4ebc:	82 0f       	add	r24, r18
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	82 17       	cp	r24, r18
    4ec2:	08 f0       	brcs	.+2      	; 0x4ec6 <_nrk_time_to_ticks+0xca>
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	b9 2b       	or	r27, r25
    4ec8:	28 2f       	mov	r18, r24
    4eca:	3c 81       	ldd	r19, Y+4	; 0x04
    4ecc:	35 0d       	add	r19, r5
    4ece:	a1 e0       	ldi	r26, 0x01	; 1
    4ed0:	35 15       	cp	r19, r5
    4ed2:	08 f0       	brcs	.+2      	; 0x4ed6 <_nrk_time_to_ticks+0xda>
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	8b 2f       	mov	r24, r27
    4ed8:	83 0f       	add	r24, r19
    4eda:	91 e0       	ldi	r25, 0x01	; 1
    4edc:	83 17       	cp	r24, r19
    4ede:	08 f0       	brcs	.+2      	; 0x4ee2 <_nrk_time_to_ticks+0xe6>
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	a9 2b       	or	r26, r25
    4ee4:	38 2f       	mov	r19, r24
    4ee6:	4d 81       	ldd	r20, Y+5	; 0x05
    4ee8:	46 0d       	add	r20, r6
    4eea:	b1 e0       	ldi	r27, 0x01	; 1
    4eec:	46 15       	cp	r20, r6
    4eee:	08 f0       	brcs	.+2      	; 0x4ef2 <_nrk_time_to_ticks+0xf6>
    4ef0:	b0 e0       	ldi	r27, 0x00	; 0
    4ef2:	8a 2f       	mov	r24, r26
    4ef4:	84 0f       	add	r24, r20
    4ef6:	91 e0       	ldi	r25, 0x01	; 1
    4ef8:	84 17       	cp	r24, r20
    4efa:	08 f0       	brcs	.+2      	; 0x4efe <_nrk_time_to_ticks+0x102>
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	b9 2b       	or	r27, r25
    4f00:	48 2f       	mov	r20, r24
    4f02:	5e 81       	ldd	r21, Y+6	; 0x06
    4f04:	57 0d       	add	r21, r7
    4f06:	a1 e0       	ldi	r26, 0x01	; 1
    4f08:	57 15       	cp	r21, r7
    4f0a:	08 f0       	brcs	.+2      	; 0x4f0e <_nrk_time_to_ticks+0x112>
    4f0c:	a0 e0       	ldi	r26, 0x00	; 0
    4f0e:	8b 2f       	mov	r24, r27
    4f10:	85 0f       	add	r24, r21
    4f12:	91 e0       	ldi	r25, 0x01	; 1
    4f14:	85 17       	cp	r24, r21
    4f16:	08 f0       	brcs	.+2      	; 0x4f1a <_nrk_time_to_ticks+0x11e>
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	a9 2b       	or	r26, r25
    4f1c:	58 2f       	mov	r21, r24
    4f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f20:	68 0d       	add	r22, r8
    4f22:	f1 e0       	ldi	r31, 0x01	; 1
    4f24:	68 15       	cp	r22, r8
    4f26:	08 f0       	brcs	.+2      	; 0x4f2a <_nrk_time_to_ticks+0x12e>
    4f28:	f0 e0       	ldi	r31, 0x00	; 0
    4f2a:	9a 2f       	mov	r25, r26
    4f2c:	96 0f       	add	r25, r22
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	96 17       	cp	r25, r22
    4f32:	08 f0       	brcs	.+2      	; 0x4f36 <_nrk_time_to_ticks+0x13a>
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	8f 2b       	or	r24, r31
    4f38:	78 85       	ldd	r23, Y+8	; 0x08
    4f3a:	79 0d       	add	r23, r9
    4f3c:	87 0f       	add	r24, r23
    4f3e:	20 2e       	mov	r2, r16
    4f40:	31 2e       	mov	r3, r17
    4f42:	42 2e       	mov	r4, r18
    4f44:	53 2e       	mov	r5, r19
    4f46:	64 2e       	mov	r6, r20
    4f48:	75 2e       	mov	r7, r21
    4f4a:	89 2e       	mov	r8, r25
    4f4c:	98 2e       	mov	r9, r24
    4f4e:	8a 2d       	mov	r24, r10
    4f50:	99 27       	eor	r25, r25
    4f52:	aa 27       	eor	r26, r26
    4f54:	bb 27       	eor	r27, r27
    4f56:	08 94       	sec
    4f58:	a1 1c       	adc	r10, r1
    4f5a:	b1 1c       	adc	r11, r1
    4f5c:	8c 15       	cp	r24, r12
    4f5e:	9d 05       	cpc	r25, r13
    4f60:	ae 05       	cpc	r26, r14
    4f62:	bf 05       	cpc	r27, r15
    4f64:	08 f4       	brcc	.+2      	; 0x4f68 <_nrk_time_to_ticks+0x16c>
    4f66:	85 cf       	rjmp	.-246    	; 0x4e72 <_nrk_time_to_ticks+0x76>
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4f68:	23 eb       	ldi	r18, 0xB3	; 179
    4f6a:	a2 2e       	mov	r10, r18
    4f6c:	96 ee       	ldi	r25, 0xE6	; 230
    4f6e:	b9 2e       	mov	r11, r25
    4f70:	8e e0       	ldi	r24, 0x0E	; 14
    4f72:	c8 2e       	mov	r12, r24
    4f74:	dd 24       	eor	r13, r13
    4f76:	ee 24       	eor	r14, r14
    4f78:	ff 24       	eor	r15, r15
    4f7a:	00 e0       	ldi	r16, 0x00	; 0
    4f7c:	10 e0       	ldi	r17, 0x00	; 0
    4f7e:	22 2d       	mov	r18, r2
    4f80:	33 2d       	mov	r19, r3
    4f82:	44 2d       	mov	r20, r4
    4f84:	55 2d       	mov	r21, r5
    4f86:	66 2d       	mov	r22, r6
    4f88:	77 2d       	mov	r23, r7
    4f8a:	88 2d       	mov	r24, r8
    4f8c:	99 2d       	mov	r25, r9
    4f8e:	0e 94 44 31 	call	0x6288	; 0x6288 <__udivdi3>
    4f92:	a2 2e       	mov	r10, r18
    4f94:	b3 2e       	mov	r11, r19
    4f96:	c5 01       	movw	r24, r10
    4f98:	07 c0       	rjmp	.+14     	; 0x4fa8 <_nrk_time_to_ticks+0x1ac>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    4f9a:	23 eb       	ldi	r18, 0xB3	; 179
    4f9c:	36 ee       	ldi	r19, 0xE6	; 230
    4f9e:	4e e0       	ldi	r20, 0x0E	; 14
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    4fa6:	c9 01       	movw	r24, r18
    4fa8:	28 96       	adiw	r28, 0x08	; 8
    4faa:	0f b6       	in	r0, 0x3f	; 63
    4fac:	f8 94       	cli
    4fae:	de bf       	out	0x3e, r29	; 62
    4fb0:	0f be       	out	0x3f, r0	; 63
    4fb2:	cd bf       	out	0x3d, r28	; 61
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	ff 90       	pop	r15
    4fbe:	ef 90       	pop	r14
    4fc0:	df 90       	pop	r13
    4fc2:	cf 90       	pop	r12
    4fc4:	bf 90       	pop	r11
    4fc6:	af 90       	pop	r10
    4fc8:	9f 90       	pop	r9
    4fca:	8f 90       	pop	r8
    4fcc:	7f 90       	pop	r7
    4fce:	6f 90       	pop	r6
    4fd0:	5f 90       	pop	r5
    4fd2:	4f 90       	pop	r4
    4fd4:	3f 90       	pop	r3
    4fd6:	2f 90       	pop	r2
    4fd8:	08 95       	ret

00004fda <_nrk_ticks_to_time>:
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
  
    4fda:	2f 92       	push	r2
    4fdc:	3f 92       	push	r3
    4fde:	4f 92       	push	r4
    4fe0:	5f 92       	push	r5
    4fe2:	6f 92       	push	r6
    4fe4:	7f 92       	push	r7
    4fe6:	8f 92       	push	r8
    4fe8:	9f 92       	push	r9
    4fea:	af 92       	push	r10
    4fec:	bf 92       	push	r11
    4fee:	cf 92       	push	r12
    4ff0:	df 92       	push	r13
    4ff2:	ef 92       	push	r14
    4ff4:	ff 92       	push	r15
    4ff6:	0f 93       	push	r16
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	cd b7       	in	r28, 0x3d	; 61
    5000:	de b7       	in	r29, 0x3e	; 62
    5002:	28 97       	sbiw	r28, 0x08	; 8
    5004:	0f b6       	in	r0, 0x3f	; 63
    5006:	f8 94       	cli
    5008:	de bf       	out	0x3e, r29	; 62
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	cd bf       	out	0x3d, r28	; 61
    500e:	7b 01       	movw	r14, r22
    5010:	8c 01       	movw	r16, r24
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    5012:	73 70       	andi	r23, 0x03	; 3
    5014:	80 70       	andi	r24, 0x00	; 0
    5016:	90 70       	andi	r25, 0x00	; 0
    5018:	23 eb       	ldi	r18, 0xB3	; 179
    501a:	36 ee       	ldi	r19, 0xE6	; 230
    501c:	4e e0       	ldi	r20, 0x0E	; 14
    501e:	50 e0       	ldi	r21, 0x00	; 0
    5020:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    5024:	6d 83       	std	Y+5, r22	; 0x05
    5026:	7e 83       	std	Y+6, r23	; 0x06
    5028:	8f 83       	std	Y+7, r24	; 0x07
    502a:	98 87       	std	Y+8, r25	; 0x08
    502c:	3a e0       	ldi	r19, 0x0A	; 10
    502e:	16 95       	lsr	r17
    5030:	07 95       	ror	r16
    5032:	f7 94       	ror	r15
    5034:	e7 94       	ror	r14
    5036:	3a 95       	dec	r19
    5038:	d1 f7       	brne	.-12     	; 0x502e <_nrk_ticks_to_time+0x54>
    503a:	e9 82       	std	Y+1, r14	; 0x01
    503c:	fa 82       	std	Y+2, r15	; 0x02
    503e:	0b 83       	std	Y+3, r16	; 0x03
    5040:	1c 83       	std	Y+4, r17	; 0x04
    5042:	98 85       	ldd	r25, Y+8	; 0x08
    5044:	29 80       	ldd	r2, Y+1	; 0x01
    5046:	3a 80       	ldd	r3, Y+2	; 0x02
    5048:	4b 80       	ldd	r4, Y+3	; 0x03
    504a:	5c 80       	ldd	r5, Y+4	; 0x04
    504c:	6d 80       	ldd	r6, Y+5	; 0x05
    504e:	7e 80       	ldd	r7, Y+6	; 0x06
    5050:	8f 80       	ldd	r8, Y+7	; 0x07
	}
    5052:	22 2d       	mov	r18, r2
    5054:	33 2d       	mov	r19, r3
    5056:	44 2d       	mov	r20, r4
    5058:	55 2d       	mov	r21, r5
    505a:	66 2d       	mov	r22, r6
    505c:	77 2d       	mov	r23, r7
    505e:	88 2d       	mov	r24, r8
    5060:	28 96       	adiw	r28, 0x08	; 8
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	f8 94       	cli
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	0f be       	out	0x3f, r0	; 63
    506a:	cd bf       	out	0x3d, r28	; 61
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	0f 91       	pop	r16
    5074:	ff 90       	pop	r15
    5076:	ef 90       	pop	r14
    5078:	df 90       	pop	r13
    507a:	cf 90       	pop	r12
    507c:	bf 90       	pop	r11
    507e:	af 90       	pop	r10
    5080:	9f 90       	pop	r9
    5082:	8f 90       	pop	r8
    5084:	7f 90       	pop	r7
    5086:	6f 90       	pop	r6
    5088:	5f 90       	pop	r5
    508a:	4f 90       	pop	r4
    508c:	3f 90       	pop	r3
    508e:	2f 90       	pop	r2
    5090:	08 95       	ret

00005092 <_nrk_time_to_ticks_long>:
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    5092:	2f 92       	push	r2
    5094:	3f 92       	push	r3
    5096:	4f 92       	push	r4
    5098:	5f 92       	push	r5
    509a:	6f 92       	push	r6
    509c:	7f 92       	push	r7
    509e:	8f 92       	push	r8
    50a0:	9f 92       	push	r9
    50a2:	af 92       	push	r10
    50a4:	bf 92       	push	r11
    50a6:	cf 92       	push	r12
    50a8:	df 92       	push	r13
    50aa:	ef 92       	push	r14
    50ac:	ff 92       	push	r15
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    50ba:	28 97       	sbiw	r28, 0x08	; 8
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	cd bf       	out	0x3d, r28	; 61
    50c6:	fc 01       	movw	r30, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	
    50c8:	c0 80       	ld	r12, Z
    50ca:	d1 80       	ldd	r13, Z+1	; 0x01
    50cc:	e2 80       	ldd	r14, Z+2	; 0x02
    50ce:	f3 80       	ldd	r15, Z+3	; 0x03
    50d0:	c1 14       	cp	r12, r1
    50d2:	d1 04       	cpc	r13, r1
    50d4:	e1 04       	cpc	r14, r1
    50d6:	f1 04       	cpc	r15, r1
    50d8:	09 f4       	brne	.+2      	; 0x50dc <_nrk_time_to_ticks_long+0x4a>
    50da:	a2 c0       	rjmp	.+324    	; 0x5220 <_nrk_time_to_ticks_long+0x18e>

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    50dc:	24 80       	ldd	r2, Z+4	; 0x04
    50de:	35 80       	ldd	r3, Z+5	; 0x05
    50e0:	46 80       	ldd	r4, Z+6	; 0x06
    50e2:	57 80       	ldd	r5, Z+7	; 0x07
    50e4:	66 24       	eor	r6, r6
    50e6:	77 24       	eor	r7, r7
    50e8:	88 24       	eor	r8, r8
    50ea:	99 24       	eor	r9, r9
    50ec:	aa 24       	eor	r10, r10
    50ee:	bb 24       	eor	r11, r11
    50f0:	6e c0       	rjmp	.+220    	; 0x51ce <_nrk_time_to_ticks_long+0x13c>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    50f2:	19 82       	std	Y+1, r1	; 0x01
    50f4:	8a ec       	ldi	r24, 0xCA	; 202
    50f6:	8a 83       	std	Y+2, r24	; 0x02
    50f8:	ea e9       	ldi	r30, 0x9A	; 154
    50fa:	eb 83       	std	Y+3, r30	; 0x03
    50fc:	fb e3       	ldi	r31, 0x3B	; 59
    50fe:	fc 83       	std	Y+4, r31	; 0x04
    5100:	1d 82       	std	Y+5, r1	; 0x05
    5102:	1e 82       	std	Y+6, r1	; 0x06
    5104:	1f 82       	std	Y+7, r1	; 0x07
    5106:	18 86       	std	Y+8, r1	; 0x08
    5108:	00 e0       	ldi	r16, 0x00	; 0
    510a:	02 0d       	add	r16, r2
    510c:	81 e0       	ldi	r24, 0x01	; 1
    510e:	02 15       	cp	r16, r2
    5110:	08 f0       	brcs	.+2      	; 0x5114 <_nrk_time_to_ticks_long+0x82>
    5112:	80 e0       	ldi	r24, 0x00	; 0
    5114:	1a 81       	ldd	r17, Y+2	; 0x02
    5116:	13 0d       	add	r17, r3
    5118:	a1 e0       	ldi	r26, 0x01	; 1
    511a:	13 15       	cp	r17, r3
    511c:	08 f0       	brcs	.+2      	; 0x5120 <_nrk_time_to_ticks_long+0x8e>
    511e:	a0 e0       	ldi	r26, 0x00	; 0
    5120:	81 0f       	add	r24, r17
    5122:	91 e0       	ldi	r25, 0x01	; 1
    5124:	81 17       	cp	r24, r17
    5126:	08 f0       	brcs	.+2      	; 0x512a <_nrk_time_to_ticks_long+0x98>
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	a9 2b       	or	r26, r25
    512c:	18 2f       	mov	r17, r24
    512e:	2b 81       	ldd	r18, Y+3	; 0x03
    5130:	24 0d       	add	r18, r4
    5132:	b1 e0       	ldi	r27, 0x01	; 1
    5134:	24 15       	cp	r18, r4
    5136:	08 f0       	brcs	.+2      	; 0x513a <_nrk_time_to_ticks_long+0xa8>
    5138:	b0 e0       	ldi	r27, 0x00	; 0
    513a:	8a 2f       	mov	r24, r26
    513c:	82 0f       	add	r24, r18
    513e:	91 e0       	ldi	r25, 0x01	; 1
    5140:	82 17       	cp	r24, r18
    5142:	08 f0       	brcs	.+2      	; 0x5146 <_nrk_time_to_ticks_long+0xb4>
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	b9 2b       	or	r27, r25
    5148:	28 2f       	mov	r18, r24
    514a:	3c 81       	ldd	r19, Y+4	; 0x04
    514c:	35 0d       	add	r19, r5
    514e:	a1 e0       	ldi	r26, 0x01	; 1
    5150:	35 15       	cp	r19, r5
    5152:	08 f0       	brcs	.+2      	; 0x5156 <_nrk_time_to_ticks_long+0xc4>
    5154:	a0 e0       	ldi	r26, 0x00	; 0
    5156:	8b 2f       	mov	r24, r27
    5158:	83 0f       	add	r24, r19
    515a:	91 e0       	ldi	r25, 0x01	; 1
    515c:	83 17       	cp	r24, r19
    515e:	08 f0       	brcs	.+2      	; 0x5162 <_nrk_time_to_ticks_long+0xd0>
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	a9 2b       	or	r26, r25
    5164:	38 2f       	mov	r19, r24
    5166:	4d 81       	ldd	r20, Y+5	; 0x05
    5168:	46 0d       	add	r20, r6
    516a:	b1 e0       	ldi	r27, 0x01	; 1
    516c:	46 15       	cp	r20, r6
    516e:	08 f0       	brcs	.+2      	; 0x5172 <_nrk_time_to_ticks_long+0xe0>
    5170:	b0 e0       	ldi	r27, 0x00	; 0
    5172:	8a 2f       	mov	r24, r26
    5174:	84 0f       	add	r24, r20
    5176:	91 e0       	ldi	r25, 0x01	; 1
    5178:	84 17       	cp	r24, r20
    517a:	08 f0       	brcs	.+2      	; 0x517e <_nrk_time_to_ticks_long+0xec>
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	b9 2b       	or	r27, r25
    5180:	48 2f       	mov	r20, r24
    5182:	5e 81       	ldd	r21, Y+6	; 0x06
    5184:	57 0d       	add	r21, r7
    5186:	a1 e0       	ldi	r26, 0x01	; 1
    5188:	57 15       	cp	r21, r7
    518a:	08 f0       	brcs	.+2      	; 0x518e <_nrk_time_to_ticks_long+0xfc>
    518c:	a0 e0       	ldi	r26, 0x00	; 0
    518e:	8b 2f       	mov	r24, r27
    5190:	85 0f       	add	r24, r21
    5192:	91 e0       	ldi	r25, 0x01	; 1
    5194:	85 17       	cp	r24, r21
    5196:	08 f0       	brcs	.+2      	; 0x519a <_nrk_time_to_ticks_long+0x108>
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	a9 2b       	or	r26, r25
    519c:	58 2f       	mov	r21, r24
    519e:	6f 81       	ldd	r22, Y+7	; 0x07
    51a0:	68 0d       	add	r22, r8
    51a2:	f1 e0       	ldi	r31, 0x01	; 1
    51a4:	68 15       	cp	r22, r8
    51a6:	08 f0       	brcs	.+2      	; 0x51aa <_nrk_time_to_ticks_long+0x118>
    51a8:	f0 e0       	ldi	r31, 0x00	; 0
    51aa:	9a 2f       	mov	r25, r26
    51ac:	96 0f       	add	r25, r22
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	96 17       	cp	r25, r22
    51b2:	08 f0       	brcs	.+2      	; 0x51b6 <_nrk_time_to_ticks_long+0x124>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	8f 2b       	or	r24, r31
    51b8:	78 85       	ldd	r23, Y+8	; 0x08
    51ba:	79 0d       	add	r23, r9
    51bc:	87 0f       	add	r24, r23
    51be:	20 2e       	mov	r2, r16
    51c0:	31 2e       	mov	r3, r17
    51c2:	42 2e       	mov	r4, r18
    51c4:	53 2e       	mov	r5, r19
    51c6:	64 2e       	mov	r6, r20
    51c8:	75 2e       	mov	r7, r21
    51ca:	89 2e       	mov	r8, r25
    51cc:	98 2e       	mov	r9, r24
    51ce:	8a 2d       	mov	r24, r10
    51d0:	99 27       	eor	r25, r25
    51d2:	aa 27       	eor	r26, r26
    51d4:	bb 27       	eor	r27, r27
    51d6:	08 94       	sec
    51d8:	a1 1c       	adc	r10, r1
    51da:	b1 1c       	adc	r11, r1
    51dc:	8c 15       	cp	r24, r12
    51de:	9d 05       	cpc	r25, r13
    51e0:	ae 05       	cpc	r26, r14
    51e2:	bf 05       	cpc	r27, r15
    51e4:	08 f4       	brcc	.+2      	; 0x51e8 <_nrk_time_to_ticks_long+0x156>
    51e6:	85 cf       	rjmp	.-246    	; 0x50f2 <_nrk_time_to_ticks_long+0x60>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    51e8:	63 eb       	ldi	r22, 0xB3	; 179
    51ea:	a6 2e       	mov	r10, r22
    51ec:	56 ee       	ldi	r21, 0xE6	; 230
    51ee:	b5 2e       	mov	r11, r21
    51f0:	4e e0       	ldi	r20, 0x0E	; 14
    51f2:	c4 2e       	mov	r12, r20
    51f4:	dd 24       	eor	r13, r13
    51f6:	ee 24       	eor	r14, r14
    51f8:	ff 24       	eor	r15, r15
    51fa:	00 e0       	ldi	r16, 0x00	; 0
    51fc:	10 e0       	ldi	r17, 0x00	; 0
    51fe:	22 2d       	mov	r18, r2
    5200:	33 2d       	mov	r19, r3
    5202:	44 2d       	mov	r20, r4
    5204:	55 2d       	mov	r21, r5
    5206:	66 2d       	mov	r22, r6
    5208:	77 2d       	mov	r23, r7
    520a:	88 2d       	mov	r24, r8
    520c:	99 2d       	mov	r25, r9
    520e:	0e 94 44 31 	call	0x6288	; 0x6288 <__udivdi3>
    5212:	a2 2e       	mov	r10, r18
    5214:	b3 2e       	mov	r11, r19
    5216:	c4 2e       	mov	r12, r20
    5218:	d5 2e       	mov	r13, r21
    521a:	a6 01       	movw	r20, r12
    521c:	95 01       	movw	r18, r10
    521e:	0a c0       	rjmp	.+20     	; 0x5234 <_nrk_time_to_ticks_long+0x1a2>
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    5220:	64 81       	ldd	r22, Z+4	; 0x04
    5222:	75 81       	ldd	r23, Z+5	; 0x05
    5224:	86 81       	ldd	r24, Z+6	; 0x06
    5226:	97 81       	ldd	r25, Z+7	; 0x07
    5228:	23 eb       	ldi	r18, 0xB3	; 179
    522a:	36 ee       	ldi	r19, 0xE6	; 230
    522c:	4e e0       	ldi	r20, 0x0E	; 14
    522e:	50 e0       	ldi	r21, 0x00	; 0
    5230:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    5234:	ca 01       	movw	r24, r20
    5236:	b9 01       	movw	r22, r18
    5238:	28 96       	adiw	r28, 0x08	; 8
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	f8 94       	cli
    523e:	de bf       	out	0x3e, r29	; 62
    5240:	0f be       	out	0x3f, r0	; 63
    5242:	cd bf       	out	0x3d, r28	; 61
    5244:	df 91       	pop	r29
    5246:	cf 91       	pop	r28
    5248:	1f 91       	pop	r17
    524a:	0f 91       	pop	r16
    524c:	ff 90       	pop	r15
    524e:	ef 90       	pop	r14
    5250:	df 90       	pop	r13
    5252:	cf 90       	pop	r12
    5254:	bf 90       	pop	r11
    5256:	af 90       	pop	r10
    5258:	9f 90       	pop	r9
    525a:	8f 90       	pop	r8
    525c:	7f 90       	pop	r7
    525e:	6f 90       	pop	r6
    5260:	5f 90       	pop	r5
    5262:	4f 90       	pop	r4
    5264:	3f 90       	pop	r3
    5266:	2f 90       	pop	r2
    5268:	08 95       	ret

0000526a <nrk_time_get>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    526a:	ef 92       	push	r14
    526c:	ff 92       	push	r15
    526e:	0f 93       	push	r16
    5270:	1f 93       	push	r17
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	ec 01       	movw	r28, r24

    5278:	80 91 ce 06 	lds	r24, 0x06CE
    527c:	90 91 cf 06 	lds	r25, 0x06CF
    5280:	a0 91 d0 06 	lds	r26, 0x06D0
    5284:	b0 91 d1 06 	lds	r27, 0x06D1
    5288:	88 83       	st	Y, r24
    528a:	99 83       	std	Y+1, r25	; 0x01
    528c:	aa 83       	std	Y+2, r26	; 0x02
    528e:	bb 83       	std	Y+3, r27	; 0x03
inline void nrk_int_disable(void) {
    5290:	e0 90 d2 06 	lds	r14, 0x06D2
    5294:	f0 90 d3 06 	lds	r15, 0x06D3
    5298:	00 91 d4 06 	lds	r16, 0x06D4
    529c:	10 91 d5 06 	lds	r17, 0x06D5
    52a0:	ec 82       	std	Y+4, r14	; 0x04
    52a2:	fd 82       	std	Y+5, r15	; 0x05
    52a4:	0e 83       	std	Y+6, r16	; 0x06
    52a6:	1f 83       	std	Y+7, r17	; 0x07
  DISABLE_GLOBAL_INT();
};
    52a8:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    52ac:	99 27       	eor	r25, r25
    52ae:	aa 27       	eor	r26, r26
    52b0:	bb 27       	eor	r27, r27
    52b2:	bc 01       	movw	r22, r24
    52b4:	cd 01       	movw	r24, r26
    52b6:	23 eb       	ldi	r18, 0xB3	; 179
    52b8:	36 ee       	ldi	r19, 0xE6	; 230
    52ba:	4e e0       	ldi	r20, 0x0E	; 14
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    52c2:	e6 0e       	add	r14, r22
    52c4:	f7 1e       	adc	r15, r23
    52c6:	08 1f       	adc	r16, r24
    52c8:	19 1f       	adc	r17, r25
    52ca:	ec 82       	std	Y+4, r14	; 0x04
    52cc:	fd 82       	std	Y+5, r15	; 0x05
    52ce:	0e 83       	std	Y+6, r16	; 0x06
    52d0:	1f 83       	std	Y+7, r17	; 0x07
    52d2:	13 c0       	rjmp	.+38     	; 0x52fa <nrk_time_get+0x90>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    52d4:	80 50       	subi	r24, 0x00	; 0
    52d6:	9a 4c       	sbci	r25, 0xCA	; 202
    52d8:	aa 49       	sbci	r26, 0x9A	; 154
    52da:	bb 43       	sbci	r27, 0x3B	; 59
    52dc:	8c 83       	std	Y+4, r24	; 0x04
    52de:	9d 83       	std	Y+5, r25	; 0x05
    52e0:	ae 83       	std	Y+6, r26	; 0x06
    52e2:	bf 83       	std	Y+7, r27	; 0x07
};
    52e4:	88 81       	ld	r24, Y
    52e6:	99 81       	ldd	r25, Y+1	; 0x01
    52e8:	aa 81       	ldd	r26, Y+2	; 0x02
    52ea:	bb 81       	ldd	r27, Y+3	; 0x03
    52ec:	01 96       	adiw	r24, 0x01	; 1
    52ee:	a1 1d       	adc	r26, r1
    52f0:	b1 1d       	adc	r27, r1
    52f2:	88 83       	st	Y, r24
    52f4:	99 83       	std	Y+1, r25	; 0x01
    52f6:	aa 83       	std	Y+2, r26	; 0x02
    52f8:	bb 83       	std	Y+3, r27	; 0x03
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    52fa:	8c 81       	ldd	r24, Y+4	; 0x04
    52fc:	9d 81       	ldd	r25, Y+5	; 0x05
    52fe:	ae 81       	ldd	r26, Y+6	; 0x06
    5300:	bf 81       	ldd	r27, Y+7	; 0x07
    5302:	80 30       	cpi	r24, 0x00	; 0
    5304:	2a ec       	ldi	r18, 0xCA	; 202
    5306:	92 07       	cpc	r25, r18
    5308:	2a e9       	ldi	r18, 0x9A	; 154
    530a:	a2 07       	cpc	r26, r18
    530c:	2b e3       	ldi	r18, 0x3B	; 59
    530e:	b2 07       	cpc	r27, r18
    5310:	08 f7       	brcc	.-62     	; 0x52d4 <nrk_time_get+0x6a>
    5312:	df 91       	pop	r29
    5314:	cf 91       	pop	r28
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	08 95       	ret

00005320 <nrk_idle_task>:
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    5320:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <nrk_stack_check>
#include <nrk_stats.h>

    5324:	0e 94 0a 2c 	call	0x5814	; 0x5814 <_nrk_get_next_wakeup>
    5328:	8b 30       	cpi	r24, 0x0B	; 11
    532a:	30 f4       	brcc	.+12     	; 0x5338 <nrk_idle_task+0x18>
inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	80 93 cb 06 	sts	0x06CB, r24
};
    5332:	0e 94 5e 2f 	call	0x5ebc	; 0x5ebc <nrk_idle>
    5336:	09 c0       	rjmp	.+18     	; 0x534a <nrk_idle_task+0x2a>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    5338:	8a e0       	ldi	r24, 0x0A	; 10
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	0e 94 b8 2b 	call	0x5770	; 0x5770 <nrk_spin_wait_us>
uint8_t nrk_task_init_cnt;
    5340:	82 e0       	ldi	r24, 0x02	; 2
    5342:	80 93 cb 06 	sts	0x06CB, r24

    5346:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <nrk_sleep>
void nrk_halt()
{
nrk_int_disable();
while(1);
}

    534a:	80 91 97 05 	lds	r24, 0x0597
    534e:	85 35       	cpi	r24, 0x55	; 85
    5350:	19 f0       	breq	.+6      	; 0x5358 <nrk_idle_task+0x38>
    5352:	88 e0       	ldi	r24, 0x08	; 8
    5354:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
    5358:	80 91 7e 21 	lds	r24, 0x217E
    535c:	85 35       	cpi	r24, 0x55	; 85
    535e:	01 f3       	breq	.-64     	; 0x5320 <nrk_idle_task>
    5360:	88 e0       	ldi	r24, 0x08	; 8
    5362:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
    5366:	dc cf       	rjmp	.-72     	; 0x5320 <nrk_idle_task>

00005368 <_nrk_scheduler>:
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    5368:	8f 92       	push	r8
    536a:	9f 92       	push	r9
    536c:	af 92       	push	r10
    536e:	bf 92       	push	r11
    5370:	cf 92       	push	r12
    5372:	df 92       	push	r13
    5374:	ef 92       	push	r14
    5376:	ff 92       	push	r15
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    5380:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
uint8_t nrk_task_init_cnt;


void nrk_halt()
    5384:	0e 94 c6 2b 	call	0x578c	; 0x578c <_nrk_high_speed_timer_reset>
{
    5388:	0e 94 ce 2b 	call	0x579c	; 0x579c <_nrk_high_speed_timer_get>
    538c:	4c 01       	movw	r8, r24
nrk_int_disable();
while(1);
    538e:	8a ef       	ldi	r24, 0xFA	; 250
    5390:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    5394:	60 91 1c 06 	lds	r22, 0x061C
    5398:	77 27       	eor	r23, r23
    539a:	88 27       	eor	r24, r24
    539c:	99 27       	eor	r25, r25
    539e:	23 eb       	ldi	r18, 0xB3	; 179
    53a0:	36 ee       	ldi	r19, 0xE6	; 230
    53a2:	4e e0       	ldi	r20, 0x0E	; 14
    53a4:	50 e0       	ldi	r21, 0x00	; 0
    53a6:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    53aa:	7b 01       	movw	r14, r22
    53ac:	8c 01       	movw	r16, r24
    53ae:	80 91 d2 06 	lds	r24, 0x06D2
    53b2:	90 91 d3 06 	lds	r25, 0x06D3
    53b6:	a0 91 d4 06 	lds	r26, 0x06D4
    53ba:	b0 91 d5 06 	lds	r27, 0x06D5
    53be:	e8 0e       	add	r14, r24
    53c0:	f9 1e       	adc	r15, r25
    53c2:	0a 1f       	adc	r16, r26
    53c4:	1b 1f       	adc	r17, r27
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    53c6:	c8 01       	movw	r24, r16
    53c8:	b7 01       	movw	r22, r14
    53ca:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    53ce:	a8 01       	movw	r20, r16
    53d0:	97 01       	movw	r18, r14
    53d2:	26 1b       	sub	r18, r22
    53d4:	37 0b       	sbc	r19, r23
    53d6:	48 0b       	sbc	r20, r24
    53d8:	59 0b       	sbc	r21, r25
    53da:	80 91 ce 06 	lds	r24, 0x06CE
    53de:	90 91 cf 06 	lds	r25, 0x06CF
    53e2:	a0 91 d0 06 	lds	r26, 0x06D0
    53e6:	b0 91 d1 06 	lds	r27, 0x06D1
    53ea:	1b c0       	rjmp	.+54     	; 0x5422 <_nrk_scheduler+0xba>
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    53ec:	e1 2c       	mov	r14, r1
    53ee:	66 e3       	ldi	r22, 0x36	; 54
    53f0:	f6 2e       	mov	r15, r22
    53f2:	65 e6       	ldi	r22, 0x65	; 101
    53f4:	06 2f       	mov	r16, r22
    53f6:	64 ec       	ldi	r22, 0xC4	; 196
    53f8:	16 2f       	mov	r17, r22
    53fa:	e2 0e       	add	r14, r18
    53fc:	f3 1e       	adc	r15, r19
    53fe:	04 1f       	adc	r16, r20
    5400:	15 1f       	adc	r17, r21
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    5402:	c8 01       	movw	r24, r16
    5404:	b7 01       	movw	r22, r14
    5406:	23 eb       	ldi	r18, 0xB3	; 179
    5408:	36 ee       	ldi	r19, 0xE6	; 230
    540a:	4e e0       	ldi	r20, 0x0E	; 14
    540c:	50 e0       	ldi	r21, 0x00	; 0
    540e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    5412:	a8 01       	movw	r20, r16
    5414:	97 01       	movw	r18, r14
    5416:	26 1b       	sub	r18, r22
    5418:	37 0b       	sbc	r19, r23
    541a:	48 0b       	sbc	r20, r24
    541c:	59 0b       	sbc	r21, r25
    541e:	d6 01       	movw	r26, r12
    5420:	c5 01       	movw	r24, r10
    5422:	5c 01       	movw	r10, r24
    5424:	6d 01       	movw	r12, r26
    5426:	08 94       	sec
    5428:	a1 1c       	adc	r10, r1
    542a:	b1 1c       	adc	r11, r1
    542c:	c1 1c       	adc	r12, r1
    542e:	d1 1c       	adc	r13, r1
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    5430:	20 30       	cpi	r18, 0x00	; 0
    5432:	6a ec       	ldi	r22, 0xCA	; 202
    5434:	36 07       	cpc	r19, r22
    5436:	6a e9       	ldi	r22, 0x9A	; 154
    5438:	46 07       	cpc	r20, r22
    543a:	6b e3       	ldi	r22, 0x3B	; 59
    543c:	56 07       	cpc	r21, r22
    543e:	b0 f6       	brcc	.-84     	; 0x53ec <_nrk_scheduler+0x84>
    5440:	80 93 ce 06 	sts	0x06CE, r24
    5444:	90 93 cf 06 	sts	0x06CF, r25
    5448:	a0 93 d0 06 	sts	0x06D0, r26
    544c:	b0 93 d1 06 	sts	0x06D1, r27
    5450:	20 93 d2 06 	sts	0x06D2, r18
    5454:	30 93 d3 06 	sts	0x06D3, r19
    5458:	40 93 d4 06 	sts	0x06D4, r20
    545c:	50 93 d5 06 	sts	0x06D5, r21
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    5460:	e0 91 d7 06 	lds	r30, 0x06D7
    5464:	f0 91 d8 06 	lds	r31, 0x06D8
    5468:	85 81       	ldd	r24, Z+5	; 0x05
    546a:	88 23       	and	r24, r24
    546c:	19 f1       	breq	.+70     	; 0x54b4 <_nrk_scheduler+0x14c>
    546e:	81 85       	ldd	r24, Z+9	; 0x09
    5470:	84 30       	cpi	r24, 0x04	; 4
    5472:	01 f1       	breq	.+64     	; 0x54b4 <_nrk_scheduler+0x14c>
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    5474:	87 81       	ldd	r24, Z+7	; 0x07
    5476:	82 30       	cpi	r24, 0x02	; 2
    5478:	29 f0       	breq	.+10     	; 0x5484 <_nrk_scheduler+0x11c>
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    547a:	88 23       	and	r24, r24
    547c:	41 f0       	breq	.+16     	; 0x548e <_nrk_scheduler+0x126>
    547e:	86 81       	ldd	r24, Z+6	; 0x06
    5480:	88 23       	and	r24, r24
    5482:	11 f4       	brne	.+4      	; 0x5488 <_nrk_scheduler+0x120>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    5484:	85 e0       	ldi	r24, 0x05	; 5
    5486:	01 c0       	rjmp	.+2      	; 0x548a <_nrk_scheduler+0x122>
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    5488:	83 e0       	ldi	r24, 0x03	; 3
    548a:	81 87       	std	Z+9, r24	; 0x09
    548c:	0c c0       	rjmp	.+24     	; 0x54a6 <_nrk_scheduler+0x13e>
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    548e:	83 e0       	ldi	r24, 0x03	; 3
    5490:	81 87       	std	Z+9, r24	; 0x09
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    5492:	e0 91 d7 06 	lds	r30, 0x06D7
    5496:	f0 91 d8 06 	lds	r31, 0x06D8
    549a:	17 82       	std	Z+7, r1	; 0x07
    #endif
    549c:	e0 91 d7 06 	lds	r30, 0x06D7
    54a0:	f0 91 d8 06 	lds	r31, 0x06D8
    54a4:	16 82       	std	Z+6, r1	; 0x06
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    54a6:	e0 91 d7 06 	lds	r30, 0x06D7
    54aa:	f0 91 d8 06 	lds	r31, 0x06D8
    54ae:	80 85       	ldd	r24, Z+8	; 0x08
    54b0:	0e 94 45 23 	call	0x468a	; 0x468a <nrk_rem_from_readyQ>
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    54b4:	e0 91 d7 06 	lds	r30, 0x06D7
    54b8:	f0 91 d8 06 	lds	r31, 0x06D8
    54bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    54be:	96 8d       	ldd	r25, Z+30	; 0x1e
    54c0:	89 2b       	or	r24, r25
    54c2:	91 f1       	breq	.+100    	; 0x5528 <_nrk_scheduler+0x1c0>
    54c4:	60 85       	ldd	r22, Z+8	; 0x08
    54c6:	66 23       	and	r22, r22
    54c8:	79 f1       	breq	.+94     	; 0x5528 <_nrk_scheduler+0x1c0>
    54ca:	81 85       	ldd	r24, Z+9	; 0x09
    54cc:	84 30       	cpi	r24, 0x04	; 4
    54ce:	61 f1       	breq	.+88     	; 0x5528 <_nrk_scheduler+0x1c0>
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    54d0:	21 8d       	ldd	r18, Z+25	; 0x19
    54d2:	32 8d       	ldd	r19, Z+26	; 0x1a
    54d4:	80 91 1c 06 	lds	r24, 0x061C
    54d8:	99 27       	eor	r25, r25
    54da:	28 17       	cp	r18, r24
    54dc:	39 07       	cpc	r19, r25
    54de:	50 f4       	brcc	.+20     	; 0x54f4 <_nrk_scheduler+0x18c>

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif

    54e0:	82 e0       	ldi	r24, 0x02	; 2
    54e2:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    #ifdef NRK_MAX_RESERVES 
    54e6:	e0 91 d7 06 	lds	r30, 0x06D7
    54ea:	f0 91 d8 06 	lds	r31, 0x06D8
    54ee:	12 8e       	std	Z+26, r1	; 0x1a
    54f0:	11 8e       	std	Z+25, r1	; 0x19
    54f2:	04 c0       	rjmp	.+8      	; 0x54fc <_nrk_scheduler+0x194>
    // Setup the reserve structures
    _nrk_reserve_init();
    54f4:	28 1b       	sub	r18, r24
    54f6:	39 0b       	sbc	r19, r25
    54f8:	32 8f       	std	Z+26, r19	; 0x1a
    54fa:	21 8f       	std	Z+25, r18	; 0x19
    #endif

    54fc:	e0 91 d7 06 	lds	r30, 0x06D7
    5500:	f0 91 d8 06 	lds	r31, 0x06D8
    5504:	10 85       	ldd	r17, Z+8	; 0x08
    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

    5506:	81 8d       	ldd	r24, Z+25	; 0x19
    5508:	92 8d       	ldd	r25, Z+26	; 0x1a
    550a:	89 2b       	or	r24, r25
    550c:	69 f4       	brne	.+26     	; 0x5528 <_nrk_scheduler+0x1c0>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    nrk_sem_list[i].value=-1;
    550e:	61 2f       	mov	r22, r17
    5510:	83 e0       	ldi	r24, 0x03	; 3
    5512:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    nrk_sem_list[i].resource_ceiling=-1;
    5516:	e0 91 d7 06 	lds	r30, 0x06D7
    551a:	f0 91 d8 06 	lds	r31, 0x06D8
    551e:	83 e0       	ldi	r24, 0x03	; 3
    5520:	81 87       	std	Z+9, r24	; 0x09
    //nrk_resource_count[i]=-1;
    5522:	81 2f       	mov	r24, r17
    5524:	0e 94 45 23 	call	0x468a	; 0x468a <nrk_rem_from_readyQ>
    5528:	ca e3       	ldi	r28, 0x3A	; 58
    552a:	d6 e0       	ldi	r29, 0x06	; 6
    552c:	00 e6       	ldi	r16, 0x60	; 96
    552e:	1a ee       	ldi	r17, 0xEA	; 234
    5530:	cc 24       	eor	r12, r12
    5532:	dd 24       	eor	r13, r13
    5534:	ec 2d       	mov	r30, r12
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
    5536:	88 85       	ldd	r24, Y+8	; 0x08
    5538:	8f 3f       	cpi	r24, 0xFF	; 255
    553a:	09 f4       	brne	.+2      	; 0x553e <_nrk_scheduler+0x1d6>
    553c:	94 c0       	rjmp	.+296    	; 0x5666 <_nrk_scheduler+0x2fe>
  
    553e:	1d 82       	std	Y+5, r1	; 0x05
       
    5540:	88 23       	and	r24, r24
    5542:	91 f1       	breq	.+100    	; 0x55a8 <_nrk_scheduler+0x240>
    5544:	89 85       	ldd	r24, Y+9	; 0x09
    5546:	84 30       	cpi	r24, 0x04	; 4
    5548:	79 f1       	breq	.+94     	; 0x55a8 <_nrk_scheduler+0x240>
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    554a:	2d 89       	ldd	r18, Y+21	; 0x15
    554c:	3e 89       	ldd	r19, Y+22	; 0x16
    554e:	80 91 1c 06 	lds	r24, 0x061C
    5552:	99 27       	eor	r25, r25
    5554:	28 17       	cp	r18, r24
    5556:	39 07       	cpc	r19, r25
    5558:	28 f0       	brcs	.+10     	; 0x5564 <_nrk_scheduler+0x1fc>
	{
    555a:	28 1b       	sub	r18, r24
    555c:	39 0b       	sbc	r19, r25
    555e:	3e 8b       	std	Y+22, r19	; 0x16
    5560:	2d 8b       	std	Y+21, r18	; 0x15
    5562:	02 c0       	rjmp	.+4      	; 0x5568 <_nrk_scheduler+0x200>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    5564:	1e 8a       	std	Y+22, r1	; 0x16
    5566:	1d 8a       	std	Y+21, r1	; 0x15
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    5568:	2f 89       	ldd	r18, Y+23	; 0x17
    556a:	38 8d       	ldd	r19, Y+24	; 0x18
    556c:	28 17       	cp	r18, r24
    556e:	39 07       	cpc	r19, r25
    5570:	28 f0       	brcs	.+10     	; 0x557c <_nrk_scheduler+0x214>
	_free_node = &_nrk_readyQ[0];
    5572:	28 1b       	sub	r18, r24
    5574:	39 0b       	sbc	r19, r25
    5576:	38 8f       	std	Y+24, r19	; 0x18
    5578:	2f 8b       	std	Y+23, r18	; 0x17
    557a:	0e c0       	rjmp	.+28     	; 0x5598 <_nrk_scheduler+0x230>
	
	
    557c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    557e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5580:	86 17       	cp	r24, r22
    5582:	97 07       	cpc	r25, r23
    5584:	28 f4       	brcc	.+10     	; 0x5590 <_nrk_scheduler+0x228>
	
    5586:	68 1b       	sub	r22, r24
    5588:	79 0b       	sbc	r23, r25
    558a:	78 8f       	std	Y+24, r23	; 0x18
    558c:	6f 8b       	std	Y+23, r22	; 0x17
    558e:	04 c0       	rjmp	.+8      	; 0x5598 <_nrk_scheduler+0x230>

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    5590:	0e 94 d2 3a 	call	0x75a4	; 0x75a4 <__udivmodhi4>
    5594:	98 8f       	std	Y+24, r25	; 0x18
    5596:	8f 8b       	std	Y+23, r24	; 0x17
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    5598:	8f 89       	ldd	r24, Y+23	; 0x17
    559a:	98 8d       	ldd	r25, Y+24	; 0x18
    559c:	89 2b       	or	r24, r25
    559e:	21 f4       	brne	.+8      	; 0x55a8 <_nrk_scheduler+0x240>
    55a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55a4:	98 8f       	std	Y+24, r25	; 0x18
    55a6:	8f 8b       	std	Y+23, r24	; 0x17
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    55a8:	89 85       	ldd	r24, Y+9	; 0x09
    55aa:	83 30       	cpi	r24, 0x03	; 3
    55ac:	09 f0       	breq	.+2      	; 0x55b0 <_nrk_scheduler+0x248>
    55ae:	5b c0       	rjmp	.+182    	; 0x5666 <_nrk_scheduler+0x2fe>
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    55b0:	8d 89       	ldd	r24, Y+21	; 0x15
    55b2:	9e 89       	ldd	r25, Y+22	; 0x16
    55b4:	89 2b       	or	r24, r25
    55b6:	09 f0       	breq	.+2      	; 0x55ba <_nrk_scheduler+0x252>
    55b8:	4e c0       	rjmp	.+156    	; 0x5656 <_nrk_scheduler+0x2ee>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    55ba:	8f 81       	ldd	r24, Y+7	; 0x07
    55bc:	88 23       	and	r24, r24
    55be:	a1 f0       	breq	.+40     	; 0x55e8 <_nrk_scheduler+0x280>
    55c0:	8e 81       	ldd	r24, Y+6	; 0x06
    55c2:	88 23       	and	r24, r24
    55c4:	89 f0       	breq	.+34     	; 0x55e8 <_nrk_scheduler+0x280>
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	a0 e0       	ldi	r26, 0x00	; 0
    55cc:	b0 e0       	ldi	r27, 0x00	; 0
    55ce:	00 90 c7 06 	lds	r0, 0x06C7
    55d2:	04 c0       	rjmp	.+8      	; 0x55dc <_nrk_scheduler+0x274>
    55d4:	88 0f       	add	r24, r24
    55d6:	99 1f       	adc	r25, r25
    55d8:	aa 1f       	adc	r26, r26
    55da:	bb 1f       	adc	r27, r27
    55dc:	0a 94       	dec	r0
    55de:	d2 f7       	brpl	.-12     	; 0x55d4 <_nrk_scheduler+0x26c>
    55e0:	89 8b       	std	Y+17, r24	; 0x11
    55e2:	9a 8b       	std	Y+18, r25	; 0x12
    55e4:	ab 8b       	std	Y+19, r26	; 0x13
    55e6:	bc 8b       	std	Y+20, r27	; 0x14
	nrk_activate_task(&IdleTask);
	
    55e8:	1f 82       	std	Y+7, r1	; 0x07
}
    55ea:	1e 82       	std	Y+6, r1	; 0x06

    55ec:	1d 82       	std	Y+5, r1	; 0x05

    55ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55f0:	98 a1       	ldd	r25, Y+32	; 0x20
    55f2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    55f4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    55f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    55f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    55fa:	81 30       	cpi	r24, 0x01	; 1
    55fc:	91 05       	cpc	r25, r1
    55fe:	91 f4       	brne	.+36     	; 0x5624 <_nrk_scheduler+0x2bc>


    5600:	3a 8f       	std	Y+26, r19	; 0x1a
    5602:	29 8f       	std	Y+25, r18	; 0x19

    5604:	82 e0       	ldi	r24, 0x02	; 2
    5606:	89 87       	std	Y+9, r24	; 0x09

    5608:	8f 89       	ldd	r24, Y+23	; 0x17
    560a:	98 8d       	ldd	r25, Y+24	; 0x18
    560c:	9e 8b       	std	Y+22, r25	; 0x16
    560e:	8d 8b       	std	Y+21, r24	; 0x15


    5610:	45 2b       	or	r20, r21
    5612:	21 f4       	brne	.+8      	; 0x561c <_nrk_scheduler+0x2b4>
    5614:	8a ef       	ldi	r24, 0xFA	; 250
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	9e 8b       	std	Y+22, r25	; 0x16
    561a:	8d 8b       	std	Y+21, r24	; 0x15
void nrk_start (void)
    561c:	8e 2f       	mov	r24, r30
    561e:	0e 94 be 22 	call	0x457c	; 0x457c <nrk_add_to_readyQ>
    5622:	19 c0       	rjmp	.+50     	; 0x5656 <_nrk_scheduler+0x2ee>
{
	int8_t task_ID;
	uint8_t i,j;
    5624:	3a 8f       	std	Y+26, r19	; 0x1a
    5626:	29 8f       	std	Y+25, r18	; 0x19
//	NRK_STK *x;
//	unsigned char *stkc;

    5628:	01 97       	sbiw	r24, 0x01	; 1
    562a:	9c 01       	movw	r18, r24
    562c:	24 9f       	mul	r18, r20
    562e:	c0 01       	movw	r24, r0
    5630:	25 9f       	mul	r18, r21
    5632:	90 0d       	add	r25, r0
    5634:	34 9f       	mul	r19, r20
    5636:	90 0d       	add	r25, r0
    5638:	11 24       	eor	r1, r1
    563a:	9e 8b       	std	Y+22, r25	; 0x16
    563c:	8d 8b       	std	Y+21, r24	; 0x15
	/*
    563e:	98 8f       	std	Y+24, r25	; 0x18
    5640:	8f 8b       	std	Y+23, r24	; 0x17
		- Get highest priority task from rdy list
    5642:	45 2b       	or	r20, r21
    5644:	21 f4       	brne	.+8      	; 0x564e <_nrk_scheduler+0x2e6>
    5646:	8a ef       	ldi	r24, 0xFA	; 250
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	9e 8b       	std	Y+22, r25	; 0x16
    564c:	8d 8b       	std	Y+21, r24	; 0x15
		- set cur prio and start the task 
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	98 a3       	std	Y+32, r25	; 0x20
    5654:	8f 8f       	std	Y+31, r24	; 0x1f
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
    5656:	8d 89       	ldd	r24, Y+21	; 0x15
    5658:	9e 89       	ldd	r25, Y+22	; 0x16
    565a:	00 97       	sbiw	r24, 0x00	; 0
    565c:	21 f0       	breq	.+8      	; 0x5666 <_nrk_scheduler+0x2fe>
    565e:	80 17       	cp	r24, r16
    5660:	91 07       	cpc	r25, r17
    5662:	08 f4       	brcc	.+2      	; 0x5666 <_nrk_scheduler+0x2fe>
    5664:	8c 01       	movw	r16, r24
    5666:	08 94       	sec
    5668:	c1 1c       	adc	r12, r1
    566a:	d1 1c       	adc	r13, r1
    566c:	a1 96       	adiw	r28, 0x21	; 33
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    566e:	34 e0       	ldi	r19, 0x04	; 4
    5670:	c3 16       	cp	r12, r19
    5672:	d1 04       	cpc	r13, r1
    5674:	09 f0       	breq	.+2      	; 0x5678 <_nrk_scheduler+0x310>
    5676:	5e cf       	rjmp	.-324    	; 0x5534 <_nrk_scheduler+0x1cc>
			}
		}
	}

    }

    5678:	0e 94 ac 22 	call	0x4558	; 0x4558 <nrk_get_high_ready_task_ID>
    567c:	e8 2e       	mov	r14, r24
    task_ID = nrk_get_high_ready_task_ID();	
    567e:	99 27       	eor	r25, r25
    5680:	87 fd       	sbrc	r24, 7
    5682:	90 95       	com	r25
    5684:	fc 01       	movw	r30, r24
    5686:	25 e0       	ldi	r18, 0x05	; 5
    5688:	ee 0f       	add	r30, r30
    568a:	ff 1f       	adc	r31, r31
    568c:	2a 95       	dec	r18
    568e:	e1 f7       	brne	.-8      	; 0x5688 <_nrk_scheduler+0x320>
    5690:	e8 0f       	add	r30, r24
    5692:	f9 1f       	adc	r31, r25
    5694:	e6 5c       	subi	r30, 0xC6	; 198
    5696:	f9 4f       	sbci	r31, 0xF9	; 249
    5698:	42 85       	ldd	r20, Z+10	; 0x0a
    569a:	40 93 d9 06 	sts	0x06D9, r20
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    569e:	81 e2       	ldi	r24, 0x21	; 33
    56a0:	6e 2d       	mov	r22, r14
    56a2:	68 02       	muls	r22, r24
    56a4:	90 01       	movw	r18, r0
    56a6:	11 24       	eor	r1, r1
    56a8:	26 5c       	subi	r18, 0xC6	; 198
    56aa:	39 4f       	sbci	r19, 0xF9	; 249
    56ac:	30 93 c9 06 	sts	0x06C9, r19
    56b0:	20 93 c8 06 	sts	0x06C8, r18
		
//    nrk_stack_pointer_restore();

    /*
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    56b4:	ee 20       	and	r14, r14
    56b6:	91 f0       	breq	.+36     	; 0x56dc <_nrk_scheduler+0x374>
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    56b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    56ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    56bc:	89 2b       	or	r24, r25
    56be:	51 f0       	breq	.+20     	; 0x56d4 <_nrk_scheduler+0x36c>
    56c0:	81 8d       	ldd	r24, Z+25	; 0x19
    56c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    56c4:	8a 3f       	cpi	r24, 0xFA	; 250
    56c6:	91 05       	cpc	r25, r1
    56c8:	28 f4       	brcc	.+10     	; 0x56d4 <_nrk_scheduler+0x36c>
    56ca:	80 17       	cp	r24, r16
    56cc:	91 07       	cpc	r25, r17
    56ce:	e0 f4       	brcc	.+56     	; 0x5708 <_nrk_scheduler+0x3a0>
    56d0:	8c 01       	movw	r16, r24
    56d2:	1a c0       	rjmp	.+52     	; 0x5708 <_nrk_scheduler+0x3a0>
    56d4:	0b 3f       	cpi	r16, 0xFB	; 251
    56d6:	11 05       	cpc	r17, r1
    56d8:	b8 f0       	brcs	.+46     	; 0x5708 <_nrk_scheduler+0x3a0>
    56da:	14 c0       	rjmp	.+40     	; 0x5704 <_nrk_scheduler+0x39c>
    // you should never get here    
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
    56dc:	0b 30       	cpi	r16, 0x0B	; 11
    56de:	11 05       	cpc	r17, r1
    56e0:	98 f0       	brcs	.+38     	; 0x5708 <_nrk_scheduler+0x3a0>
{
	
    56e2:	c8 01       	movw	r24, r16
    56e4:	0a 97       	sbiw	r24, 0x0a	; 10
    56e6:	8a 3f       	cpi	r24, 0xFA	; 250
    56e8:	91 05       	cpc	r25, r1
    56ea:	30 f4       	brcc	.+12     	; 0x56f8 <_nrk_scheduler+0x390>
    56ec:	8c 01       	movw	r16, r24
    56ee:	09 97       	sbiw	r24, 0x09	; 9
    56f0:	58 f4       	brcc	.+22     	; 0x5708 <_nrk_scheduler+0x3a0>
    56f2:	09 e0       	ldi	r16, 0x09	; 9
    56f4:	10 e0       	ldi	r17, 0x00	; 0
    56f6:	08 c0       	rjmp	.+16     	; 0x5708 <_nrk_scheduler+0x3a0>
    	Task->task_ID=nrk_task_init_cnt;
    else Task->task_ID=NRK_IDLE_TASK_ID;

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    56f8:	05 50       	subi	r16, 0x05	; 5
    56fa:	11 40       	sbci	r17, 0x01	; 1
    56fc:	18 f4       	brcc	.+6      	; 0x5704 <_nrk_scheduler+0x39c>
    56fe:	00 ef       	ldi	r16, 0xF0	; 240
    5700:	10 e0       	ldi	r17, 0x00	; 0
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <_nrk_scheduler+0x3a0>
    5704:	0a ef       	ldi	r16, 0xFA	; 250
    5706:	10 e0       	ldi	r17, 0x00	; 0
/*
 * _nrk_timer_tick() 
 *
 * This function is called by the interrupt timer0.
 * It calls the scheduler.
 */
    5708:	40 93 ca 06 	sts	0x06CA, r20
void _nrk_timer_tick(void)
    570c:	30 93 d8 06 	sts	0x06D8, r19
    5710:	20 93 d7 06 	sts	0x06D7, r18
	_nrk_scheduler();

  	return;
}


    5714:	00 93 1c 06 	sts	0x061C, r16
uint16_t nrk_version (void)
{
    return (NRK_VERSION);
    5718:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    571c:	99 27       	eor	r25, r25
    571e:	01 96       	adiw	r24, 0x01	; 1
    5720:	80 17       	cp	r24, r16
    5722:	91 07       	cpc	r25, r17
    5724:	40 f0       	brcs	.+16     	; 0x5736 <_nrk_scheduler+0x3ce>
    5726:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <_nrk_os_timer_get>
    572a:	08 2f       	mov	r16, r24
    572c:	11 27       	eor	r17, r17
    572e:	0e 5f       	subi	r16, 0xFE	; 254
    5730:	1f 4f       	sbci	r17, 0xFF	; 255
    5732:	00 93 1c 06 	sts	0x061C, r16
    5736:	ee 20       	and	r14, r14
    5738:	11 f0       	breq	.+4      	; 0x573e <_nrk_scheduler+0x3d6>
    573a:	10 92 cb 06 	sts	0x06CB, r1
    573e:	80 2f       	mov	r24, r16
    5740:	0e 94 0f 2c 	call	0x581e	; 0x581e <_nrk_set_next_wakeup>
    5744:	6e ee       	ldi	r22, 0xEE	; 238
    5746:	72 e0       	ldi	r23, 0x02	; 2
    5748:	c4 01       	movw	r24, r8
    574a:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <nrk_high_speed_timer_wait>
    574e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <nrk_stack_pointer_restore>
    5752:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <nrk_start_high_ready_task>
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	1f 91       	pop	r17
    575c:	0f 91       	pop	r16
    575e:	ff 90       	pop	r15
    5760:	ef 90       	pop	r14
    5762:	df 90       	pop	r13
    5764:	cf 90       	pop	r12
    5766:	bf 90       	pop	r11
    5768:	af 90       	pop	r10
    576a:	9f 90       	pop	r9
    576c:	8f 90       	pop	r8
    576e:	08 95       	ret

00005770 <nrk_spin_wait_us>:
	...
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    5778:	01 97       	sbiw	r24, 0x01	; 1
    577a:	d1 f7       	brne	.-12     	; 0x5770 <nrk_spin_wait_us>
    577c:	08 95       	ret

0000577e <_nrk_high_speed_timer_stop>:
    577e:	10 92 81 00 	sts	0x0081, r1
    5782:	08 95       	ret

00005784 <_nrk_high_speed_timer_start>:
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	80 93 81 00 	sts	0x0081, r24
    578a:	08 95       	ret

0000578c <_nrk_high_speed_timer_reset>:
    578c:	83 b5       	in	r24, 0x23	; 35
    578e:	81 60       	ori	r24, 0x01	; 1
    5790:	83 bd       	out	0x23, r24	; 35
    5792:	10 92 85 00 	sts	0x0085, r1
    5796:	10 92 84 00 	sts	0x0084, r1
    579a:	08 95       	ret

0000579c <_nrk_high_speed_timer_get>:
    579c:	cf 93       	push	r28
    579e:	df 93       	push	r29
    57a0:	cd b7       	in	r28, 0x3d	; 61
    57a2:	de b7       	in	r29, 0x3e	; 62
    57a4:	22 97       	sbiw	r28, 0x02	; 2
    57a6:	0f b6       	in	r0, 0x3f	; 63
    57a8:	f8 94       	cli
    57aa:	de bf       	out	0x3e, r29	; 62
    57ac:	0f be       	out	0x3f, r0	; 63
    57ae:	cd bf       	out	0x3d, r28	; 61
    57b0:	80 91 84 00 	lds	r24, 0x0084
    57b4:	90 91 85 00 	lds	r25, 0x0085
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	89 81       	ldd	r24, Y+1	; 0x01
    57be:	9a 81       	ldd	r25, Y+2	; 0x02
    57c0:	22 96       	adiw	r28, 0x02	; 2
    57c2:	0f b6       	in	r0, 0x3f	; 63
    57c4:	f8 94       	cli
    57c6:	de bf       	out	0x3e, r29	; 62
    57c8:	0f be       	out	0x3f, r0	; 63
    57ca:	cd bf       	out	0x3d, r28	; 61
    57cc:	df 91       	pop	r29
    57ce:	cf 91       	pop	r28
    57d0:	08 95       	ret

000057d2 <_nrk_os_timer_stop>:
    57d2:	10 92 b1 00 	sts	0x00B1, r1
    57d6:	e0 e7       	ldi	r30, 0x70	; 112
    57d8:	f0 e0       	ldi	r31, 0x00	; 0
    57da:	80 81       	ld	r24, Z
    57dc:	8d 7f       	andi	r24, 0xFD	; 253
    57de:	80 83       	st	Z, r24
    57e0:	80 81       	ld	r24, Z
    57e2:	8e 7f       	andi	r24, 0xFE	; 254
    57e4:	80 83       	st	Z, r24
    57e6:	08 95       	ret

000057e8 <_nrk_os_timer_set>:
    57e8:	80 93 b2 00 	sts	0x00B2, r24
    57ec:	08 95       	ret

000057ee <_nrk_os_timer_start>:
    57ee:	e0 e7       	ldi	r30, 0x70	; 112
    57f0:	f0 e0       	ldi	r31, 0x00	; 0
    57f2:	80 81       	ld	r24, Z
    57f4:	83 60       	ori	r24, 0x03	; 3
    57f6:	80 83       	st	Z, r24
    57f8:	83 e0       	ldi	r24, 0x03	; 3
    57fa:	80 93 b1 00 	sts	0x00B1, r24
    57fe:	08 95       	ret

00005800 <_nrk_os_timer_reset>:
    5800:	83 b5       	in	r24, 0x23	; 35
    5802:	82 60       	ori	r24, 0x02	; 2
    5804:	83 bd       	out	0x23, r24	; 35
    5806:	10 92 b2 00 	sts	0x00B2, r1
    580a:	10 92 1a 06 	sts	0x061A, r1
    580e:	10 92 1c 06 	sts	0x061C, r1
    5812:	08 95       	ret

00005814 <_nrk_get_next_wakeup>:
    5814:	80 91 b3 00 	lds	r24, 0x00B3
    5818:	8f 5f       	subi	r24, 0xFF	; 255
    581a:	99 27       	eor	r25, r25
    581c:	08 95       	ret

0000581e <_nrk_set_next_wakeup>:
    581e:	81 50       	subi	r24, 0x01	; 1
    5820:	80 93 b3 00 	sts	0x00B3, r24
    5824:	08 95       	ret

00005826 <nrk_timer_int_stop>:
    5826:	88 23       	and	r24, r24
    5828:	11 f4       	brne	.+4      	; 0x582e <nrk_timer_int_stop+0x8>
    582a:	10 92 71 00 	sts	0x0071, r1
    582e:	8f ef       	ldi	r24, 0xFF	; 255
    5830:	9f ef       	ldi	r25, 0xFF	; 255
    5832:	08 95       	ret

00005834 <nrk_timer_int_reset>:
    5834:	88 23       	and	r24, r24
    5836:	19 f0       	breq	.+6      	; 0x583e <nrk_timer_int_reset+0xa>
    5838:	8f ef       	ldi	r24, 0xFF	; 255
    583a:	9f ef       	ldi	r25, 0xFF	; 255
    583c:	08 95       	ret
    583e:	10 92 95 00 	sts	0x0095, r1
    5842:	10 92 94 00 	sts	0x0094, r1
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	08 95       	ret

0000584c <nrk_timer_int_read>:
    584c:	88 23       	and	r24, r24
    584e:	19 f0       	breq	.+6      	; 0x5856 <nrk_timer_int_read+0xa>
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	08 95       	ret
    5856:	80 91 94 00 	lds	r24, 0x0094
    585a:	90 91 95 00 	lds	r25, 0x0095
    585e:	08 95       	ret

00005860 <nrk_timer_int_start>:
    5860:	88 23       	and	r24, r24
    5862:	19 f0       	breq	.+6      	; 0x586a <nrk_timer_int_start+0xa>
    5864:	8f ef       	ldi	r24, 0xFF	; 255
    5866:	9f ef       	ldi	r25, 0xFF	; 255
    5868:	08 95       	ret
    586a:	82 e0       	ldi	r24, 0x02	; 2
    586c:	80 93 71 00 	sts	0x0071, r24
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	08 95       	ret

00005876 <nrk_timer_int_configure>:
    5876:	88 23       	and	r24, r24
    5878:	19 f0       	breq	.+6      	; 0x5880 <nrk_timer_int_configure+0xa>
    587a:	8f ef       	ldi	r24, 0xFF	; 255
    587c:	9f ef       	ldi	r25, 0xFF	; 255
    587e:	08 95       	ret
    5880:	cb 01       	movw	r24, r22
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	05 97       	sbiw	r24, 0x05	; 5
    5886:	10 f4       	brcc	.+4      	; 0x588c <nrk_timer_int_configure+0x16>
    5888:	60 93 1b 06 	sts	0x061B, r22
    588c:	10 92 90 00 	sts	0x0090, r1
    5890:	88 e0       	ldi	r24, 0x08	; 8
    5892:	80 93 91 00 	sts	0x0091, r24
    5896:	85 2f       	mov	r24, r21
    5898:	99 27       	eor	r25, r25
    589a:	80 93 99 00 	sts	0x0099, r24
    589e:	40 93 98 00 	sts	0x0098, r20
    58a2:	30 93 19 06 	sts	0x0619, r19
    58a6:	20 93 18 06 	sts	0x0618, r18
    58aa:	80 91 1b 06 	lds	r24, 0x061B
    58ae:	81 30       	cpi	r24, 0x01	; 1
    58b0:	21 f4       	brne	.+8      	; 0x58ba <nrk_timer_int_configure+0x44>
    58b2:	80 91 91 00 	lds	r24, 0x0091
    58b6:	81 60       	ori	r24, 0x01	; 1
    58b8:	0b c0       	rjmp	.+22     	; 0x58d0 <nrk_timer_int_configure+0x5a>
    58ba:	82 30       	cpi	r24, 0x02	; 2
    58bc:	21 f4       	brne	.+8      	; 0x58c6 <nrk_timer_int_configure+0x50>
    58be:	80 91 91 00 	lds	r24, 0x0091
    58c2:	82 60       	ori	r24, 0x02	; 2
    58c4:	05 c0       	rjmp	.+10     	; 0x58d0 <nrk_timer_int_configure+0x5a>
    58c6:	83 30       	cpi	r24, 0x03	; 3
    58c8:	31 f4       	brne	.+12     	; 0x58d6 <nrk_timer_int_configure+0x60>
    58ca:	80 91 91 00 	lds	r24, 0x0091
    58ce:	83 60       	ori	r24, 0x03	; 3
    58d0:	80 93 91 00 	sts	0x0091, r24
    58d4:	08 c0       	rjmp	.+16     	; 0x58e6 <nrk_timer_int_configure+0x70>
    58d6:	84 30       	cpi	r24, 0x04	; 4
    58d8:	21 f4       	brne	.+8      	; 0x58e2 <nrk_timer_int_configure+0x6c>
    58da:	80 91 91 00 	lds	r24, 0x0091
    58de:	84 60       	ori	r24, 0x04	; 4
    58e0:	f7 cf       	rjmp	.-18     	; 0x58d0 <nrk_timer_int_configure+0x5a>
    58e2:	85 30       	cpi	r24, 0x05	; 5
    58e4:	19 f0       	breq	.+6      	; 0x58ec <nrk_timer_int_configure+0x76>
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	08 95       	ret
    58ec:	80 91 91 00 	lds	r24, 0x0091
    58f0:	85 60       	ori	r24, 0x05	; 5
    58f2:	80 93 91 00 	sts	0x0091, r24
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	08 95       	ret

000058fc <_nrk_os_timer_get>:
    58fc:	80 91 b2 00 	lds	r24, 0x00B2
    5900:	99 27       	eor	r25, r25
    5902:	08 95       	ret

00005904 <__vector_13>:
    5904:	0f 92       	push	r0
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	0f 92       	push	r0
    590a:	1f 92       	push	r1
    590c:	2f 92       	push	r2
    590e:	3f 92       	push	r3
    5910:	4f 92       	push	r4
    5912:	5f 92       	push	r5
    5914:	6f 92       	push	r6
    5916:	7f 92       	push	r7
    5918:	8f 92       	push	r8
    591a:	9f 92       	push	r9
    591c:	af 92       	push	r10
    591e:	bf 92       	push	r11
    5920:	cf 92       	push	r12
    5922:	df 92       	push	r13
    5924:	ef 92       	push	r14
    5926:	ff 92       	push	r15
    5928:	0f 93       	push	r16
    592a:	1f 93       	push	r17
    592c:	2f 93       	push	r18
    592e:	3f 93       	push	r19
    5930:	4f 93       	push	r20
    5932:	5f 93       	push	r21
    5934:	6f 93       	push	r22
    5936:	7f 93       	push	r23
    5938:	8f 93       	push	r24
    593a:	9f 93       	push	r25
    593c:	af 93       	push	r26
    593e:	bf 93       	push	r27
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	ef 93       	push	r30
    5946:	ff 93       	push	r31
    5948:	a0 91 d7 06 	lds	r26, 0x06D7
    594c:	b0 91 d8 06 	lds	r27, 0x06D8
    5950:	0d b6       	in	r0, 0x3d	; 61
    5952:	0d 92       	st	X+, r0
    5954:	0e b6       	in	r0, 0x3e	; 62
    5956:	0d 92       	st	X+, r0
    5958:	1f 92       	push	r1
    595a:	a0 91 68 05 	lds	r26, 0x0568
    595e:	b0 91 69 05 	lds	r27, 0x0569
    5962:	1e 90       	ld	r1, -X
    5964:	be bf       	out	0x3e, r27	; 62
    5966:	ad bf       	out	0x3d, r26	; 61
    5968:	08 95       	ret

0000596a <__vector_17>:
    596a:	1f 92       	push	r1
    596c:	0f 92       	push	r0
    596e:	0f b6       	in	r0, 0x3f	; 63
    5970:	0f 92       	push	r0
    5972:	11 24       	eor	r1, r1
    5974:	0f 90       	pop	r0
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	0f 90       	pop	r0
    597a:	1f 90       	pop	r1
    597c:	18 95       	reti

0000597e <__vector_32>:
    597e:	1f 92       	push	r1
    5980:	0f 92       	push	r0
    5982:	0f b6       	in	r0, 0x3f	; 63
    5984:	0f 92       	push	r0
    5986:	11 24       	eor	r1, r1
    5988:	2f 93       	push	r18
    598a:	3f 93       	push	r19
    598c:	4f 93       	push	r20
    598e:	5f 93       	push	r21
    5990:	6f 93       	push	r22
    5992:	7f 93       	push	r23
    5994:	8f 93       	push	r24
    5996:	9f 93       	push	r25
    5998:	af 93       	push	r26
    599a:	bf 93       	push	r27
    599c:	ef 93       	push	r30
    599e:	ff 93       	push	r31
    59a0:	e0 91 18 06 	lds	r30, 0x0618
    59a4:	f0 91 19 06 	lds	r31, 0x0619
    59a8:	30 97       	sbiw	r30, 0x00	; 0
    59aa:	11 f0       	breq	.+4      	; 0x59b0 <__vector_32+0x32>
    59ac:	09 95       	icall
    59ae:	04 c0       	rjmp	.+8      	; 0x59b8 <__vector_32+0x3a>
    59b0:	60 e0       	ldi	r22, 0x00	; 0
    59b2:	8a e0       	ldi	r24, 0x0A	; 10
    59b4:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    59b8:	ff 91       	pop	r31
    59ba:	ef 91       	pop	r30
    59bc:	bf 91       	pop	r27
    59be:	af 91       	pop	r26
    59c0:	9f 91       	pop	r25
    59c2:	8f 91       	pop	r24
    59c4:	7f 91       	pop	r23
    59c6:	6f 91       	pop	r22
    59c8:	5f 91       	pop	r21
    59ca:	4f 91       	pop	r20
    59cc:	3f 91       	pop	r19
    59ce:	2f 91       	pop	r18
    59d0:	0f 90       	pop	r0
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	0f 90       	pop	r0
    59d6:	1f 90       	pop	r1
    59d8:	18 95       	reti

000059da <__vector_default>:
    59da:	1f 92       	push	r1
    59dc:	0f 92       	push	r0
    59de:	0f b6       	in	r0, 0x3f	; 63
    59e0:	0f 92       	push	r0
    59e2:	11 24       	eor	r1, r1
    59e4:	2f 93       	push	r18
    59e6:	3f 93       	push	r19
    59e8:	4f 93       	push	r20
    59ea:	5f 93       	push	r21
    59ec:	6f 93       	push	r22
    59ee:	7f 93       	push	r23
    59f0:	8f 93       	push	r24
    59f2:	9f 93       	push	r25
    59f4:	af 93       	push	r26
    59f6:	bf 93       	push	r27
    59f8:	ef 93       	push	r30
    59fa:	ff 93       	push	r31
    59fc:	60 e0       	ldi	r22, 0x00	; 0
    59fe:	8a e0       	ldi	r24, 0x0A	; 10
    5a00:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    5a04:	ff cf       	rjmp	.-2      	; 0x5a04 <__vector_default+0x2a>

00005a06 <nrk_high_speed_timer_wait>:
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	cd b7       	in	r28, 0x3d	; 61
    5a0c:	de b7       	in	r29, 0x3e	; 62
    5a0e:	22 97       	sbiw	r28, 0x02	; 2
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	f8 94       	cli
    5a14:	de bf       	out	0x3e, r29	; 62
    5a16:	0f be       	out	0x3f, r0	; 63
    5a18:	cd bf       	out	0x3d, r28	; 61
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	8f ef       	ldi	r24, 0xFF	; 255
    5a1e:	e9 37       	cpi	r30, 0x79	; 121
    5a20:	f8 07       	cpc	r31, r24
    5a22:	10 f0       	brcs	.+4      	; 0x5a28 <nrk_high_speed_timer_wait+0x22>
    5a24:	e0 e0       	ldi	r30, 0x00	; 0
    5a26:	f0 e0       	ldi	r31, 0x00	; 0
    5a28:	9f 01       	movw	r18, r30
    5a2a:	44 27       	eor	r20, r20
    5a2c:	55 27       	eor	r21, r21
    5a2e:	cb 01       	movw	r24, r22
    5a30:	aa 27       	eor	r26, r26
    5a32:	bb 27       	eor	r27, r27
    5a34:	28 0f       	add	r18, r24
    5a36:	39 1f       	adc	r19, r25
    5a38:	4a 1f       	adc	r20, r26
    5a3a:	5b 1f       	adc	r21, r27
    5a3c:	21 30       	cpi	r18, 0x01	; 1
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	38 07       	cpc	r19, r24
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	48 07       	cpc	r20, r24
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	58 07       	cpc	r21, r24
    5a4a:	78 f0       	brcs	.+30     	; 0x5a6a <nrk_high_speed_timer_wait+0x64>
    5a4c:	80 91 84 00 	lds	r24, 0x0084
    5a50:	90 91 85 00 	lds	r25, 0x0085
    5a54:	9a 83       	std	Y+2, r25	; 0x02
    5a56:	89 83       	std	Y+1, r24	; 0x01
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a5c:	e8 17       	cp	r30, r24
    5a5e:	f9 07       	cpc	r31, r25
    5a60:	a8 f3       	brcs	.-22     	; 0x5a4c <nrk_high_speed_timer_wait+0x46>
    5a62:	20 50       	subi	r18, 0x00	; 0
    5a64:	30 40       	sbci	r19, 0x00	; 0
    5a66:	41 40       	sbci	r20, 0x01	; 1
    5a68:	50 40       	sbci	r21, 0x00	; 0
    5a6a:	80 91 84 00 	lds	r24, 0x0084
    5a6e:	90 91 85 00 	lds	r25, 0x0085
    5a72:	9a 83       	std	Y+2, r25	; 0x02
    5a74:	89 83       	std	Y+1, r24	; 0x01
    5a76:	89 81       	ldd	r24, Y+1	; 0x01
    5a78:	9a 81       	ldd	r25, Y+2	; 0x02
    5a7a:	82 17       	cp	r24, r18
    5a7c:	93 07       	cpc	r25, r19
    5a7e:	a8 f3       	brcs	.-22     	; 0x5a6a <nrk_high_speed_timer_wait+0x64>
    5a80:	22 96       	adiw	r28, 0x02	; 2
    5a82:	0f b6       	in	r0, 0x3f	; 63
    5a84:	f8 94       	cli
    5a86:	de bf       	out	0x3e, r29	; 62
    5a88:	0f be       	out	0x3f, r0	; 63
    5a8a:	cd bf       	out	0x3d, r28	; 61
    5a8c:	df 91       	pop	r29
    5a8e:	cf 91       	pop	r28
    5a90:	08 95       	ret

00005a92 <_nrk_setup_timer>:
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    5a92:	ef 92       	push	r14
    5a94:	ff 92       	push	r15
    5a96:	1f 93       	push	r17

    5a98:	9e ef       	ldi	r25, 0xFE	; 254
    5a9a:	90 93 1c 06 	sts	0x061C, r25
} // halRfWaitForCrystalOscillator

    5a9e:	80 e2       	ldi	r24, 0x20	; 32
    5aa0:	80 93 b6 00 	sts	0x00B6, r24
    5aa4:	90 93 b3 00 	sts	0x00B3, r25
    5aa8:	13 e0       	ldi	r17, 0x03	; 3
    5aaa:	17 bb       	out	0x17, r17	; 23
    5aac:	82 e0       	ldi	r24, 0x02	; 2
    5aae:	80 93 b0 00 	sts	0x00B0, r24
    5ab2:	91 eb       	ldi	r25, 0xB1	; 177
    5ab4:	e9 2e       	mov	r14, r25
    5ab6:	f1 2c       	mov	r15, r1
    5ab8:	f7 01       	movw	r30, r14
    5aba:	10 83       	st	Z, r17
    5abc:	83 b5       	in	r24, 0x23	; 35
    5abe:	82 60       	ori	r24, 0x02	; 2
    5ac0:	83 bd       	out	0x23, r24	; 35
    5ac2:	17 bb       	out	0x17, r17	; 23
    5ac4:	14 bd       	out	0x24, r17	; 36
    5ac6:	83 b5       	in	r24, 0x23	; 35
    5ac8:	82 60       	ori	r24, 0x02	; 2
    5aca:	83 bd       	out	0x23, r24	; 35
    5acc:	10 92 80 00 	sts	0x0080, r1
    5ad0:	81 e0       	ldi	r24, 0x01	; 1
    5ad2:	80 93 81 00 	sts	0x0081, r24
    5ad6:	10 92 85 00 	sts	0x0085, r1
    5ada:	10 92 84 00 	sts	0x0084, r1
    5ade:	83 b5       	in	r24, 0x23	; 35
    5ae0:	82 60       	ori	r24, 0x02	; 2
    5ae2:	83 bd       	out	0x23, r24	; 35
    5ae4:	83 b5       	in	r24, 0x23	; 35
    5ae6:	81 60       	ori	r24, 0x01	; 1
    5ae8:	83 bd       	out	0x23, r24	; 35
    5aea:	0e 94 00 2c 	call	0x5800	; 0x5800 <_nrk_os_timer_reset>
    5aee:	e0 e7       	ldi	r30, 0x70	; 112
    5af0:	f0 e0       	ldi	r31, 0x00	; 0
    5af2:	80 81       	ld	r24, Z
    5af4:	83 60       	ori	r24, 0x03	; 3
    5af6:	80 83       	st	Z, r24
    5af8:	f7 01       	movw	r30, r14
    5afa:	10 83       	st	Z, r17
    5afc:	10 92 1a 06 	sts	0x061A, r1
    5b00:	1f 91       	pop	r17
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	08 95       	ret

00005b08 <_nrk_startup_error>:
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;
    5b08:	04 b6       	in	r0, 0x34	; 52
    5b0a:	03 fe       	sbrs	r0, 3
    5b0c:	02 c0       	rjmp	.+4      	; 0x5b12 <_nrk_startup_error+0xa>
    5b0e:	90 e1       	ldi	r25, 0x10	; 16
    5b10:	01 c0       	rjmp	.+2      	; 0x5b14 <_nrk_startup_error+0xc>
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    5b14:	04 b6       	in	r0, 0x34	; 52
    5b16:	02 fe       	sbrs	r0, 2
    5b18:	06 c0       	rjmp	.+12     	; 0x5b26 <_nrk_startup_error+0x1e>
} // halRfWaitForCrystalOscillator

    5b1a:	84 b7       	in	r24, 0x34	; 52
    5b1c:	8b 7f       	andi	r24, 0xFB	; 251
    5b1e:	84 bf       	out	0x34, r24	; 52
    5b20:	04 b6       	in	r0, 0x34	; 52
    5b22:	00 fe       	sbrs	r0, 0
    5b24:	94 60       	ori	r25, 0x04	; 4
    5b26:	04 b6       	in	r0, 0x34	; 52
    5b28:	01 fe       	sbrs	r0, 1
    5b2a:	04 c0       	rjmp	.+8      	; 0x5b34 <_nrk_startup_error+0x2c>
    5b2c:	84 b7       	in	r24, 0x34	; 52
    5b2e:	8d 7f       	andi	r24, 0xFD	; 253
    5b30:	84 bf       	out	0x34, r24	; 52
    5b32:	92 60       	ori	r25, 0x02	; 2
    5b34:	99 23       	and	r25, r25
    5b36:	19 f0       	breq	.+6      	; 0x5b3e <_nrk_startup_error+0x36>
    5b38:	89 2f       	mov	r24, r25
    5b3a:	99 27       	eor	r25, r25
    5b3c:	08 95       	ret
    5b3e:	04 b6       	in	r0, 0x34	; 52
    5b40:	00 fc       	sbrc	r0, 0
    5b42:	02 c0       	rjmp	.+4      	; 0x5b48 <_nrk_startup_error+0x40>
    5b44:	91 e0       	ldi	r25, 0x01	; 1
    5b46:	03 c0       	rjmp	.+6      	; 0x5b4e <_nrk_startup_error+0x46>
    5b48:	84 b7       	in	r24, 0x34	; 52
    5b4a:	8e 7f       	andi	r24, 0xFE	; 254
    5b4c:	84 bf       	out	0x34, r24	; 52
    5b4e:	80 91 b0 00 	lds	r24, 0x00B0
    5b52:	81 11       	cpse	r24, r1
    5b54:	91 60       	ori	r25, 0x01	; 1
    5b56:	89 2f       	mov	r24, r25
    5b58:	99 27       	eor	r25, r25
    5b5a:	08 95       	ret

00005b5c <nrk_ext_int_enable>:
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
    5b5c:	88 23       	and	r24, r24
    5b5e:	11 f4       	brne	.+4      	; 0x5b64 <nrk_ext_int_enable+0x8>
    5b60:	e8 9a       	sbi	0x1d, 0	; 29
    5b62:	33 c0       	rjmp	.+102    	; 0x5bca <nrk_ext_int_enable+0x6e>
//      returns.
    5b64:	81 30       	cpi	r24, 0x01	; 1
    5b66:	11 f4       	brne	.+4      	; 0x5b6c <nrk_ext_int_enable+0x10>
    5b68:	e9 9a       	sbi	0x1d, 1	; 29
    5b6a:	2f c0       	rjmp	.+94     	; 0x5bca <nrk_ext_int_enable+0x6e>
//-------------------------------------------------------------------------------------------------------
    5b6c:	82 30       	cpi	r24, 0x02	; 2
    5b6e:	11 f4       	brne	.+4      	; 0x5b74 <nrk_ext_int_enable+0x18>
    5b70:	ea 9a       	sbi	0x1d, 2	; 29
    5b72:	2b c0       	rjmp	.+86     	; 0x5bca <nrk_ext_int_enable+0x6e>
void halRfWaitForCrystalOscillator(void) {
    5b74:	83 30       	cpi	r24, 0x03	; 3
    5b76:	21 f4       	brne	.+8      	; 0x5b80 <nrk_ext_int_enable+0x24>
    5b78:	80 91 6b 00 	lds	r24, 0x006B
    5b7c:	81 60       	ori	r24, 0x01	; 1
    5b7e:	23 c0       	rjmp	.+70     	; 0x5bc6 <nrk_ext_int_enable+0x6a>
    uint8_t spiStatusByte;
    5b80:	84 30       	cpi	r24, 0x04	; 4
    5b82:	21 f4       	brne	.+8      	; 0x5b8c <nrk_ext_int_enable+0x30>
    5b84:	80 91 6b 00 	lds	r24, 0x006B
    5b88:	82 60       	ori	r24, 0x02	; 2
    5b8a:	1d c0       	rjmp	.+58     	; 0x5bc6 <nrk_ext_int_enable+0x6a>

    5b8c:	85 30       	cpi	r24, 0x05	; 5
    5b8e:	21 f4       	brne	.+8      	; 0x5b98 <nrk_ext_int_enable+0x3c>
    5b90:	80 91 6b 00 	lds	r24, 0x006B
    5b94:	84 60       	ori	r24, 0x04	; 4
    5b96:	17 c0       	rjmp	.+46     	; 0x5bc6 <nrk_ext_int_enable+0x6a>
    // Poll the SPI status byte until the crystal oscillator is stable
    5b98:	86 30       	cpi	r24, 0x06	; 6
    5b9a:	21 f4       	brne	.+8      	; 0x5ba4 <nrk_ext_int_enable+0x48>
    5b9c:	80 91 6b 00 	lds	r24, 0x006B
    5ba0:	88 60       	ori	r24, 0x08	; 8
    5ba2:	11 c0       	rjmp	.+34     	; 0x5bc6 <nrk_ext_int_enable+0x6a>
    do {
    5ba4:	87 30       	cpi	r24, 0x07	; 7
    5ba6:	21 f4       	brne	.+8      	; 0x5bb0 <nrk_ext_int_enable+0x54>
    5ba8:	80 91 6b 00 	lds	r24, 0x006B
    5bac:	80 61       	ori	r24, 0x10	; 16
    5bae:	0b c0       	rjmp	.+22     	; 0x5bc6 <nrk_ext_int_enable+0x6a>
	    DISABLE_GLOBAL_INT();
    5bb0:	88 30       	cpi	r24, 0x08	; 8
    5bb2:	21 f4       	brne	.+8      	; 0x5bbc <nrk_ext_int_enable+0x60>
    5bb4:	80 91 6b 00 	lds	r24, 0x006B
    5bb8:	80 62       	ori	r24, 0x20	; 32
    5bba:	05 c0       	rjmp	.+10     	; 0x5bc6 <nrk_ext_int_enable+0x6a>
	    FASTSPI_UPD_STATUS(spiStatusByte);
    5bbc:	89 30       	cpi	r24, 0x09	; 9
    5bbe:	41 f4       	brne	.+16     	; 0x5bd0 <nrk_ext_int_enable+0x74>
    5bc0:	80 91 6b 00 	lds	r24, 0x006B
    5bc4:	80 64       	ori	r24, 0x40	; 64
    5bc6:	80 93 6b 00 	sts	0x006B, r24
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	08 95       	ret
	    ENABLE_GLOBAL_INT();
    5bd0:	8a 30       	cpi	r24, 0x0A	; 10
    5bd2:	19 f0       	breq	.+6      	; 0x5bda <nrk_ext_int_enable+0x7e>
    5bd4:	8f ef       	ldi	r24, 0xFF	; 255
    5bd6:	9f ef       	ldi	r25, 0xFF	; 255
    5bd8:	08 95       	ret
    5bda:	80 91 6b 00 	lds	r24, 0x006B
    5bde:	80 68       	ori	r24, 0x80	; 128
    5be0:	80 93 6b 00 	sts	0x006B, r24
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    5be8:	08 95       	ret

00005bea <nrk_ext_int_disable>:
} // halRfWaitForCrystalOscillator

    5bea:	88 23       	and	r24, r24
    5bec:	11 f4       	brne	.+4      	; 0x5bf2 <nrk_ext_int_disable+0x8>
    5bee:	e8 98       	cbi	0x1d, 0	; 29
    5bf0:	31 c0       	rjmp	.+98     	; 0x5c54 <nrk_ext_int_disable+0x6a>
    5bf2:	81 30       	cpi	r24, 0x01	; 1
    5bf4:	11 f0       	breq	.+4      	; 0x5bfa <nrk_ext_int_disable+0x10>
    5bf6:	82 30       	cpi	r24, 0x02	; 2
    5bf8:	11 f4       	brne	.+4      	; 0x5bfe <nrk_ext_int_disable+0x14>
    5bfa:	e9 98       	cbi	0x1d, 1	; 29
    5bfc:	2b c0       	rjmp	.+86     	; 0x5c54 <nrk_ext_int_disable+0x6a>
    5bfe:	83 30       	cpi	r24, 0x03	; 3
    5c00:	21 f4       	brne	.+8      	; 0x5c0a <nrk_ext_int_disable+0x20>
    5c02:	80 91 6b 00 	lds	r24, 0x006B
    5c06:	8e 7f       	andi	r24, 0xFE	; 254
    5c08:	23 c0       	rjmp	.+70     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c0a:	84 30       	cpi	r24, 0x04	; 4
    5c0c:	21 f4       	brne	.+8      	; 0x5c16 <nrk_ext_int_disable+0x2c>
    5c0e:	80 91 6b 00 	lds	r24, 0x006B
    5c12:	8d 7f       	andi	r24, 0xFD	; 253
    5c14:	1d c0       	rjmp	.+58     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c16:	85 30       	cpi	r24, 0x05	; 5
    5c18:	21 f4       	brne	.+8      	; 0x5c22 <nrk_ext_int_disable+0x38>
    5c1a:	80 91 6b 00 	lds	r24, 0x006B
    5c1e:	8b 7f       	andi	r24, 0xFB	; 251
    5c20:	17 c0       	rjmp	.+46     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c22:	86 30       	cpi	r24, 0x06	; 6
    5c24:	21 f4       	brne	.+8      	; 0x5c2e <nrk_ext_int_disable+0x44>
    5c26:	80 91 6b 00 	lds	r24, 0x006B
    5c2a:	87 7f       	andi	r24, 0xF7	; 247
    5c2c:	11 c0       	rjmp	.+34     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c2e:	87 30       	cpi	r24, 0x07	; 7
    5c30:	21 f4       	brne	.+8      	; 0x5c3a <nrk_ext_int_disable+0x50>
    5c32:	80 91 6b 00 	lds	r24, 0x006B
    5c36:	8f 7e       	andi	r24, 0xEF	; 239
    5c38:	0b c0       	rjmp	.+22     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c3a:	88 30       	cpi	r24, 0x08	; 8
    5c3c:	21 f4       	brne	.+8      	; 0x5c46 <nrk_ext_int_disable+0x5c>
    5c3e:	80 91 6b 00 	lds	r24, 0x006B
    5c42:	8f 7d       	andi	r24, 0xDF	; 223
    5c44:	05 c0       	rjmp	.+10     	; 0x5c50 <nrk_ext_int_disable+0x66>
    5c46:	89 30       	cpi	r24, 0x09	; 9
    5c48:	41 f4       	brne	.+16     	; 0x5c5a <nrk_ext_int_disable+0x70>
    5c4a:	80 91 6b 00 	lds	r24, 0x006B
    5c4e:	8f 7b       	andi	r24, 0xBF	; 191
    5c50:	80 93 6b 00 	sts	0x006B, r24
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	08 95       	ret
    5c5a:	8a 30       	cpi	r24, 0x0A	; 10
    5c5c:	19 f0       	breq	.+6      	; 0x5c64 <nrk_ext_int_disable+0x7a>
    5c5e:	8f ef       	ldi	r24, 0xFF	; 255
    5c60:	9f ef       	ldi	r25, 0xFF	; 255
    5c62:	08 95       	ret
    5c64:	80 91 6b 00 	lds	r24, 0x006B
    5c68:	8f 77       	andi	r24, 0x7F	; 127
    5c6a:	80 93 6b 00 	sts	0x006B, r24
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	08 95       	ret

00005c74 <nrk_ext_int_configure>:
    5c74:	88 23       	and	r24, r24
    5c76:	39 f5       	brne	.+78     	; 0x5cc6 <nrk_ext_int_configure+0x52>
    5c78:	50 93 f7 06 	sts	0x06F7, r21
    5c7c:	40 93 f6 06 	sts	0x06F6, r20
    5c80:	66 23       	and	r22, r22
    5c82:	21 f4       	brne	.+8      	; 0x5c8c <nrk_ext_int_configure+0x18>
    5c84:	80 91 69 00 	lds	r24, 0x0069
    5c88:	8c 7f       	andi	r24, 0xFC	; 252
    5c8a:	45 c0       	rjmp	.+138    	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5c8c:	61 30       	cpi	r22, 0x01	; 1
    5c8e:	49 f4       	brne	.+18     	; 0x5ca2 <nrk_ext_int_configure+0x2e>
    5c90:	80 91 69 00 	lds	r24, 0x0069
    5c94:	8d 7f       	andi	r24, 0xFD	; 253
    5c96:	80 93 69 00 	sts	0x0069, r24
    5c9a:	80 91 69 00 	lds	r24, 0x0069
    5c9e:	81 60       	ori	r24, 0x01	; 1
    5ca0:	3a c0       	rjmp	.+116    	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5ca2:	62 30       	cpi	r22, 0x02	; 2
    5ca4:	49 f4       	brne	.+18     	; 0x5cb8 <nrk_ext_int_configure+0x44>
    5ca6:	80 91 69 00 	lds	r24, 0x0069
    5caa:	82 60       	ori	r24, 0x02	; 2
    5cac:	80 93 69 00 	sts	0x0069, r24
    5cb0:	80 91 69 00 	lds	r24, 0x0069
    5cb4:	8e 7f       	andi	r24, 0xFE	; 254
    5cb6:	2f c0       	rjmp	.+94     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5cb8:	63 30       	cpi	r22, 0x03	; 3
    5cba:	09 f0       	breq	.+2      	; 0x5cbe <nrk_ext_int_configure+0x4a>
    5cbc:	69 c0       	rjmp	.+210    	; 0x5d90 <nrk_ext_int_configure+0x11c>
    5cbe:	80 91 69 00 	lds	r24, 0x0069
    5cc2:	83 60       	ori	r24, 0x03	; 3
    5cc4:	28 c0       	rjmp	.+80     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5cc6:	81 30       	cpi	r24, 0x01	; 1
    5cc8:	49 f5       	brne	.+82     	; 0x5d1c <nrk_ext_int_configure+0xa8>
    5cca:	50 93 f5 06 	sts	0x06F5, r21
    5cce:	40 93 f4 06 	sts	0x06F4, r20
    5cd2:	66 23       	and	r22, r22
    5cd4:	21 f4       	brne	.+8      	; 0x5cde <nrk_ext_int_configure+0x6a>
    5cd6:	80 91 69 00 	lds	r24, 0x0069
    5cda:	83 7f       	andi	r24, 0xF3	; 243
    5cdc:	1c c0       	rjmp	.+56     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5cde:	61 30       	cpi	r22, 0x01	; 1
    5ce0:	49 f4       	brne	.+18     	; 0x5cf4 <nrk_ext_int_configure+0x80>
    5ce2:	80 91 69 00 	lds	r24, 0x0069
    5ce6:	87 7f       	andi	r24, 0xF7	; 247
    5ce8:	80 93 69 00 	sts	0x0069, r24
    5cec:	80 91 69 00 	lds	r24, 0x0069
    5cf0:	84 60       	ori	r24, 0x04	; 4
    5cf2:	11 c0       	rjmp	.+34     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5cf4:	62 30       	cpi	r22, 0x02	; 2
    5cf6:	49 f4       	brne	.+18     	; 0x5d0a <nrk_ext_int_configure+0x96>
    5cf8:	80 91 69 00 	lds	r24, 0x0069
    5cfc:	88 60       	ori	r24, 0x08	; 8
    5cfe:	80 93 69 00 	sts	0x0069, r24
    5d02:	80 91 69 00 	lds	r24, 0x0069
    5d06:	8b 7f       	andi	r24, 0xFB	; 251
    5d08:	06 c0       	rjmp	.+12     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5d0a:	63 30       	cpi	r22, 0x03	; 3
    5d0c:	09 f0       	breq	.+2      	; 0x5d10 <nrk_ext_int_configure+0x9c>
    5d0e:	40 c0       	rjmp	.+128    	; 0x5d90 <nrk_ext_int_configure+0x11c>
    5d10:	80 91 69 00 	lds	r24, 0x0069
    5d14:	8c 60       	ori	r24, 0x0C	; 12
    5d16:	80 93 69 00 	sts	0x0069, r24
    5d1a:	37 c0       	rjmp	.+110    	; 0x5d8a <nrk_ext_int_configure+0x116>
    5d1c:	82 30       	cpi	r24, 0x02	; 2
    5d1e:	31 f5       	brne	.+76     	; 0x5d6c <nrk_ext_int_configure+0xf8>
    5d20:	50 93 f5 06 	sts	0x06F5, r21
    5d24:	40 93 f4 06 	sts	0x06F4, r20
    5d28:	66 23       	and	r22, r22
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <nrk_ext_int_configure+0xc0>
    5d2c:	80 91 69 00 	lds	r24, 0x0069
    5d30:	8f 7c       	andi	r24, 0xCF	; 207
    5d32:	f1 cf       	rjmp	.-30     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5d34:	61 30       	cpi	r22, 0x01	; 1
    5d36:	49 f4       	brne	.+18     	; 0x5d4a <nrk_ext_int_configure+0xd6>
    5d38:	80 91 69 00 	lds	r24, 0x0069
    5d3c:	8f 7d       	andi	r24, 0xDF	; 223
    5d3e:	80 93 69 00 	sts	0x0069, r24
    5d42:	80 91 69 00 	lds	r24, 0x0069
    5d46:	80 61       	ori	r24, 0x10	; 16
    5d48:	e6 cf       	rjmp	.-52     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5d4a:	62 30       	cpi	r22, 0x02	; 2
    5d4c:	49 f4       	brne	.+18     	; 0x5d60 <nrk_ext_int_configure+0xec>
    5d4e:	80 91 69 00 	lds	r24, 0x0069
    5d52:	80 62       	ori	r24, 0x20	; 32
    5d54:	80 93 69 00 	sts	0x0069, r24
    5d58:	80 91 69 00 	lds	r24, 0x0069
    5d5c:	8f 7e       	andi	r24, 0xEF	; 239
    5d5e:	db cf       	rjmp	.-74     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5d60:	63 30       	cpi	r22, 0x03	; 3
    5d62:	b1 f4       	brne	.+44     	; 0x5d90 <nrk_ext_int_configure+0x11c>
    5d64:	80 91 69 00 	lds	r24, 0x0069
    5d68:	80 63       	ori	r24, 0x30	; 48
    5d6a:	d5 cf       	rjmp	.-86     	; 0x5d16 <nrk_ext_int_configure+0xa2>
    5d6c:	83 50       	subi	r24, 0x03	; 3
    5d6e:	88 30       	cpi	r24, 0x08	; 8
    5d70:	18 f0       	brcs	.+6      	; 0x5d78 <nrk_ext_int_configure+0x104>
    5d72:	8f ef       	ldi	r24, 0xFF	; 255
    5d74:	9f ef       	ldi	r25, 0xFF	; 255
    5d76:	08 95       	ret
    5d78:	80 91 68 00 	lds	r24, 0x0068
    5d7c:	81 60       	ori	r24, 0x01	; 1
    5d7e:	80 93 68 00 	sts	0x0068, r24
    5d82:	50 93 fb 06 	sts	0x06FB, r21
    5d86:	40 93 fa 06 	sts	0x06FA, r20
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	90 e0       	ldi	r25, 0x00	; 0
    5d8e:	08 95       	ret
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	08 95       	ret

00005d96 <__vector_1>:
    5d96:	1f 92       	push	r1
    5d98:	0f 92       	push	r0
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	0f 92       	push	r0
    5d9e:	11 24       	eor	r1, r1
    5da0:	2f 93       	push	r18
    5da2:	3f 93       	push	r19
    5da4:	4f 93       	push	r20
    5da6:	5f 93       	push	r21
    5da8:	6f 93       	push	r22
    5daa:	7f 93       	push	r23
    5dac:	8f 93       	push	r24
    5dae:	9f 93       	push	r25
    5db0:	af 93       	push	r26
    5db2:	bf 93       	push	r27
    5db4:	ef 93       	push	r30
    5db6:	ff 93       	push	r31
    5db8:	e0 91 f6 06 	lds	r30, 0x06F6
    5dbc:	f0 91 f7 06 	lds	r31, 0x06F7
    5dc0:	30 97       	sbiw	r30, 0x00	; 0
    5dc2:	11 f0       	breq	.+4      	; 0x5dc8 <__vector_1+0x32>
    5dc4:	09 95       	icall
    5dc6:	04 c0       	rjmp	.+8      	; 0x5dd0 <__vector_1+0x3a>
    5dc8:	60 e0       	ldi	r22, 0x00	; 0
    5dca:	8a e0       	ldi	r24, 0x0A	; 10
    5dcc:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    5dd0:	ff 91       	pop	r31
    5dd2:	ef 91       	pop	r30
    5dd4:	bf 91       	pop	r27
    5dd6:	af 91       	pop	r26
    5dd8:	9f 91       	pop	r25
    5dda:	8f 91       	pop	r24
    5ddc:	7f 91       	pop	r23
    5dde:	6f 91       	pop	r22
    5de0:	5f 91       	pop	r21
    5de2:	4f 91       	pop	r20
    5de4:	3f 91       	pop	r19
    5de6:	2f 91       	pop	r18
    5de8:	0f 90       	pop	r0
    5dea:	0f be       	out	0x3f, r0	; 63
    5dec:	0f 90       	pop	r0
    5dee:	1f 90       	pop	r1
    5df0:	18 95       	reti

00005df2 <__vector_9>:
    5df2:	1f 92       	push	r1
    5df4:	0f 92       	push	r0
    5df6:	0f b6       	in	r0, 0x3f	; 63
    5df8:	0f 92       	push	r0
    5dfa:	11 24       	eor	r1, r1
    5dfc:	2f 93       	push	r18
    5dfe:	3f 93       	push	r19
    5e00:	4f 93       	push	r20
    5e02:	5f 93       	push	r21
    5e04:	6f 93       	push	r22
    5e06:	7f 93       	push	r23
    5e08:	8f 93       	push	r24
    5e0a:	9f 93       	push	r25
    5e0c:	af 93       	push	r26
    5e0e:	bf 93       	push	r27
    5e10:	ef 93       	push	r30
    5e12:	ff 93       	push	r31
    5e14:	e0 91 fa 06 	lds	r30, 0x06FA
    5e18:	f0 91 fb 06 	lds	r31, 0x06FB
    5e1c:	30 97       	sbiw	r30, 0x00	; 0
    5e1e:	11 f0       	breq	.+4      	; 0x5e24 <__vector_9+0x32>
    5e20:	09 95       	icall
    5e22:	04 c0       	rjmp	.+8      	; 0x5e2c <__vector_9+0x3a>
    5e24:	60 e0       	ldi	r22, 0x00	; 0
    5e26:	8a e0       	ldi	r24, 0x0A	; 10
    5e28:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <nrk_kernel_error_add>
    5e2c:	ff 91       	pop	r31
    5e2e:	ef 91       	pop	r30
    5e30:	bf 91       	pop	r27
    5e32:	af 91       	pop	r26
    5e34:	9f 91       	pop	r25
    5e36:	8f 91       	pop	r24
    5e38:	7f 91       	pop	r23
    5e3a:	6f 91       	pop	r22
    5e3c:	5f 91       	pop	r21
    5e3e:	4f 91       	pop	r20
    5e40:	3f 91       	pop	r19
    5e42:	2f 91       	pop	r18
    5e44:	0f 90       	pop	r0
    5e46:	0f be       	out	0x3f, r0	; 63
    5e48:	0f 90       	pop	r0
    5e4a:	1f 90       	pop	r1
    5e4c:	18 95       	reti

00005e4e <nrk_watchdog_check>:
    5e4e:	04 b6       	in	r0, 0x34	; 52
    5e50:	03 fc       	sbrc	r0, 3
    5e52:	03 c0       	rjmp	.+6      	; 0x5e5a <nrk_watchdog_check+0xc>
    5e54:	81 e0       	ldi	r24, 0x01	; 1
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	08 95       	ret
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	9f ef       	ldi	r25, 0xFF	; 255
    5e5e:	08 95       	ret

00005e60 <nrk_watchdog_reset>:
    5e60:	a8 95       	wdr
    5e62:	08 95       	ret

00005e64 <nrk_watchdog_disable>:
//-------------------------------------------------------------------------------------------------------
//	void rfWaitForCrystalOscillator(void)
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
    5e64:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    5e68:	a8 95       	wdr
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
    5e6a:	84 b7       	in	r24, 0x34	; 52
    5e6c:	87 7f       	andi	r24, 0xF7	; 247
    5e6e:	84 bf       	out	0x34, r24	; 52
//      returns.
    5e70:	e0 e6       	ldi	r30, 0x60	; 96
    5e72:	f0 e0       	ldi	r31, 0x00	; 0
    5e74:	80 81       	ld	r24, Z
    5e76:	88 61       	ori	r24, 0x18	; 24
    5e78:	80 83       	st	Z, r24
//-------------------------------------------------------------------------------------------------------
    5e7a:	10 82       	st	Z, r1
void halRfWaitForCrystalOscillator(void) {
    5e7c:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    5e80:	08 95       	ret

00005e82 <nrk_watchdog_enable>:

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    5e82:	0e 94 4b 1a 	call	0x3496	; 0x3496 <nrk_int_disable>
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    5e86:	84 b7       	in	r24, 0x34	; 52
    5e88:	87 7f       	andi	r24, 0xF7	; 247
    5e8a:	84 bf       	out	0x34, r24	; 52
    5e8c:	a8 95       	wdr
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    5e8e:	e0 e6       	ldi	r30, 0x60	; 96
    5e90:	f0 e0       	ldi	r31, 0x00	; 0
    5e92:	80 81       	ld	r24, Z
    5e94:	88 61       	ori	r24, 0x18	; 24
    5e96:	80 83       	st	Z, r24

    5e98:	8d e0       	ldi	r24, 0x0D	; 13
    5e9a:	80 83       	st	Z, r24
    5e9c:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    5ea0:	08 95       	ret

00005ea2 <nrk_battery_save>:
}

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    5ea2:	08 95       	ret

00005ea4 <nrk_sleep>:
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    5ea4:	83 b7       	in	r24, 0x33	; 51
    5ea6:	81 7f       	andi	r24, 0xF1	; 241
    5ea8:	86 60       	ori	r24, 0x06	; 6
    5eaa:	83 bf       	out	0x33, r24	; 51
#ifndef IGNORE_EXT_RST_ERROR
    5eac:	83 b7       	in	r24, 0x33	; 51
    5eae:	81 60       	ori	r24, 0x01	; 1
    5eb0:	83 bf       	out	0x33, r24	; 51
    5eb2:	88 95       	sleep
    5eb4:	83 b7       	in	r24, 0x33	; 51
    5eb6:	8e 7f       	andi	r24, 0xFE	; 254
    5eb8:	83 bf       	out	0x33, r24	; 51
    5eba:	08 95       	ret

00005ebc <nrk_idle>:
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    5ebc:	83 b7       	in	r24, 0x33	; 51
    5ebe:	81 7f       	andi	r24, 0xF1	; 241
    5ec0:	83 bf       	out	0x33, r24	; 51
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    5ec2:	83 b7       	in	r24, 0x33	; 51
    5ec4:	81 60       	ori	r24, 0x01	; 1
    5ec6:	83 bf       	out	0x33, r24	; 51
    5ec8:	88 95       	sleep
    5eca:	83 b7       	in	r24, 0x33	; 51
    5ecc:	8e 7f       	andi	r24, 0xFE	; 254
    5ece:	83 bf       	out	0x33, r24	; 51
    5ed0:	08 95       	ret

00005ed2 <nrk_task_set_entry_function>:
#endif

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif

    5ed2:	fc 01       	movw	r30, r24
    5ed4:	76 83       	std	Z+6, r23	; 0x06
    5ed6:	65 83       	std	Z+5, r22	; 0x05
    5ed8:	08 95       	ret

00005eda <nrk_task_stk_init>:
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif
    5eda:	fb 01       	movw	r30, r22
    5edc:	da 01       	movw	r26, r20

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    5ede:	25 e5       	ldi	r18, 0x55	; 85
    5ee0:	2c 93       	st	X, r18
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    5ee2:	32 97       	sbiw	r30, 0x02	; 2
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    5ee4:	29 2f       	mov	r18, r25
    5ee6:	33 27       	eor	r19, r19
    5ee8:	20 83       	st	Z, r18
    #endif
    5eea:	81 83       	std	Z+1, r24	; 0x01
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    5eec:	32 97       	sbiw	r30, 0x02	; 2
    5eee:	11 82       	std	Z+1, r1	; 0x01
    5ef0:	10 82       	st	Z, r1
*/	
    5ef2:	32 97       	sbiw	r30, 0x02	; 2
    5ef4:	11 82       	std	Z+1, r1	; 0x01
    5ef6:	10 82       	st	Z, r1
 
    5ef8:	32 97       	sbiw	r30, 0x02	; 2
    5efa:	11 82       	std	Z+1, r1	; 0x01
    5efc:	10 82       	st	Z, r1
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    5efe:	32 97       	sbiw	r30, 0x02	; 2
    5f00:	11 82       	std	Z+1, r1	; 0x01
    5f02:	10 82       	st	Z, r1

    5f04:	32 97       	sbiw	r30, 0x02	; 2
    5f06:	11 82       	std	Z+1, r1	; 0x01
    5f08:	10 82       	st	Z, r1
    
    5f0a:	32 97       	sbiw	r30, 0x02	; 2
    5f0c:	11 82       	std	Z+1, r1	; 0x01
    5f0e:	10 82       	st	Z, r1
    nrk_cur_task_prio = 0;
    5f10:	32 97       	sbiw	r30, 0x02	; 2
    5f12:	11 82       	std	Z+1, r1	; 0x01
    5f14:	10 82       	st	Z, r1
    nrk_cur_task_TCB = NULL;
    5f16:	32 97       	sbiw	r30, 0x02	; 2
    5f18:	11 82       	std	Z+1, r1	; 0x01
    5f1a:	10 82       	st	Z, r1
    
    nrk_high_ready_TCB = NULL;
    5f1c:	32 97       	sbiw	r30, 0x02	; 2
    5f1e:	11 82       	std	Z+1, r1	; 0x01
    5f20:	10 82       	st	Z, r1
    nrk_high_ready_prio = 0; 
    5f22:	32 97       	sbiw	r30, 0x02	; 2
    5f24:	11 82       	std	Z+1, r1	; 0x01
    5f26:	10 82       	st	Z, r1

    5f28:	32 97       	sbiw	r30, 0x02	; 2
    5f2a:	11 82       	std	Z+1, r1	; 0x01
    5f2c:	10 82       	st	Z, r1
   #ifdef NRK_STATS_TRACKER
    5f2e:	32 97       	sbiw	r30, 0x02	; 2
    5f30:	11 82       	std	Z+1, r1	; 0x01
    5f32:	10 82       	st	Z, r1
	nrk_stats_reset();
    5f34:	32 97       	sbiw	r30, 0x02	; 2
    5f36:	11 82       	std	Z+1, r1	; 0x01
    5f38:	10 82       	st	Z, r1
   #endif
    5f3a:	32 97       	sbiw	r30, 0x02	; 2
    5f3c:	11 82       	std	Z+1, r1	; 0x01
    5f3e:	10 82       	st	Z, r1

    5f40:	32 97       	sbiw	r30, 0x02	; 2
    5f42:	11 82       	std	Z+1, r1	; 0x01
    5f44:	10 82       	st	Z, r1
    #ifdef NRK_MAX_RESERVES 
    5f46:	32 97       	sbiw	r30, 0x02	; 2
    5f48:	11 82       	std	Z+1, r1	; 0x01
    5f4a:	10 82       	st	Z, r1
    // Setup the reserve structures
    5f4c:	32 97       	sbiw	r30, 0x02	; 2
    5f4e:	11 82       	std	Z+1, r1	; 0x01
    5f50:	10 82       	st	Z, r1
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    5f52:	cf 01       	movw	r24, r30
    5f54:	08 95       	ret

00005f56 <nrk_stack_pointer_init>:
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    5f56:	85 e5       	ldi	r24, 0x55	; 85
    5f58:	80 93 7e 21 	sts	0x217E, r24
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
    5f5c:	ee ef       	ldi	r30, 0xFE	; 254
    5f5e:	f1 e2       	ldi	r31, 0x21	; 33
    5f60:	f0 93 69 05 	sts	0x0569, r31
    5f64:	e0 93 68 05 	sts	0x0568, r30
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    5f68:	22 e5       	ldi	r18, 0x52	; 82
    5f6a:	3a e1       	ldi	r19, 0x1A	; 26
    5f6c:	83 2f       	mov	r24, r19
    5f6e:	99 27       	eor	r25, r25
    5f70:	80 83       	st	Z, r24
        }
    5f72:	20 93 ff 21 	sts	0x21FF, r18
    5f76:	08 95       	ret

00005f78 <nrk_stack_pointer_restore>:
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
    5f78:	22 e5       	ldi	r18, 0x52	; 82
    5f7a:	3a e1       	ldi	r19, 0x1A	; 26
    5f7c:	83 2f       	mov	r24, r19
    5f7e:	99 27       	eor	r25, r25
    5f80:	80 93 fe 21 	sts	0x21FE, r24
	
    5f84:	20 93 ff 21 	sts	0x21FF, r18
    5f88:	08 95       	ret

00005f8a <nrk_target_start>:

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    5f8a:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_nrk_setup_timer>
	IdleTask.period.secs = 0;
    5f8e:	0e 94 4d 1a 	call	0x349a	; 0x349a <nrk_int_enable>
    5f92:	08 95       	ret

00005f94 <nrk_task_set_stk>:
   #endif




   #ifdef NRK_REBOOT_ON_ERROR
    5f94:	ef 92       	push	r14
    5f96:	ff 92       	push	r15
    5f98:	0f 93       	push	r16
    5f9a:	1f 93       	push	r17
    5f9c:	cf 93       	push	r28
    5f9e:	df 93       	push	r29
    5fa0:	7c 01       	movw	r14, r24
    5fa2:	8b 01       	movw	r16, r22
    5fa4:	ea 01       	movw	r28, r20
   #ifndef NRK_WATCHDOG
   while(1)
    5fa6:	40 32       	cpi	r20, 0x20	; 32
    5fa8:	51 05       	cpc	r21, r1
    5faa:	18 f4       	brcc	.+6      	; 0x5fb2 <nrk_task_set_stk+0x1e>
    5fac:	81 e1       	ldi	r24, 0x11	; 17
    5fae:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <nrk_error_add>
	   {
    5fb2:	c8 01       	movw	r24, r16
    5fb4:	01 97       	sbiw	r24, 0x01	; 1
    5fb6:	8c 0f       	add	r24, r28
    5fb8:	9d 1f       	adc	r25, r29
    5fba:	f7 01       	movw	r30, r14
    5fbc:	92 83       	std	Z+2, r25	; 0x02
    5fbe:	81 83       	std	Z+1, r24	; 0x01
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    5fc0:	14 83       	std	Z+4, r17	; 0x04
    5fc2:	03 83       	std	Z+3, r16	; 0x03
    5fc4:	df 91       	pop	r29
    5fc6:	cf 91       	pop	r28
    5fc8:	1f 91       	pop	r17
    5fca:	0f 91       	pop	r16
    5fcc:	ff 90       	pop	r15
    5fce:	ef 90       	pop	r14
    5fd0:	08 95       	ret

00005fd2 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5fd2:	a0 91 c8 06 	lds	r26, 0x06C8
	lds r27,nrk_high_ready_TCB+1
    5fd6:	b0 91 c9 06 	lds	r27, 0x06C9

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5fda:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5fdc:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5fde:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5fe0:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5fe2:	ff 91       	pop	r31
	pop r30
    5fe4:	ef 91       	pop	r30
	pop r29
    5fe6:	df 91       	pop	r29
	pop r28
    5fe8:	cf 91       	pop	r28
	pop r27
    5fea:	bf 91       	pop	r27
	pop r26
    5fec:	af 91       	pop	r26
	pop r25
    5fee:	9f 91       	pop	r25
	pop r24			
    5ff0:	8f 91       	pop	r24
	pop r23
    5ff2:	7f 91       	pop	r23
	pop r22
    5ff4:	6f 91       	pop	r22
	pop r21
    5ff6:	5f 91       	pop	r21
	pop r20	
    5ff8:	4f 91       	pop	r20
	pop r19
    5ffa:	3f 91       	pop	r19
	pop r18	
    5ffc:	2f 91       	pop	r18
	pop r17
    5ffe:	1f 91       	pop	r17
	pop r16
    6000:	0f 91       	pop	r16
	pop r15
    6002:	ff 90       	pop	r15
	pop r14
    6004:	ef 90       	pop	r14
	pop r13
    6006:	df 90       	pop	r13
	pop r12
    6008:	cf 90       	pop	r12
	pop r11
    600a:	bf 90       	pop	r11
	pop r10
    600c:	af 90       	pop	r10
	pop r9
    600e:	9f 90       	pop	r9
	pop r8
    6010:	8f 90       	pop	r8
	pop r7
    6012:	7f 90       	pop	r7
	pop r6
    6014:	6f 90       	pop	r6
	pop r5
    6016:	5f 90       	pop	r5
	pop r4
    6018:	4f 90       	pop	r4
	pop r3
    601a:	3f 90       	pop	r3
	pop r2
    601c:	2f 90       	pop	r2
	pop r1
    601e:	1f 90       	pop	r1
	pop r0
    6020:	0f 90       	pop	r0
	out __SREG__, r0
    6022:	0f be       	out	0x3f, r0	; 63
	pop r0	
    6024:	0f 90       	pop	r0
	   
    	reti 
    6026:	18 95       	reti

00006028 <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    6028:	ab e0       	ldi	r26, 0x0B	; 11
    602a:	b0 e0       	ldi	r27, 0x00	; 0
    602c:	ea e1       	ldi	r30, 0x1A	; 26
    602e:	f0 e3       	ldi	r31, 0x30	; 48
    6030:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__prologue_saves__>
    6034:	4c 01       	movw	r8, r24
    6036:	6b 01       	movw	r12, r22
    6038:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    603a:	fc 01       	movw	r30, r24
    603c:	17 82       	std	Z+7, r1	; 0x07
    603e:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    6040:	83 81       	ldd	r24, Z+3	; 0x03
    6042:	81 fd       	sbrc	r24, 1
    6044:	08 c0       	rjmp	.+16     	; 0x6056 <vfprintf+0x2e>
    6046:	8f ef       	ldi	r24, 0xFF	; 255
    6048:	9f ef       	ldi	r25, 0xFF	; 255
    604a:	1a c1       	rjmp	.+564    	; 0x6280 <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    604c:	22 e0       	ldi	r18, 0x02	; 2
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	e2 0e       	add	r14, r18
    6052:	f3 1e       	adc	r15, r19
    6054:	0c c0       	rjmp	.+24     	; 0x606e <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    6056:	9a e5       	ldi	r25, 0x5A	; 90
    6058:	29 2e       	mov	r2, r25
    605a:	94 e0       	ldi	r25, 0x04	; 4
    605c:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    605e:	3e 01       	movw	r6, r28
    6060:	08 94       	sec
    6062:	61 1c       	adc	r6, r1
    6064:	71 1c       	adc	r7, r1
    6066:	83 e5       	ldi	r24, 0x53	; 83
    6068:	48 2e       	mov	r4, r24
    606a:	84 e0       	ldi	r24, 0x04	; 4
    606c:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    606e:	f4 01       	movw	r30, r8
    6070:	03 81       	ldd	r16, Z+3	; 0x03
    6072:	f6 01       	movw	r30, r12
    6074:	03 fd       	sbrc	r16, 3
    6076:	85 91       	lpm	r24, Z+
    6078:	03 ff       	sbrs	r16, 3
    607a:	81 91       	ld	r24, Z+
    607c:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    607e:	88 23       	and	r24, r24
    6080:	09 f4       	brne	.+2      	; 0x6084 <vfprintf+0x5c>
    6082:	fb c0       	rjmp	.+502    	; 0x627a <vfprintf+0x252>
	    if (c == '%') {
    6084:	85 32       	cpi	r24, 0x25	; 37
    6086:	59 f4       	brne	.+22     	; 0x609e <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    6088:	03 fd       	sbrc	r16, 3
    608a:	65 91       	lpm	r22, Z+
    608c:	03 ff       	sbrs	r16, 3
    608e:	61 91       	ld	r22, Z+
    6090:	6f 01       	movw	r12, r30
		if (c != '%') break;
    6092:	65 32       	cpi	r22, 0x25	; 37
    6094:	19 f0       	breq	.+6      	; 0x609c <vfprintf+0x74>
    6096:	16 2f       	mov	r17, r22
    6098:	bb 24       	eor	r11, r11
    609a:	1c c0       	rjmp	.+56     	; 0x60d4 <vfprintf+0xac>
    609c:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    609e:	b4 01       	movw	r22, r8
    60a0:	99 27       	eor	r25, r25
    60a2:	2a c0       	rjmp	.+84     	; 0x60f8 <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    60a4:	11 23       	and	r17, r17
    60a6:	59 f1       	breq	.+86     	; 0x60fe <vfprintf+0xd6>
    60a8:	61 2f       	mov	r22, r17
    60aa:	77 27       	eor	r23, r23
    60ac:	c1 01       	movw	r24, r2
    60ae:	0e 94 38 38 	call	0x7070	; 0x7070 <strchr_P>
    60b2:	89 2b       	or	r24, r25
    60b4:	49 f4       	brne	.+18     	; 0x60c8 <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    60b6:	13 32       	cpi	r17, 0x23	; 35
    60b8:	19 f4       	brne	.+6      	; 0x60c0 <vfprintf+0x98>
		flags |= FL_ALT;
    60ba:	f0 e1       	ldi	r31, 0x10	; 16
    60bc:	bf 2a       	or	r11, r31
    60be:	04 c0       	rjmp	.+8      	; 0x60c8 <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    60c0:	1c 36       	cpi	r17, 0x6C	; 108
    60c2:	61 f4       	brne	.+24     	; 0x60dc <vfprintf+0xb4>
		flags |= FL_LONG;
    60c4:	20 e8       	ldi	r18, 0x80	; 128
    60c6:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    60c8:	f6 01       	movw	r30, r12
    60ca:	03 fd       	sbrc	r16, 3
    60cc:	15 91       	lpm	r17, Z+
    60ce:	03 ff       	sbrs	r16, 3
    60d0:	11 91       	ld	r17, Z+
    60d2:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    60d4:	b7 fe       	sbrs	r11, 7
    60d6:	e6 cf       	rjmp	.-52     	; 0x60a4 <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    60d8:	11 23       	and	r17, r17
    60da:	89 f0       	breq	.+34     	; 0x60fe <vfprintf+0xd6>
    60dc:	61 2f       	mov	r22, r17
    60de:	77 27       	eor	r23, r23
    60e0:	c2 01       	movw	r24, r4
    60e2:	0e 94 38 38 	call	0x7070	; 0x7070 <strchr_P>
    60e6:	89 2b       	or	r24, r25
    60e8:	51 f0       	breq	.+20     	; 0x60fe <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    60ea:	24 e0       	ldi	r18, 0x04	; 4
    60ec:	30 e0       	ldi	r19, 0x00	; 0
    60ee:	e2 0e       	add	r14, r18
    60f0:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    60f2:	b4 01       	movw	r22, r8
    60f4:	8f e3       	ldi	r24, 0x3F	; 63
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    60fc:	b8 cf       	rjmp	.-144    	; 0x606e <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    60fe:	13 36       	cpi	r17, 0x63	; 99
    6100:	29 f0       	breq	.+10     	; 0x610c <vfprintf+0xe4>
    6102:	13 37       	cpi	r17, 0x73	; 115
    6104:	81 f0       	breq	.+32     	; 0x6126 <vfprintf+0xfe>
    6106:	13 35       	cpi	r17, 0x53	; 83
    6108:	f9 f4       	brne	.+62     	; 0x6148 <vfprintf+0x120>
    610a:	0b c0       	rjmp	.+22     	; 0x6122 <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    610c:	87 01       	movw	r16, r14
    610e:	0e 5f       	subi	r16, 0xFE	; 254
    6110:	1f 4f       	sbci	r17, 0xFF	; 255
    6112:	b4 01       	movw	r22, r8
    6114:	f7 01       	movw	r30, r14
    6116:	80 81       	ld	r24, Z
    6118:	91 81       	ldd	r25, Z+1	; 0x01
    611a:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    611e:	78 01       	movw	r14, r16
    6120:	a6 cf       	rjmp	.-180    	; 0x606e <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    6122:	f1 e0       	ldi	r31, 0x01	; 1
    6124:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    6126:	f7 01       	movw	r30, r14
    6128:	00 81       	ld	r16, Z
    612a:	11 81       	ldd	r17, Z+1	; 0x01
    612c:	04 c0       	rjmp	.+8      	; 0x6136 <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    612e:	b4 01       	movw	r22, r8
    6130:	99 27       	eor	r25, r25
    6132:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    6136:	f8 01       	movw	r30, r16
    6138:	b0 fc       	sbrc	r11, 0
    613a:	85 91       	lpm	r24, Z+
    613c:	b0 fe       	sbrs	r11, 0
    613e:	81 91       	ld	r24, Z+
    6140:	8f 01       	movw	r16, r30
    6142:	88 23       	and	r24, r24
    6144:	a1 f7       	brne	.-24     	; 0x612e <vfprintf+0x106>
    6146:	82 cf       	rjmp	.-252    	; 0x604c <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    6148:	14 36       	cpi	r17, 0x64	; 100
    614a:	11 f0       	breq	.+4      	; 0x6150 <vfprintf+0x128>
    614c:	19 36       	cpi	r17, 0x69	; 105
    614e:	49 f5       	brne	.+82     	; 0x61a2 <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    6150:	b7 fe       	sbrs	r11, 7
    6152:	0a c0       	rjmp	.+20     	; 0x6168 <vfprintf+0x140>
    6154:	f7 01       	movw	r30, r14
    6156:	60 81       	ld	r22, Z
    6158:	71 81       	ldd	r23, Z+1	; 0x01
    615a:	82 81       	ldd	r24, Z+2	; 0x02
    615c:	93 81       	ldd	r25, Z+3	; 0x03
    615e:	24 e0       	ldi	r18, 0x04	; 4
    6160:	30 e0       	ldi	r19, 0x00	; 0
    6162:	e2 0e       	add	r14, r18
    6164:	f3 1e       	adc	r15, r19
    6166:	0d c0       	rjmp	.+26     	; 0x6182 <vfprintf+0x15a>
    6168:	f7 01       	movw	r30, r14
    616a:	80 81       	ld	r24, Z
    616c:	91 81       	ldd	r25, Z+1	; 0x01
    616e:	9c 01       	movw	r18, r24
    6170:	b9 01       	movw	r22, r18
    6172:	88 27       	eor	r24, r24
    6174:	77 fd       	sbrc	r23, 7
    6176:	80 95       	com	r24
    6178:	98 2f       	mov	r25, r24
    617a:	42 e0       	ldi	r20, 0x02	; 2
    617c:	50 e0       	ldi	r21, 0x00	; 0
    617e:	e4 0e       	add	r14, r20
    6180:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    6182:	5f ee       	ldi	r21, 0xEF	; 239
    6184:	b5 22       	and	r11, r21
	    if (x < 0) {
    6186:	97 ff       	sbrs	r25, 7
    6188:	09 c0       	rjmp	.+18     	; 0x619c <vfprintf+0x174>
		x = -x;
    618a:	90 95       	com	r25
    618c:	80 95       	com	r24
    618e:	70 95       	com	r23
    6190:	61 95       	neg	r22
    6192:	7f 4f       	sbci	r23, 0xFF	; 255
    6194:	8f 4f       	sbci	r24, 0xFF	; 255
    6196:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    6198:	e0 e4       	ldi	r30, 0x40	; 64
    619a:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    619c:	2a e0       	ldi	r18, 0x0A	; 10
    619e:	30 e0       	ldi	r19, 0x00	; 0
    61a0:	3a c0       	rjmp	.+116    	; 0x6216 <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    61a2:	10 37       	cpi	r17, 0x70	; 112
    61a4:	b1 f0       	breq	.+44     	; 0x61d2 <vfprintf+0x1aa>
    61a6:	11 37       	cpi	r17, 0x71	; 113
    61a8:	30 f4       	brcc	.+12     	; 0x61b6 <vfprintf+0x18e>
    61aa:	18 35       	cpi	r17, 0x58	; 88
    61ac:	c9 f0       	breq	.+50     	; 0x61e0 <vfprintf+0x1b8>
    61ae:	1f 36       	cpi	r17, 0x6F	; 111
    61b0:	09 f0       	breq	.+2      	; 0x61b4 <vfprintf+0x18c>
    61b2:	63 c0       	rjmp	.+198    	; 0x627a <vfprintf+0x252>
    61b4:	06 c0       	rjmp	.+12     	; 0x61c2 <vfprintf+0x19a>
    61b6:	15 37       	cpi	r17, 0x75	; 117
    61b8:	39 f0       	breq	.+14     	; 0x61c8 <vfprintf+0x1a0>
    61ba:	18 37       	cpi	r17, 0x78	; 120
    61bc:	09 f0       	breq	.+2      	; 0x61c0 <vfprintf+0x198>
    61be:	5d c0       	rjmp	.+186    	; 0x627a <vfprintf+0x252>
    61c0:	0a c0       	rjmp	.+20     	; 0x61d6 <vfprintf+0x1ae>
    61c2:	28 e0       	ldi	r18, 0x08	; 8
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	10 c0       	rjmp	.+32     	; 0x61e8 <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    61c8:	ff ee       	ldi	r31, 0xEF	; 239
    61ca:	bf 22       	and	r11, r31
    61cc:	2a e0       	ldi	r18, 0x0A	; 10
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	0b c0       	rjmp	.+22     	; 0x61e8 <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    61d2:	20 e1       	ldi	r18, 0x10	; 16
    61d4:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    61d6:	34 e2       	ldi	r19, 0x24	; 36
    61d8:	b3 2a       	or	r11, r19
    61da:	20 e1       	ldi	r18, 0x10	; 16
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	04 c0       	rjmp	.+8      	; 0x61e8 <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    61e0:	44 e0       	ldi	r20, 0x04	; 4
    61e2:	b4 2a       	or	r11, r20
    61e4:	20 e1       	ldi	r18, 0x10	; 16
    61e6:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    61e8:	b7 fe       	sbrs	r11, 7
    61ea:	0a c0       	rjmp	.+20     	; 0x6200 <vfprintf+0x1d8>
    61ec:	f7 01       	movw	r30, r14
    61ee:	60 81       	ld	r22, Z
    61f0:	71 81       	ldd	r23, Z+1	; 0x01
    61f2:	82 81       	ldd	r24, Z+2	; 0x02
    61f4:	93 81       	ldd	r25, Z+3	; 0x03
    61f6:	44 e0       	ldi	r20, 0x04	; 4
    61f8:	50 e0       	ldi	r21, 0x00	; 0
    61fa:	e4 0e       	add	r14, r20
    61fc:	f5 1e       	adc	r15, r21
    61fe:	0b c0       	rjmp	.+22     	; 0x6216 <vfprintf+0x1ee>
    6200:	f7 01       	movw	r30, r14
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	ac 01       	movw	r20, r24
    6208:	ba 01       	movw	r22, r20
    620a:	88 27       	eor	r24, r24
    620c:	99 27       	eor	r25, r25
    620e:	e2 e0       	ldi	r30, 0x02	; 2
    6210:	f0 e0       	ldi	r31, 0x00	; 0
    6212:	ee 0e       	add	r14, r30
    6214:	ff 1e       	adc	r15, r31
    6216:	a3 01       	movw	r20, r6
    6218:	0e 94 34 39 	call	0x7268	; 0x7268 <__ultoa_invert>
    621c:	a8 2e       	mov	r10, r24
    621e:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    6220:	0b 2d       	mov	r16, r11
    6222:	11 27       	eor	r17, r17
    6224:	06 ff       	sbrs	r16, 6
    6226:	05 c0       	rjmp	.+10     	; 0x6232 <vfprintf+0x20a>
	    putc ('-', stream);
    6228:	b4 01       	movw	r22, r8
    622a:	8d e2       	ldi	r24, 0x2D	; 45
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    6232:	04 ff       	sbrs	r16, 4
    6234:	15 c0       	rjmp	.+42     	; 0x6260 <vfprintf+0x238>
    6236:	fe 01       	movw	r30, r28
    6238:	ea 0d       	add	r30, r10
    623a:	f1 1d       	adc	r31, r1
    623c:	80 81       	ld	r24, Z
    623e:	80 33       	cpi	r24, 0x30	; 48
    6240:	79 f0       	breq	.+30     	; 0x6260 <vfprintf+0x238>
	    putc ('0', stream);
    6242:	b4 01       	movw	r22, r8
    6244:	80 e3       	ldi	r24, 0x30	; 48
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
	    if (flags & FL_ALTHEX)
    624c:	02 ff       	sbrs	r16, 2
    624e:	08 c0       	rjmp	.+16     	; 0x6260 <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    6250:	00 72       	andi	r16, 0x20	; 32
    6252:	10 70       	andi	r17, 0x00	; 0
    6254:	b4 01       	movw	r22, r8
    6256:	c8 01       	movw	r24, r16
    6258:	88 5a       	subi	r24, 0xA8	; 168
    625a:	9f 4f       	sbci	r25, 0xFF	; 255
    625c:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
	}
	do {
	    putc (buf[--c], stream);
    6260:	aa 94       	dec	r10
    6262:	f3 01       	movw	r30, r6
    6264:	ea 0d       	add	r30, r10
    6266:	f1 1d       	adc	r31, r1
    6268:	80 81       	ld	r24, Z
    626a:	b4 01       	movw	r22, r8
    626c:	99 27       	eor	r25, r25
    626e:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
	} while (c);
    6272:	aa 20       	and	r10, r10
    6274:	09 f4       	brne	.+2      	; 0x6278 <vfprintf+0x250>
    6276:	fb ce       	rjmp	.-522    	; 0x606e <vfprintf+0x46>
    6278:	f3 cf       	rjmp	.-26     	; 0x6260 <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    627a:	f4 01       	movw	r30, r8
    627c:	86 81       	ldd	r24, Z+6	; 0x06
    627e:	97 81       	ldd	r25, Z+7	; 0x07
    6280:	e2 e1       	ldi	r30, 0x12	; 18
    6282:	2b 96       	adiw	r28, 0x0b	; 11
    6284:	0c 94 37 3b 	jmp	0x766e	; 0x766e <__epilogue_restores__>

00006288 <__udivdi3>:
    6288:	ac e6       	ldi	r26, 0x6C	; 108
    628a:	b0 e0       	ldi	r27, 0x00	; 0
    628c:	ea e4       	ldi	r30, 0x4A	; 74
    628e:	f1 e3       	ldi	r31, 0x31	; 49
    6290:	0c 94 1b 3b 	jmp	0x7636	; 0x7636 <__prologue_saves__>
    6294:	22 2e       	mov	r2, r18
    6296:	33 2e       	mov	r3, r19
    6298:	44 2e       	mov	r4, r20
    629a:	55 2e       	mov	r5, r21
    629c:	66 2e       	mov	r6, r22
    629e:	77 2e       	mov	r7, r23
    62a0:	88 2e       	mov	r8, r24
    62a2:	99 2e       	mov	r9, r25
    62a4:	6e 2d       	mov	r22, r14
    62a6:	a8 e0       	ldi	r26, 0x08	; 8
    62a8:	fe 01       	movw	r30, r28
    62aa:	31 96       	adiw	r30, 0x01	; 1
    62ac:	ea 2e       	mov	r14, r26
    62ae:	11 92       	st	Z+, r1
    62b0:	ea 94       	dec	r14
    62b2:	e9 f7       	brne	.-6      	; 0x62ae <__udivdi3+0x26>
    62b4:	29 82       	std	Y+1, r2	; 0x01
    62b6:	3a 82       	std	Y+2, r3	; 0x02
    62b8:	4b 82       	std	Y+3, r4	; 0x03
    62ba:	5c 82       	std	Y+4, r5	; 0x04
    62bc:	6d 82       	std	Y+5, r6	; 0x05
    62be:	7e 82       	std	Y+6, r7	; 0x06
    62c0:	8f 82       	std	Y+7, r8	; 0x07
    62c2:	98 86       	std	Y+8, r9	; 0x08
    62c4:	fe 01       	movw	r30, r28
    62c6:	39 96       	adiw	r30, 0x09	; 9
    62c8:	11 92       	st	Z+, r1
    62ca:	aa 95       	dec	r26
    62cc:	e9 f7       	brne	.-6      	; 0x62c8 <__udivdi3+0x40>
    62ce:	a9 86       	std	Y+9, r10	; 0x09
    62d0:	ba 86       	std	Y+10, r11	; 0x0a
    62d2:	cb 86       	std	Y+11, r12	; 0x0b
    62d4:	dc 86       	std	Y+12, r13	; 0x0c
    62d6:	6d 87       	std	Y+13, r22	; 0x0d
    62d8:	fe 86       	std	Y+14, r15	; 0x0e
    62da:	0f 87       	std	Y+15, r16	; 0x0f
    62dc:	18 8b       	std	Y+16, r17	; 0x10
    62de:	a9 84       	ldd	r10, Y+9	; 0x09
    62e0:	ba 84       	ldd	r11, Y+10	; 0x0a
    62e2:	cb 84       	ldd	r12, Y+11	; 0x0b
    62e4:	dc 84       	ldd	r13, Y+12	; 0x0c
    62e6:	6d 84       	ldd	r6, Y+13	; 0x0d
    62e8:	7e 84       	ldd	r7, Y+14	; 0x0e
    62ea:	8f 84       	ldd	r8, Y+15	; 0x0f
    62ec:	98 88       	ldd	r9, Y+16	; 0x10
    62ee:	09 81       	ldd	r16, Y+1	; 0x01
    62f0:	1a 81       	ldd	r17, Y+2	; 0x02
    62f2:	2b 81       	ldd	r18, Y+3	; 0x03
    62f4:	3c 81       	ldd	r19, Y+4	; 0x04
    62f6:	09 ab       	std	Y+49, r16	; 0x31
    62f8:	1a ab       	std	Y+50, r17	; 0x32
    62fa:	2b ab       	std	Y+51, r18	; 0x33
    62fc:	3c ab       	std	Y+52, r19	; 0x34
    62fe:	2d 80       	ldd	r2, Y+5	; 0x05
    6300:	3e 80       	ldd	r3, Y+6	; 0x06
    6302:	4f 80       	ldd	r4, Y+7	; 0x07
    6304:	58 84       	ldd	r5, Y+8	; 0x08
    6306:	61 14       	cp	r6, r1
    6308:	71 04       	cpc	r7, r1
    630a:	81 04       	cpc	r8, r1
    630c:	91 04       	cpc	r9, r1
    630e:	09 f0       	breq	.+2      	; 0x6312 <__udivdi3+0x8a>
    6310:	b8 c3       	rjmp	.+1904   	; 0x6a82 <__udivdi3+0x7fa>
    6312:	2a 14       	cp	r2, r10
    6314:	3b 04       	cpc	r3, r11
    6316:	4c 04       	cpc	r4, r12
    6318:	5d 04       	cpc	r5, r13
    631a:	08 f0       	brcs	.+2      	; 0x631e <__udivdi3+0x96>
    631c:	61 c1       	rjmp	.+706    	; 0x65e0 <__udivdi3+0x358>
    631e:	10 e0       	ldi	r17, 0x00	; 0
    6320:	a1 16       	cp	r10, r17
    6322:	10 e0       	ldi	r17, 0x00	; 0
    6324:	b1 06       	cpc	r11, r17
    6326:	11 e0       	ldi	r17, 0x01	; 1
    6328:	c1 06       	cpc	r12, r17
    632a:	10 e0       	ldi	r17, 0x00	; 0
    632c:	d1 06       	cpc	r13, r17
    632e:	88 f4       	brcc	.+34     	; 0x6352 <__udivdi3+0xca>
    6330:	2f ef       	ldi	r18, 0xFF	; 255
    6332:	a2 16       	cp	r10, r18
    6334:	b1 04       	cpc	r11, r1
    6336:	c1 04       	cpc	r12, r1
    6338:	d1 04       	cpc	r13, r1
    633a:	09 f0       	breq	.+2      	; 0x633e <__udivdi3+0xb6>
    633c:	28 f4       	brcc	.+10     	; 0x6348 <__udivdi3+0xc0>
    633e:	20 e0       	ldi	r18, 0x00	; 0
    6340:	30 e0       	ldi	r19, 0x00	; 0
    6342:	40 e0       	ldi	r20, 0x00	; 0
    6344:	50 e0       	ldi	r21, 0x00	; 0
    6346:	17 c0       	rjmp	.+46     	; 0x6376 <__udivdi3+0xee>
    6348:	28 e0       	ldi	r18, 0x08	; 8
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	40 e0       	ldi	r20, 0x00	; 0
    634e:	50 e0       	ldi	r21, 0x00	; 0
    6350:	12 c0       	rjmp	.+36     	; 0x6376 <__udivdi3+0xee>
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	a3 16       	cp	r10, r19
    6356:	30 e0       	ldi	r19, 0x00	; 0
    6358:	b3 06       	cpc	r11, r19
    635a:	30 e0       	ldi	r19, 0x00	; 0
    635c:	c3 06       	cpc	r12, r19
    635e:	31 e0       	ldi	r19, 0x01	; 1
    6360:	d3 06       	cpc	r13, r19
    6362:	28 f4       	brcc	.+10     	; 0x636e <__udivdi3+0xe6>
    6364:	20 e1       	ldi	r18, 0x10	; 16
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	40 e0       	ldi	r20, 0x00	; 0
    636a:	50 e0       	ldi	r21, 0x00	; 0
    636c:	04 c0       	rjmp	.+8      	; 0x6376 <__udivdi3+0xee>
    636e:	28 e1       	ldi	r18, 0x18	; 24
    6370:	30 e0       	ldi	r19, 0x00	; 0
    6372:	40 e0       	ldi	r20, 0x00	; 0
    6374:	50 e0       	ldi	r21, 0x00	; 0
    6376:	80 e2       	ldi	r24, 0x20	; 32
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	a0 e0       	ldi	r26, 0x00	; 0
    637c:	b0 e0       	ldi	r27, 0x00	; 0
    637e:	82 1b       	sub	r24, r18
    6380:	93 0b       	sbc	r25, r19
    6382:	a4 0b       	sbc	r26, r20
    6384:	b5 0b       	sbc	r27, r21
    6386:	35 01       	movw	r6, r10
    6388:	46 01       	movw	r8, r12
    638a:	04 c0       	rjmp	.+8      	; 0x6394 <__udivdi3+0x10c>
    638c:	96 94       	lsr	r9
    638e:	87 94       	ror	r8
    6390:	77 94       	ror	r7
    6392:	67 94       	ror	r6
    6394:	2a 95       	dec	r18
    6396:	d2 f7       	brpl	.-12     	; 0x638c <__udivdi3+0x104>
    6398:	a4 01       	movw	r20, r8
    639a:	93 01       	movw	r18, r6
    639c:	20 57       	subi	r18, 0x70	; 112
    639e:	3d 4f       	sbci	r19, 0xFD	; 253
    63a0:	f9 01       	movw	r30, r18
    63a2:	20 81       	ld	r18, Z
    63a4:	ac 01       	movw	r20, r24
    63a6:	bd 01       	movw	r22, r26
    63a8:	42 1b       	sub	r20, r18
    63aa:	51 09       	sbc	r21, r1
    63ac:	61 09       	sbc	r22, r1
    63ae:	71 09       	sbc	r23, r1
    63b0:	41 15       	cp	r20, r1
    63b2:	51 05       	cpc	r21, r1
    63b4:	61 05       	cpc	r22, r1
    63b6:	71 05       	cpc	r23, r1
    63b8:	b9 f1       	breq	.+110    	; 0x6428 <__udivdi3+0x1a0>
    63ba:	ca 01       	movw	r24, r20
    63bc:	04 2e       	mov	r0, r20
    63be:	04 c0       	rjmp	.+8      	; 0x63c8 <__udivdi3+0x140>
    63c0:	aa 0c       	add	r10, r10
    63c2:	bb 1c       	adc	r11, r11
    63c4:	cc 1c       	adc	r12, r12
    63c6:	dd 1c       	adc	r13, r13
    63c8:	0a 94       	dec	r0
    63ca:	d2 f7       	brpl	.-12     	; 0x63c0 <__udivdi3+0x138>
    63cc:	20 e2       	ldi	r18, 0x20	; 32
    63ce:	30 e0       	ldi	r19, 0x00	; 0
    63d0:	24 1b       	sub	r18, r20
    63d2:	35 0b       	sbc	r19, r21
    63d4:	69 a8       	ldd	r6, Y+49	; 0x31
    63d6:	7a a8       	ldd	r7, Y+50	; 0x32
    63d8:	8b a8       	ldd	r8, Y+51	; 0x33
    63da:	9c a8       	ldd	r9, Y+52	; 0x34
    63dc:	04 c0       	rjmp	.+8      	; 0x63e6 <__udivdi3+0x15e>
    63de:	96 94       	lsr	r9
    63e0:	87 94       	ror	r8
    63e2:	77 94       	ror	r7
    63e4:	67 94       	ror	r6
    63e6:	2a 95       	dec	r18
    63e8:	d2 f7       	brpl	.-12     	; 0x63de <__udivdi3+0x156>
    63ea:	82 01       	movw	r16, r4
    63ec:	71 01       	movw	r14, r2
    63ee:	08 2e       	mov	r0, r24
    63f0:	04 c0       	rjmp	.+8      	; 0x63fa <__udivdi3+0x172>
    63f2:	ee 0c       	add	r14, r14
    63f4:	ff 1c       	adc	r15, r15
    63f6:	00 1f       	adc	r16, r16
    63f8:	11 1f       	adc	r17, r17
    63fa:	0a 94       	dec	r0
    63fc:	d2 f7       	brpl	.-12     	; 0x63f2 <__udivdi3+0x16a>
    63fe:	13 01       	movw	r2, r6
    6400:	24 01       	movw	r4, r8
    6402:	2e 28       	or	r2, r14
    6404:	3f 28       	or	r3, r15
    6406:	40 2a       	or	r4, r16
    6408:	51 2a       	or	r5, r17
    640a:	e9 a8       	ldd	r14, Y+49	; 0x31
    640c:	fa a8       	ldd	r15, Y+50	; 0x32
    640e:	0b a9       	ldd	r16, Y+51	; 0x33
    6410:	1c a9       	ldd	r17, Y+52	; 0x34
    6412:	04 c0       	rjmp	.+8      	; 0x641c <__udivdi3+0x194>
    6414:	ee 0c       	add	r14, r14
    6416:	ff 1c       	adc	r15, r15
    6418:	00 1f       	adc	r16, r16
    641a:	11 1f       	adc	r17, r17
    641c:	8a 95       	dec	r24
    641e:	d2 f7       	brpl	.-12     	; 0x6414 <__udivdi3+0x18c>
    6420:	e9 aa       	std	Y+49, r14	; 0x31
    6422:	fa aa       	std	Y+50, r15	; 0x32
    6424:	0b ab       	std	Y+51, r16	; 0x33
    6426:	1c ab       	std	Y+52, r17	; 0x34
    6428:	86 01       	movw	r16, r12
    642a:	22 27       	eor	r18, r18
    642c:	33 27       	eor	r19, r19
    642e:	21 96       	adiw	r28, 0x01	; 1
    6430:	0c af       	std	Y+60, r16	; 0x3c
    6432:	1d af       	std	Y+61, r17	; 0x3d
    6434:	2e af       	std	Y+62, r18	; 0x3e
    6436:	3f af       	std	Y+63, r19	; 0x3f
    6438:	21 97       	sbiw	r28, 0x01	; 1
    643a:	a6 01       	movw	r20, r12
    643c:	95 01       	movw	r18, r10
    643e:	40 70       	andi	r20, 0x00	; 0
    6440:	50 70       	andi	r21, 0x00	; 0
    6442:	25 96       	adiw	r28, 0x05	; 5
    6444:	2c af       	std	Y+60, r18	; 0x3c
    6446:	3d af       	std	Y+61, r19	; 0x3d
    6448:	4e af       	std	Y+62, r20	; 0x3e
    644a:	5f af       	std	Y+63, r21	; 0x3f
    644c:	25 97       	sbiw	r28, 0x05	; 5
    644e:	c2 01       	movw	r24, r4
    6450:	b1 01       	movw	r22, r2
    6452:	21 96       	adiw	r28, 0x01	; 1
    6454:	2c ad       	ldd	r18, Y+60	; 0x3c
    6456:	3d ad       	ldd	r19, Y+61	; 0x3d
    6458:	4e ad       	ldd	r20, Y+62	; 0x3e
    645a:	5f ad       	ldd	r21, Y+63	; 0x3f
    645c:	21 97       	sbiw	r28, 0x01	; 1
    645e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6462:	29 96       	adiw	r28, 0x09	; 9
    6464:	2c af       	std	Y+60, r18	; 0x3c
    6466:	3d af       	std	Y+61, r19	; 0x3d
    6468:	4e af       	std	Y+62, r20	; 0x3e
    646a:	5f af       	std	Y+63, r21	; 0x3f
    646c:	29 97       	sbiw	r28, 0x09	; 9
    646e:	ca 01       	movw	r24, r20
    6470:	b9 01       	movw	r22, r18
    6472:	25 96       	adiw	r28, 0x05	; 5
    6474:	2c ad       	ldd	r18, Y+60	; 0x3c
    6476:	3d ad       	ldd	r19, Y+61	; 0x3d
    6478:	4e ad       	ldd	r20, Y+62	; 0x3e
    647a:	5f ad       	ldd	r21, Y+63	; 0x3f
    647c:	25 97       	sbiw	r28, 0x05	; 5
    647e:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6482:	3b 01       	movw	r6, r22
    6484:	4c 01       	movw	r8, r24
    6486:	c2 01       	movw	r24, r4
    6488:	b1 01       	movw	r22, r2
    648a:	21 96       	adiw	r28, 0x01	; 1
    648c:	2c ad       	ldd	r18, Y+60	; 0x3c
    648e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6490:	4e ad       	ldd	r20, Y+62	; 0x3e
    6492:	5f ad       	ldd	r21, Y+63	; 0x3f
    6494:	21 97       	sbiw	r28, 0x01	; 1
    6496:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    649a:	cb 01       	movw	r24, r22
    649c:	77 27       	eor	r23, r23
    649e:	66 27       	eor	r22, r22
    64a0:	e9 a8       	ldd	r14, Y+49	; 0x31
    64a2:	fa a8       	ldd	r15, Y+50	; 0x32
    64a4:	0b a9       	ldd	r16, Y+51	; 0x33
    64a6:	1c a9       	ldd	r17, Y+52	; 0x34
    64a8:	98 01       	movw	r18, r16
    64aa:	44 27       	eor	r20, r20
    64ac:	55 27       	eor	r21, r21
    64ae:	7b 01       	movw	r14, r22
    64b0:	8c 01       	movw	r16, r24
    64b2:	e2 2a       	or	r14, r18
    64b4:	f3 2a       	or	r15, r19
    64b6:	04 2b       	or	r16, r20
    64b8:	15 2b       	or	r17, r21
    64ba:	e6 14       	cp	r14, r6
    64bc:	f7 04       	cpc	r15, r7
    64be:	08 05       	cpc	r16, r8
    64c0:	19 05       	cpc	r17, r9
    64c2:	60 f5       	brcc	.+88     	; 0x651c <__udivdi3+0x294>
    64c4:	29 96       	adiw	r28, 0x09	; 9
    64c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    64c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    64ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    64cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    64ce:	29 97       	sbiw	r28, 0x09	; 9
    64d0:	21 50       	subi	r18, 0x01	; 1
    64d2:	30 40       	sbci	r19, 0x00	; 0
    64d4:	40 40       	sbci	r20, 0x00	; 0
    64d6:	50 40       	sbci	r21, 0x00	; 0
    64d8:	29 96       	adiw	r28, 0x09	; 9
    64da:	2c af       	std	Y+60, r18	; 0x3c
    64dc:	3d af       	std	Y+61, r19	; 0x3d
    64de:	4e af       	std	Y+62, r20	; 0x3e
    64e0:	5f af       	std	Y+63, r21	; 0x3f
    64e2:	29 97       	sbiw	r28, 0x09	; 9
    64e4:	ea 0c       	add	r14, r10
    64e6:	fb 1c       	adc	r15, r11
    64e8:	0c 1d       	adc	r16, r12
    64ea:	1d 1d       	adc	r17, r13
    64ec:	ea 14       	cp	r14, r10
    64ee:	fb 04       	cpc	r15, r11
    64f0:	0c 05       	cpc	r16, r12
    64f2:	1d 05       	cpc	r17, r13
    64f4:	98 f0       	brcs	.+38     	; 0x651c <__udivdi3+0x294>
    64f6:	e6 14       	cp	r14, r6
    64f8:	f7 04       	cpc	r15, r7
    64fa:	08 05       	cpc	r16, r8
    64fc:	19 05       	cpc	r17, r9
    64fe:	70 f4       	brcc	.+28     	; 0x651c <__udivdi3+0x294>
    6500:	21 50       	subi	r18, 0x01	; 1
    6502:	30 40       	sbci	r19, 0x00	; 0
    6504:	40 40       	sbci	r20, 0x00	; 0
    6506:	50 40       	sbci	r21, 0x00	; 0
    6508:	29 96       	adiw	r28, 0x09	; 9
    650a:	2c af       	std	Y+60, r18	; 0x3c
    650c:	3d af       	std	Y+61, r19	; 0x3d
    650e:	4e af       	std	Y+62, r20	; 0x3e
    6510:	5f af       	std	Y+63, r21	; 0x3f
    6512:	29 97       	sbiw	r28, 0x09	; 9
    6514:	ea 0c       	add	r14, r10
    6516:	fb 1c       	adc	r15, r11
    6518:	0c 1d       	adc	r16, r12
    651a:	1d 1d       	adc	r17, r13
    651c:	e6 18       	sub	r14, r6
    651e:	f7 08       	sbc	r15, r7
    6520:	08 09       	sbc	r16, r8
    6522:	19 09       	sbc	r17, r9
    6524:	c8 01       	movw	r24, r16
    6526:	b7 01       	movw	r22, r14
    6528:	21 96       	adiw	r28, 0x01	; 1
    652a:	2c ad       	ldd	r18, Y+60	; 0x3c
    652c:	3d ad       	ldd	r19, Y+61	; 0x3d
    652e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6530:	5f ad       	ldd	r21, Y+63	; 0x3f
    6532:	21 97       	sbiw	r28, 0x01	; 1
    6534:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6538:	39 01       	movw	r6, r18
    653a:	4a 01       	movw	r8, r20
    653c:	ca 01       	movw	r24, r20
    653e:	b9 01       	movw	r22, r18
    6540:	25 96       	adiw	r28, 0x05	; 5
    6542:	2c ad       	ldd	r18, Y+60	; 0x3c
    6544:	3d ad       	ldd	r19, Y+61	; 0x3d
    6546:	4e ad       	ldd	r20, Y+62	; 0x3e
    6548:	5f ad       	ldd	r21, Y+63	; 0x3f
    654a:	25 97       	sbiw	r28, 0x05	; 5
    654c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6550:	1b 01       	movw	r2, r22
    6552:	2c 01       	movw	r4, r24
    6554:	c8 01       	movw	r24, r16
    6556:	b7 01       	movw	r22, r14
    6558:	21 96       	adiw	r28, 0x01	; 1
    655a:	2c ad       	ldd	r18, Y+60	; 0x3c
    655c:	3d ad       	ldd	r19, Y+61	; 0x3d
    655e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6560:	5f ad       	ldd	r21, Y+63	; 0x3f
    6562:	21 97       	sbiw	r28, 0x01	; 1
    6564:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6568:	cb 01       	movw	r24, r22
    656a:	77 27       	eor	r23, r23
    656c:	66 27       	eor	r22, r22
    656e:	29 a9       	ldd	r18, Y+49	; 0x31
    6570:	3a a9       	ldd	r19, Y+50	; 0x32
    6572:	4b a9       	ldd	r20, Y+51	; 0x33
    6574:	5c a9       	ldd	r21, Y+52	; 0x34
    6576:	40 70       	andi	r20, 0x00	; 0
    6578:	50 70       	andi	r21, 0x00	; 0
    657a:	26 2b       	or	r18, r22
    657c:	37 2b       	or	r19, r23
    657e:	48 2b       	or	r20, r24
    6580:	59 2b       	or	r21, r25
    6582:	22 15       	cp	r18, r2
    6584:	33 05       	cpc	r19, r3
    6586:	44 05       	cpc	r20, r4
    6588:	55 05       	cpc	r21, r5
    658a:	c0 f4       	brcc	.+48     	; 0x65bc <__udivdi3+0x334>
    658c:	08 94       	sec
    658e:	61 08       	sbc	r6, r1
    6590:	71 08       	sbc	r7, r1
    6592:	81 08       	sbc	r8, r1
    6594:	91 08       	sbc	r9, r1
    6596:	2a 0d       	add	r18, r10
    6598:	3b 1d       	adc	r19, r11
    659a:	4c 1d       	adc	r20, r12
    659c:	5d 1d       	adc	r21, r13
    659e:	2a 15       	cp	r18, r10
    65a0:	3b 05       	cpc	r19, r11
    65a2:	4c 05       	cpc	r20, r12
    65a4:	5d 05       	cpc	r21, r13
    65a6:	50 f0       	brcs	.+20     	; 0x65bc <__udivdi3+0x334>
    65a8:	22 15       	cp	r18, r2
    65aa:	33 05       	cpc	r19, r3
    65ac:	44 05       	cpc	r20, r4
    65ae:	55 05       	cpc	r21, r5
    65b0:	28 f4       	brcc	.+10     	; 0x65bc <__udivdi3+0x334>
    65b2:	08 94       	sec
    65b4:	61 08       	sbc	r6, r1
    65b6:	71 08       	sbc	r7, r1
    65b8:	81 08       	sbc	r8, r1
    65ba:	91 08       	sbc	r9, r1
    65bc:	29 96       	adiw	r28, 0x09	; 9
    65be:	ec ac       	ldd	r14, Y+60	; 0x3c
    65c0:	fd ac       	ldd	r15, Y+61	; 0x3d
    65c2:	0e ad       	ldd	r16, Y+62	; 0x3e
    65c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    65c6:	29 97       	sbiw	r28, 0x09	; 9
    65c8:	d7 01       	movw	r26, r14
    65ca:	99 27       	eor	r25, r25
    65cc:	88 27       	eor	r24, r24
    65ce:	68 2a       	or	r6, r24
    65d0:	79 2a       	or	r7, r25
    65d2:	8a 2a       	or	r8, r26
    65d4:	9b 2a       	or	r9, r27
    65d6:	6d aa       	std	Y+53, r6	; 0x35
    65d8:	7e aa       	std	Y+54, r7	; 0x36
    65da:	8f aa       	std	Y+55, r8	; 0x37
    65dc:	98 ae       	std	Y+56, r9	; 0x38
    65de:	b2 c4       	rjmp	.+2404   	; 0x6f44 <__udivdi3+0xcbc>
    65e0:	a1 14       	cp	r10, r1
    65e2:	b1 04       	cpc	r11, r1
    65e4:	c1 04       	cpc	r12, r1
    65e6:	d1 04       	cpc	r13, r1
    65e8:	61 f4       	brne	.+24     	; 0x6602 <__udivdi3+0x37a>
    65ea:	61 e0       	ldi	r22, 0x01	; 1
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	80 e0       	ldi	r24, 0x00	; 0
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	20 e0       	ldi	r18, 0x00	; 0
    65f4:	30 e0       	ldi	r19, 0x00	; 0
    65f6:	40 e0       	ldi	r20, 0x00	; 0
    65f8:	50 e0       	ldi	r21, 0x00	; 0
    65fa:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    65fe:	59 01       	movw	r10, r18
    6600:	6a 01       	movw	r12, r20
    6602:	00 e0       	ldi	r16, 0x00	; 0
    6604:	a0 16       	cp	r10, r16
    6606:	00 e0       	ldi	r16, 0x00	; 0
    6608:	b0 06       	cpc	r11, r16
    660a:	01 e0       	ldi	r16, 0x01	; 1
    660c:	c0 06       	cpc	r12, r16
    660e:	00 e0       	ldi	r16, 0x00	; 0
    6610:	d0 06       	cpc	r13, r16
    6612:	88 f4       	brcc	.+34     	; 0x6636 <__udivdi3+0x3ae>
    6614:	1f ef       	ldi	r17, 0xFF	; 255
    6616:	a1 16       	cp	r10, r17
    6618:	b1 04       	cpc	r11, r1
    661a:	c1 04       	cpc	r12, r1
    661c:	d1 04       	cpc	r13, r1
    661e:	09 f0       	breq	.+2      	; 0x6622 <__udivdi3+0x39a>
    6620:	28 f4       	brcc	.+10     	; 0x662c <__udivdi3+0x3a4>
    6622:	20 e0       	ldi	r18, 0x00	; 0
    6624:	30 e0       	ldi	r19, 0x00	; 0
    6626:	40 e0       	ldi	r20, 0x00	; 0
    6628:	50 e0       	ldi	r21, 0x00	; 0
    662a:	17 c0       	rjmp	.+46     	; 0x665a <__udivdi3+0x3d2>
    662c:	28 e0       	ldi	r18, 0x08	; 8
    662e:	30 e0       	ldi	r19, 0x00	; 0
    6630:	40 e0       	ldi	r20, 0x00	; 0
    6632:	50 e0       	ldi	r21, 0x00	; 0
    6634:	12 c0       	rjmp	.+36     	; 0x665a <__udivdi3+0x3d2>
    6636:	20 e0       	ldi	r18, 0x00	; 0
    6638:	a2 16       	cp	r10, r18
    663a:	20 e0       	ldi	r18, 0x00	; 0
    663c:	b2 06       	cpc	r11, r18
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	c2 06       	cpc	r12, r18
    6642:	21 e0       	ldi	r18, 0x01	; 1
    6644:	d2 06       	cpc	r13, r18
    6646:	28 f4       	brcc	.+10     	; 0x6652 <__udivdi3+0x3ca>
    6648:	20 e1       	ldi	r18, 0x10	; 16
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	40 e0       	ldi	r20, 0x00	; 0
    664e:	50 e0       	ldi	r21, 0x00	; 0
    6650:	04 c0       	rjmp	.+8      	; 0x665a <__udivdi3+0x3d2>
    6652:	28 e1       	ldi	r18, 0x18	; 24
    6654:	30 e0       	ldi	r19, 0x00	; 0
    6656:	40 e0       	ldi	r20, 0x00	; 0
    6658:	50 e0       	ldi	r21, 0x00	; 0
    665a:	f0 e2       	ldi	r31, 0x20	; 32
    665c:	ef 2e       	mov	r14, r31
    665e:	f1 2c       	mov	r15, r1
    6660:	01 2d       	mov	r16, r1
    6662:	11 2d       	mov	r17, r1
    6664:	d8 01       	movw	r26, r16
    6666:	c7 01       	movw	r24, r14
    6668:	82 1b       	sub	r24, r18
    666a:	93 0b       	sbc	r25, r19
    666c:	a4 0b       	sbc	r26, r20
    666e:	b5 0b       	sbc	r27, r21
    6670:	35 01       	movw	r6, r10
    6672:	46 01       	movw	r8, r12
    6674:	04 c0       	rjmp	.+8      	; 0x667e <__udivdi3+0x3f6>
    6676:	96 94       	lsr	r9
    6678:	87 94       	ror	r8
    667a:	77 94       	ror	r7
    667c:	67 94       	ror	r6
    667e:	2a 95       	dec	r18
    6680:	d2 f7       	brpl	.-12     	; 0x6676 <__udivdi3+0x3ee>
    6682:	a4 01       	movw	r20, r8
    6684:	93 01       	movw	r18, r6
    6686:	20 57       	subi	r18, 0x70	; 112
    6688:	3d 4f       	sbci	r19, 0xFD	; 253
    668a:	f9 01       	movw	r30, r18
    668c:	20 81       	ld	r18, Z
    668e:	82 1b       	sub	r24, r18
    6690:	91 09       	sbc	r25, r1
    6692:	a1 09       	sbc	r26, r1
    6694:	b1 09       	sbc	r27, r1
    6696:	00 97       	sbiw	r24, 0x00	; 0
    6698:	a1 05       	cpc	r26, r1
    669a:	b1 05       	cpc	r27, r1
    669c:	61 f4       	brne	.+24     	; 0x66b6 <__udivdi3+0x42e>
    669e:	82 01       	movw	r16, r4
    66a0:	71 01       	movw	r14, r2
    66a2:	ea 18       	sub	r14, r10
    66a4:	fb 08       	sbc	r15, r11
    66a6:	0c 09       	sbc	r16, r12
    66a8:	1d 09       	sbc	r17, r13
    66aa:	e1 e0       	ldi	r30, 0x01	; 1
    66ac:	6e 2e       	mov	r6, r30
    66ae:	71 2c       	mov	r7, r1
    66b0:	81 2c       	mov	r8, r1
    66b2:	91 2c       	mov	r9, r1
    66b4:	1a c1       	rjmp	.+564    	; 0x68ea <__udivdi3+0x662>
    66b6:	98 a3       	std	Y+32, r25	; 0x20
    66b8:	8f 8f       	std	Y+31, r24	; 0x1f
    66ba:	0f 8c       	ldd	r0, Y+31	; 0x1f
    66bc:	04 c0       	rjmp	.+8      	; 0x66c6 <__udivdi3+0x43e>
    66be:	aa 0c       	add	r10, r10
    66c0:	bb 1c       	adc	r11, r11
    66c2:	cc 1c       	adc	r12, r12
    66c4:	dd 1c       	adc	r13, r13
    66c6:	0a 94       	dec	r0
    66c8:	d2 f7       	brpl	.-12     	; 0x66be <__udivdi3+0x436>
    66ca:	e8 1a       	sub	r14, r24
    66cc:	f9 0a       	sbc	r15, r25
    66ce:	0a 0b       	sbc	r16, r26
    66d0:	1b 0b       	sbc	r17, r27
    66d2:	d8 01       	movw	r26, r16
    66d4:	c7 01       	movw	r24, r14
    66d6:	82 01       	movw	r16, r4
    66d8:	71 01       	movw	r14, r2
    66da:	08 2e       	mov	r0, r24
    66dc:	04 c0       	rjmp	.+8      	; 0x66e6 <__udivdi3+0x45e>
    66de:	16 95       	lsr	r17
    66e0:	07 95       	ror	r16
    66e2:	f7 94       	ror	r15
    66e4:	e7 94       	ror	r14
    66e6:	0a 94       	dec	r0
    66e8:	d2 f7       	brpl	.-12     	; 0x66de <__udivdi3+0x456>
    66ea:	29 a9       	ldd	r18, Y+49	; 0x31
    66ec:	3a a9       	ldd	r19, Y+50	; 0x32
    66ee:	4b a9       	ldd	r20, Y+51	; 0x33
    66f0:	5c a9       	ldd	r21, Y+52	; 0x34
    66f2:	04 c0       	rjmp	.+8      	; 0x66fc <__udivdi3+0x474>
    66f4:	56 95       	lsr	r21
    66f6:	47 95       	ror	r20
    66f8:	37 95       	ror	r19
    66fa:	27 95       	ror	r18
    66fc:	8a 95       	dec	r24
    66fe:	d2 f7       	brpl	.-12     	; 0x66f4 <__udivdi3+0x46c>
    6700:	d2 01       	movw	r26, r4
    6702:	c1 01       	movw	r24, r2
    6704:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6706:	04 c0       	rjmp	.+8      	; 0x6710 <__udivdi3+0x488>
    6708:	88 0f       	add	r24, r24
    670a:	99 1f       	adc	r25, r25
    670c:	aa 1f       	adc	r26, r26
    670e:	bb 1f       	adc	r27, r27
    6710:	0a 94       	dec	r0
    6712:	d2 f7       	brpl	.-12     	; 0x6708 <__udivdi3+0x480>
    6714:	28 2b       	or	r18, r24
    6716:	39 2b       	or	r19, r25
    6718:	4a 2b       	or	r20, r26
    671a:	5b 2b       	or	r21, r27
    671c:	2d a7       	std	Y+45, r18	; 0x2d
    671e:	3e a7       	std	Y+46, r19	; 0x2e
    6720:	4f a7       	std	Y+47, r20	; 0x2f
    6722:	58 ab       	std	Y+48, r21	; 0x30
    6724:	96 01       	movw	r18, r12
    6726:	44 27       	eor	r20, r20
    6728:	55 27       	eor	r21, r21
    672a:	2d 96       	adiw	r28, 0x0d	; 13
    672c:	2c af       	std	Y+60, r18	; 0x3c
    672e:	3d af       	std	Y+61, r19	; 0x3d
    6730:	4e af       	std	Y+62, r20	; 0x3e
    6732:	5f af       	std	Y+63, r21	; 0x3f
    6734:	2d 97       	sbiw	r28, 0x0d	; 13
    6736:	6f ef       	ldi	r22, 0xFF	; 255
    6738:	26 2e       	mov	r2, r22
    673a:	6f ef       	ldi	r22, 0xFF	; 255
    673c:	36 2e       	mov	r3, r22
    673e:	41 2c       	mov	r4, r1
    6740:	51 2c       	mov	r5, r1
    6742:	2a 20       	and	r2, r10
    6744:	3b 20       	and	r3, r11
    6746:	4c 20       	and	r4, r12
    6748:	5d 20       	and	r5, r13
    674a:	c8 01       	movw	r24, r16
    674c:	b7 01       	movw	r22, r14
    674e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6752:	61 96       	adiw	r28, 0x11	; 17
    6754:	2c af       	std	Y+60, r18	; 0x3c
    6756:	3d af       	std	Y+61, r19	; 0x3d
    6758:	4e af       	std	Y+62, r20	; 0x3e
    675a:	5f af       	std	Y+63, r21	; 0x3f
    675c:	61 97       	sbiw	r28, 0x11	; 17
    675e:	ca 01       	movw	r24, r20
    6760:	b9 01       	movw	r22, r18
    6762:	a2 01       	movw	r20, r4
    6764:	91 01       	movw	r18, r2
    6766:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    676a:	3b 01       	movw	r6, r22
    676c:	4c 01       	movw	r8, r24
    676e:	c8 01       	movw	r24, r16
    6770:	b7 01       	movw	r22, r14
    6772:	2d 96       	adiw	r28, 0x0d	; 13
    6774:	2c ad       	ldd	r18, Y+60	; 0x3c
    6776:	3d ad       	ldd	r19, Y+61	; 0x3d
    6778:	4e ad       	ldd	r20, Y+62	; 0x3e
    677a:	5f ad       	ldd	r21, Y+63	; 0x3f
    677c:	2d 97       	sbiw	r28, 0x0d	; 13
    677e:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6782:	cb 01       	movw	r24, r22
    6784:	77 27       	eor	r23, r23
    6786:	66 27       	eor	r22, r22
    6788:	ed a4       	ldd	r14, Y+45	; 0x2d
    678a:	fe a4       	ldd	r15, Y+46	; 0x2e
    678c:	0f a5       	ldd	r16, Y+47	; 0x2f
    678e:	18 a9       	ldd	r17, Y+48	; 0x30
    6790:	98 01       	movw	r18, r16
    6792:	44 27       	eor	r20, r20
    6794:	55 27       	eor	r21, r21
    6796:	79 01       	movw	r14, r18
    6798:	8a 01       	movw	r16, r20
    679a:	e6 2a       	or	r14, r22
    679c:	f7 2a       	or	r15, r23
    679e:	08 2b       	or	r16, r24
    67a0:	19 2b       	or	r17, r25
    67a2:	e6 14       	cp	r14, r6
    67a4:	f7 04       	cpc	r15, r7
    67a6:	08 05       	cpc	r16, r8
    67a8:	19 05       	cpc	r17, r9
    67aa:	60 f5       	brcc	.+88     	; 0x6804 <__udivdi3+0x57c>
    67ac:	61 96       	adiw	r28, 0x11	; 17
    67ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    67b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    67b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    67b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    67b6:	61 97       	sbiw	r28, 0x11	; 17
    67b8:	21 50       	subi	r18, 0x01	; 1
    67ba:	30 40       	sbci	r19, 0x00	; 0
    67bc:	40 40       	sbci	r20, 0x00	; 0
    67be:	50 40       	sbci	r21, 0x00	; 0
    67c0:	61 96       	adiw	r28, 0x11	; 17
    67c2:	2c af       	std	Y+60, r18	; 0x3c
    67c4:	3d af       	std	Y+61, r19	; 0x3d
    67c6:	4e af       	std	Y+62, r20	; 0x3e
    67c8:	5f af       	std	Y+63, r21	; 0x3f
    67ca:	61 97       	sbiw	r28, 0x11	; 17
    67cc:	ea 0c       	add	r14, r10
    67ce:	fb 1c       	adc	r15, r11
    67d0:	0c 1d       	adc	r16, r12
    67d2:	1d 1d       	adc	r17, r13
    67d4:	ea 14       	cp	r14, r10
    67d6:	fb 04       	cpc	r15, r11
    67d8:	0c 05       	cpc	r16, r12
    67da:	1d 05       	cpc	r17, r13
    67dc:	98 f0       	brcs	.+38     	; 0x6804 <__udivdi3+0x57c>
    67de:	e6 14       	cp	r14, r6
    67e0:	f7 04       	cpc	r15, r7
    67e2:	08 05       	cpc	r16, r8
    67e4:	19 05       	cpc	r17, r9
    67e6:	70 f4       	brcc	.+28     	; 0x6804 <__udivdi3+0x57c>
    67e8:	21 50       	subi	r18, 0x01	; 1
    67ea:	30 40       	sbci	r19, 0x00	; 0
    67ec:	40 40       	sbci	r20, 0x00	; 0
    67ee:	50 40       	sbci	r21, 0x00	; 0
    67f0:	61 96       	adiw	r28, 0x11	; 17
    67f2:	2c af       	std	Y+60, r18	; 0x3c
    67f4:	3d af       	std	Y+61, r19	; 0x3d
    67f6:	4e af       	std	Y+62, r20	; 0x3e
    67f8:	5f af       	std	Y+63, r21	; 0x3f
    67fa:	61 97       	sbiw	r28, 0x11	; 17
    67fc:	ea 0c       	add	r14, r10
    67fe:	fb 1c       	adc	r15, r11
    6800:	0c 1d       	adc	r16, r12
    6802:	1d 1d       	adc	r17, r13
    6804:	e6 18       	sub	r14, r6
    6806:	f7 08       	sbc	r15, r7
    6808:	08 09       	sbc	r16, r8
    680a:	19 09       	sbc	r17, r9
    680c:	c8 01       	movw	r24, r16
    680e:	b7 01       	movw	r22, r14
    6810:	2d 96       	adiw	r28, 0x0d	; 13
    6812:	2c ad       	ldd	r18, Y+60	; 0x3c
    6814:	3d ad       	ldd	r19, Y+61	; 0x3d
    6816:	4e ad       	ldd	r20, Y+62	; 0x3e
    6818:	5f ad       	ldd	r21, Y+63	; 0x3f
    681a:	2d 97       	sbiw	r28, 0x0d	; 13
    681c:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6820:	39 01       	movw	r6, r18
    6822:	4a 01       	movw	r8, r20
    6824:	ca 01       	movw	r24, r20
    6826:	b9 01       	movw	r22, r18
    6828:	a2 01       	movw	r20, r4
    682a:	91 01       	movw	r18, r2
    682c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6830:	1b 01       	movw	r2, r22
    6832:	2c 01       	movw	r4, r24
    6834:	c8 01       	movw	r24, r16
    6836:	b7 01       	movw	r22, r14
    6838:	2d 96       	adiw	r28, 0x0d	; 13
    683a:	2c ad       	ldd	r18, Y+60	; 0x3c
    683c:	3d ad       	ldd	r19, Y+61	; 0x3d
    683e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6840:	5f ad       	ldd	r21, Y+63	; 0x3f
    6842:	2d 97       	sbiw	r28, 0x0d	; 13
    6844:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6848:	cb 01       	movw	r24, r22
    684a:	77 27       	eor	r23, r23
    684c:	66 27       	eor	r22, r22
    684e:	2d a5       	ldd	r18, Y+45	; 0x2d
    6850:	3e a5       	ldd	r19, Y+46	; 0x2e
    6852:	4f a5       	ldd	r20, Y+47	; 0x2f
    6854:	58 a9       	ldd	r21, Y+48	; 0x30
    6856:	40 70       	andi	r20, 0x00	; 0
    6858:	50 70       	andi	r21, 0x00	; 0
    685a:	7b 01       	movw	r14, r22
    685c:	8c 01       	movw	r16, r24
    685e:	e2 2a       	or	r14, r18
    6860:	f3 2a       	or	r15, r19
    6862:	04 2b       	or	r16, r20
    6864:	15 2b       	or	r17, r21
    6866:	e2 14       	cp	r14, r2
    6868:	f3 04       	cpc	r15, r3
    686a:	04 05       	cpc	r16, r4
    686c:	15 05       	cpc	r17, r5
    686e:	e0 f4       	brcc	.+56     	; 0x68a8 <__udivdi3+0x620>
    6870:	08 94       	sec
    6872:	61 08       	sbc	r6, r1
    6874:	71 08       	sbc	r7, r1
    6876:	81 08       	sbc	r8, r1
    6878:	91 08       	sbc	r9, r1
    687a:	ea 0c       	add	r14, r10
    687c:	fb 1c       	adc	r15, r11
    687e:	0c 1d       	adc	r16, r12
    6880:	1d 1d       	adc	r17, r13
    6882:	ea 14       	cp	r14, r10
    6884:	fb 04       	cpc	r15, r11
    6886:	0c 05       	cpc	r16, r12
    6888:	1d 05       	cpc	r17, r13
    688a:	70 f0       	brcs	.+28     	; 0x68a8 <__udivdi3+0x620>
    688c:	e2 14       	cp	r14, r2
    688e:	f3 04       	cpc	r15, r3
    6890:	04 05       	cpc	r16, r4
    6892:	15 05       	cpc	r17, r5
    6894:	48 f4       	brcc	.+18     	; 0x68a8 <__udivdi3+0x620>
    6896:	08 94       	sec
    6898:	61 08       	sbc	r6, r1
    689a:	71 08       	sbc	r7, r1
    689c:	81 08       	sbc	r8, r1
    689e:	91 08       	sbc	r9, r1
    68a0:	ea 0c       	add	r14, r10
    68a2:	fb 1c       	adc	r15, r11
    68a4:	0c 1d       	adc	r16, r12
    68a6:	1d 1d       	adc	r17, r13
    68a8:	89 a9       	ldd	r24, Y+49	; 0x31
    68aa:	9a a9       	ldd	r25, Y+50	; 0x32
    68ac:	ab a9       	ldd	r26, Y+51	; 0x33
    68ae:	bc a9       	ldd	r27, Y+52	; 0x34
    68b0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    68b2:	04 c0       	rjmp	.+8      	; 0x68bc <__udivdi3+0x634>
    68b4:	88 0f       	add	r24, r24
    68b6:	99 1f       	adc	r25, r25
    68b8:	aa 1f       	adc	r26, r26
    68ba:	bb 1f       	adc	r27, r27
    68bc:	0a 94       	dec	r0
    68be:	d2 f7       	brpl	.-12     	; 0x68b4 <__udivdi3+0x62c>
    68c0:	89 ab       	std	Y+49, r24	; 0x31
    68c2:	9a ab       	std	Y+50, r25	; 0x32
    68c4:	ab ab       	std	Y+51, r26	; 0x33
    68c6:	bc ab       	std	Y+52, r27	; 0x34
    68c8:	e2 18       	sub	r14, r2
    68ca:	f3 08       	sbc	r15, r3
    68cc:	04 09       	sbc	r16, r4
    68ce:	15 09       	sbc	r17, r5
    68d0:	61 96       	adiw	r28, 0x11	; 17
    68d2:	2c ad       	ldd	r18, Y+60	; 0x3c
    68d4:	3d ad       	ldd	r19, Y+61	; 0x3d
    68d6:	4e ad       	ldd	r20, Y+62	; 0x3e
    68d8:	5f ad       	ldd	r21, Y+63	; 0x3f
    68da:	61 97       	sbiw	r28, 0x11	; 17
    68dc:	d9 01       	movw	r26, r18
    68de:	99 27       	eor	r25, r25
    68e0:	88 27       	eor	r24, r24
    68e2:	68 2a       	or	r6, r24
    68e4:	79 2a       	or	r7, r25
    68e6:	8a 2a       	or	r8, r26
    68e8:	9b 2a       	or	r9, r27
    68ea:	69 ae       	std	Y+57, r6	; 0x39
    68ec:	7a ae       	std	Y+58, r7	; 0x3a
    68ee:	8b ae       	std	Y+59, r8	; 0x3b
    68f0:	9c ae       	std	Y+60, r9	; 0x3c
    68f2:	c6 01       	movw	r24, r12
    68f4:	aa 27       	eor	r26, r26
    68f6:	bb 27       	eor	r27, r27
    68f8:	65 96       	adiw	r28, 0x15	; 21
    68fa:	8c af       	std	Y+60, r24	; 0x3c
    68fc:	9d af       	std	Y+61, r25	; 0x3d
    68fe:	ae af       	std	Y+62, r26	; 0x3e
    6900:	bf af       	std	Y+63, r27	; 0x3f
    6902:	65 97       	sbiw	r28, 0x15	; 21
    6904:	a6 01       	movw	r20, r12
    6906:	95 01       	movw	r18, r10
    6908:	40 70       	andi	r20, 0x00	; 0
    690a:	50 70       	andi	r21, 0x00	; 0
    690c:	69 96       	adiw	r28, 0x19	; 25
    690e:	2c af       	std	Y+60, r18	; 0x3c
    6910:	3d af       	std	Y+61, r19	; 0x3d
    6912:	4e af       	std	Y+62, r20	; 0x3e
    6914:	5f af       	std	Y+63, r21	; 0x3f
    6916:	69 97       	sbiw	r28, 0x19	; 25
    6918:	c8 01       	movw	r24, r16
    691a:	b7 01       	movw	r22, r14
    691c:	65 96       	adiw	r28, 0x15	; 21
    691e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6920:	3d ad       	ldd	r19, Y+61	; 0x3d
    6922:	4e ad       	ldd	r20, Y+62	; 0x3e
    6924:	5f ad       	ldd	r21, Y+63	; 0x3f
    6926:	65 97       	sbiw	r28, 0x15	; 21
    6928:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    692c:	19 01       	movw	r2, r18
    692e:	2a 01       	movw	r4, r20
    6930:	ca 01       	movw	r24, r20
    6932:	b9 01       	movw	r22, r18
    6934:	69 96       	adiw	r28, 0x19	; 25
    6936:	2c ad       	ldd	r18, Y+60	; 0x3c
    6938:	3d ad       	ldd	r19, Y+61	; 0x3d
    693a:	4e ad       	ldd	r20, Y+62	; 0x3e
    693c:	5f ad       	ldd	r21, Y+63	; 0x3f
    693e:	69 97       	sbiw	r28, 0x19	; 25
    6940:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6944:	3b 01       	movw	r6, r22
    6946:	4c 01       	movw	r8, r24
    6948:	c8 01       	movw	r24, r16
    694a:	b7 01       	movw	r22, r14
    694c:	65 96       	adiw	r28, 0x15	; 21
    694e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6950:	3d ad       	ldd	r19, Y+61	; 0x3d
    6952:	4e ad       	ldd	r20, Y+62	; 0x3e
    6954:	5f ad       	ldd	r21, Y+63	; 0x3f
    6956:	65 97       	sbiw	r28, 0x15	; 21
    6958:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    695c:	cb 01       	movw	r24, r22
    695e:	77 27       	eor	r23, r23
    6960:	66 27       	eor	r22, r22
    6962:	e9 a8       	ldd	r14, Y+49	; 0x31
    6964:	fa a8       	ldd	r15, Y+50	; 0x32
    6966:	0b a9       	ldd	r16, Y+51	; 0x33
    6968:	1c a9       	ldd	r17, Y+52	; 0x34
    696a:	98 01       	movw	r18, r16
    696c:	44 27       	eor	r20, r20
    696e:	55 27       	eor	r21, r21
    6970:	7b 01       	movw	r14, r22
    6972:	8c 01       	movw	r16, r24
    6974:	e2 2a       	or	r14, r18
    6976:	f3 2a       	or	r15, r19
    6978:	04 2b       	or	r16, r20
    697a:	15 2b       	or	r17, r21
    697c:	e6 14       	cp	r14, r6
    697e:	f7 04       	cpc	r15, r7
    6980:	08 05       	cpc	r16, r8
    6982:	19 05       	cpc	r17, r9
    6984:	e0 f4       	brcc	.+56     	; 0x69be <__udivdi3+0x736>
    6986:	08 94       	sec
    6988:	21 08       	sbc	r2, r1
    698a:	31 08       	sbc	r3, r1
    698c:	41 08       	sbc	r4, r1
    698e:	51 08       	sbc	r5, r1
    6990:	ea 0c       	add	r14, r10
    6992:	fb 1c       	adc	r15, r11
    6994:	0c 1d       	adc	r16, r12
    6996:	1d 1d       	adc	r17, r13
    6998:	ea 14       	cp	r14, r10
    699a:	fb 04       	cpc	r15, r11
    699c:	0c 05       	cpc	r16, r12
    699e:	1d 05       	cpc	r17, r13
    69a0:	70 f0       	brcs	.+28     	; 0x69be <__udivdi3+0x736>
    69a2:	e6 14       	cp	r14, r6
    69a4:	f7 04       	cpc	r15, r7
    69a6:	08 05       	cpc	r16, r8
    69a8:	19 05       	cpc	r17, r9
    69aa:	48 f4       	brcc	.+18     	; 0x69be <__udivdi3+0x736>
    69ac:	08 94       	sec
    69ae:	21 08       	sbc	r2, r1
    69b0:	31 08       	sbc	r3, r1
    69b2:	41 08       	sbc	r4, r1
    69b4:	51 08       	sbc	r5, r1
    69b6:	ea 0c       	add	r14, r10
    69b8:	fb 1c       	adc	r15, r11
    69ba:	0c 1d       	adc	r16, r12
    69bc:	1d 1d       	adc	r17, r13
    69be:	e6 18       	sub	r14, r6
    69c0:	f7 08       	sbc	r15, r7
    69c2:	08 09       	sbc	r16, r8
    69c4:	19 09       	sbc	r17, r9
    69c6:	c8 01       	movw	r24, r16
    69c8:	b7 01       	movw	r22, r14
    69ca:	65 96       	adiw	r28, 0x15	; 21
    69cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    69ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    69d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    69d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    69d4:	65 97       	sbiw	r28, 0x15	; 21
    69d6:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    69da:	39 01       	movw	r6, r18
    69dc:	4a 01       	movw	r8, r20
    69de:	ca 01       	movw	r24, r20
    69e0:	b9 01       	movw	r22, r18
    69e2:	69 96       	adiw	r28, 0x19	; 25
    69e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    69e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    69e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    69ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    69ec:	69 97       	sbiw	r28, 0x19	; 25
    69ee:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    69f2:	69 8f       	std	Y+25, r22	; 0x19
    69f4:	7a 8f       	std	Y+26, r23	; 0x1a
    69f6:	8b 8f       	std	Y+27, r24	; 0x1b
    69f8:	9c 8f       	std	Y+28, r25	; 0x1c
    69fa:	c8 01       	movw	r24, r16
    69fc:	b7 01       	movw	r22, r14
    69fe:	65 96       	adiw	r28, 0x15	; 21
    6a00:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a02:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a04:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a06:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a08:	65 97       	sbiw	r28, 0x15	; 21
    6a0a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6a0e:	cb 01       	movw	r24, r22
    6a10:	77 27       	eor	r23, r23
    6a12:	66 27       	eor	r22, r22
    6a14:	29 a9       	ldd	r18, Y+49	; 0x31
    6a16:	3a a9       	ldd	r19, Y+50	; 0x32
    6a18:	4b a9       	ldd	r20, Y+51	; 0x33
    6a1a:	5c a9       	ldd	r21, Y+52	; 0x34
    6a1c:	40 70       	andi	r20, 0x00	; 0
    6a1e:	50 70       	andi	r21, 0x00	; 0
    6a20:	26 2b       	or	r18, r22
    6a22:	37 2b       	or	r19, r23
    6a24:	48 2b       	or	r20, r24
    6a26:	59 2b       	or	r21, r25
    6a28:	89 8d       	ldd	r24, Y+25	; 0x19
    6a2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6a2c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6a2e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6a30:	28 17       	cp	r18, r24
    6a32:	39 07       	cpc	r19, r25
    6a34:	4a 07       	cpc	r20, r26
    6a36:	5b 07       	cpc	r21, r27
    6a38:	c0 f4       	brcc	.+48     	; 0x6a6a <__udivdi3+0x7e2>
    6a3a:	08 94       	sec
    6a3c:	61 08       	sbc	r6, r1
    6a3e:	71 08       	sbc	r7, r1
    6a40:	81 08       	sbc	r8, r1
    6a42:	91 08       	sbc	r9, r1
    6a44:	2a 0d       	add	r18, r10
    6a46:	3b 1d       	adc	r19, r11
    6a48:	4c 1d       	adc	r20, r12
    6a4a:	5d 1d       	adc	r21, r13
    6a4c:	2a 15       	cp	r18, r10
    6a4e:	3b 05       	cpc	r19, r11
    6a50:	4c 05       	cpc	r20, r12
    6a52:	5d 05       	cpc	r21, r13
    6a54:	50 f0       	brcs	.+20     	; 0x6a6a <__udivdi3+0x7e2>
    6a56:	28 17       	cp	r18, r24
    6a58:	39 07       	cpc	r19, r25
    6a5a:	4a 07       	cpc	r20, r26
    6a5c:	5b 07       	cpc	r21, r27
    6a5e:	28 f4       	brcc	.+10     	; 0x6a6a <__udivdi3+0x7e2>
    6a60:	08 94       	sec
    6a62:	61 08       	sbc	r6, r1
    6a64:	71 08       	sbc	r7, r1
    6a66:	81 08       	sbc	r8, r1
    6a68:	91 08       	sbc	r9, r1
    6a6a:	d1 01       	movw	r26, r2
    6a6c:	99 27       	eor	r25, r25
    6a6e:	88 27       	eor	r24, r24
    6a70:	68 2a       	or	r6, r24
    6a72:	79 2a       	or	r7, r25
    6a74:	8a 2a       	or	r8, r26
    6a76:	9b 2a       	or	r9, r27
    6a78:	6d aa       	std	Y+53, r6	; 0x35
    6a7a:	7e aa       	std	Y+54, r7	; 0x36
    6a7c:	8f aa       	std	Y+55, r8	; 0x37
    6a7e:	98 ae       	std	Y+56, r9	; 0x38
    6a80:	65 c2       	rjmp	.+1226   	; 0x6f4c <__udivdi3+0xcc4>
    6a82:	26 14       	cp	r2, r6
    6a84:	37 04       	cpc	r3, r7
    6a86:	48 04       	cpc	r4, r8
    6a88:	59 04       	cpc	r5, r9
    6a8a:	08 f4       	brcc	.+2      	; 0x6a8e <__udivdi3+0x806>
    6a8c:	4e c2       	rjmp	.+1180   	; 0x6f2a <__udivdi3+0xca2>
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	69 16       	cp	r6, r25
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	79 06       	cpc	r7, r25
    6a96:	91 e0       	ldi	r25, 0x01	; 1
    6a98:	89 06       	cpc	r8, r25
    6a9a:	90 e0       	ldi	r25, 0x00	; 0
    6a9c:	99 06       	cpc	r9, r25
    6a9e:	88 f4       	brcc	.+34     	; 0x6ac2 <__udivdi3+0x83a>
    6aa0:	af ef       	ldi	r26, 0xFF	; 255
    6aa2:	6a 16       	cp	r6, r26
    6aa4:	71 04       	cpc	r7, r1
    6aa6:	81 04       	cpc	r8, r1
    6aa8:	91 04       	cpc	r9, r1
    6aaa:	09 f0       	breq	.+2      	; 0x6aae <__udivdi3+0x826>
    6aac:	28 f4       	brcc	.+10     	; 0x6ab8 <__udivdi3+0x830>
    6aae:	20 e0       	ldi	r18, 0x00	; 0
    6ab0:	30 e0       	ldi	r19, 0x00	; 0
    6ab2:	40 e0       	ldi	r20, 0x00	; 0
    6ab4:	50 e0       	ldi	r21, 0x00	; 0
    6ab6:	17 c0       	rjmp	.+46     	; 0x6ae6 <__udivdi3+0x85e>
    6ab8:	28 e0       	ldi	r18, 0x08	; 8
    6aba:	30 e0       	ldi	r19, 0x00	; 0
    6abc:	40 e0       	ldi	r20, 0x00	; 0
    6abe:	50 e0       	ldi	r21, 0x00	; 0
    6ac0:	12 c0       	rjmp	.+36     	; 0x6ae6 <__udivdi3+0x85e>
    6ac2:	b0 e0       	ldi	r27, 0x00	; 0
    6ac4:	6b 16       	cp	r6, r27
    6ac6:	b0 e0       	ldi	r27, 0x00	; 0
    6ac8:	7b 06       	cpc	r7, r27
    6aca:	b0 e0       	ldi	r27, 0x00	; 0
    6acc:	8b 06       	cpc	r8, r27
    6ace:	b1 e0       	ldi	r27, 0x01	; 1
    6ad0:	9b 06       	cpc	r9, r27
    6ad2:	28 f4       	brcc	.+10     	; 0x6ade <__udivdi3+0x856>
    6ad4:	20 e1       	ldi	r18, 0x10	; 16
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	40 e0       	ldi	r20, 0x00	; 0
    6ada:	50 e0       	ldi	r21, 0x00	; 0
    6adc:	04 c0       	rjmp	.+8      	; 0x6ae6 <__udivdi3+0x85e>
    6ade:	28 e1       	ldi	r18, 0x18	; 24
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	40 e0       	ldi	r20, 0x00	; 0
    6ae4:	50 e0       	ldi	r21, 0x00	; 0
    6ae6:	e0 e2       	ldi	r30, 0x20	; 32
    6ae8:	ee 2e       	mov	r14, r30
    6aea:	f1 2c       	mov	r15, r1
    6aec:	01 2d       	mov	r16, r1
    6aee:	11 2d       	mov	r17, r1
    6af0:	d8 01       	movw	r26, r16
    6af2:	c7 01       	movw	r24, r14
    6af4:	82 1b       	sub	r24, r18
    6af6:	93 0b       	sbc	r25, r19
    6af8:	a4 0b       	sbc	r26, r20
    6afa:	b5 0b       	sbc	r27, r21
    6afc:	ad 96       	adiw	r28, 0x2d	; 45
    6afe:	8c af       	std	Y+60, r24	; 0x3c
    6b00:	9d af       	std	Y+61, r25	; 0x3d
    6b02:	ae af       	std	Y+62, r26	; 0x3e
    6b04:	bf af       	std	Y+63, r27	; 0x3f
    6b06:	ad 97       	sbiw	r28, 0x2d	; 45
    6b08:	d4 01       	movw	r26, r8
    6b0a:	c3 01       	movw	r24, r6
    6b0c:	04 c0       	rjmp	.+8      	; 0x6b16 <__udivdi3+0x88e>
    6b0e:	b6 95       	lsr	r27
    6b10:	a7 95       	ror	r26
    6b12:	97 95       	ror	r25
    6b14:	87 95       	ror	r24
    6b16:	2a 95       	dec	r18
    6b18:	d2 f7       	brpl	.-12     	; 0x6b0e <__udivdi3+0x886>
    6b1a:	9c 01       	movw	r18, r24
    6b1c:	ad 01       	movw	r20, r26
    6b1e:	20 57       	subi	r18, 0x70	; 112
    6b20:	3d 4f       	sbci	r19, 0xFD	; 253
    6b22:	d9 01       	movw	r26, r18
    6b24:	2c 91       	ld	r18, X
    6b26:	ad 96       	adiw	r28, 0x2d	; 45
    6b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    6b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    6b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    6b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    6b30:	ad 97       	sbiw	r28, 0x2d	; 45
    6b32:	82 1b       	sub	r24, r18
    6b34:	91 09       	sbc	r25, r1
    6b36:	a1 09       	sbc	r26, r1
    6b38:	b1 09       	sbc	r27, r1
    6b3a:	00 97       	sbiw	r24, 0x00	; 0
    6b3c:	a1 05       	cpc	r26, r1
    6b3e:	b1 05       	cpc	r27, r1
    6b40:	89 f4       	brne	.+34     	; 0x6b64 <__udivdi3+0x8dc>
    6b42:	62 14       	cp	r6, r2
    6b44:	73 04       	cpc	r7, r3
    6b46:	84 04       	cpc	r8, r4
    6b48:	95 04       	cpc	r9, r5
    6b4a:	08 f4       	brcc	.+2      	; 0x6b4e <__udivdi3+0x8c6>
    6b4c:	f3 c1       	rjmp	.+998    	; 0x6f34 <__udivdi3+0xcac>
    6b4e:	69 a8       	ldd	r6, Y+49	; 0x31
    6b50:	7a a8       	ldd	r7, Y+50	; 0x32
    6b52:	8b a8       	ldd	r8, Y+51	; 0x33
    6b54:	9c a8       	ldd	r9, Y+52	; 0x34
    6b56:	6a 14       	cp	r6, r10
    6b58:	7b 04       	cpc	r7, r11
    6b5a:	8c 04       	cpc	r8, r12
    6b5c:	9d 04       	cpc	r9, r13
    6b5e:	08 f0       	brcs	.+2      	; 0x6b62 <__udivdi3+0x8da>
    6b60:	e9 c1       	rjmp	.+978    	; 0x6f34 <__udivdi3+0xcac>
    6b62:	e3 c1       	rjmp	.+966    	; 0x6f2a <__udivdi3+0xca2>
    6b64:	9e 8f       	std	Y+30, r25	; 0x1e
    6b66:	8d 8f       	std	Y+29, r24	; 0x1d
    6b68:	e8 1a       	sub	r14, r24
    6b6a:	f9 0a       	sbc	r15, r25
    6b6c:	0a 0b       	sbc	r16, r26
    6b6e:	1b 0b       	sbc	r17, r27
    6b70:	a8 01       	movw	r20, r16
    6b72:	97 01       	movw	r18, r14
    6b74:	86 01       	movw	r16, r12
    6b76:	75 01       	movw	r14, r10
    6b78:	02 2e       	mov	r0, r18
    6b7a:	04 c0       	rjmp	.+8      	; 0x6b84 <__udivdi3+0x8fc>
    6b7c:	16 95       	lsr	r17
    6b7e:	07 95       	ror	r16
    6b80:	f7 94       	ror	r15
    6b82:	e7 94       	ror	r14
    6b84:	0a 94       	dec	r0
    6b86:	d2 f7       	brpl	.-12     	; 0x6b7c <__udivdi3+0x8f4>
    6b88:	d4 01       	movw	r26, r8
    6b8a:	c3 01       	movw	r24, r6
    6b8c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6b8e:	04 c0       	rjmp	.+8      	; 0x6b98 <__udivdi3+0x910>
    6b90:	88 0f       	add	r24, r24
    6b92:	99 1f       	adc	r25, r25
    6b94:	aa 1f       	adc	r26, r26
    6b96:	bb 1f       	adc	r27, r27
    6b98:	0a 94       	dec	r0
    6b9a:	d2 f7       	brpl	.-12     	; 0x6b90 <__udivdi3+0x908>
    6b9c:	37 01       	movw	r6, r14
    6b9e:	48 01       	movw	r8, r16
    6ba0:	68 2a       	or	r6, r24
    6ba2:	79 2a       	or	r7, r25
    6ba4:	8a 2a       	or	r8, r26
    6ba6:	9b 2a       	or	r9, r27
    6ba8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6baa:	04 c0       	rjmp	.+8      	; 0x6bb4 <__udivdi3+0x92c>
    6bac:	aa 0c       	add	r10, r10
    6bae:	bb 1c       	adc	r11, r11
    6bb0:	cc 1c       	adc	r12, r12
    6bb2:	dd 1c       	adc	r13, r13
    6bb4:	0a 94       	dec	r0
    6bb6:	d2 f7       	brpl	.-12     	; 0x6bac <__udivdi3+0x924>
    6bb8:	a9 a2       	std	Y+33, r10	; 0x21
    6bba:	ba a2       	std	Y+34, r11	; 0x22
    6bbc:	cb a2       	std	Y+35, r12	; 0x23
    6bbe:	dc a2       	std	Y+36, r13	; 0x24
    6bc0:	82 01       	movw	r16, r4
    6bc2:	71 01       	movw	r14, r2
    6bc4:	02 2e       	mov	r0, r18
    6bc6:	04 c0       	rjmp	.+8      	; 0x6bd0 <__udivdi3+0x948>
    6bc8:	16 95       	lsr	r17
    6bca:	07 95       	ror	r16
    6bcc:	f7 94       	ror	r15
    6bce:	e7 94       	ror	r14
    6bd0:	0a 94       	dec	r0
    6bd2:	d2 f7       	brpl	.-12     	; 0x6bc8 <__udivdi3+0x940>
    6bd4:	89 a9       	ldd	r24, Y+49	; 0x31
    6bd6:	9a a9       	ldd	r25, Y+50	; 0x32
    6bd8:	ab a9       	ldd	r26, Y+51	; 0x33
    6bda:	bc a9       	ldd	r27, Y+52	; 0x34
    6bdc:	04 c0       	rjmp	.+8      	; 0x6be6 <__udivdi3+0x95e>
    6bde:	b6 95       	lsr	r27
    6be0:	a7 95       	ror	r26
    6be2:	97 95       	ror	r25
    6be4:	87 95       	ror	r24
    6be6:	2a 95       	dec	r18
    6be8:	d2 f7       	brpl	.-12     	; 0x6bde <__udivdi3+0x956>
    6bea:	9c 01       	movw	r18, r24
    6bec:	ad 01       	movw	r20, r26
    6bee:	d2 01       	movw	r26, r4
    6bf0:	c1 01       	movw	r24, r2
    6bf2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6bf4:	04 c0       	rjmp	.+8      	; 0x6bfe <__udivdi3+0x976>
    6bf6:	88 0f       	add	r24, r24
    6bf8:	99 1f       	adc	r25, r25
    6bfa:	aa 1f       	adc	r26, r26
    6bfc:	bb 1f       	adc	r27, r27
    6bfe:	0a 94       	dec	r0
    6c00:	d2 f7       	brpl	.-12     	; 0x6bf6 <__udivdi3+0x96e>
    6c02:	28 2b       	or	r18, r24
    6c04:	39 2b       	or	r19, r25
    6c06:	4a 2b       	or	r20, r26
    6c08:	5b 2b       	or	r21, r27
    6c0a:	29 a7       	std	Y+41, r18	; 0x29
    6c0c:	3a a7       	std	Y+42, r19	; 0x2a
    6c0e:	4b a7       	std	Y+43, r20	; 0x2b
    6c10:	5c a7       	std	Y+44, r21	; 0x2c
    6c12:	94 01       	movw	r18, r8
    6c14:	44 27       	eor	r20, r20
    6c16:	55 27       	eor	r21, r21
    6c18:	6d 96       	adiw	r28, 0x1d	; 29
    6c1a:	2c af       	std	Y+60, r18	; 0x3c
    6c1c:	3d af       	std	Y+61, r19	; 0x3d
    6c1e:	4e af       	std	Y+62, r20	; 0x3e
    6c20:	5f af       	std	Y+63, r21	; 0x3f
    6c22:	6d 97       	sbiw	r28, 0x1d	; 29
    6c24:	6f ef       	ldi	r22, 0xFF	; 255
    6c26:	26 2e       	mov	r2, r22
    6c28:	6f ef       	ldi	r22, 0xFF	; 255
    6c2a:	36 2e       	mov	r3, r22
    6c2c:	41 2c       	mov	r4, r1
    6c2e:	51 2c       	mov	r5, r1
    6c30:	26 20       	and	r2, r6
    6c32:	37 20       	and	r3, r7
    6c34:	48 20       	and	r4, r8
    6c36:	59 20       	and	r5, r9
    6c38:	c8 01       	movw	r24, r16
    6c3a:	b7 01       	movw	r22, r14
    6c3c:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6c40:	a1 96       	adiw	r28, 0x21	; 33
    6c42:	2c af       	std	Y+60, r18	; 0x3c
    6c44:	3d af       	std	Y+61, r19	; 0x3d
    6c46:	4e af       	std	Y+62, r20	; 0x3e
    6c48:	5f af       	std	Y+63, r21	; 0x3f
    6c4a:	a1 97       	sbiw	r28, 0x21	; 33
    6c4c:	ca 01       	movw	r24, r20
    6c4e:	b9 01       	movw	r22, r18
    6c50:	a2 01       	movw	r20, r4
    6c52:	91 01       	movw	r18, r2
    6c54:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6c58:	5b 01       	movw	r10, r22
    6c5a:	6c 01       	movw	r12, r24
    6c5c:	c8 01       	movw	r24, r16
    6c5e:	b7 01       	movw	r22, r14
    6c60:	6d 96       	adiw	r28, 0x1d	; 29
    6c62:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c64:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c66:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c68:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c6a:	6d 97       	sbiw	r28, 0x1d	; 29
    6c6c:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6c70:	cb 01       	movw	r24, r22
    6c72:	77 27       	eor	r23, r23
    6c74:	66 27       	eor	r22, r22
    6c76:	e9 a4       	ldd	r14, Y+41	; 0x29
    6c78:	fa a4       	ldd	r15, Y+42	; 0x2a
    6c7a:	0b a5       	ldd	r16, Y+43	; 0x2b
    6c7c:	1c a5       	ldd	r17, Y+44	; 0x2c
    6c7e:	98 01       	movw	r18, r16
    6c80:	44 27       	eor	r20, r20
    6c82:	55 27       	eor	r21, r21
    6c84:	7b 01       	movw	r14, r22
    6c86:	8c 01       	movw	r16, r24
    6c88:	e2 2a       	or	r14, r18
    6c8a:	f3 2a       	or	r15, r19
    6c8c:	04 2b       	or	r16, r20
    6c8e:	15 2b       	or	r17, r21
    6c90:	ea 14       	cp	r14, r10
    6c92:	fb 04       	cpc	r15, r11
    6c94:	0c 05       	cpc	r16, r12
    6c96:	1d 05       	cpc	r17, r13
    6c98:	60 f5       	brcc	.+88     	; 0x6cf2 <__udivdi3+0xa6a>
    6c9a:	a1 96       	adiw	r28, 0x21	; 33
    6c9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6ca0:	4e ad       	ldd	r20, Y+62	; 0x3e
    6ca2:	5f ad       	ldd	r21, Y+63	; 0x3f
    6ca4:	a1 97       	sbiw	r28, 0x21	; 33
    6ca6:	21 50       	subi	r18, 0x01	; 1
    6ca8:	30 40       	sbci	r19, 0x00	; 0
    6caa:	40 40       	sbci	r20, 0x00	; 0
    6cac:	50 40       	sbci	r21, 0x00	; 0
    6cae:	a1 96       	adiw	r28, 0x21	; 33
    6cb0:	2c af       	std	Y+60, r18	; 0x3c
    6cb2:	3d af       	std	Y+61, r19	; 0x3d
    6cb4:	4e af       	std	Y+62, r20	; 0x3e
    6cb6:	5f af       	std	Y+63, r21	; 0x3f
    6cb8:	a1 97       	sbiw	r28, 0x21	; 33
    6cba:	e6 0c       	add	r14, r6
    6cbc:	f7 1c       	adc	r15, r7
    6cbe:	08 1d       	adc	r16, r8
    6cc0:	19 1d       	adc	r17, r9
    6cc2:	e6 14       	cp	r14, r6
    6cc4:	f7 04       	cpc	r15, r7
    6cc6:	08 05       	cpc	r16, r8
    6cc8:	19 05       	cpc	r17, r9
    6cca:	98 f0       	brcs	.+38     	; 0x6cf2 <__udivdi3+0xa6a>
    6ccc:	ea 14       	cp	r14, r10
    6cce:	fb 04       	cpc	r15, r11
    6cd0:	0c 05       	cpc	r16, r12
    6cd2:	1d 05       	cpc	r17, r13
    6cd4:	70 f4       	brcc	.+28     	; 0x6cf2 <__udivdi3+0xa6a>
    6cd6:	21 50       	subi	r18, 0x01	; 1
    6cd8:	30 40       	sbci	r19, 0x00	; 0
    6cda:	40 40       	sbci	r20, 0x00	; 0
    6cdc:	50 40       	sbci	r21, 0x00	; 0
    6cde:	a1 96       	adiw	r28, 0x21	; 33
    6ce0:	2c af       	std	Y+60, r18	; 0x3c
    6ce2:	3d af       	std	Y+61, r19	; 0x3d
    6ce4:	4e af       	std	Y+62, r20	; 0x3e
    6ce6:	5f af       	std	Y+63, r21	; 0x3f
    6ce8:	a1 97       	sbiw	r28, 0x21	; 33
    6cea:	e6 0c       	add	r14, r6
    6cec:	f7 1c       	adc	r15, r7
    6cee:	08 1d       	adc	r16, r8
    6cf0:	19 1d       	adc	r17, r9
    6cf2:	ea 18       	sub	r14, r10
    6cf4:	fb 08       	sbc	r15, r11
    6cf6:	0c 09       	sbc	r16, r12
    6cf8:	1d 09       	sbc	r17, r13
    6cfa:	c8 01       	movw	r24, r16
    6cfc:	b7 01       	movw	r22, r14
    6cfe:	6d 96       	adiw	r28, 0x1d	; 29
    6d00:	2c ad       	ldd	r18, Y+60	; 0x3c
    6d02:	3d ad       	ldd	r19, Y+61	; 0x3d
    6d04:	4e ad       	ldd	r20, Y+62	; 0x3e
    6d06:	5f ad       	ldd	r21, Y+63	; 0x3f
    6d08:	6d 97       	sbiw	r28, 0x1d	; 29
    6d0a:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6d0e:	59 01       	movw	r10, r18
    6d10:	6a 01       	movw	r12, r20
    6d12:	ca 01       	movw	r24, r20
    6d14:	b9 01       	movw	r22, r18
    6d16:	a2 01       	movw	r20, r4
    6d18:	91 01       	movw	r18, r2
    6d1a:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6d1e:	1b 01       	movw	r2, r22
    6d20:	2c 01       	movw	r4, r24
    6d22:	c8 01       	movw	r24, r16
    6d24:	b7 01       	movw	r22, r14
    6d26:	6d 96       	adiw	r28, 0x1d	; 29
    6d28:	2c ad       	ldd	r18, Y+60	; 0x3c
    6d2a:	3d ad       	ldd	r19, Y+61	; 0x3d
    6d2c:	4e ad       	ldd	r20, Y+62	; 0x3e
    6d2e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6d30:	6d 97       	sbiw	r28, 0x1d	; 29
    6d32:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <__udivmodsi4>
    6d36:	cb 01       	movw	r24, r22
    6d38:	77 27       	eor	r23, r23
    6d3a:	66 27       	eor	r22, r22
    6d3c:	29 a5       	ldd	r18, Y+41	; 0x29
    6d3e:	3a a5       	ldd	r19, Y+42	; 0x2a
    6d40:	4b a5       	ldd	r20, Y+43	; 0x2b
    6d42:	5c a5       	ldd	r21, Y+44	; 0x2c
    6d44:	40 70       	andi	r20, 0x00	; 0
    6d46:	50 70       	andi	r21, 0x00	; 0
    6d48:	7b 01       	movw	r14, r22
    6d4a:	8c 01       	movw	r16, r24
    6d4c:	e2 2a       	or	r14, r18
    6d4e:	f3 2a       	or	r15, r19
    6d50:	04 2b       	or	r16, r20
    6d52:	15 2b       	or	r17, r21
    6d54:	e2 14       	cp	r14, r2
    6d56:	f3 04       	cpc	r15, r3
    6d58:	04 05       	cpc	r16, r4
    6d5a:	15 05       	cpc	r17, r5
    6d5c:	e0 f4       	brcc	.+56     	; 0x6d96 <__udivdi3+0xb0e>
    6d5e:	08 94       	sec
    6d60:	a1 08       	sbc	r10, r1
    6d62:	b1 08       	sbc	r11, r1
    6d64:	c1 08       	sbc	r12, r1
    6d66:	d1 08       	sbc	r13, r1
    6d68:	e6 0c       	add	r14, r6
    6d6a:	f7 1c       	adc	r15, r7
    6d6c:	08 1d       	adc	r16, r8
    6d6e:	19 1d       	adc	r17, r9
    6d70:	e6 14       	cp	r14, r6
    6d72:	f7 04       	cpc	r15, r7
    6d74:	08 05       	cpc	r16, r8
    6d76:	19 05       	cpc	r17, r9
    6d78:	70 f0       	brcs	.+28     	; 0x6d96 <__udivdi3+0xb0e>
    6d7a:	e2 14       	cp	r14, r2
    6d7c:	f3 04       	cpc	r15, r3
    6d7e:	04 05       	cpc	r16, r4
    6d80:	15 05       	cpc	r17, r5
    6d82:	48 f4       	brcc	.+18     	; 0x6d96 <__udivdi3+0xb0e>
    6d84:	08 94       	sec
    6d86:	a1 08       	sbc	r10, r1
    6d88:	b1 08       	sbc	r11, r1
    6d8a:	c1 08       	sbc	r12, r1
    6d8c:	d1 08       	sbc	r13, r1
    6d8e:	e6 0c       	add	r14, r6
    6d90:	f7 1c       	adc	r15, r7
    6d92:	08 1d       	adc	r16, r8
    6d94:	19 1d       	adc	r17, r9
    6d96:	e2 18       	sub	r14, r2
    6d98:	f3 08       	sbc	r15, r3
    6d9a:	04 09       	sbc	r16, r4
    6d9c:	15 09       	sbc	r17, r5
    6d9e:	ed a2       	std	Y+37, r14	; 0x25
    6da0:	fe a2       	std	Y+38, r15	; 0x26
    6da2:	0f a3       	std	Y+39, r16	; 0x27
    6da4:	18 a7       	std	Y+40, r17	; 0x28
    6da6:	a1 96       	adiw	r28, 0x21	; 33
    6da8:	6c ac       	ldd	r6, Y+60	; 0x3c
    6daa:	7d ac       	ldd	r7, Y+61	; 0x3d
    6dac:	8e ac       	ldd	r8, Y+62	; 0x3e
    6dae:	9f ac       	ldd	r9, Y+63	; 0x3f
    6db0:	a1 97       	sbiw	r28, 0x21	; 33
    6db2:	d3 01       	movw	r26, r6
    6db4:	99 27       	eor	r25, r25
    6db6:	88 27       	eor	r24, r24
    6db8:	a8 2a       	or	r10, r24
    6dba:	b9 2a       	or	r11, r25
    6dbc:	ca 2a       	or	r12, r26
    6dbe:	db 2a       	or	r13, r27
    6dc0:	ad aa       	std	Y+53, r10	; 0x35
    6dc2:	be aa       	std	Y+54, r11	; 0x36
    6dc4:	cf aa       	std	Y+55, r12	; 0x37
    6dc6:	d8 ae       	std	Y+56, r13	; 0x38
    6dc8:	86 01       	movw	r16, r12
    6dca:	75 01       	movw	r14, r10
    6dcc:	2f ef       	ldi	r18, 0xFF	; 255
    6dce:	3f ef       	ldi	r19, 0xFF	; 255
    6dd0:	40 e0       	ldi	r20, 0x00	; 0
    6dd2:	50 e0       	ldi	r21, 0x00	; 0
    6dd4:	e2 22       	and	r14, r18
    6dd6:	f3 22       	and	r15, r19
    6dd8:	04 23       	and	r16, r20
    6dda:	15 23       	and	r17, r21
    6ddc:	c6 01       	movw	r24, r12
    6dde:	aa 27       	eor	r26, r26
    6de0:	bb 27       	eor	r27, r27
    6de2:	a9 96       	adiw	r28, 0x29	; 41
    6de4:	8c af       	std	Y+60, r24	; 0x3c
    6de6:	9d af       	std	Y+61, r25	; 0x3d
    6de8:	ae af       	std	Y+62, r26	; 0x3e
    6dea:	bf af       	std	Y+63, r27	; 0x3f
    6dec:	a9 97       	sbiw	r28, 0x29	; 41
    6dee:	a9 a0       	ldd	r10, Y+33	; 0x21
    6df0:	ba a0       	ldd	r11, Y+34	; 0x22
    6df2:	cb a0       	ldd	r12, Y+35	; 0x23
    6df4:	dc a0       	ldd	r13, Y+36	; 0x24
    6df6:	a2 22       	and	r10, r18
    6df8:	b3 22       	and	r11, r19
    6dfa:	c4 22       	and	r12, r20
    6dfc:	d5 22       	and	r13, r21
    6dfe:	69 a0       	ldd	r6, Y+33	; 0x21
    6e00:	7a a0       	ldd	r7, Y+34	; 0x22
    6e02:	8b a0       	ldd	r8, Y+35	; 0x23
    6e04:	9c a0       	ldd	r9, Y+36	; 0x24
    6e06:	14 01       	movw	r2, r8
    6e08:	44 24       	eor	r4, r4
    6e0a:	55 24       	eor	r5, r5
    6e0c:	c8 01       	movw	r24, r16
    6e0e:	b7 01       	movw	r22, r14
    6e10:	a6 01       	movw	r20, r12
    6e12:	95 01       	movw	r18, r10
    6e14:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6e18:	a5 96       	adiw	r28, 0x25	; 37
    6e1a:	6c af       	std	Y+60, r22	; 0x3c
    6e1c:	7d af       	std	Y+61, r23	; 0x3d
    6e1e:	8e af       	std	Y+62, r24	; 0x3e
    6e20:	9f af       	std	Y+63, r25	; 0x3f
    6e22:	a5 97       	sbiw	r28, 0x25	; 37
    6e24:	c8 01       	movw	r24, r16
    6e26:	b7 01       	movw	r22, r14
    6e28:	a2 01       	movw	r20, r4
    6e2a:	91 01       	movw	r18, r2
    6e2c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6e30:	3b 01       	movw	r6, r22
    6e32:	4c 01       	movw	r8, r24
    6e34:	a9 96       	adiw	r28, 0x29	; 41
    6e36:	6c ad       	ldd	r22, Y+60	; 0x3c
    6e38:	7d ad       	ldd	r23, Y+61	; 0x3d
    6e3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e3e:	a9 97       	sbiw	r28, 0x29	; 41
    6e40:	a6 01       	movw	r20, r12
    6e42:	95 01       	movw	r18, r10
    6e44:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6e48:	7b 01       	movw	r14, r22
    6e4a:	8c 01       	movw	r16, r24
    6e4c:	a9 96       	adiw	r28, 0x29	; 41
    6e4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    6e50:	7d ad       	ldd	r23, Y+61	; 0x3d
    6e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e54:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e56:	a9 97       	sbiw	r28, 0x29	; 41
    6e58:	a2 01       	movw	r20, r4
    6e5a:	91 01       	movw	r18, r2
    6e5c:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6e60:	5b 01       	movw	r10, r22
    6e62:	6c 01       	movw	r12, r24
    6e64:	a8 01       	movw	r20, r16
    6e66:	97 01       	movw	r18, r14
    6e68:	26 0d       	add	r18, r6
    6e6a:	37 1d       	adc	r19, r7
    6e6c:	48 1d       	adc	r20, r8
    6e6e:	59 1d       	adc	r21, r9
    6e70:	a5 96       	adiw	r28, 0x25	; 37
    6e72:	6c ac       	ldd	r6, Y+60	; 0x3c
    6e74:	7d ac       	ldd	r7, Y+61	; 0x3d
    6e76:	8e ac       	ldd	r8, Y+62	; 0x3e
    6e78:	9f ac       	ldd	r9, Y+63	; 0x3f
    6e7a:	a5 97       	sbiw	r28, 0x25	; 37
    6e7c:	c4 01       	movw	r24, r8
    6e7e:	aa 27       	eor	r26, r26
    6e80:	bb 27       	eor	r27, r27
    6e82:	28 0f       	add	r18, r24
    6e84:	39 1f       	adc	r19, r25
    6e86:	4a 1f       	adc	r20, r26
    6e88:	5b 1f       	adc	r21, r27
    6e8a:	2e 15       	cp	r18, r14
    6e8c:	3f 05       	cpc	r19, r15
    6e8e:	40 07       	cpc	r20, r16
    6e90:	51 07       	cpc	r21, r17
    6e92:	48 f4       	brcc	.+18     	; 0x6ea6 <__udivdi3+0xc1e>
    6e94:	e1 2c       	mov	r14, r1
    6e96:	f1 2c       	mov	r15, r1
    6e98:	61 e0       	ldi	r22, 0x01	; 1
    6e9a:	06 2f       	mov	r16, r22
    6e9c:	11 2d       	mov	r17, r1
    6e9e:	ae 0c       	add	r10, r14
    6ea0:	bf 1c       	adc	r11, r15
    6ea2:	c0 1e       	adc	r12, r16
    6ea4:	d1 1e       	adc	r13, r17
    6ea6:	ca 01       	movw	r24, r20
    6ea8:	aa 27       	eor	r26, r26
    6eaa:	bb 27       	eor	r27, r27
    6eac:	a8 0e       	add	r10, r24
    6eae:	b9 1e       	adc	r11, r25
    6eb0:	ca 1e       	adc	r12, r26
    6eb2:	db 1e       	adc	r13, r27
    6eb4:	6d a0       	ldd	r6, Y+37	; 0x25
    6eb6:	7e a0       	ldd	r7, Y+38	; 0x26
    6eb8:	8f a0       	ldd	r8, Y+39	; 0x27
    6eba:	98 a4       	ldd	r9, Y+40	; 0x28
    6ebc:	6a 14       	cp	r6, r10
    6ebe:	7b 04       	cpc	r7, r11
    6ec0:	8c 04       	cpc	r8, r12
    6ec2:	9d 04       	cpc	r9, r13
    6ec4:	28 f1       	brcs	.+74     	; 0x6f10 <__udivdi3+0xc88>
    6ec6:	a6 14       	cp	r10, r6
    6ec8:	b7 04       	cpc	r11, r7
    6eca:	c8 04       	cpc	r12, r8
    6ecc:	d9 04       	cpc	r13, r9
    6ece:	d1 f5       	brne	.+116    	; 0x6f44 <__udivdi3+0xcbc>
    6ed0:	d9 01       	movw	r26, r18
    6ed2:	99 27       	eor	r25, r25
    6ed4:	88 27       	eor	r24, r24
    6ed6:	a5 96       	adiw	r28, 0x25	; 37
    6ed8:	2c ad       	ldd	r18, Y+60	; 0x3c
    6eda:	3d ad       	ldd	r19, Y+61	; 0x3d
    6edc:	4e ad       	ldd	r20, Y+62	; 0x3e
    6ede:	5f ad       	ldd	r21, Y+63	; 0x3f
    6ee0:	a5 97       	sbiw	r28, 0x25	; 37
    6ee2:	40 70       	andi	r20, 0x00	; 0
    6ee4:	50 70       	andi	r21, 0x00	; 0
    6ee6:	82 0f       	add	r24, r18
    6ee8:	93 1f       	adc	r25, r19
    6eea:	a4 1f       	adc	r26, r20
    6eec:	b5 1f       	adc	r27, r21
    6eee:	29 a9       	ldd	r18, Y+49	; 0x31
    6ef0:	3a a9       	ldd	r19, Y+50	; 0x32
    6ef2:	4b a9       	ldd	r20, Y+51	; 0x33
    6ef4:	5c a9       	ldd	r21, Y+52	; 0x34
    6ef6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6ef8:	04 c0       	rjmp	.+8      	; 0x6f02 <__udivdi3+0xc7a>
    6efa:	22 0f       	add	r18, r18
    6efc:	33 1f       	adc	r19, r19
    6efe:	44 1f       	adc	r20, r20
    6f00:	55 1f       	adc	r21, r21
    6f02:	0a 94       	dec	r0
    6f04:	d2 f7       	brpl	.-12     	; 0x6efa <__udivdi3+0xc72>
    6f06:	28 17       	cp	r18, r24
    6f08:	39 07       	cpc	r19, r25
    6f0a:	4a 07       	cpc	r20, r26
    6f0c:	5b 07       	cpc	r21, r27
    6f0e:	d0 f4       	brcc	.+52     	; 0x6f44 <__udivdi3+0xcbc>
    6f10:	0d a9       	ldd	r16, Y+53	; 0x35
    6f12:	1e a9       	ldd	r17, Y+54	; 0x36
    6f14:	2f a9       	ldd	r18, Y+55	; 0x37
    6f16:	38 ad       	ldd	r19, Y+56	; 0x38
    6f18:	01 50       	subi	r16, 0x01	; 1
    6f1a:	10 40       	sbci	r17, 0x00	; 0
    6f1c:	20 40       	sbci	r18, 0x00	; 0
    6f1e:	30 40       	sbci	r19, 0x00	; 0
    6f20:	0d ab       	std	Y+53, r16	; 0x35
    6f22:	1e ab       	std	Y+54, r17	; 0x36
    6f24:	2f ab       	std	Y+55, r18	; 0x37
    6f26:	38 af       	std	Y+56, r19	; 0x38
    6f28:	0d c0       	rjmp	.+26     	; 0x6f44 <__udivdi3+0xcbc>
    6f2a:	1d aa       	std	Y+53, r1	; 0x35
    6f2c:	1e aa       	std	Y+54, r1	; 0x36
    6f2e:	1f aa       	std	Y+55, r1	; 0x37
    6f30:	18 ae       	std	Y+56, r1	; 0x38
    6f32:	08 c0       	rjmp	.+16     	; 0x6f44 <__udivdi3+0xcbc>
    6f34:	21 e0       	ldi	r18, 0x01	; 1
    6f36:	30 e0       	ldi	r19, 0x00	; 0
    6f38:	40 e0       	ldi	r20, 0x00	; 0
    6f3a:	50 e0       	ldi	r21, 0x00	; 0
    6f3c:	2d ab       	std	Y+53, r18	; 0x35
    6f3e:	3e ab       	std	Y+54, r19	; 0x36
    6f40:	4f ab       	std	Y+55, r20	; 0x37
    6f42:	58 af       	std	Y+56, r21	; 0x38
    6f44:	19 ae       	std	Y+57, r1	; 0x39
    6f46:	1a ae       	std	Y+58, r1	; 0x3a
    6f48:	1b ae       	std	Y+59, r1	; 0x3b
    6f4a:	1c ae       	std	Y+60, r1	; 0x3c
    6f4c:	88 e0       	ldi	r24, 0x08	; 8
    6f4e:	fe 01       	movw	r30, r28
    6f50:	71 96       	adiw	r30, 0x11	; 17
    6f52:	11 92       	st	Z+, r1
    6f54:	8a 95       	dec	r24
    6f56:	e9 f7       	brne	.-6      	; 0x6f52 <__udivdi3+0xcca>
    6f58:	8d a9       	ldd	r24, Y+53	; 0x35
    6f5a:	9e a9       	ldd	r25, Y+54	; 0x36
    6f5c:	af a9       	ldd	r26, Y+55	; 0x37
    6f5e:	b8 ad       	ldd	r27, Y+56	; 0x38
    6f60:	89 8b       	std	Y+17, r24	; 0x11
    6f62:	9a 8b       	std	Y+18, r25	; 0x12
    6f64:	ab 8b       	std	Y+19, r26	; 0x13
    6f66:	bc 8b       	std	Y+20, r27	; 0x14
    6f68:	69 ac       	ldd	r6, Y+57	; 0x39
    6f6a:	7a ac       	ldd	r7, Y+58	; 0x3a
    6f6c:	8b ac       	ldd	r8, Y+59	; 0x3b
    6f6e:	9c ac       	ldd	r9, Y+60	; 0x3c
    6f70:	6d 8a       	std	Y+21, r6	; 0x15
    6f72:	7e 8a       	std	Y+22, r7	; 0x16
    6f74:	8f 8a       	std	Y+23, r8	; 0x17
    6f76:	98 8e       	std	Y+24, r9	; 0x18
    6f78:	29 88       	ldd	r2, Y+17	; 0x11
    6f7a:	3a 88       	ldd	r3, Y+18	; 0x12
    6f7c:	4b 88       	ldd	r4, Y+19	; 0x13
    6f7e:	5c 88       	ldd	r5, Y+20	; 0x14
    6f80:	6d 88       	ldd	r6, Y+21	; 0x15
    6f82:	7e 88       	ldd	r7, Y+22	; 0x16
    6f84:	8f 88       	ldd	r8, Y+23	; 0x17
    6f86:	98 8c       	ldd	r9, Y+24	; 0x18
    6f88:	22 2d       	mov	r18, r2
    6f8a:	33 2d       	mov	r19, r3
    6f8c:	44 2d       	mov	r20, r4
    6f8e:	55 2d       	mov	r21, r5
    6f90:	66 2d       	mov	r22, r6
    6f92:	77 2d       	mov	r23, r7
    6f94:	88 2d       	mov	r24, r8
    6f96:	99 2d       	mov	r25, r9
    6f98:	e2 e1       	ldi	r30, 0x12	; 18
    6f9a:	c4 59       	subi	r28, 0x94	; 148
    6f9c:	df 4f       	sbci	r29, 0xFF	; 255
    6f9e:	0c 94 37 3b 	jmp	0x766e	; 0x766e <__epilogue_restores__>

00006fa2 <do_rand>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
    6fa2:	a0 e0       	ldi	r26, 0x00	; 0
    6fa4:	b0 e0       	ldi	r27, 0x00	; 0
    6fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    6fa8:	f7 e3       	ldi	r31, 0x37	; 55
    6faa:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <__prologue_saves__+0x10>
    6fae:	ec 01       	movw	r28, r24

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    6fb0:	68 81       	ld	r22, Y
    6fb2:	79 81       	ldd	r23, Y+1	; 0x01
    6fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    6fb6:	9b 81       	ldd	r25, Y+3	; 0x03
#endif

    6fb8:	61 15       	cp	r22, r1
    6fba:	71 05       	cpc	r23, r1
    6fbc:	81 05       	cpc	r24, r1
    6fbe:	91 05       	cpc	r25, r1
    6fc0:	49 f4       	brne	.+18     	; 0x6fd4 <do_rand+0x32>
    6fc2:	84 e2       	ldi	r24, 0x24	; 36
    6fc4:	a8 2e       	mov	r10, r24
    6fc6:	89 ed       	ldi	r24, 0xD9	; 217
    6fc8:	b8 2e       	mov	r11, r24
    6fca:	8b e5       	ldi	r24, 0x5B	; 91
    6fcc:	c8 2e       	mov	r12, r24
    6fce:	87 e0       	ldi	r24, 0x07	; 7
    6fd0:	d8 2e       	mov	r13, r24
    6fd2:	02 c0       	rjmp	.+4      	; 0x6fd8 <do_rand+0x36>

#if PRINTF_LEVEL == PRINTF_MIN || PRINTF_LEVEL == PRINTF_STD \
    || PRINTF_LEVEL == PRINTF_FLT
/* OK */
#else
# error "Not a known printf level."
    6fd4:	5b 01       	movw	r10, r22
    6fd6:	6c 01       	movw	r12, r24
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
#  define __AVR_HAVE_LPMX__	1
# endif
    6fd8:	c6 01       	movw	r24, r12
    6fda:	b5 01       	movw	r22, r10
    6fdc:	2d e1       	ldi	r18, 0x1D	; 29
    6fde:	33 ef       	ldi	r19, 0xF3	; 243
    6fe0:	41 e0       	ldi	r20, 0x01	; 1
    6fe2:	50 e0       	ldi	r21, 0x00	; 0
    6fe4:	0e 94 66 3b 	call	0x76cc	; 0x76cc <__divmodsi4>
    6fe8:	27 ea       	ldi	r18, 0xA7	; 167
    6fea:	31 e4       	ldi	r19, 0x41	; 65
    6fec:	40 e0       	ldi	r20, 0x00	; 0
    6fee:	50 e0       	ldi	r21, 0x00	; 0
    6ff0:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    6ff4:	7b 01       	movw	r14, r22
    6ff6:	8c 01       	movw	r16, r24
    6ff8:	c6 01       	movw	r24, r12
    6ffa:	b5 01       	movw	r22, r10
    6ffc:	2d e1       	ldi	r18, 0x1D	; 29
    6ffe:	33 ef       	ldi	r19, 0xF3	; 243
    7000:	41 e0       	ldi	r20, 0x01	; 1
    7002:	50 e0       	ldi	r21, 0x00	; 0
    7004:	0e 94 66 3b 	call	0x76cc	; 0x76cc <__divmodsi4>
    7008:	ca 01       	movw	r24, r20
    700a:	b9 01       	movw	r22, r18
    700c:	24 e1       	ldi	r18, 0x14	; 20
    700e:	3b e0       	ldi	r19, 0x0B	; 11
    7010:	40 e0       	ldi	r20, 0x00	; 0
    7012:	50 e0       	ldi	r21, 0x00	; 0
    7014:	0e 94 b3 3a 	call	0x7566	; 0x7566 <__mulsi3>
    7018:	e6 1a       	sub	r14, r22
    701a:	f7 0a       	sbc	r15, r23
    701c:	08 0b       	sbc	r16, r24
    701e:	19 0b       	sbc	r17, r25
#endif
    7020:	17 ff       	sbrs	r17, 7
    7022:	08 c0       	rjmp	.+16     	; 0x7034 <do_rand+0x92>

    7024:	8f ef       	ldi	r24, 0xFF	; 255
    7026:	9f ef       	ldi	r25, 0xFF	; 255
    7028:	af ef       	ldi	r26, 0xFF	; 255
    702a:	bf e7       	ldi	r27, 0x7F	; 127
    702c:	e8 0e       	add	r14, r24
    702e:	f9 1e       	adc	r15, r25
    7030:	0a 1f       	adc	r16, r26
    7032:	1b 1f       	adc	r17, r27
#if  defined(__AVR_HAVE_LPMX__) && __AVR_HAVE_LPMX__
    7034:	e8 82       	st	Y, r14
    7036:	f9 82       	std	Y+1, r15	; 0x01
    7038:	0a 83       	std	Y+2, r16	; 0x02
    703a:	1b 83       	std	Y+3, r17	; 0x03
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    703c:	c7 01       	movw	r24, r14
    703e:	9f 77       	andi	r25, 0x7F	; 127
    7040:	ea e0       	ldi	r30, 0x0A	; 10
    7042:	cd b7       	in	r28, 0x3d	; 61
    7044:	de b7       	in	r29, 0x3e	; 62
    7046:	0c 94 3f 3b 	jmp	0x767e	; 0x767e <__epilogue_restores__+0x10>

0000704a <rand_r>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	%0,Z+	"			\
	: "=r" (__c),				\
    704a:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <do_rand>
    704e:	08 95       	ret

00007050 <rand>:
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    7050:	80 e9       	ldi	r24, 0x90	; 144
    7052:	93 e0       	ldi	r25, 0x03	; 3
    7054:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <do_rand>
    7058:	08 95       	ret

0000705a <srand>:
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
    705a:	aa 27       	eor	r26, r26
    705c:	bb 27       	eor	r27, r27
    705e:	80 93 90 03 	sts	0x0390, r24
    7062:	90 93 91 03 	sts	0x0391, r25
    7066:	a0 93 92 03 	sts	0x0392, r26
    706a:	b0 93 93 03 	sts	0x0393, r27
    706e:	08 95       	ret

00007070 <strchr_P>:
    7070:	fc 01       	movw	r30, r24
    7072:	05 90       	lpm	r0, Z+
    7074:	06 16       	cp	r0, r22
    7076:	21 f0       	breq	.+8      	; 0x7080 <strchr_P+0x10>
    7078:	00 20       	and	r0, r0
    707a:	d9 f7       	brne	.-10     	; 0x7072 <strchr_P+0x2>
    707c:	c0 01       	movw	r24, r0
    707e:	08 95       	ret
    7080:	31 97       	sbiw	r30, 0x01	; 1
    7082:	cf 01       	movw	r24, r30
    7084:	08 95       	ret

00007086 <fdevopen>:
	: "r" (flag),				\
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
    7086:	ef 92       	push	r14
    7088:	ff 92       	push	r15
    708a:	0f 93       	push	r16
    708c:	1f 93       	push	r17
    708e:	cf 93       	push	r28
    7090:	df 93       	push	r29
    7092:	8c 01       	movw	r16, r24
    7094:	7b 01       	movw	r14, r22
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    7096:	89 2b       	or	r24, r25
    7098:	11 f4       	brne	.+4      	; 0x709e <fdevopen+0x18>
    709a:	67 2b       	or	r22, r23
    709c:	d1 f1       	breq	.+116    	; 0x7112 <fdevopen+0x8c>
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    709e:	6e e0       	ldi	r22, 0x0E	; 14
    70a0:	70 e0       	ldi	r23, 0x00	; 0
    70a2:	81 e0       	ldi	r24, 0x01	; 1
    70a4:	90 e0       	ldi	r25, 0x00	; 0
    70a6:	0e 94 92 39 	call	0x7324	; 0x7324 <calloc>
    70aa:	fc 01       	movw	r30, r24
    70ac:	00 97       	sbiw	r24, 0x00	; 0
    70ae:	89 f1       	breq	.+98     	; 0x7112 <fdevopen+0x8c>
    70b0:	dc 01       	movw	r26, r24
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    70b2:	80 e8       	ldi	r24, 0x80	; 128
    70b4:	83 83       	std	Z+3, r24	; 0x03
	: "=r" (__c),				\
	  "+z" (pnt)				\
    70b6:	e1 14       	cp	r14, r1
    70b8:	f1 04       	cpc	r15, r1
    70ba:	71 f0       	breq	.+28     	; 0x70d8 <fdevopen+0x52>
	: "r" (flag),				\
    70bc:	f3 86       	std	Z+11, r15	; 0x0b
    70be:	e2 86       	std	Z+10, r14	; 0x0a
	  "I" (ntz(mask))			\
    70c0:	81 e8       	ldi	r24, 0x81	; 129
    70c2:	83 83       	std	Z+3, r24	; 0x03
	: "r0"					\
    70c4:	80 91 fc 06 	lds	r24, 0x06FC
    70c8:	90 91 fd 06 	lds	r25, 0x06FD
    70cc:	89 2b       	or	r24, r25
    70ce:	21 f4       	brne	.+8      	; 0x70d8 <fdevopen+0x52>
    );						\
    70d0:	f0 93 fd 06 	sts	0x06FD, r31
    70d4:	e0 93 fc 06 	sts	0x06FC, r30
    __c;					\
})
#else
    70d8:	01 15       	cp	r16, r1
    70da:	11 05       	cpc	r17, r1
    70dc:	e1 f0       	breq	.+56     	; 0x7116 <fdevopen+0x90>
# define GETBYTE(flag, mask, pnt)	({	\
    70de:	11 87       	std	Z+9, r17	; 0x09
    70e0:	00 87       	std	Z+8, r16	; 0x08
    unsigned char __c;				\
    70e2:	83 81       	ldd	r24, Z+3	; 0x03
    70e4:	82 60       	ori	r24, 0x02	; 2
    70e6:	83 83       	std	Z+3, r24	; 0x03
    __c = ((flag) & (mask))			\
    70e8:	80 91 fe 06 	lds	r24, 0x06FE
    70ec:	90 91 ff 06 	lds	r25, 0x06FF
    70f0:	89 2b       	or	r24, r25
    70f2:	89 f4       	brne	.+34     	; 0x7116 <fdevopen+0x90>
	  ? pgm_read_byte(pnt) : *pnt;		\
    70f4:	f0 93 ff 06 	sts	0x06FF, r31
    70f8:	e0 93 fe 06 	sts	0x06FE, r30
    pnt++;					\
    70fc:	80 91 00 07 	lds	r24, 0x0700
    7100:	90 91 01 07 	lds	r25, 0x0701
    7104:	89 2b       	or	r24, r25
    7106:	39 f4       	brne	.+14     	; 0x7116 <fdevopen+0x90>
    __c;					\
    7108:	f0 93 01 07 	sts	0x0701, r31
    710c:	e0 93 00 07 	sts	0x0700, r30
    7110:	02 c0       	rjmp	.+4      	; 0x7116 <fdevopen+0x90>
    7112:	a0 e0       	ldi	r26, 0x00	; 0
    7114:	b0 e0       	ldi	r27, 0x00	; 0
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN
    7116:	cd 01       	movw	r24, r26
    7118:	e6 e0       	ldi	r30, 0x06	; 6
    711a:	cd b7       	in	r28, 0x3d	; 61
    711c:	de b7       	in	r29, 0x3e	; 62
    711e:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <__epilogue_restores__+0x18>

00007122 <fputc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    7122:	0f 93       	push	r16
    7124:	1f 93       	push	r17
    7126:	cf 93       	push	r28
    7128:	df 93       	push	r29
    712a:	8c 01       	movw	r16, r24
    712c:	eb 01       	movw	r28, r22
#include <stdlib.h>
#include <string.h>
    712e:	8b 81       	ldd	r24, Y+3	; 0x03
    7130:	99 27       	eor	r25, r25
    7132:	81 ff       	sbrs	r24, 1
    7134:	1b c0       	rjmp	.+54     	; 0x716c <fputc+0x4a>

#include "stdio_private.h"
#include "ftoa_engine.h"
    7136:	82 ff       	sbrs	r24, 2
    7138:	0d c0       	rjmp	.+26     	; 0x7154 <fputc+0x32>
#include "ntz.h"
    713a:	2e 81       	ldd	r18, Y+6	; 0x06
    713c:	3f 81       	ldd	r19, Y+7	; 0x07
    713e:	8c 81       	ldd	r24, Y+4	; 0x04
    7140:	9d 81       	ldd	r25, Y+5	; 0x05
    7142:	28 17       	cp	r18, r24
    7144:	39 07       	cpc	r19, r25
    7146:	64 f4       	brge	.+24     	; 0x7160 <fputc+0x3e>
#include "xtoa_fast.h"
    7148:	e8 81       	ld	r30, Y
    714a:	f9 81       	ldd	r31, Y+1	; 0x01
    714c:	01 93       	st	Z+, r16
    714e:	f9 83       	std	Y+1, r31	; 0x01
    7150:	e8 83       	st	Y, r30
    7152:	06 c0       	rjmp	.+12     	; 0x7160 <fputc+0x3e>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
    7154:	e8 85       	ldd	r30, Y+8	; 0x08
    7156:	f9 85       	ldd	r31, Y+9	; 0x09
    7158:	80 2f       	mov	r24, r16
    715a:	09 95       	icall
    715c:	89 2b       	or	r24, r25
    715e:	31 f4       	brne	.+12     	; 0x716c <fputc+0x4a>
 * (level 2).  Level 1 maintains a minimal version that just offers
    7160:	8e 81       	ldd	r24, Y+6	; 0x06
    7162:	9f 81       	ldd	r25, Y+7	; 0x07
    7164:	01 96       	adiw	r24, 0x01	; 1
    7166:	9f 83       	std	Y+7, r25	; 0x07
    7168:	8e 83       	std	Y+6, r24	; 0x06
    716a:	02 c0       	rjmp	.+4      	; 0x7170 <fputc+0x4e>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    716c:	0f ef       	ldi	r16, 0xFF	; 255
    716e:	1f ef       	ldi	r17, 0xFF	; 255
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
    7170:	c8 01       	movw	r24, r16
    7172:	df 91       	pop	r29
    7174:	cf 91       	pop	r28
    7176:	1f 91       	pop	r17
    7178:	0f 91       	pop	r16
    717a:	08 95       	ret

0000717c <printf>:

/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
    717c:	a2 e0       	ldi	r26, 0x02	; 2
    717e:	b0 e0       	ldi	r27, 0x00	; 0
    7180:	e4 ec       	ldi	r30, 0xC4	; 196
    7182:	f8 e3       	ldi	r31, 0x38	; 56
    7184:	0c 94 2b 3b 	jmp	0x7656	; 0x7656 <__prologue_saves__+0x20>
    7188:	fe 01       	movw	r30, r28
    718a:	37 96       	adiw	r30, 0x07	; 7
    718c:	61 91       	ld	r22, Z+
    718e:	71 91       	ld	r23, Z+
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    7190:	fa 83       	std	Y+2, r31	; 0x02
    7192:	e9 83       	std	Y+1, r30	; 0x01
#include "stdio_private.h"
    7194:	af 01       	movw	r20, r30
    7196:	80 91 fe 06 	lds	r24, 0x06FE
    719a:	90 91 ff 06 	lds	r25, 0x06FF
    719e:	0e 94 14 30 	call	0x6028	; 0x6028 <vfprintf>
    71a2:	e2 e0       	ldi	r30, 0x02	; 2
    71a4:	22 96       	adiw	r28, 0x02	; 2
    71a6:	0c 94 47 3b 	jmp	0x768e	; 0x768e <__epilogue_restores__+0x20>

000071aa <putchar>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    71aa:	60 91 fe 06 	lds	r22, 0x06FE
    71ae:	70 91 ff 06 	lds	r23, 0x06FF
    71b2:	0e 94 91 38 	call	0x7122	; 0x7122 <fputc>
    71b6:	08 95       	ret

000071b8 <puts>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    71b8:	0f 93       	push	r16
    71ba:	1f 93       	push	r17
    71bc:	cf 93       	push	r28
    71be:	df 93       	push	r29
    71c0:	8c 01       	movw	r16, r24
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
    71c2:	e0 91 fe 06 	lds	r30, 0x06FE
    71c6:	f0 91 ff 06 	lds	r31, 0x06FF
    71ca:	83 81       	ldd	r24, Z+3	; 0x03
    71cc:	81 ff       	sbrs	r24, 1
    71ce:	1f c0       	rjmp	.+62     	; 0x720e <puts+0x56>
    71d0:	c0 e0       	ldi	r28, 0x00	; 0
    71d2:	d0 e0       	ldi	r29, 0x00	; 0
    71d4:	0a c0       	rjmp	.+20     	; 0x71ea <puts+0x32>
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"

    71d6:	fd 01       	movw	r30, r26
    71d8:	20 85       	ldd	r18, Z+8	; 0x08
    71da:	31 85       	ldd	r19, Z+9	; 0x09
    71dc:	bd 01       	movw	r22, r26
    71de:	f9 01       	movw	r30, r18
    71e0:	09 95       	icall
    71e2:	89 2b       	or	r24, r25
    71e4:	11 f0       	breq	.+4      	; 0x71ea <puts+0x32>
    71e6:	cf ef       	ldi	r28, 0xFF	; 255
    71e8:	df ef       	ldi	r29, 0xFF	; 255
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    71ea:	f8 01       	movw	r30, r16
    71ec:	81 91       	ld	r24, Z+
    71ee:	8f 01       	movw	r16, r30
    71f0:	a0 91 fe 06 	lds	r26, 0x06FE
    71f4:	b0 91 ff 06 	lds	r27, 0x06FF
    71f8:	88 23       	and	r24, r24
    71fa:	69 f7       	brne	.-38     	; 0x71d6 <puts+0x1e>

/*
 * This file can be compiled into more than one flavour.  The default
    71fc:	fd 01       	movw	r30, r26
    71fe:	20 85       	ldd	r18, Z+8	; 0x08
    7200:	31 85       	ldd	r19, Z+9	; 0x09
    7202:	bd 01       	movw	r22, r26
    7204:	8a e0       	ldi	r24, 0x0A	; 10
    7206:	f9 01       	movw	r30, r18
    7208:	09 95       	icall
    720a:	89 2b       	or	r24, r25
    720c:	11 f0       	breq	.+4      	; 0x7212 <puts+0x5a>
    720e:	cf ef       	ldi	r28, 0xFF	; 255
    7210:	df ef       	ldi	r29, 0xFF	; 255
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
 * intented for floating point support.
    7212:	ce 01       	movw	r24, r28
    7214:	df 91       	pop	r29
    7216:	cf 91       	pop	r28
    7218:	1f 91       	pop	r17
    721a:	0f 91       	pop	r16
    721c:	08 95       	ret

0000721e <sprintf>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    721e:	a0 e1       	ldi	r26, 0x10	; 16
    7220:	b0 e0       	ldi	r27, 0x00	; 0
    7222:	e5 e1       	ldi	r30, 0x15	; 21
    7224:	f9 e3       	ldi	r31, 0x39	; 57
    7226:	0c 94 29 3b 	jmp	0x7652	; 0x7652 <__prologue_saves__+0x1c>
    722a:	0f 89       	ldd	r16, Y+23	; 0x17
    722c:	18 8d       	ldd	r17, Y+24	; 0x18

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    722e:	86 e0       	ldi	r24, 0x06	; 6
    7230:	8e 83       	std	Y+6, r24	; 0x06

    7232:	1c 83       	std	Y+4, r17	; 0x04
    7234:	0b 83       	std	Y+3, r16	; 0x03
/*
    7236:	8f ef       	ldi	r24, 0xFF	; 255
    7238:	9f e7       	ldi	r25, 0x7F	; 127
    723a:	98 87       	std	Y+8, r25	; 0x08
    723c:	8f 83       	std	Y+7, r24	; 0x07
 * This file can be compiled into more than one flavour.  The default
    723e:	ae 01       	movw	r20, r28
    7240:	45 5e       	subi	r20, 0xE5	; 229
    7242:	5f 4f       	sbci	r21, 0xFF	; 255
    7244:	5a 83       	std	Y+2, r21	; 0x02
    7246:	49 83       	std	Y+1, r20	; 0x01
 * is to offer the usual modifiers and integer formatting support
    7248:	69 8d       	ldd	r22, Y+25	; 0x19
    724a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    724c:	ce 01       	movw	r24, r28
    724e:	03 96       	adiw	r24, 0x03	; 3
    7250:	0e 94 14 30 	call	0x6028	; 0x6028 <vfprintf>
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    7254:	29 85       	ldd	r18, Y+9	; 0x09
    7256:	3a 85       	ldd	r19, Y+10	; 0x0a
    7258:	02 0f       	add	r16, r18
    725a:	13 1f       	adc	r17, r19
    725c:	f8 01       	movw	r30, r16
    725e:	10 82       	st	Z, r1
    7260:	e4 e0       	ldi	r30, 0x04	; 4
    7262:	60 96       	adiw	r28, 0x10	; 16
    7264:	0c 94 45 3b 	jmp	0x768a	; 0x768a <__epilogue_restores__+0x1c>

00007268 <__ultoa_invert>:
    7268:	fa 01       	movw	r30, r20
    726a:	aa 27       	eor	r26, r26
    726c:	28 30       	cpi	r18, 0x08	; 8
    726e:	51 f1       	breq	.+84     	; 0x72c4 <__ultoa_invert+0x5c>
    7270:	20 31       	cpi	r18, 0x10	; 16
    7272:	81 f1       	breq	.+96     	; 0x72d4 <__ultoa_invert+0x6c>
    7274:	e8 94       	clt
    7276:	6f 93       	push	r22
    7278:	6e 7f       	andi	r22, 0xFE	; 254
    727a:	6e 5f       	subi	r22, 0xFE	; 254
    727c:	7f 4f       	sbci	r23, 0xFF	; 255
    727e:	8f 4f       	sbci	r24, 0xFF	; 255
    7280:	9f 4f       	sbci	r25, 0xFF	; 255
    7282:	af 4f       	sbci	r26, 0xFF	; 255
    7284:	b1 e0       	ldi	r27, 0x01	; 1
    7286:	3e d0       	rcall	.+124    	; 0x7304 <__ultoa_invert+0x9c>
    7288:	b4 e0       	ldi	r27, 0x04	; 4
    728a:	3c d0       	rcall	.+120    	; 0x7304 <__ultoa_invert+0x9c>
    728c:	67 0f       	add	r22, r23
    728e:	78 1f       	adc	r23, r24
    7290:	89 1f       	adc	r24, r25
    7292:	9a 1f       	adc	r25, r26
    7294:	a1 1d       	adc	r26, r1
    7296:	68 0f       	add	r22, r24
    7298:	79 1f       	adc	r23, r25
    729a:	8a 1f       	adc	r24, r26
    729c:	91 1d       	adc	r25, r1
    729e:	a1 1d       	adc	r26, r1
    72a0:	6a 0f       	add	r22, r26
    72a2:	71 1d       	adc	r23, r1
    72a4:	81 1d       	adc	r24, r1
    72a6:	91 1d       	adc	r25, r1
    72a8:	a1 1d       	adc	r26, r1
    72aa:	20 d0       	rcall	.+64     	; 0x72ec <__ultoa_invert+0x84>
    72ac:	09 f4       	brne	.+2      	; 0x72b0 <__ultoa_invert+0x48>
    72ae:	68 94       	set
    72b0:	3f 91       	pop	r19
    72b2:	2a e0       	ldi	r18, 0x0A	; 10
    72b4:	26 9f       	mul	r18, r22
    72b6:	11 24       	eor	r1, r1
    72b8:	30 19       	sub	r19, r0
    72ba:	30 5d       	subi	r19, 0xD0	; 208
    72bc:	31 93       	st	Z+, r19
    72be:	de f6       	brtc	.-74     	; 0x7276 <__ultoa_invert+0xe>
    72c0:	cf 01       	movw	r24, r30
    72c2:	08 95       	ret
    72c4:	46 2f       	mov	r20, r22
    72c6:	47 70       	andi	r20, 0x07	; 7
    72c8:	40 5d       	subi	r20, 0xD0	; 208
    72ca:	41 93       	st	Z+, r20
    72cc:	b3 e0       	ldi	r27, 0x03	; 3
    72ce:	0f d0       	rcall	.+30     	; 0x72ee <__ultoa_invert+0x86>
    72d0:	c9 f7       	brne	.-14     	; 0x72c4 <__ultoa_invert+0x5c>
    72d2:	f6 cf       	rjmp	.-20     	; 0x72c0 <__ultoa_invert+0x58>
    72d4:	46 2f       	mov	r20, r22
    72d6:	4f 70       	andi	r20, 0x0F	; 15
    72d8:	40 5d       	subi	r20, 0xD0	; 208
    72da:	4a 33       	cpi	r20, 0x3A	; 58
    72dc:	18 f0       	brcs	.+6      	; 0x72e4 <__ultoa_invert+0x7c>
    72de:	49 5d       	subi	r20, 0xD9	; 217
    72e0:	31 fd       	sbrc	r19, 1
    72e2:	40 52       	subi	r20, 0x20	; 32
    72e4:	41 93       	st	Z+, r20
    72e6:	02 d0       	rcall	.+4      	; 0x72ec <__ultoa_invert+0x84>
    72e8:	a9 f7       	brne	.-22     	; 0x72d4 <__ultoa_invert+0x6c>
    72ea:	ea cf       	rjmp	.-44     	; 0x72c0 <__ultoa_invert+0x58>
    72ec:	b4 e0       	ldi	r27, 0x04	; 4
    72ee:	a6 95       	lsr	r26
    72f0:	97 95       	ror	r25
    72f2:	87 95       	ror	r24
    72f4:	77 95       	ror	r23
    72f6:	67 95       	ror	r22
    72f8:	ba 95       	dec	r27
    72fa:	c9 f7       	brne	.-14     	; 0x72ee <__ultoa_invert+0x86>
    72fc:	00 97       	sbiw	r24, 0x00	; 0
    72fe:	61 05       	cpc	r22, r1
    7300:	71 05       	cpc	r23, r1
    7302:	08 95       	ret
    7304:	9b 01       	movw	r18, r22
    7306:	ac 01       	movw	r20, r24
    7308:	0a 2e       	mov	r0, r26
    730a:	06 94       	lsr	r0
    730c:	57 95       	ror	r21
    730e:	47 95       	ror	r20
    7310:	37 95       	ror	r19
    7312:	27 95       	ror	r18
    7314:	ba 95       	dec	r27
    7316:	c9 f7       	brne	.-14     	; 0x730a <__ultoa_invert+0xa2>
    7318:	62 0f       	add	r22, r18
    731a:	73 1f       	adc	r23, r19
    731c:	84 1f       	adc	r24, r20
    731e:	95 1f       	adc	r25, r21
    7320:	a0 1d       	adc	r26, r0
    7322:	08 95       	ret

00007324 <calloc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    7324:	0f 93       	push	r16
    7326:	1f 93       	push	r17
    7328:	cf 93       	push	r28
    732a:	df 93       	push	r29
#include <stdlib.h>
#include <string.h>

    732c:	68 9f       	mul	r22, r24
    732e:	80 01       	movw	r16, r0
    7330:	69 9f       	mul	r22, r25
    7332:	10 0d       	add	r17, r0
    7334:	78 9f       	mul	r23, r24
    7336:	10 0d       	add	r17, r0
    7338:	11 24       	eor	r1, r1
    733a:	c8 01       	movw	r24, r16
    733c:	0e 94 ae 39 	call	0x735c	; 0x735c <malloc>
    7340:	ec 01       	movw	r28, r24
    7342:	00 97       	sbiw	r24, 0x00	; 0
    7344:	29 f0       	breq	.+10     	; 0x7350 <calloc+0x2c>
#include "stdio_private.h"
#include "ftoa_engine.h"
    7346:	a8 01       	movw	r20, r16
    7348:	60 e0       	ldi	r22, 0x00	; 0
    734a:	70 e0       	ldi	r23, 0x00	; 0
    734c:	0e 94 ac 3a 	call	0x7558	; 0x7558 <memset>
#include "ntz.h"
#include "xtoa_fast.h"
    7350:	ce 01       	movw	r24, r28
    7352:	df 91       	pop	r29
    7354:	cf 91       	pop	r28
    7356:	1f 91       	pop	r17
    7358:	0f 91       	pop	r16
    735a:	08 95       	ret

0000735c <malloc>:
#else
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    735c:	cf 93       	push	r28
    735e:	df 93       	push	r29
    7360:	ac 01       	movw	r20, r24
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    7362:	02 97       	sbiw	r24, 0x02	; 2
    7364:	10 f4       	brcc	.+4      	; 0x736a <malloc+0xe>
    7366:	42 e0       	ldi	r20, 0x02	; 2
    7368:	50 e0       	ldi	r21, 0x00	; 0
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    736a:	a0 91 04 07 	lds	r26, 0x0704
    736e:	b0 91 05 07 	lds	r27, 0x0705
    7372:	fd 01       	movw	r30, r26
    7374:	c0 e0       	ldi	r28, 0x00	; 0
    7376:	d0 e0       	ldi	r29, 0x00	; 0
    7378:	20 e0       	ldi	r18, 0x00	; 0
    737a:	30 e0       	ldi	r19, 0x00	; 0
    737c:	20 c0       	rjmp	.+64     	; 0x73be <malloc+0x62>
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
    737e:	80 81       	ld	r24, Z
    7380:	91 81       	ldd	r25, Z+1	; 0x01
    7382:	84 17       	cp	r24, r20
    7384:	95 07       	cpc	r25, r21
    7386:	69 f4       	brne	.+26     	; 0x73a2 <malloc+0x46>
    7388:	82 81       	ldd	r24, Z+2	; 0x02
    738a:	93 81       	ldd	r25, Z+3	; 0x03
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    738c:	20 97       	sbiw	r28, 0x00	; 0
    738e:	19 f0       	breq	.+6      	; 0x7396 <malloc+0x3a>
	: "=r" (__c),				\
    7390:	9b 83       	std	Y+3, r25	; 0x03
    7392:	8a 83       	std	Y+2, r24	; 0x02
    7394:	04 c0       	rjmp	.+8      	; 0x739e <malloc+0x42>
	  "+z" (pnt)				\
	: "r" (flag),				\
    7396:	90 93 05 07 	sts	0x0705, r25
    739a:	80 93 04 07 	sts	0x0704, r24
	  "I" (ntz(mask))			\
    739e:	9f 01       	movw	r18, r30
    73a0:	32 c0       	rjmp	.+100    	; 0x7406 <malloc+0xaa>
	: "r0"					\
    );						\
    73a2:	48 17       	cp	r20, r24
    73a4:	59 07       	cpc	r21, r25
    73a6:	38 f4       	brcc	.+14     	; 0x73b6 <malloc+0x5a>
    __c;					\
    73a8:	21 15       	cp	r18, r1
    73aa:	31 05       	cpc	r19, r1
    73ac:	19 f0       	breq	.+6      	; 0x73b4 <malloc+0x58>
    73ae:	82 17       	cp	r24, r18
    73b0:	93 07       	cpc	r25, r19
    73b2:	08 f4       	brcc	.+2      	; 0x73b6 <malloc+0x5a>
    73b4:	9c 01       	movw	r18, r24
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    73b6:	ef 01       	movw	r28, r30
    73b8:	02 80       	ldd	r0, Z+2	; 0x02
    73ba:	f3 81       	ldd	r31, Z+3	; 0x03
    73bc:	e0 2d       	mov	r30, r0
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    73be:	30 97       	sbiw	r30, 0x00	; 0
    73c0:	f1 f6       	brne	.-68     	; 0x737e <malloc+0x22>
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN

    73c2:	21 15       	cp	r18, r1
    73c4:	31 05       	cpc	r19, r1
    73c6:	99 f1       	breq	.+102    	; 0x742e <malloc+0xd2>
#define FL_PGMSTRING	0x01
    73c8:	c9 01       	movw	r24, r18
    73ca:	84 1b       	sub	r24, r20
    73cc:	95 0b       	sbc	r25, r21
    73ce:	04 97       	sbiw	r24, 0x04	; 4
    73d0:	08 f4       	brcc	.+2      	; 0x73d4 <malloc+0x78>
    73d2:	a9 01       	movw	r20, r18
    73d4:	e0 e0       	ldi	r30, 0x00	; 0
    73d6:	f0 e0       	ldi	r31, 0x00	; 0
    73d8:	28 c0       	rjmp	.+80     	; 0x742a <malloc+0xce>
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80
    73da:	8d 91       	ld	r24, X+
    73dc:	9c 91       	ld	r25, X
    73de:	11 97       	sbiw	r26, 0x01	; 1
    73e0:	82 17       	cp	r24, r18
    73e2:	93 07       	cpc	r25, r19
    73e4:	f9 f4       	brne	.+62     	; 0x7424 <malloc+0xc8>

    73e6:	48 17       	cp	r20, r24
    73e8:	59 07       	cpc	r21, r25
    73ea:	81 f4       	brne	.+32     	; 0x740c <malloc+0xb0>
    73ec:	ed 01       	movw	r28, r26
    73ee:	8a 81       	ldd	r24, Y+2	; 0x02
    73f0:	9b 81       	ldd	r25, Y+3	; 0x03
int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/
    73f2:	30 97       	sbiw	r30, 0x00	; 0
    73f4:	19 f0       	breq	.+6      	; 0x73fc <malloc+0xa0>

    73f6:	93 83       	std	Z+3, r25	; 0x03
    73f8:	82 83       	std	Z+2, r24	; 0x02
    73fa:	04 c0       	rjmp	.+8      	; 0x7404 <malloc+0xa8>
    stream->len = 0;

    73fc:	90 93 05 07 	sts	0x0705, r25
    7400:	80 93 04 07 	sts	0x0704, r24
    if ((stream->flags & __SWR) == 0)
    7404:	9d 01       	movw	r18, r26
    7406:	2e 5f       	subi	r18, 0xFE	; 254
    7408:	3f 4f       	sbci	r19, 0xFF	; 255
    740a:	4c c0       	rjmp	.+152    	; 0x74a4 <malloc+0x148>
		if (c != '%') break;
	    }
	    putc (c, stream);
	}

	for (flags = 0;
    740c:	84 1b       	sub	r24, r20
    740e:	95 0b       	sbc	r25, r21
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    7410:	fd 01       	movw	r30, r26
    7412:	e8 0f       	add	r30, r24
    7414:	f9 1f       	adc	r31, r25
	{
    7416:	41 93       	st	Z+, r20
    7418:	51 93       	st	Z+, r21
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    741a:	02 97       	sbiw	r24, 0x02	; 2
    741c:	8d 93       	st	X+, r24
    741e:	9c 93       	st	X, r25
		continue;
    7420:	9f 01       	movw	r18, r30
    7422:	40 c0       	rjmp	.+128    	; 0x74a4 <malloc+0x148>

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
    7424:	fd 01       	movw	r30, r26
    7426:	a2 81       	ldd	r26, Z+2	; 0x02
    7428:	b3 81       	ldd	r27, Z+3	; 0x03
#if  PRINTF_LEVEL <= PRINTF_MIN

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
    742a:	10 97       	sbiw	r26, 0x00	; 0
    742c:	b1 f6       	brne	.-84     	; 0x73da <malloc+0x7e>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    742e:	80 91 02 07 	lds	r24, 0x0702
    7432:	90 91 03 07 	lds	r25, 0x0703
    7436:	89 2b       	or	r24, r25
    7438:	41 f4       	brne	.+16     	; 0x744a <malloc+0xee>
	    (void) va_arg (ap, double);
    743a:	80 91 96 03 	lds	r24, 0x0396
    743e:	90 91 97 03 	lds	r25, 0x0397
    7442:	90 93 03 07 	sts	0x0703, r25
    7446:	80 93 02 07 	sts	0x0702, r24
	    putc ('?', stream);
    744a:	20 91 98 03 	lds	r18, 0x0398
    744e:	30 91 99 03 	lds	r19, 0x0399
	    continue;
    7452:	21 15       	cp	r18, r1
    7454:	31 05       	cpc	r19, r1
    7456:	49 f4       	brne	.+18     	; 0x746a <malloc+0x10e>
	}
    7458:	8d b7       	in	r24, 0x3d	; 61
    745a:	28 2f       	mov	r18, r24
    745c:	33 27       	eor	r19, r19
    745e:	80 91 94 03 	lds	r24, 0x0394
    7462:	90 91 95 03 	lds	r25, 0x0395
    7466:	28 1b       	sub	r18, r24
    7468:	39 0b       	sbc	r19, r25

    746a:	a0 91 02 07 	lds	r26, 0x0702
    746e:	b0 91 03 07 	lds	r27, 0x0703
    7472:	2a 1b       	sub	r18, r26
    7474:	3b 0b       	sbc	r19, r27
	{
	    const char * pnt;

	    switch (c) {
    7476:	24 17       	cp	r18, r20
    7478:	35 07       	cpc	r19, r21
    747a:	90 f0       	brcs	.+36     	; 0x74a0 <malloc+0x144>
    747c:	ca 01       	movw	r24, r20
    747e:	02 96       	adiw	r24, 0x02	; 2
    7480:	28 17       	cp	r18, r24
    7482:	39 07       	cpc	r19, r25
    7484:	68 f0       	brcs	.+26     	; 0x74a0 <malloc+0x144>

	      case 'c':
    7486:	9d 01       	movw	r18, r26
    7488:	2e 5f       	subi	r18, 0xFE	; 254
    748a:	3f 4f       	sbci	r19, 0xFF	; 255
    748c:	c9 01       	movw	r24, r18
    748e:	84 0f       	add	r24, r20
    7490:	95 1f       	adc	r25, r21
    7492:	90 93 03 07 	sts	0x0703, r25
    7496:	80 93 02 07 	sts	0x0702, r24
		putc (va_arg (ap, int), stream);
    749a:	4d 93       	st	X+, r20
    749c:	5c 93       	st	X, r21
    749e:	02 c0       	rjmp	.+4      	; 0x74a4 <malloc+0x148>
		continue;
    74a0:	20 e0       	ldi	r18, 0x00	; 0
    74a2:	30 e0       	ldi	r19, 0x00	; 0

	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
    74a4:	c9 01       	movw	r24, r18
    74a6:	df 91       	pop	r29
    74a8:	cf 91       	pop	r28
    74aa:	08 95       	ret

000074ac <free>:
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
		continue;
    74ac:	cf 93       	push	r28
    74ae:	df 93       	push	r29
	    }
	}

	if (c == 'd' || c == 'i') {
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    74b0:	00 97       	sbiw	r24, 0x00	; 0
    74b2:	09 f4       	brne	.+2      	; 0x74b6 <free+0xa>
    74b4:	4e c0       	rjmp	.+156    	; 0x7552 <free+0xa6>
	    flags &= ~FL_ALT;
	    if (x < 0) {
		x = -x;
		/* `putc ('-', stream)' will considarably inlarge stack size.
    74b6:	ec 01       	movw	r28, r24
    74b8:	22 97       	sbiw	r28, 0x02	; 2
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    74ba:	1b 82       	std	Y+3, r1	; 0x03
    74bc:	1a 82       	std	Y+2, r1	; 0x02
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;

	} else {
	    int base;

    74be:	a0 91 04 07 	lds	r26, 0x0704
    74c2:	b0 91 05 07 	lds	r27, 0x0705
    74c6:	10 97       	sbiw	r26, 0x00	; 0
    74c8:	11 f1       	breq	.+68     	; 0x750e <free+0x62>
    74ca:	40 e0       	ldi	r20, 0x00	; 0
    74cc:	50 e0       	ldi	r21, 0x00	; 0
    74ce:	01 c0       	rjmp	.+2      	; 0x74d2 <free+0x26>
	    switch (c) {
	      case 'u':
    74d0:	dc 01       	movw	r26, r24
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    74d2:	ac 17       	cp	r26, r28
    74d4:	bd 07       	cpc	r27, r29
    74d6:	00 f1       	brcs	.+64     	; 0x7518 <free+0x6c>
	        base = 16;
		goto ultoa;
	      case 'X':
    74d8:	bb 83       	std	Y+3, r27	; 0x03
    74da:	aa 83       	std	Y+2, r26	; 0x02
		flags |= FL_ALTHEX;
    74dc:	fe 01       	movw	r30, r28
    74de:	21 91       	ld	r18, Z+
    74e0:	31 91       	ld	r19, Z+
    74e2:	e2 0f       	add	r30, r18
    74e4:	f3 1f       	adc	r31, r19
    74e6:	ea 17       	cp	r30, r26
    74e8:	fb 07       	cpc	r31, r27
    74ea:	71 f4       	brne	.+28     	; 0x7508 <free+0x5c>
	        base = 16 | XTOA_UPPER;
	      ultoa:
    74ec:	8d 91       	ld	r24, X+
    74ee:	9c 91       	ld	r25, X
    74f0:	11 97       	sbiw	r26, 0x01	; 1
    74f2:	28 0f       	add	r18, r24
    74f4:	39 1f       	adc	r19, r25
    74f6:	2e 5f       	subi	r18, 0xFE	; 254
    74f8:	3f 4f       	sbci	r19, 0xFF	; 255
    74fa:	39 83       	std	Y+1, r19	; 0x01
    74fc:	28 83       	st	Y, r18
		c = __ultoa_invert ((flags & FL_LONG)
    74fe:	fd 01       	movw	r30, r26
    7500:	82 81       	ldd	r24, Z+2	; 0x02
    7502:	93 81       	ldd	r25, Z+3	; 0x03
    7504:	9b 83       	std	Y+3, r25	; 0x03
    7506:	8a 83       	std	Y+2, r24	; 0x02
				    ? va_arg(ap, unsigned long)
				    : va_arg(ap, unsigned int),
    7508:	41 15       	cp	r20, r1
    750a:	51 05       	cpc	r21, r1
    750c:	59 f4       	brne	.+22     	; 0x7524 <free+0x78>
				    (char *)buf, base)  -  (char *)buf;
		break;
    750e:	d0 93 05 07 	sts	0x0705, r29
    7512:	c0 93 04 07 	sts	0x0704, r28
    7516:	1d c0       	rjmp	.+58     	; 0x7552 <free+0xa6>
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
    7518:	fd 01       	movw	r30, r26
    751a:	82 81       	ldd	r24, Z+2	; 0x02
    751c:	93 81       	ldd	r25, Z+3	; 0x03
    751e:	ad 01       	movw	r20, r26
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
    7520:	00 97       	sbiw	r24, 0x00	; 0
    7522:	b1 f6       	brne	.-84     	; 0x74d0 <free+0x24>

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
	    putc ('-', stream);
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
	    putc ('0', stream);
    7524:	fa 01       	movw	r30, r20
    7526:	d3 83       	std	Z+3, r29	; 0x03
    7528:	c2 83       	std	Z+2, r28	; 0x02
	    if (flags & FL_ALTHEX)
#if  FL_ALTLWR != 'x' - 'X'
    752a:	21 91       	ld	r18, Z+
    752c:	31 91       	ld	r19, Z+
    752e:	e2 0f       	add	r30, r18
    7530:	f3 1f       	adc	r31, r19
    7532:	ec 17       	cp	r30, r28
    7534:	fd 07       	cpc	r31, r29
    7536:	69 f4       	brne	.+26     	; 0x7552 <free+0xa6>
# error
#endif
    7538:	88 81       	ld	r24, Y
    753a:	99 81       	ldd	r25, Y+1	; 0x01
    753c:	28 0f       	add	r18, r24
    753e:	39 1f       	adc	r19, r25
    7540:	2e 5f       	subi	r18, 0xFE	; 254
    7542:	3f 4f       	sbci	r19, 0xFF	; 255
    7544:	fa 01       	movw	r30, r20
    7546:	31 83       	std	Z+1, r19	; 0x01
    7548:	20 83       	st	Z, r18
		putc ('X' + (flags & FL_ALTLWR), stream);
    754a:	8a 81       	ldd	r24, Y+2	; 0x02
    754c:	9b 81       	ldd	r25, Y+3	; 0x03
    754e:	93 83       	std	Z+3, r25	; 0x03
    7550:	82 83       	std	Z+2, r24	; 0x02
    7552:	df 91       	pop	r29
    7554:	cf 91       	pop	r28
    7556:	08 95       	ret

00007558 <memset>:
    7558:	dc 01       	movw	r26, r24
    755a:	01 c0       	rjmp	.+2      	; 0x755e <memset+0x6>
    755c:	6d 93       	st	X+, r22
    755e:	41 50       	subi	r20, 0x01	; 1
    7560:	50 40       	sbci	r21, 0x00	; 0
    7562:	e0 f7       	brcc	.-8      	; 0x755c <memset+0x4>
    7564:	08 95       	ret

00007566 <__mulsi3>:
    7566:	62 9f       	mul	r22, r18
    7568:	d0 01       	movw	r26, r0
    756a:	73 9f       	mul	r23, r19
    756c:	f0 01       	movw	r30, r0
    756e:	82 9f       	mul	r24, r18
    7570:	e0 0d       	add	r30, r0
    7572:	f1 1d       	adc	r31, r1
    7574:	64 9f       	mul	r22, r20
    7576:	e0 0d       	add	r30, r0
    7578:	f1 1d       	adc	r31, r1
    757a:	92 9f       	mul	r25, r18
    757c:	f0 0d       	add	r31, r0
    757e:	83 9f       	mul	r24, r19
    7580:	f0 0d       	add	r31, r0
    7582:	74 9f       	mul	r23, r20
    7584:	f0 0d       	add	r31, r0
    7586:	65 9f       	mul	r22, r21
    7588:	f0 0d       	add	r31, r0
    758a:	99 27       	eor	r25, r25
    758c:	72 9f       	mul	r23, r18
    758e:	b0 0d       	add	r27, r0
    7590:	e1 1d       	adc	r30, r1
    7592:	f9 1f       	adc	r31, r25
    7594:	63 9f       	mul	r22, r19
    7596:	b0 0d       	add	r27, r0
    7598:	e1 1d       	adc	r30, r1
    759a:	f9 1f       	adc	r31, r25
    759c:	bd 01       	movw	r22, r26
    759e:	cf 01       	movw	r24, r30
    75a0:	11 24       	eor	r1, r1
    75a2:	08 95       	ret

000075a4 <__udivmodhi4>:
    75a4:	aa 1b       	sub	r26, r26
    75a6:	bb 1b       	sub	r27, r27
    75a8:	51 e1       	ldi	r21, 0x11	; 17
    75aa:	07 c0       	rjmp	.+14     	; 0x75ba <__udivmodhi4_ep>

000075ac <__udivmodhi4_loop>:
    75ac:	aa 1f       	adc	r26, r26
    75ae:	bb 1f       	adc	r27, r27
    75b0:	a6 17       	cp	r26, r22
    75b2:	b7 07       	cpc	r27, r23
    75b4:	10 f0       	brcs	.+4      	; 0x75ba <__udivmodhi4_ep>
    75b6:	a6 1b       	sub	r26, r22
    75b8:	b7 0b       	sbc	r27, r23

000075ba <__udivmodhi4_ep>:
    75ba:	88 1f       	adc	r24, r24
    75bc:	99 1f       	adc	r25, r25
    75be:	5a 95       	dec	r21
    75c0:	a9 f7       	brne	.-22     	; 0x75ac <__udivmodhi4_loop>
    75c2:	80 95       	com	r24
    75c4:	90 95       	com	r25
    75c6:	bc 01       	movw	r22, r24
    75c8:	cd 01       	movw	r24, r26
    75ca:	08 95       	ret

000075cc <__divmodhi4>:
    75cc:	97 fb       	bst	r25, 7
    75ce:	09 2e       	mov	r0, r25
    75d0:	07 26       	eor	r0, r23
    75d2:	0a d0       	rcall	.+20     	; 0x75e8 <__divmodhi4_neg1>
    75d4:	77 fd       	sbrc	r23, 7
    75d6:	04 d0       	rcall	.+8      	; 0x75e0 <__divmodhi4_neg2>
    75d8:	e5 df       	rcall	.-54     	; 0x75a4 <__udivmodhi4>
    75da:	06 d0       	rcall	.+12     	; 0x75e8 <__divmodhi4_neg1>
    75dc:	00 20       	and	r0, r0
    75de:	1a f4       	brpl	.+6      	; 0x75e6 <__divmodhi4_exit>

000075e0 <__divmodhi4_neg2>:
    75e0:	70 95       	com	r23
    75e2:	61 95       	neg	r22
    75e4:	7f 4f       	sbci	r23, 0xFF	; 255

000075e6 <__divmodhi4_exit>:
    75e6:	08 95       	ret

000075e8 <__divmodhi4_neg1>:
    75e8:	f6 f7       	brtc	.-4      	; 0x75e6 <__divmodhi4_exit>
    75ea:	90 95       	com	r25
    75ec:	81 95       	neg	r24
    75ee:	9f 4f       	sbci	r25, 0xFF	; 255
    75f0:	08 95       	ret

000075f2 <__udivmodsi4>:
    75f2:	a1 e2       	ldi	r26, 0x21	; 33
    75f4:	1a 2e       	mov	r1, r26
    75f6:	aa 1b       	sub	r26, r26
    75f8:	bb 1b       	sub	r27, r27
    75fa:	fd 01       	movw	r30, r26
    75fc:	0d c0       	rjmp	.+26     	; 0x7618 <__udivmodsi4_ep>

000075fe <__udivmodsi4_loop>:
    75fe:	aa 1f       	adc	r26, r26
    7600:	bb 1f       	adc	r27, r27
    7602:	ee 1f       	adc	r30, r30
    7604:	ff 1f       	adc	r31, r31
    7606:	a2 17       	cp	r26, r18
    7608:	b3 07       	cpc	r27, r19
    760a:	e4 07       	cpc	r30, r20
    760c:	f5 07       	cpc	r31, r21
    760e:	20 f0       	brcs	.+8      	; 0x7618 <__udivmodsi4_ep>
    7610:	a2 1b       	sub	r26, r18
    7612:	b3 0b       	sbc	r27, r19
    7614:	e4 0b       	sbc	r30, r20
    7616:	f5 0b       	sbc	r31, r21

00007618 <__udivmodsi4_ep>:
    7618:	66 1f       	adc	r22, r22
    761a:	77 1f       	adc	r23, r23
    761c:	88 1f       	adc	r24, r24
    761e:	99 1f       	adc	r25, r25
    7620:	1a 94       	dec	r1
    7622:	69 f7       	brne	.-38     	; 0x75fe <__udivmodsi4_loop>
    7624:	60 95       	com	r22
    7626:	70 95       	com	r23
    7628:	80 95       	com	r24
    762a:	90 95       	com	r25
    762c:	9b 01       	movw	r18, r22
    762e:	ac 01       	movw	r20, r24
    7630:	bd 01       	movw	r22, r26
    7632:	cf 01       	movw	r24, r30
    7634:	08 95       	ret

00007636 <__prologue_saves__>:
    7636:	2f 92       	push	r2
    7638:	3f 92       	push	r3
    763a:	4f 92       	push	r4
    763c:	5f 92       	push	r5
    763e:	6f 92       	push	r6
    7640:	7f 92       	push	r7
    7642:	8f 92       	push	r8
    7644:	9f 92       	push	r9
    7646:	af 92       	push	r10
    7648:	bf 92       	push	r11
    764a:	cf 92       	push	r12
    764c:	df 92       	push	r13
    764e:	ef 92       	push	r14
    7650:	ff 92       	push	r15
    7652:	0f 93       	push	r16
    7654:	1f 93       	push	r17
    7656:	cf 93       	push	r28
    7658:	df 93       	push	r29
    765a:	cd b7       	in	r28, 0x3d	; 61
    765c:	de b7       	in	r29, 0x3e	; 62
    765e:	ca 1b       	sub	r28, r26
    7660:	db 0b       	sbc	r29, r27
    7662:	0f b6       	in	r0, 0x3f	; 63
    7664:	f8 94       	cli
    7666:	de bf       	out	0x3e, r29	; 62
    7668:	0f be       	out	0x3f, r0	; 63
    766a:	cd bf       	out	0x3d, r28	; 61
    766c:	09 94       	ijmp

0000766e <__epilogue_restores__>:
    766e:	2a 88       	ldd	r2, Y+18	; 0x12
    7670:	39 88       	ldd	r3, Y+17	; 0x11
    7672:	48 88       	ldd	r4, Y+16	; 0x10
    7674:	5f 84       	ldd	r5, Y+15	; 0x0f
    7676:	6e 84       	ldd	r6, Y+14	; 0x0e
    7678:	7d 84       	ldd	r7, Y+13	; 0x0d
    767a:	8c 84       	ldd	r8, Y+12	; 0x0c
    767c:	9b 84       	ldd	r9, Y+11	; 0x0b
    767e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7680:	b9 84       	ldd	r11, Y+9	; 0x09
    7682:	c8 84       	ldd	r12, Y+8	; 0x08
    7684:	df 80       	ldd	r13, Y+7	; 0x07
    7686:	ee 80       	ldd	r14, Y+6	; 0x06
    7688:	fd 80       	ldd	r15, Y+5	; 0x05
    768a:	0c 81       	ldd	r16, Y+4	; 0x04
    768c:	1b 81       	ldd	r17, Y+3	; 0x03
    768e:	aa 81       	ldd	r26, Y+2	; 0x02
    7690:	b9 81       	ldd	r27, Y+1	; 0x01
    7692:	ce 0f       	add	r28, r30
    7694:	d1 1d       	adc	r29, r1
    7696:	0f b6       	in	r0, 0x3f	; 63
    7698:	f8 94       	cli
    769a:	de bf       	out	0x3e, r29	; 62
    769c:	0f be       	out	0x3f, r0	; 63
    769e:	cd bf       	out	0x3d, r28	; 61
    76a0:	ed 01       	movw	r28, r26
    76a2:	08 95       	ret

000076a4 <__eeprom_read_byte_1F2021>:
    76a4:	f9 99       	sbic	0x1f, 1	; 31
    76a6:	fe cf       	rjmp	.-4      	; 0x76a4 <__eeprom_read_byte_1F2021>
    76a8:	b2 bd       	out	0x22, r27	; 34
    76aa:	a1 bd       	out	0x21, r26	; 33
    76ac:	f8 9a       	sbi	0x1f, 0	; 31
    76ae:	11 96       	adiw	r26, 0x01	; 1
    76b0:	00 b4       	in	r0, 0x20	; 32
    76b2:	08 95       	ret

000076b4 <__eeprom_write_byte_1F2021>:
    76b4:	f9 99       	sbic	0x1f, 1	; 31
    76b6:	fe cf       	rjmp	.-4      	; 0x76b4 <__eeprom_write_byte_1F2021>
    76b8:	b2 bd       	out	0x22, r27	; 34
    76ba:	a1 bd       	out	0x21, r26	; 33
    76bc:	00 bc       	out	0x20, r0	; 32
    76be:	11 96       	adiw	r26, 0x01	; 1
    76c0:	0f b6       	in	r0, 0x3f	; 63
    76c2:	f8 94       	cli
    76c4:	fa 9a       	sbi	0x1f, 2	; 31
    76c6:	f9 9a       	sbi	0x1f, 1	; 31
    76c8:	0f be       	out	0x3f, r0	; 63
    76ca:	08 95       	ret

000076cc <__divmodsi4>:
    76cc:	97 fb       	bst	r25, 7
    76ce:	09 2e       	mov	r0, r25
    76d0:	05 26       	eor	r0, r21
    76d2:	0e d0       	rcall	.+28     	; 0x76f0 <__divmodsi4_neg1>
    76d4:	57 fd       	sbrc	r21, 7
    76d6:	04 d0       	rcall	.+8      	; 0x76e0 <__divmodsi4_neg2>
    76d8:	8c df       	rcall	.-232    	; 0x75f2 <__udivmodsi4>
    76da:	0a d0       	rcall	.+20     	; 0x76f0 <__divmodsi4_neg1>
    76dc:	00 1c       	adc	r0, r0
    76de:	38 f4       	brcc	.+14     	; 0x76ee <__divmodsi4_exit>

000076e0 <__divmodsi4_neg2>:
    76e0:	50 95       	com	r21
    76e2:	40 95       	com	r20
    76e4:	30 95       	com	r19
    76e6:	21 95       	neg	r18
    76e8:	3f 4f       	sbci	r19, 0xFF	; 255
    76ea:	4f 4f       	sbci	r20, 0xFF	; 255
    76ec:	5f 4f       	sbci	r21, 0xFF	; 255

000076ee <__divmodsi4_exit>:
    76ee:	08 95       	ret

000076f0 <__divmodsi4_neg1>:
    76f0:	f6 f7       	brtc	.-4      	; 0x76ee <__divmodsi4_exit>
    76f2:	90 95       	com	r25
    76f4:	80 95       	com	r24
    76f6:	70 95       	com	r23
    76f8:	61 95       	neg	r22
    76fa:	7f 4f       	sbci	r23, 0xFF	; 255
    76fc:	8f 4f       	sbci	r24, 0xFF	; 255
    76fe:	9f 4f       	sbci	r25, 0xFF	; 255
    7700:	08 95       	ret

00007702 <_exit>:
    7702:	ff cf       	rjmp	.-2      	; 0x7702 <_exit>


basic_sensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800200  00007332  000073a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d7  008003c4  000074f6  0000756a  2**0
                  ALLOC
  3 .stab         0000fa38  00000000  00000000  0000756c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000087fa  00000000  00000000  00016fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__ctors_end>
       4:	0c 94 6b 2d 	jmp	0x5ad6	; 0x5ad6 <__vector_1>
       8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
       c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      10:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      14:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      18:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      1c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      20:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_8>
      24:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__vector_9>
      28:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      2c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      30:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      34:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__vector_13>
      38:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      3c:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <__vector_13>
      40:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      44:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__vector_17>
      48:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      4c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      50:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      54:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      58:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      5c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      60:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      64:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      68:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      6c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      70:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      74:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      78:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      7c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      80:	0c 94 5f 2b 	jmp	0x56be	; 0x56be <__vector_32>
      84:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      88:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      8c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      90:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      94:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      98:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      9c:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      a0:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      a4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      a8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      ac:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      b0:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      b4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      b8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      bc:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      c0:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      c4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      c8:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__bad_interrupt>
      cc:	b5 1a       	sub	r11, r21
      ce:	bb 1a       	sub	r11, r27
      d0:	be 1a       	sub	r11, r30
      d2:	c1 1a       	sub	r12, r17
      d4:	c4 1a       	sub	r12, r20
      d6:	c7 1a       	sub	r12, r23
      d8:	cd 1a       	sub	r12, r29
      da:	ca 1a       	sub	r12, r26
      dc:	d0 1a       	sub	r13, r16
      de:	d3 1a       	sub	r13, r19
      e0:	d6 1a       	sub	r13, r22
      e2:	df 1a       	sub	r13, r31
      e4:	e2 1a       	sub	r14, r18
      e6:	e5 1a       	sub	r14, r21
      e8:	e8 1a       	sub	r14, r24
      ea:	dc 1a       	sub	r13, r28
      ec:	b2 1a       	sub	r11, r18
      ee:	b8 1a       	sub	r11, r24
      f0:	eb 1a       	sub	r14, r27
      f2:	ee 1a       	sub	r14, r30
      f4:	d9 1a       	sub	r13, r25

000000f6 <__c.2383>:
      f6:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     106:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

00000115 <__c.2363>:
     115:	46 61 69 6c 65 64 20 74 6f 20 6f 70 65 6e 20 73     Failed to open s
     125:	65 6e 73 6f 72 20 64 72 69 76 65 72 0d 0a 00        ensor driver...

00000134 <__c.2798>:
     134:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     144:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     154:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

00000161 <__c.2736>:
     161:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     171:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     181:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

0000018d <__c.2420>:
     18d:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000194 <__c.2417>:
     194:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001a3 <__c.2414>:
     1a3:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001b4 <__c.2411>:
     1b4:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1c4:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001cf <__c.2408>:
     1cf:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1df:	20 53 69 67 6e 61 6c 00                              Signal.

000001e7 <__c.2405>:
     1e7:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     1f7:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000207 <__c.2402>:
     207:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     217:	72 6f 72 00                                         ror.

0000021b <__c.2399>:
     21b:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000022c <__c.2396>:
     22c:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     23c:	61 72 74 00                                         art.

00000240 <__c.2393>:
     240:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000024f <__c.2390>:
     24f:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     25f:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000026a <__c.2387>:
     26a:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000276 <__c.2384>:
     276:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     286:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     296:	20 6f 6b 3f 00                                       ok?.

0000029b <__c.2381>:
     29b:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2ab:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002b9 <__c.2378>:
     2b9:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2c9:	72 74 00                                            rt.

000002cc <__c.2375>:
     2cc:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2dc:	49 44 00                                            ID.

000002df <__c.2372>:
     2df:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2ef:	20 57 61 6b 65 75 70 00                              Wakeup.

000002f7 <__c.2369>:
     2f7:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     307:	6c 61 74 65 64 00                                   lated.

0000030d <__c.2366>:
     30d:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     31d:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000328 <__c.2363>:
     328:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     338:	69 6e 74 65 72 00                                   inter.

0000033e <__c.2360>:
     33e:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     34e:	6c 6f 77 00                                         low.

00000352 <__c.2356>:
     352:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     362:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     372:	6e 6f 75 67 68 21 00                                nough!.

00000379 <__c.2353>:
     379:	29 3a 20 00                                         ): .

0000037d <__c.2351>:
     37d:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000389 <__c.2270>:
     389:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000398 <__c.2062>:
     398:	45 46 47 65 66 67 00                                EFGefg.

0000039f <__c.2056>:
     39f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000003b0 <__ctors_end>:
     3b0:	11 24       	eor	r1, r1
     3b2:	1f be       	out	0x3f, r1	; 63
     3b4:	cf ef       	ldi	r28, 0xFF	; 255
     3b6:	d1 e2       	ldi	r29, 0x21	; 33
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	cd bf       	out	0x3d, r28	; 61

000003bc <__do_copy_data>:
     3bc:	13 e0       	ldi	r17, 0x03	; 3
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	b2 e0       	ldi	r27, 0x02	; 2
     3c2:	e2 e3       	ldi	r30, 0x32	; 50
     3c4:	f3 e7       	ldi	r31, 0x73	; 115
     3c6:	00 e0       	ldi	r16, 0x00	; 0
     3c8:	0b bf       	out	0x3b, r16	; 59
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__do_copy_data+0x14>
     3cc:	07 90       	elpm	r0, Z+
     3ce:	0d 92       	st	X+, r0
     3d0:	a4 3c       	cpi	r26, 0xC4	; 196
     3d2:	b1 07       	cpc	r27, r17
     3d4:	d9 f7       	brne	.-10     	; 0x3cc <__do_copy_data+0x10>

000003d6 <__do_clear_bss>:
     3d6:	15 e0       	ldi	r17, 0x05	; 5
     3d8:	a4 ec       	ldi	r26, 0xC4	; 196
     3da:	b3 e0       	ldi	r27, 0x03	; 3
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <.do_clear_bss_start>

000003de <.do_clear_bss_loop>:
     3de:	1d 92       	st	X+, r1

000003e0 <.do_clear_bss_start>:
     3e0:	ab 39       	cpi	r26, 0x9B	; 155
     3e2:	b1 07       	cpc	r27, r17
     3e4:	e1 f7       	brne	.-8      	; 0x3de <.do_clear_bss_loop>
     3e6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <main>
     3ea:	0c 94 98 39 	jmp	0x7330	; 0x7330 <_exit>

000003ee <__bad_interrupt>:
     3ee:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <__vector_default>

000003f2 <nrk_register_drivers>:
	//     #define NRK_MAX_DRIVER_CNT  
	//     in nrk_cfg.h
	// Make sure to add: 
	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
	//     in makefile
	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	87 ed       	ldi	r24, 0xD7	; 215
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 3f 29 	call	0x527e	; 0x527e <nrk_register_driver>
	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     3fc:	8f 3f       	cpi	r24, 0xFF	; 255
     3fe:	21 f4       	brne	.+8      	; 0x408 <nrk_register_drivers+0x16>
     400:	86 ef       	ldi	r24, 0xF6	; 246
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
     408:	08 95       	ret

0000040a <nrk_create_taskset>:
}


	void
nrk_create_taskset()
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
	TaskOne.task = Task1;
     40e:	8d e5       	ldi	r24, 0x5D	; 93
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	90 93 d0 03 	sts	0x03D0, r25
     416:	80 93 cf 03 	sts	0x03CF, r24
	nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     41a:	0a ec       	ldi	r16, 0xCA	; 202
     41c:	13 e0       	ldi	r17, 0x03	; 3
     41e:	40 e8       	ldi	r20, 0x80	; 128
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	61 ef       	ldi	r22, 0xF1	; 241
     424:	73 e0       	ldi	r23, 0x03	; 3
     426:	c8 01       	movw	r24, r16
     428:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <nrk_task_set_stk>
	TaskOne.prio = 1;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	80 93 d2 03 	sts	0x03D2, r24
	TaskOne.FirstActivation = TRUE;
     432:	80 93 d1 03 	sts	0x03D1, r24
	TaskOne.Type = BASIC_TASK;
     436:	80 93 d3 03 	sts	0x03D3, r24
	TaskOne.SchType = PREEMPTIVE;
     43a:	80 93 d4 03 	sts	0x03D4, r24
	TaskOne.period.secs = 0;
     43e:	10 92 d5 03 	sts	0x03D5, r1
     442:	10 92 d6 03 	sts	0x03D6, r1
     446:	10 92 d7 03 	sts	0x03D7, r1
     44a:	10 92 d8 03 	sts	0x03D8, r1
	TaskOne.period.nano_secs = 100*NANOS_PER_MS;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	91 ee       	ldi	r25, 0xE1	; 225
     452:	a5 ef       	ldi	r26, 0xF5	; 245
     454:	b5 e0       	ldi	r27, 0x05	; 5
     456:	80 93 d9 03 	sts	0x03D9, r24
     45a:	90 93 da 03 	sts	0x03DA, r25
     45e:	a0 93 db 03 	sts	0x03DB, r26
     462:	b0 93 dc 03 	sts	0x03DC, r27
	TaskOne.cpu_reserve.secs = 0;
     466:	10 92 dd 03 	sts	0x03DD, r1
     46a:	10 92 de 03 	sts	0x03DE, r1
     46e:	10 92 df 03 	sts	0x03DF, r1
     472:	10 92 e0 03 	sts	0x03E0, r1
	TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	90 ef       	ldi	r25, 0xF0	; 240
     47a:	aa ef       	ldi	r26, 0xFA	; 250
     47c:	b2 e0       	ldi	r27, 0x02	; 2
     47e:	80 93 e1 03 	sts	0x03E1, r24
     482:	90 93 e2 03 	sts	0x03E2, r25
     486:	a0 93 e3 03 	sts	0x03E3, r26
     48a:	b0 93 e4 03 	sts	0x03E4, r27
	TaskOne.offset.secs = 0;
     48e:	10 92 e5 03 	sts	0x03E5, r1
     492:	10 92 e6 03 	sts	0x03E6, r1
     496:	10 92 e7 03 	sts	0x03E7, r1
     49a:	10 92 e8 03 	sts	0x03E8, r1
	TaskOne.offset.nano_secs= 0;
     49e:	10 92 e9 03 	sts	0x03E9, r1
     4a2:	10 92 ea 03 	sts	0x03EA, r1
     4a6:	10 92 eb 03 	sts	0x03EB, r1
     4aa:	10 92 ec 03 	sts	0x03EC, r1
	nrk_activate_task (&TaskOne);
     4ae:	c8 01       	movw	r24, r16
     4b0:	0e 94 10 23 	call	0x4620	; 0x4620 <nrk_activate_task>
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <Task1>:
	return 0;
}


void Task1()
{
     4ba:	8f 92       	push	r8
     4bc:	9f 92       	push	r9
     4be:	af 92       	push	r10
     4c0:	bf 92       	push	r11
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	22 97       	sbiw	r28, 0x02	; 2
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	int8_t fd,val;
	uint16_t buf;

	printf( "My node's address is %d\r\n",NODE_ADDR );
     4e0:	1f 92       	push	r1
     4e2:	1f 92       	push	r1
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

	printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4f0:	0e 94 1e 21 	call	0x423c	; 0x423c <nrk_get_pid>
     4f4:	99 27       	eor	r25, r25
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	8a e1       	ldi	r24, 0x1A	; 26
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

	// Open ADC device as read 
	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
     506:	65 e0       	ldi	r22, 0x05	; 5
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <nrk_open>
     50e:	18 2f       	mov	r17, r24
	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
     510:	8d b7       	in	r24, 0x3d	; 61
     512:	9e b7       	in	r25, 0x3e	; 62
     514:	08 96       	adiw	r24, 0x08	; 8
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	9e bf       	out	0x3e, r25	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	8d bf       	out	0x3d, r24	; 61
     520:	1f 3f       	cpi	r17, 0xFF	; 255
     522:	21 f4       	brne	.+8      	; 0x52c <Task1+0x72>
     524:	85 e1       	ldi	r24, 0x15	; 21
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>

	while(1) {
		nrk_led_toggle(BLUE_LED);
		// Example of setting a sensor 
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);	
		val=nrk_read(fd,&buf,2);
     52c:	7e 01       	movw	r14, r28
     52e:	08 94       	sec
     530:	e1 1c       	adc	r14, r1
     532:	f1 1c       	adc	r15, r1
		printf( "x=%d,",buf);
     534:	29 e2       	ldi	r18, 0x29	; 41
     536:	82 2e       	mov	r8, r18
     538:	22 e0       	ldi	r18, 0x02	; 2
     53a:	92 2e       	mov	r9, r18
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
       val=nrk_read(fd,&buf,2);
       printf( "y=%d,",buf);
     53c:	9f e2       	ldi	r25, 0x2F	; 47
     53e:	a9 2e       	mov	r10, r25
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	b9 2e       	mov	r11, r25

       val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
       val=nrk_read(fd,&buf,2);
       printf( "z=%d\r\n",buf);	
     544:	85 e3       	ldi	r24, 0x35	; 53
     546:	c8 2e       	mov	r12, r24
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	d8 2e       	mov	r13, r24
	// Open ADC device as read 
	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));

	while(1) {
		nrk_led_toggle(BLUE_LED);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <nrk_led_toggle>
		// Example of setting a sensor 
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);	
     554:	42 e0       	ldi	r20, 0x02	; 2
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	81 2f       	mov	r24, r17
     55a:	0e 94 cf 29 	call	0x539e	; 0x539e <nrk_set_status>
		val=nrk_read(fd,&buf,2);
     55e:	42 e0       	ldi	r20, 0x02	; 2
     560:	b7 01       	movw	r22, r14
     562:	81 2f       	mov	r24, r17
     564:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <nrk_read>
		printf( "x=%d,",buf);
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	9f 92       	push	r9
     572:	8f 92       	push	r8
     574:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     578:	45 e0       	ldi	r20, 0x05	; 5
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	81 2f       	mov	r24, r17
     57e:	0e 94 cf 29 	call	0x539e	; 0x539e <nrk_set_status>
       val=nrk_read(fd,&buf,2);
     582:	42 e0       	ldi	r20, 0x02	; 2
     584:	b7 01       	movw	r22, r14
     586:	81 2f       	mov	r24, r17
     588:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <nrk_read>
       printf( "y=%d,",buf);
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	bf 92       	push	r11
     596:	af 92       	push	r10
     598:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

       val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
     59c:	46 e0       	ldi	r20, 0x06	; 6
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	81 2f       	mov	r24, r17
     5a2:	0e 94 cf 29 	call	0x539e	; 0x539e <nrk_set_status>
       val=nrk_read(fd,&buf,2);
     5a6:	42 e0       	ldi	r20, 0x02	; 2
     5a8:	b7 01       	movw	r22, r14
     5aa:	81 2f       	mov	r24, r17
     5ac:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <nrk_read>
       printf( "z=%d\r\n",buf);	
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	df 92       	push	r13
     5ba:	cf 92       	push	r12
     5bc:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

		//TODO: ESE 350- Insert your code here for other sensors. see http://www.nanork.org/wiki/firefly-basic-sensor-driver

		nrk_wait_until_next_period();
     5c0:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <nrk_wait_until_next_period>
	}
     5c4:	8d b7       	in	r24, 0x3d	; 61
     5c6:	9e b7       	in	r25, 0x3e	; 62
     5c8:	0c 96       	adiw	r24, 0x0c	; 12
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	9e bf       	out	0x3e, r25	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	8d bf       	out	0x3d, r24	; 61
     5d4:	bb cf       	rjmp	.-138    	; 0x54c <Task1+0x92>

000005d6 <main>:
void nrk_register_drivers();
uint8_t kill_stack(uint8_t val);

int
main ()
{
     5d6:	cf ef       	ldi	r28, 0xFF	; 255
     5d8:	d1 e2       	ldi	r29, 0x21	; 33
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t t;
	nrk_setup_ports();
     5de:	0e 94 2b 12 	call	0x2456	; 0x2456 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
     5e2:	87 e0       	ldi	r24, 0x07	; 7
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <nrk_setup_uart>

	printf( "Starting up...\r\n" );
     5ea:	8c e3       	ldi	r24, 0x3C	; 60
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 0e 37 	call	0x6e1c	; 0x6e1c <puts>

	nrk_init();
     5f2:	0e 94 b2 18 	call	0x3164	; 0x3164 <nrk_init>
	nrk_time_set(0,0);
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 74 24 	call	0x48e8	; 0x48e8 <nrk_time_set>

	nrk_register_drivers();
     60a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <nrk_register_drivers>
	nrk_create_taskset ();
     60e:	0e 94 05 02 	call	0x40a	; 0x40a <nrk_create_taskset>
	nrk_start();
     612:	0e 94 52 18 	call	0x30a4	; 0x30a4 <nrk_start>

	return 0;
}
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0c 94 98 39 	jmp	0x7330	; 0x7330 <_exit>

0000061e <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
     61e:	ea e7       	ldi	r30, 0x7A	; 122
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	80 83       	st	Z, r24
     626:	ac e7       	ldi	r26, 0x7C	; 124
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	80 e4       	ldi	r24, 0x40	; 64
     62c:	8c 93       	st	X, r24
  ADC_ENABLE ();
     62e:	80 81       	ld	r24, Z
     630:	80 68       	ori	r24, 0x80	; 128
     632:	80 83       	st	Z, r24
  channel=0;
     634:	10 92 f7 04 	sts	0x04F7, r1
  ADC_SET_CHANNEL (0);
     638:	8c 91       	ld	r24, X
     63a:	80 7e       	andi	r24, 0xE0	; 224
     63c:	8c 93       	st	X, r24
     63e:	9c 91       	ld	r25, X
     640:	8c 91       	ld	r24, X
     642:	80 7e       	andi	r24, 0xE0	; 224
     644:	89 2b       	or	r24, r25
     646:	8c 93       	st	X, r24
     648:	08 95       	ret

0000064a <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
     64a:	88 ec       	ldi	r24, 0xC8	; 200
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
     652:	08 95       	ret

00000654 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
     654:	80 91 7a 00 	lds	r24, 0x007A
     658:	80 64       	ori	r24, 0x40	; 64
     65a:	80 93 7a 00 	sts	0x007A, r24
     65e:	80 91 7a 00 	lds	r24, 0x007A
     662:	84 ff       	sbrs	r24, 4
     664:	fc cf       	rjmp	.-8      	; 0x65e <get_adc_val+0xa>
	delay();
     666:	0e 94 25 03 	call	0x64a	; 0x64a <delay>
	ADC_GET_SAMPLE_10(adc_val);
     66a:	20 91 78 00 	lds	r18, 0x0078
     66e:	33 27       	eor	r19, r19
     670:	80 91 79 00 	lds	r24, 0x0079
     674:	99 27       	eor	r25, r25
     676:	98 2f       	mov	r25, r24
     678:	88 27       	eor	r24, r24
	return adc_val;
}
     67a:	82 2b       	or	r24, r18
     67c:	93 2b       	or	r25, r19
     67e:	08 95       	ret

00000680 <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	22 97       	sbiw	r28, 0x02	; 2
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
     69a:	0e 94 96 05 	call	0xb2c	; 0xb2c <rf_get_sem>
     69e:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
     6a4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
     6a8:	15 9a       	sbi	0x02, 5	; 2
     6aa:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
     6ac:	8f 2d       	mov	r24, r15
     6ae:	80 62       	ori	r24, 0x20	; 32
     6b0:	99 27       	eor	r25, r25
     6b2:	9a 83       	std	Y+2, r25	; 0x02
     6b4:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
     6b6:	40 98       	cbi	0x08, 0	; 8
     6b8:	8b e1       	ldi	r24, 0x1B	; 27
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <read_voltage_status+0x3c>
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	89 2f       	mov	r24, r25
     6c8:	99 27       	eor	r25, r25
     6ca:	8e bd       	out	0x2e, r24	; 46
     6cc:	0d b4       	in	r0, 0x2d	; 45
     6ce:	07 fe       	sbrs	r0, 7
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <read_voltage_status+0x4c>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	8e bd       	out	0x2e, r24	; 46
     6d8:	0d b4       	in	r0, 0x2d	; 45
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <read_voltage_status+0x58>
     6de:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
     6e8:	40 98       	cbi	0x08, 0	; 8
     6ea:	8b e5       	ldi	r24, 0x5B	; 91
     6ec:	8e bd       	out	0x2e, r24	; 46
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <read_voltage_status+0x6e>
     6f4:	1e bc       	out	0x2e, r1	; 46
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <read_voltage_status+0x76>
     6fc:	8e b5       	in	r24, 0x2e	; 46
     6fe:	99 27       	eor	r25, r25
     700:	98 2f       	mov	r25, r24
     702:	88 27       	eor	r24, r24
     704:	9a 83       	std	Y+2, r25	; 0x02
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	1e bc       	out	0x2e, r1	; 46
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <read_voltage_status+0x8a>
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	2e b5       	in	r18, 0x2e	; 46
     716:	33 27       	eor	r19, r19
     718:	28 2b       	or	r18, r24
     71a:	39 2b       	or	r19, r25
     71c:	3a 83       	std	Y+2, r19	; 0x02
     71e:	29 83       	std	Y+1, r18	; 0x01
     720:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	9a 81       	ldd	r25, Y+2	; 0x02
     726:	86 fd       	sbrc	r24, 6
     728:	05 c0       	rjmp	.+10     	; 0x734 <read_voltage_status+0xb4>
level++;
     72a:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
     72c:	2f e1       	ldi	r18, 0x1F	; 31
     72e:	f2 16       	cp	r15, r18
     730:	09 f0       	breq	.+2      	; 0x734 <read_voltage_status+0xb4>
     732:	bc cf       	rjmp	.-136    	; 0x6ac <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
     734:	01 15       	cp	r16, r1
     736:	11 05       	cpc	r17, r1
     738:	19 f0       	breq	.+6      	; 0x740 <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
     73a:	c8 01       	movw	r24, r16
     73c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
if(level==0)
     740:	ff 20       	and	r15, r15
     742:	c9 f4       	brne	.+50     	; 0x776 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
     744:	0e 94 2a 03 	call	0x654	; 0x654 <get_adc_val>
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	8f 3a       	cpi	r24, 0xAF	; 175
     752:	91 05       	cpc	r25, r1
     754:	30 f0       	brcs	.+12     	; 0x762 <read_voltage_status+0xe2>
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	9a 81       	ldd	r25, Y+2	; 0x02
     75a:	8e 5a       	subi	r24, 0xAE	; 174
     75c:	90 40       	sbci	r25, 0x00	; 0
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	8a 54       	subi	r24, 0x4A	; 74
     768:	91 40       	sbci	r25, 0x01	; 1
     76a:	98 f4       	brcc	.+38     	; 0x792 <read_voltage_status+0x112>
     76c:	8a e4       	ldi	r24, 0x4A	; 74
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	0e c0       	rjmp	.+28     	; 0x792 <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
     776:	2d e7       	ldi	r18, 0x7D	; 125
     778:	f2 9e       	mul	r15, r18
     77a:	90 01       	movw	r18, r0
     77c:	11 24       	eor	r1, r1
     77e:	88 e2       	ldi	r24, 0x28	; 40
     780:	93 e2       	ldi	r25, 0x23	; 35
     782:	82 1b       	sub	r24, r18
     784:	93 0b       	sbc	r25, r19
     786:	6b e1       	ldi	r22, 0x1B	; 27
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	0e 94 18 39 	call	0x7230	; 0x7230 <__divmodhi4>
     78e:	7a 83       	std	Y+2, r23	; 0x02
     790:	69 83       	std	Y+1, r22	; 0x01

return val;
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	22 96       	adiw	r28, 0x02	; 2
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	08 95       	ret

000007ae <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	98 2f       	mov	r25, r24
     7c0:	ea 01       	movw	r28, r20
     7c2:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	09 f4       	brne	.+2      	; 0x7ca <dev_manager_ff_sensors+0x1c>
     7c8:	81 c0       	rjmp	.+258    	; 0x8cc <dev_manager_ff_sensors+0x11e>
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	30 f4       	brcc	.+12     	; 0x7da <dev_manager_ff_sensors+0x2c>
     7ce:	88 23       	and	r24, r24
     7d0:	71 f0       	breq	.+28     	; 0x7ee <dev_manager_ff_sensors+0x40>
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <dev_manager_ff_sensors+0x2a>
     7d6:	d2 c0       	rjmp	.+420    	; 0x97c <dev_manager_ff_sensors+0x1ce>
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <dev_manager_ff_sensors+0x4c>
     7da:	84 30       	cpi	r24, 0x04	; 4
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <dev_manager_ff_sensors+0x32>
     7de:	81 c0       	rjmp	.+258    	; 0x8e2 <dev_manager_ff_sensors+0x134>
     7e0:	84 30       	cpi	r24, 0x04	; 4
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <dev_manager_ff_sensors+0x38>
     7e4:	77 c0       	rjmp	.+238    	; 0x8d4 <dev_manager_ff_sensors+0x126>
     7e6:	85 30       	cpi	r24, 0x05	; 5
     7e8:	09 f0       	breq	.+2      	; 0x7ec <dev_manager_ff_sensors+0x3e>
     7ea:	c8 c0       	rjmp	.+400    	; 0x97c <dev_manager_ff_sensors+0x1ce>
     7ec:	2d c0       	rjmp	.+90     	; 0x848 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
     7f2:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
     7f4:	0e 94 0f 03 	call	0x61e	; 0x61e <init_adc>
     7f8:	6a c0       	rjmp	.+212    	; 0x8ce <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
     7fa:	80 91 f6 04 	lds	r24, 0x04F6
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	09 f4       	brne	.+2      	; 0x804 <dev_manager_ff_sensors+0x56>
     802:	c3 c0       	rjmp	.+390    	; 0x98a <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
     804:	90 93 f6 04 	sts	0x04F6, r25
		    if(opt&READ_FLAG)
     808:	77 27       	eor	r23, r23
     80a:	60 ff       	sbrs	r22, 0
     80c:	13 c0       	rjmp	.+38     	; 0x834 <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
     80e:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
     810:	10 92 f7 04 	sts	0x04F7, r1
  			ADC_SET_CHANNEL (0);
     814:	80 91 7c 00 	lds	r24, 0x007C
     818:	80 7e       	andi	r24, 0xE0	; 224
     81a:	80 93 7c 00 	sts	0x007C, r24
     81e:	90 91 7c 00 	lds	r25, 0x007C
     822:	80 91 7c 00 	lds	r24, 0x007C
     826:	80 7e       	andi	r24, 0xE0	; 224
     828:	89 2b       	or	r24, r25
     82a:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
     82e:	88 ee       	ldi	r24, 0xE8	; 232
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	9f c0       	rjmp	.+318    	; 0x972 <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
     834:	61 fd       	sbrc	r22, 1
     836:	a9 c0       	rjmp	.+338    	; 0x98a <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
     838:	62 fd       	sbrc	r22, 2
     83a:	a7 c0       	rjmp	.+334    	; 0x98a <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
     83c:	67 70       	andi	r22, 0x07	; 7
     83e:	70 70       	andi	r23, 0x00	; 0
     840:	67 2b       	or	r22, r23
     842:	09 f4       	brne	.+2      	; 0x846 <dev_manager_ff_sensors+0x98>
     844:	a2 c0       	rjmp	.+324    	; 0x98a <dev_manager_ff_sensors+0x1dc>
     846:	97 c0       	rjmp	.+302    	; 0x976 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
     848:	82 2f       	mov	r24, r18
     84a:	81 50       	subi	r24, 0x01	; 1
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	08 f0       	brcs	.+2      	; 0x852 <dev_manager_ff_sensors+0xa4>
     850:	99 c0       	rjmp	.+306    	; 0x984 <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
     852:	90 91 f7 04 	lds	r25, 0x04F7
     856:	89 2f       	mov	r24, r25
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	86 30       	cpi	r24, 0x06	; 6
     85c:	18 f4       	brcc	.+6      	; 0x864 <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
     85e:	0e 94 2a 03 	call	0x654	; 0x654 <get_adc_val>
     862:	22 c0       	rjmp	.+68     	; 0x8a8 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
     864:	99 23       	and	r25, r25
     866:	19 f4       	brne	.+6      	; 0x86e <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
     868:	0e 94 40 03 	call	0x680	; 0x680 <read_voltage_status>
     86c:	1d c0       	rjmp	.+58     	; 0x8a8 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
     86e:	97 30       	cpi	r25, 0x07	; 7
     870:	51 f5       	brne	.+84     	; 0x8c6 <dev_manager_ff_sensors+0x118>
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	cf 2e       	mov	r12, r31
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	df 2e       	mov	r13, r31
     87a:	ee 24       	eor	r14, r14
     87c:	ff 24       	eor	r15, r15
     87e:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
     880:	0e 94 2a 03 	call	0x654	; 0x654 <get_adc_val>
     884:	8c 15       	cp	r24, r12
     886:	9d 05       	cpc	r25, r13
     888:	08 f4       	brcc	.+2      	; 0x88c <dev_manager_ff_sensors+0xde>
     88a:	6c 01       	movw	r12, r24
     88c:	e8 16       	cp	r14, r24
     88e:	f9 06       	cpc	r15, r25
     890:	08 f4       	brcc	.+2      	; 0x894 <dev_manager_ff_sensors+0xe6>
     892:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
     894:	8d e7       	ldi	r24, 0x7D	; 125
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
     89c:	0f 5f       	subi	r16, 0xFF	; 255
     89e:	00 34       	cpi	r16, 0x40	; 64
     8a0:	79 f7       	brne	.-34     	; 0x880 <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
     8a2:	c7 01       	movw	r24, r14
     8a4:	8c 19       	sub	r24, r12
     8a6:	9d 09       	sbc	r25, r13
				if(size==2)
     8a8:	12 30       	cpi	r17, 0x02	; 2
     8aa:	31 f4       	brne	.+12     	; 0x8b8 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
     8ac:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
     8ae:	89 2f       	mov	r24, r25
     8b0:	99 27       	eor	r25, r25
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
     8b8:	11 30       	cpi	r17, 0x01	; 1
     8ba:	29 f4       	brne	.+10     	; 0x8c6 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	96 95       	lsr	r25
     8c2:	87 95       	ror	r24
     8c4:	88 83       	st	Y, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
     8cc:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
     8ce:	10 92 f6 04 	sts	0x04F6, r1
     8d2:	51 c0       	rjmp	.+162    	; 0x976 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
     8d4:	61 30       	cpi	r22, 0x01	; 1
     8d6:	09 f0       	breq	.+2      	; 0x8da <dev_manager_ff_sensors+0x12c>
     8d8:	58 c0       	rjmp	.+176    	; 0x98a <dev_manager_ff_sensors+0x1dc>
     8da:	80 91 f7 04 	lds	r24, 0x04F7
     8de:	99 27       	eor	r25, r25
     8e0:	56 c0       	rjmp	.+172    	; 0x98e <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
     8e2:	61 30       	cpi	r22, 0x01	; 1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <dev_manager_ff_sensors+0x13a>
     8e6:	51 c0       	rjmp	.+162    	; 0x98a <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
     8e8:	27 30       	cpi	r18, 0x07	; 7
     8ea:	d9 f4       	brne	.+54     	; 0x922 <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
     8ec:	20 93 f7 04 	sts	0x04F7, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
     8f0:	80 91 7c 00 	lds	r24, 0x007C
     8f4:	8f 77       	andi	r24, 0x7F	; 127
     8f6:	80 93 7c 00 	sts	0x007C, r24
     8fa:	80 91 7c 00 	lds	r24, 0x007C
     8fe:	80 64       	ori	r24, 0x40	; 64
     900:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
     904:	80 91 7c 00 	lds	r24, 0x007C
     908:	80 7e       	andi	r24, 0xE0	; 224
     90a:	80 93 7c 00 	sts	0x007C, r24
     90e:	90 91 7c 00 	lds	r25, 0x007C
     912:	80 91 7c 00 	lds	r24, 0x007C
     916:	93 60       	ori	r25, 0x03	; 3
     918:	80 7e       	andi	r24, 0xE0	; 224
     91a:	98 2b       	or	r25, r24
     91c:	90 93 7c 00 	sts	0x007C, r25
     920:	26 c0       	rjmp	.+76     	; 0x96e <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
     922:	28 30       	cpi	r18, 0x08	; 8
     924:	20 f0       	brcs	.+8      	; 0x92e <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
     92c:	2e c0       	rjmp	.+92     	; 0x98a <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
     92e:	20 93 f7 04 	sts	0x04F7, r18
				if(channel==LIGHT)
     932:	21 30       	cpi	r18, 0x01	; 1
     934:	49 f4       	brne	.+18     	; 0x948 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
     936:	80 91 7c 00 	lds	r24, 0x007C
     93a:	8f 77       	andi	r24, 0x7F	; 127
     93c:	80 93 7c 00 	sts	0x007C, r24
     940:	80 91 7c 00 	lds	r24, 0x007C
     944:	80 64       	ori	r24, 0x40	; 64
     946:	03 c0       	rjmp	.+6      	; 0x94e <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
     948:	80 91 7c 00 	lds	r24, 0x007C
     94c:	80 6c       	ori	r24, 0xC0	; 192
     94e:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
     952:	80 91 7c 00 	lds	r24, 0x007C
     956:	80 7e       	andi	r24, 0xE0	; 224
     958:	80 93 7c 00 	sts	0x007C, r24
     95c:	90 91 7c 00 	lds	r25, 0x007C
     960:	80 91 7c 00 	lds	r24, 0x007C
     964:	80 7e       	andi	r24, 0xE0	; 224
     966:	89 2b       	or	r24, r25
     968:	81 2b       	or	r24, r17
     96a:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
     96e:	88 ec       	ldi	r24, 0xC8	; 200
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	09 c0       	rjmp	.+18     	; 0x98e <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	8c e0       	ldi	r24, 0x0C	; 12
     980:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	02 c0       	rjmp	.+4      	; 0x98e <dev_manager_ff_sensors+0x1e0>
		 return 0;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	08 95       	ret

000009a0 <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     9a0:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     9a2:	9c 01       	movw	r18, r24
     9a4:	26 5a       	subi	r18, 0xA6	; 166
     9a6:	3e 4b       	sbci	r19, 0xBE	; 190
     9a8:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	28 0f       	add	r18, r24
     9b4:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     9b6:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     9b8:	40 98       	cbi	0x08, 0	; 8
     9ba:	88 e1       	ldi	r24, 0x18	; 24
     9bc:	8e bd       	out	0x2e, r24	; 46
     9be:	0d b4       	in	r0, 0x2d	; 45
     9c0:	07 fe       	sbrs	r0, 7
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <halRfSetChannel+0x1e>
     9c4:	83 2f       	mov	r24, r19
     9c6:	99 27       	eor	r25, r25
     9c8:	8e bd       	out	0x2e, r24	; 46
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <halRfSetChannel+0x2a>
     9d0:	2e bd       	out	0x2e, r18	; 46
     9d2:	0d b4       	in	r0, 0x2d	; 45
     9d4:	07 fe       	sbrs	r0, 7
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <halRfSetChannel+0x32>
     9d8:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     9da:	78 94       	sei
     9dc:	08 95       	ret

000009de <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     9de:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     9e0:	40 98       	cbi	0x08, 0	; 8
     9e2:	1e bc       	out	0x2e, r1	; 46
     9e4:	0d b4       	in	r0, 0x2d	; 45
     9e6:	07 fe       	sbrs	r0, 7
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <halRfWaitForCrystalOscillator+0x6>
     9ea:	8e b5       	in	r24, 0x2e	; 46
     9ec:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     9ee:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     9f0:	86 ff       	sbrs	r24, 6
     9f2:	f5 cf       	rjmp	.-22     	; 0x9de <halRfWaitForCrystalOscillator>
     9f4:	08 95       	ret

000009f6 <set_rf_rx_callback>:
//
//	PARAMETERS:
//		UINT8 channel
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
     9f6:	90 93 c5 03 	sts	0x03C5, r25
     9fa:	80 93 c4 03 	sts	0x03C4, r24
     9fe:	08 95       	ret

00000a00 <rf_power_down>:
     a00:	f8 94       	cli
     a02:	40 98       	cbi	0x08, 0	; 8
     a04:	87 e0       	ldi	r24, 0x07	; 7
     a06:	8e bd       	out	0x2e, r24	; 46
     a08:	0d b4       	in	r0, 0x2d	; 45
     a0a:	07 fe       	sbrs	r0, 7
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <rf_power_down+0x8>
     a0e:	40 9a       	sbi	0x08, 0	; 8
     a10:	40 98       	cbi	0x08, 0	; 8
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	8e bd       	out	0x2e, r24	; 46
     a16:	0d b4       	in	r0, 0x2d	; 45
     a18:	07 fe       	sbrs	r0, 7
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <rf_power_down+0x16>
     a1c:	40 9a       	sbi	0x08, 0	; 8
     a1e:	78 94       	sei
     a20:	08 95       	ret

00000a22 <rf_security_last_pkt_status>:
     a22:	80 91 0d 05 	lds	r24, 0x050D
     a26:	99 27       	eor	r25, r25
     a28:	08 95       	ret

00000a2a <rf_security_set_ctr_counter>:
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	dc 01       	movw	r26, r24
     a30:	40 98       	cbi	0x08, 0	; 8
     a32:	89 ec       	ldi	r24, 0xC9	; 201
     a34:	8e bd       	out	0x2e, r24	; 46
     a36:	0d b4       	in	r0, 0x2d	; 45
     a38:	07 fe       	sbrs	r0, 7
     a3a:	fd cf       	rjmp	.-6      	; 0xa36 <rf_security_set_ctr_counter+0xc>
     a3c:	80 e8       	ldi	r24, 0x80	; 128
     a3e:	8e bd       	out	0x2e, r24	; 46
     a40:	0d b4       	in	r0, 0x2d	; 45
     a42:	07 fe       	sbrs	r0, 7
     a44:	fd cf       	rjmp	.-6      	; 0xa40 <rf_security_set_ctr_counter+0x16>
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	91 50       	subi	r25, 0x01	; 1
     a4a:	fd 01       	movw	r30, r26
     a4c:	e9 0f       	add	r30, r25
     a4e:	f1 1d       	adc	r31, r1
     a50:	80 81       	ld	r24, Z
     a52:	8e bd       	out	0x2e, r24	; 46
     a54:	0d b4       	in	r0, 0x2d	; 45
     a56:	07 fe       	sbrs	r0, 7
     a58:	fd cf       	rjmp	.-6      	; 0xa54 <rf_security_set_ctr_counter+0x2a>
     a5a:	99 23       	and	r25, r25
     a5c:	a9 f7       	brne	.-22     	; 0xa48 <rf_security_set_ctr_counter+0x1e>
     a5e:	40 9a       	sbi	0x08, 0	; 8
     a60:	40 98       	cbi	0x08, 0	; 8
     a62:	8b ec       	ldi	r24, 0xCB	; 203
     a64:	8e bd       	out	0x2e, r24	; 46
     a66:	0d b4       	in	r0, 0x2d	; 45
     a68:	07 fe       	sbrs	r0, 7
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <rf_security_set_ctr_counter+0x3c>
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	8e bd       	out	0x2e, r24	; 46
     a70:	0d b4       	in	r0, 0x2d	; 45
     a72:	07 fe       	sbrs	r0, 7
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <rf_security_set_ctr_counter+0x46>
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	9d 01       	movw	r18, r26
     a7a:	2e 5f       	subi	r18, 0xFE	; 254
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
     a7e:	e9 01       	movw	r28, r18
     a80:	91 50       	subi	r25, 0x01	; 1
     a82:	f9 01       	movw	r30, r18
     a84:	e9 0f       	add	r30, r25
     a86:	f1 1d       	adc	r31, r1
     a88:	80 81       	ld	r24, Z
     a8a:	8e bd       	out	0x2e, r24	; 46
     a8c:	0d b4       	in	r0, 0x2d	; 45
     a8e:	07 fe       	sbrs	r0, 7
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <rf_security_set_ctr_counter+0x62>
     a92:	99 23       	and	r25, r25
     a94:	a1 f7       	brne	.-24     	; 0xa7e <rf_security_set_ctr_counter+0x54>
     a96:	40 9a       	sbi	0x08, 0	; 8
     a98:	8c 91       	ld	r24, X
     a9a:	80 93 0e 05 	sts	0x050E, r24
     a9e:	fd 01       	movw	r30, r26
     aa0:	81 81       	ldd	r24, Z+1	; 0x01
     aa2:	80 93 0f 05 	sts	0x050F, r24
     aa6:	88 81       	ld	r24, Y
     aa8:	80 93 10 05 	sts	0x0510, r24
     aac:	83 81       	ldd	r24, Z+3	; 0x03
     aae:	80 93 11 05 	sts	0x0511, r24
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <rf_security_enable>:
     ab8:	40 98       	cbi	0x08, 0	; 8
     aba:	89 e1       	ldi	r24, 0x19	; 25
     abc:	8e bd       	out	0x2e, r24	; 46
     abe:	0d b4       	in	r0, 0x2d	; 45
     ac0:	07 fe       	sbrs	r0, 7
     ac2:	fd cf       	rjmp	.-6      	; 0xabe <rf_security_enable+0x6>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	8e bd       	out	0x2e, r24	; 46
     ac8:	0d b4       	in	r0, 0x2d	; 45
     aca:	07 fe       	sbrs	r0, 7
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <rf_security_enable+0x10>
     ace:	86 e0       	ldi	r24, 0x06	; 6
     ad0:	8e bd       	out	0x2e, r24	; 46
     ad2:	0d b4       	in	r0, 0x2d	; 45
     ad4:	07 fe       	sbrs	r0, 7
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <rf_security_enable+0x1a>
     ad8:	40 9a       	sbi	0x08, 0	; 8
     ada:	40 98       	cbi	0x08, 0	; 8
     adc:	8a e1       	ldi	r24, 0x1A	; 26
     ade:	8e bd       	out	0x2e, r24	; 46
     ae0:	0d b4       	in	r0, 0x2d	; 45
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <rf_security_enable+0x28>
     ae6:	8e e0       	ldi	r24, 0x0E	; 14
     ae8:	8e bd       	out	0x2e, r24	; 46
     aea:	0d b4       	in	r0, 0x2d	; 45
     aec:	07 fe       	sbrs	r0, 7
     aee:	fd cf       	rjmp	.-6      	; 0xaea <rf_security_enable+0x32>
     af0:	8e e0       	ldi	r24, 0x0E	; 14
     af2:	8e bd       	out	0x2e, r24	; 46
     af4:	0d b4       	in	r0, 0x2d	; 45
     af6:	07 fe       	sbrs	r0, 7
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <rf_security_enable+0x3c>
     afa:	40 9a       	sbi	0x08, 0	; 8
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 fe 04 	sts	0x04FE, r24
     b02:	08 95       	ret

00000b04 <rf_security_disable>:
     b04:	40 98       	cbi	0x08, 0	; 8
     b06:	89 e1       	ldi	r24, 0x19	; 25
     b08:	8e bd       	out	0x2e, r24	; 46
     b0a:	0d b4       	in	r0, 0x2d	; 45
     b0c:	07 fe       	sbrs	r0, 7
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <rf_security_disable+0x6>
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	8e bd       	out	0x2e, r24	; 46
     b14:	0d b4       	in	r0, 0x2d	; 45
     b16:	07 fe       	sbrs	r0, 7
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <rf_security_disable+0x10>
     b1a:	84 ec       	ldi	r24, 0xC4	; 196
     b1c:	8e bd       	out	0x2e, r24	; 46
     b1e:	0d b4       	in	r0, 0x2d	; 45
     b20:	07 fe       	sbrs	r0, 7
     b22:	fd cf       	rjmp	.-6      	; 0xb1e <rf_security_disable+0x1a>
     b24:	40 9a       	sbi	0x08, 0	; 8
     b26:	10 92 fe 04 	sts	0x04FE, r1
     b2a:	08 95       	ret

00000b2c <rf_get_sem>:
     b2c:	80 91 fc 04 	lds	r24, 0x04FC
     b30:	90 91 fd 04 	lds	r25, 0x04FD
     b34:	08 95       	ret

00000b36 <rf_addr_decode_enable>:
     b36:	20 91 ff 04 	lds	r18, 0x04FF
     b3a:	30 91 00 05 	lds	r19, 0x0500
     b3e:	38 60       	ori	r19, 0x08	; 8
     b40:	30 93 00 05 	sts	0x0500, r19
     b44:	20 93 ff 04 	sts	0x04FF, r18
     b48:	40 98       	cbi	0x08, 0	; 8
     b4a:	81 e1       	ldi	r24, 0x11	; 17
     b4c:	8e bd       	out	0x2e, r24	; 46
     b4e:	0d b4       	in	r0, 0x2d	; 45
     b50:	07 fe       	sbrs	r0, 7
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <rf_addr_decode_enable+0x18>
     b54:	83 2f       	mov	r24, r19
     b56:	99 27       	eor	r25, r25
     b58:	8e bd       	out	0x2e, r24	; 46
     b5a:	0d b4       	in	r0, 0x2d	; 45
     b5c:	07 fe       	sbrs	r0, 7
     b5e:	fd cf       	rjmp	.-6      	; 0xb5a <rf_addr_decode_enable+0x24>
     b60:	2e bd       	out	0x2e, r18	; 46
     b62:	0d b4       	in	r0, 0x2d	; 45
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <rf_addr_decode_enable+0x2c>
     b68:	40 9a       	sbi	0x08, 0	; 8
     b6a:	08 95       	ret

00000b6c <rf_addr_decode_disable>:
     b6c:	20 91 ff 04 	lds	r18, 0x04FF
     b70:	30 91 00 05 	lds	r19, 0x0500
     b74:	37 7f       	andi	r19, 0xF7	; 247
     b76:	30 93 00 05 	sts	0x0500, r19
     b7a:	20 93 ff 04 	sts	0x04FF, r18
     b7e:	40 98       	cbi	0x08, 0	; 8
     b80:	81 e1       	ldi	r24, 0x11	; 17
     b82:	8e bd       	out	0x2e, r24	; 46
     b84:	0d b4       	in	r0, 0x2d	; 45
     b86:	07 fe       	sbrs	r0, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <rf_addr_decode_disable+0x18>
     b8a:	83 2f       	mov	r24, r19
     b8c:	99 27       	eor	r25, r25
     b8e:	8e bd       	out	0x2e, r24	; 46
     b90:	0d b4       	in	r0, 0x2d	; 45
     b92:	07 fe       	sbrs	r0, 7
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <rf_addr_decode_disable+0x24>
     b96:	2e bd       	out	0x2e, r18	; 46
     b98:	0d b4       	in	r0, 0x2d	; 45
     b9a:	07 fe       	sbrs	r0, 7
     b9c:	fd cf       	rjmp	.-6      	; 0xb98 <rf_addr_decode_disable+0x2c>
     b9e:	40 9a       	sbi	0x08, 0	; 8
     ba0:	08 95       	ret

00000ba2 <rf_auto_ack_enable>:
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 0c 05 	sts	0x050C, r24
     ba8:	20 91 ff 04 	lds	r18, 0x04FF
     bac:	30 91 00 05 	lds	r19, 0x0500
     bb0:	20 61       	ori	r18, 0x10	; 16
     bb2:	30 93 00 05 	sts	0x0500, r19
     bb6:	20 93 ff 04 	sts	0x04FF, r18
     bba:	40 98       	cbi	0x08, 0	; 8
     bbc:	81 e1       	ldi	r24, 0x11	; 17
     bbe:	8e bd       	out	0x2e, r24	; 46
     bc0:	0d b4       	in	r0, 0x2d	; 45
     bc2:	07 fe       	sbrs	r0, 7
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <rf_auto_ack_enable+0x1e>
     bc6:	83 2f       	mov	r24, r19
     bc8:	99 27       	eor	r25, r25
     bca:	8e bd       	out	0x2e, r24	; 46
     bcc:	0d b4       	in	r0, 0x2d	; 45
     bce:	07 fe       	sbrs	r0, 7
     bd0:	fd cf       	rjmp	.-6      	; 0xbcc <rf_auto_ack_enable+0x2a>
     bd2:	2e bd       	out	0x2e, r18	; 46
     bd4:	0d b4       	in	r0, 0x2d	; 45
     bd6:	07 fe       	sbrs	r0, 7
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <rf_auto_ack_enable+0x32>
     bda:	40 9a       	sbi	0x08, 0	; 8
     bdc:	08 95       	ret

00000bde <rf_auto_ack_disable>:
     bde:	10 92 0c 05 	sts	0x050C, r1
     be2:	20 91 ff 04 	lds	r18, 0x04FF
     be6:	30 91 00 05 	lds	r19, 0x0500
     bea:	2f 7e       	andi	r18, 0xEF	; 239
     bec:	30 93 00 05 	sts	0x0500, r19
     bf0:	20 93 ff 04 	sts	0x04FF, r18
     bf4:	40 98       	cbi	0x08, 0	; 8
     bf6:	81 e1       	ldi	r24, 0x11	; 17
     bf8:	8e bd       	out	0x2e, r24	; 46
     bfa:	0d b4       	in	r0, 0x2d	; 45
     bfc:	07 fe       	sbrs	r0, 7
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <rf_auto_ack_disable+0x1c>
     c00:	83 2f       	mov	r24, r19
     c02:	99 27       	eor	r25, r25
     c04:	8e bd       	out	0x2e, r24	; 46
     c06:	0d b4       	in	r0, 0x2d	; 45
     c08:	07 fe       	sbrs	r0, 7
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <rf_auto_ack_disable+0x28>
     c0c:	2e bd       	out	0x2e, r18	; 46
     c0e:	0d b4       	in	r0, 0x2d	; 45
     c10:	07 fe       	sbrs	r0, 7
     c12:	fd cf       	rjmp	.-6      	; 0xc0e <rf_auto_ack_disable+0x30>
     c14:	40 9a       	sbi	0x08, 0	; 8
     c16:	08 95       	ret

00000c18 <rf_busy>:
     c18:	89 b1       	in	r24, 0x09	; 9
     c1a:	99 27       	eor	r25, r25
     c1c:	66 e0       	ldi	r22, 0x06	; 6
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	6a 95       	dec	r22
     c24:	e1 f7       	brne	.-8      	; 0xc1e <rf_busy+0x6>
     c26:	81 70       	andi	r24, 0x01	; 1
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	08 95       	ret

00000c2c <rf_rx_check_fifop>:
     c2c:	8c b1       	in	r24, 0x0c	; 12
     c2e:	99 27       	eor	r25, r25
     c30:	87 fd       	sbrc	r24, 7
     c32:	90 95       	com	r25
     c34:	88 27       	eor	r24, r24
     c36:	99 0f       	add	r25, r25
     c38:	88 1f       	adc	r24, r24
     c3a:	99 27       	eor	r25, r25
     c3c:	08 95       	ret

00000c3e <rf_rx_check_sfd>:
     c3e:	89 b1       	in	r24, 0x09	; 9
     c40:	99 27       	eor	r25, r25
     c42:	e6 e0       	ldi	r30, 0x06	; 6
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	ea 95       	dec	r30
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <rf_rx_check_sfd+0x6>
     c4c:	81 70       	andi	r24, 0x01	; 1
     c4e:	90 70       	andi	r25, 0x00	; 0
     c50:	08 95       	ret

00000c52 <rf_rx_packet>:
     c52:	80 91 12 05 	lds	r24, 0x0512
     c56:	88 23       	and	r24, r24
     c58:	19 f4       	brne	.+6      	; 0xc60 <rf_rx_packet+0xe>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	08 95       	ret
     c60:	80 91 12 05 	lds	r24, 0x0512
     c64:	10 92 12 05 	sts	0x0512, r1
     c68:	99 27       	eor	r25, r25
     c6a:	87 fd       	sbrc	r24, 7
     c6c:	90 95       	com	r25
     c6e:	08 95       	ret

00000c70 <rf_flush_rx_fifo>:
     c70:	40 98       	cbi	0x08, 0	; 8
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	8e bd       	out	0x2e, r24	; 46
     c76:	0d b4       	in	r0, 0x2d	; 45
     c78:	07 fe       	sbrs	r0, 7
     c7a:	fd cf       	rjmp	.-6      	; 0xc76 <rf_flush_rx_fifo+0x6>
     c7c:	40 9a       	sbi	0x08, 0	; 8
     c7e:	40 98       	cbi	0x08, 0	; 8
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	8e bd       	out	0x2e, r24	; 46
     c84:	0d b4       	in	r0, 0x2d	; 45
     c86:	07 fe       	sbrs	r0, 7
     c88:	fd cf       	rjmp	.-6      	; 0xc84 <rf_flush_rx_fifo+0x14>
     c8a:	40 9a       	sbi	0x08, 0	; 8
     c8c:	08 95       	ret

00000c8e <rf_rx_set_serial>:
     c8e:	40 98       	cbi	0x08, 0	; 8
     c90:	86 e0       	ldi	r24, 0x06	; 6
     c92:	8e bd       	out	0x2e, r24	; 46
     c94:	0d b4       	in	r0, 0x2d	; 45
     c96:	07 fe       	sbrs	r0, 7
     c98:	fd cf       	rjmp	.-6      	; 0xc94 <rf_rx_set_serial+0x6>
     c9a:	40 9a       	sbi	0x08, 0	; 8
     c9c:	40 98       	cbi	0x08, 0	; 8
     c9e:	82 e1       	ldi	r24, 0x12	; 18
     ca0:	8e bd       	out	0x2e, r24	; 46
     ca2:	0d b4       	in	r0, 0x2d	; 45
     ca4:	07 fe       	sbrs	r0, 7
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <rf_rx_set_serial+0x14>
     ca8:	85 e0       	ldi	r24, 0x05	; 5
     caa:	8e bd       	out	0x2e, r24	; 46
     cac:	0d b4       	in	r0, 0x2d	; 45
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <rf_rx_set_serial+0x1e>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8e bd       	out	0x2e, r24	; 46
     cb6:	0d b4       	in	r0, 0x2d	; 45
     cb8:	07 fe       	sbrs	r0, 7
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <rf_rx_set_serial+0x28>
     cbc:	40 9a       	sbi	0x08, 0	; 8
     cbe:	0e 94 38 06 	call	0xc70	; 0xc70 <rf_flush_rx_fifo>
     cc2:	08 95       	ret

00000cc4 <rf_tx_set_serial>:
     cc4:	40 98       	cbi	0x08, 0	; 8
     cc6:	82 e1       	ldi	r24, 0x12	; 18
     cc8:	8e bd       	out	0x2e, r24	; 46
     cca:	0d b4       	in	r0, 0x2d	; 45
     ccc:	07 fe       	sbrs	r0, 7
     cce:	fd cf       	rjmp	.-6      	; 0xcca <rf_tx_set_serial+0x6>
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	8e bd       	out	0x2e, r24	; 46
     cd4:	0d b4       	in	r0, 0x2d	; 45
     cd6:	07 fe       	sbrs	r0, 7
     cd8:	fd cf       	rjmp	.-6      	; 0xcd4 <rf_tx_set_serial+0x10>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8e bd       	out	0x2e, r24	; 46
     cde:	0d b4       	in	r0, 0x2d	; 45
     ce0:	07 fe       	sbrs	r0, 7
     ce2:	fd cf       	rjmp	.-6      	; 0xcde <rf_tx_set_serial+0x1a>
     ce4:	40 9a       	sbi	0x08, 0	; 8
     ce6:	0e 94 38 06 	call	0xc70	; 0xc70 <rf_flush_rx_fifo>
     cea:	08 95       	ret

00000cec <rf_set_preamble_length>:
     cec:	28 2f       	mov	r18, r24
     cee:	33 27       	eor	r19, r19
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	30 70       	andi	r19, 0x00	; 0
     cf4:	80 91 ff 04 	lds	r24, 0x04FF
     cf8:	90 91 00 05 	lds	r25, 0x0500
     cfc:	80 7f       	andi	r24, 0xF0	; 240
     cfe:	28 2b       	or	r18, r24
     d00:	39 2b       	or	r19, r25
     d02:	30 93 00 05 	sts	0x0500, r19
     d06:	20 93 ff 04 	sts	0x04FF, r18
     d0a:	40 98       	cbi	0x08, 0	; 8
     d0c:	81 e1       	ldi	r24, 0x11	; 17
     d0e:	8e bd       	out	0x2e, r24	; 46
     d10:	0d b4       	in	r0, 0x2d	; 45
     d12:	07 fe       	sbrs	r0, 7
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <rf_set_preamble_length+0x24>
     d16:	83 2f       	mov	r24, r19
     d18:	99 27       	eor	r25, r25
     d1a:	8e bd       	out	0x2e, r24	; 46
     d1c:	0d b4       	in	r0, 0x2d	; 45
     d1e:	07 fe       	sbrs	r0, 7
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <rf_set_preamble_length+0x30>
     d22:	2e bd       	out	0x2e, r18	; 46
     d24:	0d b4       	in	r0, 0x2d	; 45
     d26:	07 fe       	sbrs	r0, 7
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <rf_set_preamble_length+0x38>
     d2a:	40 9a       	sbi	0x08, 0	; 8
     d2c:	08 95       	ret

00000d2e <rf_set_cca_mode>:
     d2e:	28 2f       	mov	r18, r24
     d30:	33 27       	eor	r19, r19
     d32:	23 70       	andi	r18, 0x03	; 3
     d34:	30 70       	andi	r19, 0x00	; 0
     d36:	b6 e0       	ldi	r27, 0x06	; 6
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	ba 95       	dec	r27
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <rf_set_cca_mode+0xa>
     d40:	80 91 ff 04 	lds	r24, 0x04FF
     d44:	90 91 00 05 	lds	r25, 0x0500
     d48:	8f 73       	andi	r24, 0x3F	; 63
     d4a:	28 2b       	or	r18, r24
     d4c:	39 2b       	or	r19, r25
     d4e:	30 93 00 05 	sts	0x0500, r19
     d52:	20 93 ff 04 	sts	0x04FF, r18
     d56:	40 98       	cbi	0x08, 0	; 8
     d58:	81 e1       	ldi	r24, 0x11	; 17
     d5a:	8e bd       	out	0x2e, r24	; 46
     d5c:	0d b4       	in	r0, 0x2d	; 45
     d5e:	07 fe       	sbrs	r0, 7
     d60:	fd cf       	rjmp	.-6      	; 0xd5c <rf_set_cca_mode+0x2e>
     d62:	83 2f       	mov	r24, r19
     d64:	99 27       	eor	r25, r25
     d66:	8e bd       	out	0x2e, r24	; 46
     d68:	0d b4       	in	r0, 0x2d	; 45
     d6a:	07 fe       	sbrs	r0, 7
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <rf_set_cca_mode+0x3a>
     d6e:	2e bd       	out	0x2e, r18	; 46
     d70:	0d b4       	in	r0, 0x2d	; 45
     d72:	07 fe       	sbrs	r0, 7
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <rf_set_cca_mode+0x42>
     d76:	40 9a       	sbi	0x08, 0	; 8
     d78:	08 95       	ret

00000d7a <__vector_8>:
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	24 97       	sbiw	r28, 0x04	; 4
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	80 e8       	ldi	r24, 0x80	; 128
     dac:	8c bb       	out	0x1c, r24	; 28
     dae:	67 9b       	sbis	0x0c, 7	; 12
     db0:	97 c1       	rjmp	.+814    	; 0x10e0 <__vector_8+0x366>
     db2:	67 9b       	sbis	0x0c, 7	; 12
     db4:	1c c0       	rjmp	.+56     	; 0xdee <__vector_8+0x74>
     db6:	31 99       	sbic	0x06, 1	; 6
     db8:	1a c0       	rjmp	.+52     	; 0xdee <__vector_8+0x74>
     dba:	40 98       	cbi	0x08, 0	; 8
     dbc:	8f e7       	ldi	r24, 0x7F	; 127
     dbe:	8e bd       	out	0x2e, r24	; 46
     dc0:	0d b4       	in	r0, 0x2d	; 45
     dc2:	07 fe       	sbrs	r0, 7
     dc4:	fd cf       	rjmp	.-6      	; 0xdc0 <__vector_8+0x46>
     dc6:	1e bc       	out	0x2e, r1	; 46
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <__vector_8+0x4e>
     dce:	8e b5       	in	r24, 0x2e	; 46
     dd0:	40 9a       	sbi	0x08, 0	; 8
     dd2:	40 98       	cbi	0x08, 0	; 8
     dd4:	88 e0       	ldi	r24, 0x08	; 8
     dd6:	8e bd       	out	0x2e, r24	; 46
     dd8:	0d b4       	in	r0, 0x2d	; 45
     dda:	07 fe       	sbrs	r0, 7
     ddc:	fd cf       	rjmp	.-6      	; 0xdd8 <__vector_8+0x5e>
     dde:	40 9a       	sbi	0x08, 0	; 8
     de0:	40 98       	cbi	0x08, 0	; 8
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	8e bd       	out	0x2e, r24	; 46
     de6:	0d b4       	in	r0, 0x2d	; 45
     de8:	07 fe       	sbrs	r0, 7
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <__vector_8+0x6c>
     dec:	78 c1       	rjmp	.+752    	; 0x10de <__vector_8+0x364>
     dee:	40 98       	cbi	0x08, 0	; 8
     df0:	8f e7       	ldi	r24, 0x7F	; 127
     df2:	8e bd       	out	0x2e, r24	; 46
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <__vector_8+0x7a>
     dfa:	1e bc       	out	0x2e, r1	; 46
     dfc:	0d b4       	in	r0, 0x2d	; 45
     dfe:	07 fe       	sbrs	r0, 7
     e00:	fd cf       	rjmp	.-6      	; 0xdfc <__vector_8+0x82>
     e02:	4e b5       	in	r20, 0x2e	; 46
     e04:	40 9a       	sbi	0x08, 0	; 8
     e06:	4f 77       	andi	r20, 0x7F	; 127
     e08:	4c 30       	cpi	r20, 0x0C	; 12
     e0a:	8c f0       	brlt	.+34     	; 0xe2e <__vector_8+0xb4>
     e0c:	e0 91 01 05 	lds	r30, 0x0501
     e10:	f0 91 02 05 	lds	r31, 0x0502
     e14:	24 2f       	mov	r18, r20
     e16:	33 27       	eor	r19, r19
     e18:	27 fd       	sbrc	r18, 7
     e1a:	30 95       	com	r19
     e1c:	2b 50       	subi	r18, 0x0B	; 11
     e1e:	30 40       	sbci	r19, 0x00	; 0
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	99 27       	eor	r25, r25
     e24:	87 fd       	sbrc	r24, 7
     e26:	90 95       	com	r25
     e28:	82 17       	cp	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	ac f5       	brge	.+106    	; 0xe98 <__vector_8+0x11e>
     e2e:	40 98       	cbi	0x08, 0	; 8
     e30:	8f e7       	ldi	r24, 0x7F	; 127
     e32:	8e bd       	out	0x2e, r24	; 46
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <__vector_8+0xba>
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	24 2f       	mov	r18, r20
     e40:	33 27       	eor	r19, r19
     e42:	27 fd       	sbrc	r18, 7
     e44:	30 95       	com	r19
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <__vector_8+0xda>
     e48:	1e bc       	out	0x2e, r1	; 46
     e4a:	0d b4       	in	r0, 0x2d	; 45
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <__vector_8+0xd0>
     e50:	6f 5f       	subi	r22, 0xFF	; 255
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	86 2f       	mov	r24, r22
     e56:	99 27       	eor	r25, r25
     e58:	82 17       	cp	r24, r18
     e5a:	93 07       	cpc	r25, r19
     e5c:	14 f4       	brge	.+4      	; 0xe62 <__vector_8+0xe8>
     e5e:	31 99       	sbic	0x06, 1	; 6
     e60:	f3 cf       	rjmp	.-26     	; 0xe48 <__vector_8+0xce>
     e62:	40 9a       	sbi	0x08, 0	; 8
     e64:	40 98       	cbi	0x08, 0	; 8
     e66:	8f e7       	ldi	r24, 0x7F	; 127
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	0d b4       	in	r0, 0x2d	; 45
     e6c:	07 fe       	sbrs	r0, 7
     e6e:	fd cf       	rjmp	.-6      	; 0xe6a <__vector_8+0xf0>
     e70:	1e bc       	out	0x2e, r1	; 46
     e72:	0d b4       	in	r0, 0x2d	; 45
     e74:	07 fe       	sbrs	r0, 7
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <__vector_8+0xf8>
     e78:	8e b5       	in	r24, 0x2e	; 46
     e7a:	40 9a       	sbi	0x08, 0	; 8
     e7c:	40 98       	cbi	0x08, 0	; 8
     e7e:	88 e0       	ldi	r24, 0x08	; 8
     e80:	8e bd       	out	0x2e, r24	; 46
     e82:	0d b4       	in	r0, 0x2d	; 45
     e84:	07 fe       	sbrs	r0, 7
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <__vector_8+0x108>
     e88:	40 9a       	sbi	0x08, 0	; 8
     e8a:	40 98       	cbi	0x08, 0	; 8
     e8c:	88 e0       	ldi	r24, 0x08	; 8
     e8e:	8e bd       	out	0x2e, r24	; 46
     e90:	0d b4       	in	r0, 0x2d	; 45
     e92:	07 fe       	sbrs	r0, 7
     e94:	fd cf       	rjmp	.-6      	; 0xe90 <__vector_8+0x116>
     e96:	23 c1       	rjmp	.+582    	; 0x10de <__vector_8+0x364>
     e98:	e0 91 01 05 	lds	r30, 0x0501
     e9c:	f0 91 02 05 	lds	r31, 0x0502
     ea0:	4c 50       	subi	r20, 0x0C	; 12
     ea2:	43 83       	std	Z+3, r20	; 0x03
     ea4:	40 98       	cbi	0x08, 0	; 8
     ea6:	8f e7       	ldi	r24, 0x7F	; 127
     ea8:	8e bd       	out	0x2e, r24	; 46
     eaa:	0d b4       	in	r0, 0x2d	; 45
     eac:	07 fe       	sbrs	r0, 7
     eae:	fd cf       	rjmp	.-6      	; 0xeaa <__vector_8+0x130>
     eb0:	fe 01       	movw	r30, r28
     eb2:	31 96       	adiw	r30, 0x01	; 1
     eb4:	9e 01       	movw	r18, r28
     eb6:	2d 5f       	subi	r18, 0xFD	; 253
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	1e bc       	out	0x2e, r1	; 46
     ebc:	0d b4       	in	r0, 0x2d	; 45
     ebe:	07 fe       	sbrs	r0, 7
     ec0:	fd cf       	rjmp	.-6      	; 0xebc <__vector_8+0x142>
     ec2:	8e b5       	in	r24, 0x2e	; 46
     ec4:	81 93       	st	Z+, r24
     ec6:	e2 17       	cp	r30, r18
     ec8:	f3 07       	cpc	r31, r19
     eca:	b9 f7       	brne	.-18     	; 0xeba <__vector_8+0x140>
     ecc:	40 9a       	sbi	0x08, 0	; 8
     ece:	e0 91 01 05 	lds	r30, 0x0501
     ed2:	f0 91 02 05 	lds	r31, 0x0502
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	25 e0       	ldi	r18, 0x05	; 5
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	2a 95       	dec	r18
     ee2:	e1 f7       	brne	.-8      	; 0xedc <__vector_8+0x162>
     ee4:	81 70       	andi	r24, 0x01	; 1
     ee6:	87 83       	std	Z+7, r24	; 0x07
     ee8:	40 98       	cbi	0x08, 0	; 8
     eea:	8f e7       	ldi	r24, 0x7F	; 127
     eec:	8e bd       	out	0x2e, r24	; 46
     eee:	0d b4       	in	r0, 0x2d	; 45
     ef0:	07 fe       	sbrs	r0, 7
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <__vector_8+0x174>
     ef4:	1e bc       	out	0x2e, r1	; 46
     ef6:	0d b4       	in	r0, 0x2d	; 45
     ef8:	07 fe       	sbrs	r0, 7
     efa:	fd cf       	rjmp	.-6      	; 0xef6 <__vector_8+0x17c>
     efc:	e0 91 01 05 	lds	r30, 0x0501
     f00:	f0 91 02 05 	lds	r31, 0x0502
     f04:	8e b5       	in	r24, 0x2e	; 46
     f06:	80 83       	st	Z, r24
     f08:	40 9a       	sbi	0x08, 0	; 8
     f0a:	40 98       	cbi	0x08, 0	; 8
     f0c:	8f e7       	ldi	r24, 0x7F	; 127
     f0e:	8e bd       	out	0x2e, r24	; 46
     f10:	0d b4       	in	r0, 0x2d	; 45
     f12:	07 fe       	sbrs	r0, 7
     f14:	fd cf       	rjmp	.-6      	; 0xf10 <__vector_8+0x196>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <__vector_8+0x1ae>
     f1a:	1e bc       	out	0x2e, r1	; 46
     f1c:	0d b4       	in	r0, 0x2d	; 45
     f1e:	07 fe       	sbrs	r0, 7
     f20:	fd cf       	rjmp	.-6      	; 0xf1c <__vector_8+0x1a2>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	11 f0       	breq	.+4      	; 0xf2c <__vector_8+0x1b2>
     f28:	31 99       	sbic	0x06, 1	; 6
     f2a:	f7 cf       	rjmp	.-18     	; 0xf1a <__vector_8+0x1a0>
     f2c:	40 9a       	sbi	0x08, 0	; 8
     f2e:	40 98       	cbi	0x08, 0	; 8
     f30:	8f e7       	ldi	r24, 0x7F	; 127
     f32:	8e bd       	out	0x2e, r24	; 46
     f34:	0d b4       	in	r0, 0x2d	; 45
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <__vector_8+0x1ba>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	1e bc       	out	0x2e, r1	; 46
     f40:	0d b4       	in	r0, 0x2d	; 45
     f42:	07 fe       	sbrs	r0, 7
     f44:	fd cf       	rjmp	.-6      	; 0xf40 <__vector_8+0x1c6>
     f46:	e0 91 01 05 	lds	r30, 0x0501
     f4a:	f0 91 02 05 	lds	r31, 0x0502
     f4e:	e2 0f       	add	r30, r18
     f50:	f3 1f       	adc	r31, r19
     f52:	8e b5       	in	r24, 0x2e	; 46
     f54:	81 83       	std	Z+1, r24	; 0x01
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	79 f7       	brne	.-34     	; 0xf3e <__vector_8+0x1c4>
     f60:	40 9a       	sbi	0x08, 0	; 8
     f62:	40 98       	cbi	0x08, 0	; 8
     f64:	8f e7       	ldi	r24, 0x7F	; 127
     f66:	8e bd       	out	0x2e, r24	; 46
     f68:	0d b4       	in	r0, 0x2d	; 45
     f6a:	07 fe       	sbrs	r0, 7
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <__vector_8+0x1ee>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <__vector_8+0x21c>
     f74:	1e bc       	out	0x2e, r1	; 46
     f76:	0d b4       	in	r0, 0x2d	; 45
     f78:	07 fe       	sbrs	r0, 7
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <__vector_8+0x1fc>
     f7c:	e0 91 01 05 	lds	r30, 0x0501
     f80:	f0 91 02 05 	lds	r31, 0x0502
     f84:	05 80       	ldd	r0, Z+5	; 0x05
     f86:	f6 81       	ldd	r31, Z+6	; 0x06
     f88:	e0 2d       	mov	r30, r0
     f8a:	e6 0f       	add	r30, r22
     f8c:	f1 1d       	adc	r31, r1
     f8e:	8e b5       	in	r24, 0x2e	; 46
     f90:	80 83       	st	Z, r24
     f92:	4f 5f       	subi	r20, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	64 2f       	mov	r22, r20
     f98:	e0 91 01 05 	lds	r30, 0x0501
     f9c:	f0 91 02 05 	lds	r31, 0x0502
     fa0:	24 2f       	mov	r18, r20
     fa2:	33 27       	eor	r19, r19
     fa4:	83 81       	ldd	r24, Z+3	; 0x03
     fa6:	99 27       	eor	r25, r25
     fa8:	87 fd       	sbrc	r24, 7
     faa:	90 95       	com	r25
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	0c f3       	brlt	.-62     	; 0xf74 <__vector_8+0x1fa>
     fb2:	40 9a       	sbi	0x08, 0	; 8
     fb4:	40 98       	cbi	0x08, 0	; 8
     fb6:	8f e7       	ldi	r24, 0x7F	; 127
     fb8:	8e bd       	out	0x2e, r24	; 46
     fba:	0d b4       	in	r0, 0x2d	; 45
     fbc:	07 fc       	sbrc	r0, 7
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__vector_8+0x25a>
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <__vector_8+0x240>
     fc2:	0d b4       	in	r0, 0x2d	; 45
     fc4:	07 fe       	sbrs	r0, 7
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <__vector_8+0x248>
     fc8:	5e b5       	in	r21, 0x2e	; 46
     fca:	40 9a       	sbi	0x08, 0	; 8
     fcc:	40 98       	cbi	0x08, 0	; 8
     fce:	8f e7       	ldi	r24, 0x7F	; 127
     fd0:	8e bd       	out	0x2e, r24	; 46
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <__vector_8+0x25e>
     fd4:	1e bc       	out	0x2e, r1	; 46
     fd6:	f5 cf       	rjmp	.-22     	; 0xfc2 <__vector_8+0x248>
     fd8:	0d b4       	in	r0, 0x2d	; 45
     fda:	07 fe       	sbrs	r0, 7
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <__vector_8+0x25e>
     fde:	fe 01       	movw	r30, r28
     fe0:	33 96       	adiw	r30, 0x03	; 3
     fe2:	9e 01       	movw	r18, r28
     fe4:	2b 5f       	subi	r18, 0xFB	; 251
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	1e bc       	out	0x2e, r1	; 46
     fea:	0d b4       	in	r0, 0x2d	; 45
     fec:	07 fe       	sbrs	r0, 7
     fee:	fd cf       	rjmp	.-6      	; 0xfea <__vector_8+0x270>
     ff0:	8e b5       	in	r24, 0x2e	; 46
     ff2:	81 93       	st	Z+, r24
     ff4:	e2 17       	cp	r30, r18
     ff6:	f3 07       	cpc	r31, r19
     ff8:	b9 f7       	brne	.-18     	; 0xfe8 <__vector_8+0x26e>
     ffa:	40 9a       	sbi	0x08, 0	; 8
     ffc:	e0 91 01 05 	lds	r30, 0x0501
    1000:	f0 91 02 05 	lds	r31, 0x0502
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	80 87       	std	Z+8, r24	; 0x08
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	0a c0       	rjmp	.+20     	; 0x1024 <__vector_8+0x2aa>
    1010:	e0 91 01 05 	lds	r30, 0x0501
    1014:	f0 91 02 05 	lds	r31, 0x0502
    1018:	85 81       	ldd	r24, Z+5	; 0x05
    101a:	96 81       	ldd	r25, Z+6	; 0x06
    101c:	a8 0f       	add	r26, r24
    101e:	b9 1f       	adc	r27, r25
    1020:	8c 91       	ld	r24, X
    1022:	48 0f       	add	r20, r24
    1024:	82 2f       	mov	r24, r18
    1026:	e0 91 01 05 	lds	r30, 0x0501
    102a:	f0 91 02 05 	lds	r31, 0x0502
    102e:	2f 5f       	subi	r18, 0xFF	; 255
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	a8 2f       	mov	r26, r24
    1034:	bb 27       	eor	r27, r27
    1036:	83 81       	ldd	r24, Z+3	; 0x03
    1038:	99 27       	eor	r25, r25
    103a:	87 fd       	sbrc	r24, 7
    103c:	90 95       	com	r25
    103e:	a8 17       	cp	r26, r24
    1040:	b9 07       	cpc	r27, r25
    1042:	34 f3       	brlt	.-52     	; 0x1010 <__vector_8+0x296>
    1044:	45 17       	cp	r20, r21
    1046:	d1 f0       	breq	.+52     	; 0x107c <__vector_8+0x302>
    1048:	40 98       	cbi	0x08, 0	; 8
    104a:	8f e7       	ldi	r24, 0x7F	; 127
    104c:	8e bd       	out	0x2e, r24	; 46
    104e:	0d b4       	in	r0, 0x2d	; 45
    1050:	07 fe       	sbrs	r0, 7
    1052:	fd cf       	rjmp	.-6      	; 0x104e <__vector_8+0x2d4>
    1054:	1e bc       	out	0x2e, r1	; 46
    1056:	0d b4       	in	r0, 0x2d	; 45
    1058:	07 fe       	sbrs	r0, 7
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <__vector_8+0x2dc>
    105c:	8e b5       	in	r24, 0x2e	; 46
    105e:	40 9a       	sbi	0x08, 0	; 8
    1060:	40 98       	cbi	0x08, 0	; 8
    1062:	88 e0       	ldi	r24, 0x08	; 8
    1064:	8e bd       	out	0x2e, r24	; 46
    1066:	0d b4       	in	r0, 0x2d	; 45
    1068:	07 fe       	sbrs	r0, 7
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <__vector_8+0x2ec>
    106c:	40 9a       	sbi	0x08, 0	; 8
    106e:	40 98       	cbi	0x08, 0	; 8
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	8e bd       	out	0x2e, r24	; 46
    1074:	0d b4       	in	r0, 0x2d	; 45
    1076:	07 fe       	sbrs	r0, 7
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <__vector_8+0x2fa>
    107a:	31 c0       	rjmp	.+98     	; 0x10de <__vector_8+0x364>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	88 23       	and	r24, r24
    1080:	a9 f0       	breq	.+42     	; 0x10ac <__vector_8+0x332>
    1082:	e0 91 c4 03 	lds	r30, 0x03C4
    1086:	f0 91 c5 03 	lds	r31, 0x03C5
    108a:	30 97       	sbiw	r30, 0x00	; 0
    108c:	49 f0       	breq	.+18     	; 0x10a0 <__vector_8+0x326>
    108e:	80 91 01 05 	lds	r24, 0x0501
    1092:	90 91 02 05 	lds	r25, 0x0502
    1096:	09 95       	icall
    1098:	90 93 02 05 	sts	0x0502, r25
    109c:	80 93 01 05 	sts	0x0501, r24
    10a0:	80 91 12 05 	lds	r24, 0x0512
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 12 05 	sts	0x0512, r24
    10aa:	1a c0       	rjmp	.+52     	; 0x10e0 <__vector_8+0x366>
    10ac:	40 98       	cbi	0x08, 0	; 8
    10ae:	8f e7       	ldi	r24, 0x7F	; 127
    10b0:	8e bd       	out	0x2e, r24	; 46
    10b2:	0d b4       	in	r0, 0x2d	; 45
    10b4:	07 fe       	sbrs	r0, 7
    10b6:	fd cf       	rjmp	.-6      	; 0x10b2 <__vector_8+0x338>
    10b8:	1e bc       	out	0x2e, r1	; 46
    10ba:	0d b4       	in	r0, 0x2d	; 45
    10bc:	07 fe       	sbrs	r0, 7
    10be:	fd cf       	rjmp	.-6      	; 0x10ba <__vector_8+0x340>
    10c0:	8e b5       	in	r24, 0x2e	; 46
    10c2:	40 9a       	sbi	0x08, 0	; 8
    10c4:	40 98       	cbi	0x08, 0	; 8
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	8e bd       	out	0x2e, r24	; 46
    10ca:	0d b4       	in	r0, 0x2d	; 45
    10cc:	07 fe       	sbrs	r0, 7
    10ce:	fd cf       	rjmp	.-6      	; 0x10ca <__vector_8+0x350>
    10d0:	40 9a       	sbi	0x08, 0	; 8
    10d2:	40 98       	cbi	0x08, 0	; 8
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	8e bd       	out	0x2e, r24	; 46
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	fd cf       	rjmp	.-6      	; 0x10d8 <__vector_8+0x35e>
    10de:	40 9a       	sbi	0x08, 0	; 8
    10e0:	24 96       	adiw	r28, 0x04	; 4
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <rf_carrier_off>:
    110e:	80 91 fc 04 	lds	r24, 0x04FC
    1112:	90 91 fd 04 	lds	r25, 0x04FD
    1116:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    111a:	40 98       	cbi	0x08, 0	; 8
    111c:	86 e0       	ldi	r24, 0x06	; 6
    111e:	8e bd       	out	0x2e, r24	; 46
    1120:	0d b4       	in	r0, 0x2d	; 45
    1122:	07 fe       	sbrs	r0, 7
    1124:	fd cf       	rjmp	.-6      	; 0x1120 <rf_carrier_off+0x12>
    1126:	40 9a       	sbi	0x08, 0	; 8
    1128:	80 91 fc 04 	lds	r24, 0x04FC
    112c:	90 91 fd 04 	lds	r25, 0x04FD
    1130:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1134:	08 95       	ret

00001136 <rf_carrier_on>:
    1136:	80 91 fc 04 	lds	r24, 0x04FC
    113a:	90 91 fd 04 	lds	r25, 0x04FD
    113e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1142:	40 98       	cbi	0x08, 0	; 8
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	8e bd       	out	0x2e, r24	; 46
    1148:	0d b4       	in	r0, 0x2d	; 45
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <rf_carrier_on+0x12>
    114e:	40 9a       	sbi	0x08, 0	; 8
    1150:	80 91 fc 04 	lds	r24, 0x04FC
    1154:	90 91 fd 04 	lds	r25, 0x04FD
    1158:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    115c:	08 95       	ret

0000115e <rf_data_mode>:
    115e:	80 91 fc 04 	lds	r24, 0x04FC
    1162:	90 91 fd 04 	lds	r25, 0x04FD
    1166:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    116a:	40 98       	cbi	0x08, 0	; 8
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	8e bd       	out	0x2e, r24	; 46
    1170:	0d b4       	in	r0, 0x2d	; 45
    1172:	07 fe       	sbrs	r0, 7
    1174:	fd cf       	rjmp	.-6      	; 0x1170 <rf_data_mode+0x12>
    1176:	40 9a       	sbi	0x08, 0	; 8
    1178:	40 98       	cbi	0x08, 0	; 8
    117a:	82 e1       	ldi	r24, 0x12	; 18
    117c:	8e bd       	out	0x2e, r24	; 46
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <rf_data_mode+0x20>
    1184:	85 e0       	ldi	r24, 0x05	; 5
    1186:	8e bd       	out	0x2e, r24	; 46
    1188:	0d b4       	in	r0, 0x2d	; 45
    118a:	07 fe       	sbrs	r0, 7
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <rf_data_mode+0x2a>
    118e:	1e bc       	out	0x2e, r1	; 46
    1190:	0d b4       	in	r0, 0x2d	; 45
    1192:	07 fe       	sbrs	r0, 7
    1194:	fd cf       	rjmp	.-6      	; 0x1190 <rf_data_mode+0x32>
    1196:	40 9a       	sbi	0x08, 0	; 8
    1198:	40 98       	cbi	0x08, 0	; 8
    119a:	8e e2       	ldi	r24, 0x2E	; 46
    119c:	8e bd       	out	0x2e, r24	; 46
    119e:	0d b4       	in	r0, 0x2d	; 45
    11a0:	07 fe       	sbrs	r0, 7
    11a2:	fd cf       	rjmp	.-6      	; 0x119e <rf_data_mode+0x40>
    11a4:	1e bc       	out	0x2e, r1	; 46
    11a6:	0d b4       	in	r0, 0x2d	; 45
    11a8:	07 fe       	sbrs	r0, 7
    11aa:	fd cf       	rjmp	.-6      	; 0x11a6 <rf_data_mode+0x48>
    11ac:	1e bc       	out	0x2e, r1	; 46
    11ae:	0d b4       	in	r0, 0x2d	; 45
    11b0:	07 fe       	sbrs	r0, 7
    11b2:	fd cf       	rjmp	.-6      	; 0x11ae <rf_data_mode+0x50>
    11b4:	40 9a       	sbi	0x08, 0	; 8
    11b6:	0e 94 38 06 	call	0xc70	; 0xc70 <rf_flush_rx_fifo>
    11ba:	80 91 fc 04 	lds	r24, 0x04FC
    11be:	90 91 fd 04 	lds	r25, 0x04FD
    11c2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    11c6:	08 95       	ret

000011c8 <rf_test_mode>:
    11c8:	80 91 fc 04 	lds	r24, 0x04FC
    11cc:	90 91 fd 04 	lds	r25, 0x04FD
    11d0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    11d4:	40 98       	cbi	0x08, 0	; 8
    11d6:	86 e0       	ldi	r24, 0x06	; 6
    11d8:	8e bd       	out	0x2e, r24	; 46
    11da:	0d b4       	in	r0, 0x2d	; 45
    11dc:	07 fe       	sbrs	r0, 7
    11de:	fd cf       	rjmp	.-6      	; 0x11da <rf_test_mode+0x12>
    11e0:	40 9a       	sbi	0x08, 0	; 8
    11e2:	40 98       	cbi	0x08, 0	; 8
    11e4:	82 e1       	ldi	r24, 0x12	; 18
    11e6:	8e bd       	out	0x2e, r24	; 46
    11e8:	0d b4       	in	r0, 0x2d	; 45
    11ea:	07 fe       	sbrs	r0, 7
    11ec:	fd cf       	rjmp	.-6      	; 0x11e8 <rf_test_mode+0x20>
    11ee:	85 e0       	ldi	r24, 0x05	; 5
    11f0:	8e bd       	out	0x2e, r24	; 46
    11f2:	0d b4       	in	r0, 0x2d	; 45
    11f4:	07 fe       	sbrs	r0, 7
    11f6:	fd cf       	rjmp	.-6      	; 0x11f2 <rf_test_mode+0x2a>
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	8e bd       	out	0x2e, r24	; 46
    11fc:	0d b4       	in	r0, 0x2d	; 45
    11fe:	07 fe       	sbrs	r0, 7
    1200:	fd cf       	rjmp	.-6      	; 0x11fc <rf_test_mode+0x34>
    1202:	40 9a       	sbi	0x08, 0	; 8
    1204:	40 98       	cbi	0x08, 0	; 8
    1206:	8e e2       	ldi	r24, 0x2E	; 46
    1208:	8e bd       	out	0x2e, r24	; 46
    120a:	0d b4       	in	r0, 0x2d	; 45
    120c:	07 fe       	sbrs	r0, 7
    120e:	fd cf       	rjmp	.-6      	; 0x120a <rf_test_mode+0x42>
    1210:	88 e1       	ldi	r24, 0x18	; 24
    1212:	8e bd       	out	0x2e, r24	; 46
    1214:	0d b4       	in	r0, 0x2d	; 45
    1216:	07 fe       	sbrs	r0, 7
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <rf_test_mode+0x4c>
    121a:	1e bc       	out	0x2e, r1	; 46
    121c:	0d b4       	in	r0, 0x2d	; 45
    121e:	07 fe       	sbrs	r0, 7
    1220:	fd cf       	rjmp	.-6      	; 0x121c <rf_test_mode+0x54>
    1222:	40 9a       	sbi	0x08, 0	; 8
    1224:	0e 94 38 06 	call	0xc70	; 0xc70 <rf_flush_rx_fifo>
    1228:	80 91 fc 04 	lds	r24, 0x04FC
    122c:	90 91 fd 04 	lds	r25, 0x04FD
    1230:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1234:	08 95       	ret

00001236 <rf_set_cca_thresh>:
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	08 2f       	mov	r16, r24
    123c:	80 91 fc 04 	lds	r24, 0x04FC
    1240:	90 91 fd 04 	lds	r25, 0x04FD
    1244:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1248:	11 27       	eor	r17, r17
    124a:	07 fd       	sbrc	r16, 7
    124c:	10 95       	com	r17
    124e:	30 2f       	mov	r19, r16
    1250:	22 27       	eor	r18, r18
    1252:	20 68       	ori	r18, 0x80	; 128
    1254:	40 98       	cbi	0x08, 0	; 8
    1256:	83 e1       	ldi	r24, 0x13	; 19
    1258:	8e bd       	out	0x2e, r24	; 46
    125a:	0d b4       	in	r0, 0x2d	; 45
    125c:	07 fe       	sbrs	r0, 7
    125e:	fd cf       	rjmp	.-6      	; 0x125a <rf_set_cca_thresh+0x24>
    1260:	83 2f       	mov	r24, r19
    1262:	99 27       	eor	r25, r25
    1264:	8e bd       	out	0x2e, r24	; 46
    1266:	0d b4       	in	r0, 0x2d	; 45
    1268:	07 fe       	sbrs	r0, 7
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <rf_set_cca_thresh+0x30>
    126c:	2e bd       	out	0x2e, r18	; 46
    126e:	0d b4       	in	r0, 0x2d	; 45
    1270:	07 fe       	sbrs	r0, 7
    1272:	fd cf       	rjmp	.-6      	; 0x126e <rf_set_cca_thresh+0x38>
    1274:	40 9a       	sbi	0x08, 0	; 8
    1276:	80 91 fc 04 	lds	r24, 0x04FC
    127a:	90 91 fd 04 	lds	r25, 0x04FD
    127e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <rf_polling_rx_packet>:
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	24 97       	sbiw	r28, 0x04	; 4
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	80 91 fc 04 	lds	r24, 0x04FC
    12a0:	90 91 fd 04 	lds	r25, 0x04FD
    12a4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    12a8:	67 9b       	sbis	0x0c, 7	; 12
    12aa:	34 c2       	rjmp	.+1128   	; 0x1714 <rf_polling_rx_packet+0x48c>
    12ac:	10 92 0d 05 	sts	0x050D, r1
    12b0:	67 9b       	sbis	0x0c, 7	; 12
    12b2:	25 c0       	rjmp	.+74     	; 0x12fe <rf_polling_rx_packet+0x76>
    12b4:	31 99       	sbic	0x06, 1	; 6
    12b6:	23 c0       	rjmp	.+70     	; 0x12fe <rf_polling_rx_packet+0x76>
    12b8:	40 98       	cbi	0x08, 0	; 8
    12ba:	8f e7       	ldi	r24, 0x7F	; 127
    12bc:	8e bd       	out	0x2e, r24	; 46
    12be:	0d b4       	in	r0, 0x2d	; 45
    12c0:	07 fe       	sbrs	r0, 7
    12c2:	fd cf       	rjmp	.-6      	; 0x12be <rf_polling_rx_packet+0x36>
    12c4:	1e bc       	out	0x2e, r1	; 46
    12c6:	0d b4       	in	r0, 0x2d	; 45
    12c8:	07 fe       	sbrs	r0, 7
    12ca:	fd cf       	rjmp	.-6      	; 0x12c6 <rf_polling_rx_packet+0x3e>
    12cc:	8e b5       	in	r24, 0x2e	; 46
    12ce:	40 9a       	sbi	0x08, 0	; 8
    12d0:	40 98       	cbi	0x08, 0	; 8
    12d2:	88 e0       	ldi	r24, 0x08	; 8
    12d4:	8e bd       	out	0x2e, r24	; 46
    12d6:	0d b4       	in	r0, 0x2d	; 45
    12d8:	07 fe       	sbrs	r0, 7
    12da:	fd cf       	rjmp	.-6      	; 0x12d6 <rf_polling_rx_packet+0x4e>
    12dc:	40 9a       	sbi	0x08, 0	; 8
    12de:	40 98       	cbi	0x08, 0	; 8
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	8e bd       	out	0x2e, r24	; 46
    12e4:	0d b4       	in	r0, 0x2d	; 45
    12e6:	07 fe       	sbrs	r0, 7
    12e8:	fd cf       	rjmp	.-6      	; 0x12e4 <rf_polling_rx_packet+0x5c>
    12ea:	40 9a       	sbi	0x08, 0	; 8
    12ec:	80 91 fc 04 	lds	r24, 0x04FC
    12f0:	90 91 fd 04 	lds	r25, 0x04FD
    12f4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	13 c2       	rjmp	.+1062   	; 0x1724 <rf_polling_rx_packet+0x49c>
    12fe:	40 98       	cbi	0x08, 0	; 8
    1300:	8f e7       	ldi	r24, 0x7F	; 127
    1302:	8e bd       	out	0x2e, r24	; 46
    1304:	0d b4       	in	r0, 0x2d	; 45
    1306:	07 fe       	sbrs	r0, 7
    1308:	fd cf       	rjmp	.-6      	; 0x1304 <rf_polling_rx_packet+0x7c>
    130a:	1e bc       	out	0x2e, r1	; 46
    130c:	0d b4       	in	r0, 0x2d	; 45
    130e:	07 fe       	sbrs	r0, 7
    1310:	fd cf       	rjmp	.-6      	; 0x130c <rf_polling_rx_packet+0x84>
    1312:	4e b5       	in	r20, 0x2e	; 46
    1314:	40 9a       	sbi	0x08, 0	; 8
    1316:	4f 77       	andi	r20, 0x7F	; 127
    1318:	19 f5       	brne	.+70     	; 0x1360 <rf_polling_rx_packet+0xd8>
    131a:	40 98       	cbi	0x08, 0	; 8
    131c:	8f e7       	ldi	r24, 0x7F	; 127
    131e:	8e bd       	out	0x2e, r24	; 46
    1320:	0d b4       	in	r0, 0x2d	; 45
    1322:	07 fe       	sbrs	r0, 7
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <rf_polling_rx_packet+0x98>
    1326:	1e bc       	out	0x2e, r1	; 46
    1328:	0d b4       	in	r0, 0x2d	; 45
    132a:	07 fe       	sbrs	r0, 7
    132c:	fd cf       	rjmp	.-6      	; 0x1328 <rf_polling_rx_packet+0xa0>
    132e:	8e b5       	in	r24, 0x2e	; 46
    1330:	40 9a       	sbi	0x08, 0	; 8
    1332:	40 98       	cbi	0x08, 0	; 8
    1334:	88 e0       	ldi	r24, 0x08	; 8
    1336:	8e bd       	out	0x2e, r24	; 46
    1338:	0d b4       	in	r0, 0x2d	; 45
    133a:	07 fe       	sbrs	r0, 7
    133c:	fd cf       	rjmp	.-6      	; 0x1338 <rf_polling_rx_packet+0xb0>
    133e:	40 9a       	sbi	0x08, 0	; 8
    1340:	40 98       	cbi	0x08, 0	; 8
    1342:	88 e0       	ldi	r24, 0x08	; 8
    1344:	8e bd       	out	0x2e, r24	; 46
    1346:	0d b4       	in	r0, 0x2d	; 45
    1348:	07 fe       	sbrs	r0, 7
    134a:	fd cf       	rjmp	.-6      	; 0x1346 <rf_polling_rx_packet+0xbe>
    134c:	40 9a       	sbi	0x08, 0	; 8
    134e:	80 91 fc 04 	lds	r24, 0x04FC
    1352:	90 91 fd 04 	lds	r25, 0x04FD
    1356:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    135a:	8e ef       	ldi	r24, 0xFE	; 254
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	e2 c1       	rjmp	.+964    	; 0x1724 <rf_polling_rx_packet+0x49c>
    1360:	4c 30       	cpi	r20, 0x0C	; 12
    1362:	8c f0       	brlt	.+34     	; 0x1386 <rf_polling_rx_packet+0xfe>
    1364:	e0 91 01 05 	lds	r30, 0x0501
    1368:	f0 91 02 05 	lds	r31, 0x0502
    136c:	24 2f       	mov	r18, r20
    136e:	33 27       	eor	r19, r19
    1370:	27 fd       	sbrc	r18, 7
    1372:	30 95       	com	r19
    1374:	2b 50       	subi	r18, 0x0B	; 11
    1376:	30 40       	sbci	r19, 0x00	; 0
    1378:	84 81       	ldd	r24, Z+4	; 0x04
    137a:	99 27       	eor	r25, r25
    137c:	87 fd       	sbrc	r24, 7
    137e:	90 95       	com	r25
    1380:	82 17       	cp	r24, r18
    1382:	93 07       	cpc	r25, r19
    1384:	f4 f5       	brge	.+124    	; 0x1402 <rf_polling_rx_packet+0x17a>
    1386:	40 98       	cbi	0x08, 0	; 8
    1388:	8f e7       	ldi	r24, 0x7F	; 127
    138a:	8e bd       	out	0x2e, r24	; 46
    138c:	0d b4       	in	r0, 0x2d	; 45
    138e:	07 fe       	sbrs	r0, 7
    1390:	fd cf       	rjmp	.-6      	; 0x138c <rf_polling_rx_packet+0x104>
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	24 2f       	mov	r18, r20
    1398:	33 27       	eor	r19, r19
    139a:	27 fd       	sbrc	r18, 7
    139c:	30 95       	com	r19
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <rf_polling_rx_packet+0x124>
    13a0:	1e bc       	out	0x2e, r1	; 46
    13a2:	0d b4       	in	r0, 0x2d	; 45
    13a4:	07 fe       	sbrs	r0, 7
    13a6:	fd cf       	rjmp	.-6      	; 0x13a2 <rf_polling_rx_packet+0x11a>
    13a8:	6f 5f       	subi	r22, 0xFF	; 255
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	86 2f       	mov	r24, r22
    13ae:	99 27       	eor	r25, r25
    13b0:	82 17       	cp	r24, r18
    13b2:	93 07       	cpc	r25, r19
    13b4:	14 f4       	brge	.+4      	; 0x13ba <rf_polling_rx_packet+0x132>
    13b6:	31 99       	sbic	0x06, 1	; 6
    13b8:	f3 cf       	rjmp	.-26     	; 0x13a0 <rf_polling_rx_packet+0x118>
    13ba:	40 9a       	sbi	0x08, 0	; 8
    13bc:	40 98       	cbi	0x08, 0	; 8
    13be:	8f e7       	ldi	r24, 0x7F	; 127
    13c0:	8e bd       	out	0x2e, r24	; 46
    13c2:	0d b4       	in	r0, 0x2d	; 45
    13c4:	07 fe       	sbrs	r0, 7
    13c6:	fd cf       	rjmp	.-6      	; 0x13c2 <rf_polling_rx_packet+0x13a>
    13c8:	1e bc       	out	0x2e, r1	; 46
    13ca:	0d b4       	in	r0, 0x2d	; 45
    13cc:	07 fe       	sbrs	r0, 7
    13ce:	fd cf       	rjmp	.-6      	; 0x13ca <rf_polling_rx_packet+0x142>
    13d0:	8e b5       	in	r24, 0x2e	; 46
    13d2:	40 9a       	sbi	0x08, 0	; 8
    13d4:	40 98       	cbi	0x08, 0	; 8
    13d6:	88 e0       	ldi	r24, 0x08	; 8
    13d8:	8e bd       	out	0x2e, r24	; 46
    13da:	0d b4       	in	r0, 0x2d	; 45
    13dc:	07 fe       	sbrs	r0, 7
    13de:	fd cf       	rjmp	.-6      	; 0x13da <rf_polling_rx_packet+0x152>
    13e0:	40 9a       	sbi	0x08, 0	; 8
    13e2:	40 98       	cbi	0x08, 0	; 8
    13e4:	88 e0       	ldi	r24, 0x08	; 8
    13e6:	8e bd       	out	0x2e, r24	; 46
    13e8:	0d b4       	in	r0, 0x2d	; 45
    13ea:	07 fe       	sbrs	r0, 7
    13ec:	fd cf       	rjmp	.-6      	; 0x13e8 <rf_polling_rx_packet+0x160>
    13ee:	40 9a       	sbi	0x08, 0	; 8
    13f0:	80 91 fc 04 	lds	r24, 0x04FC
    13f4:	90 91 fd 04 	lds	r25, 0x04FD
    13f8:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    13fc:	8d ef       	ldi	r24, 0xFD	; 253
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	91 c1       	rjmp	.+802    	; 0x1724 <rf_polling_rx_packet+0x49c>
    1402:	e0 91 01 05 	lds	r30, 0x0501
    1406:	f0 91 02 05 	lds	r31, 0x0502
    140a:	4c 50       	subi	r20, 0x0C	; 12
    140c:	43 83       	std	Z+3, r20	; 0x03
    140e:	40 98       	cbi	0x08, 0	; 8
    1410:	8f e7       	ldi	r24, 0x7F	; 127
    1412:	8e bd       	out	0x2e, r24	; 46
    1414:	0d b4       	in	r0, 0x2d	; 45
    1416:	07 fe       	sbrs	r0, 7
    1418:	fd cf       	rjmp	.-6      	; 0x1414 <rf_polling_rx_packet+0x18c>
    141a:	fe 01       	movw	r30, r28
    141c:	31 96       	adiw	r30, 0x01	; 1
    141e:	9e 01       	movw	r18, r28
    1420:	2d 5f       	subi	r18, 0xFD	; 253
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	1e bc       	out	0x2e, r1	; 46
    1426:	0d b4       	in	r0, 0x2d	; 45
    1428:	07 fe       	sbrs	r0, 7
    142a:	fd cf       	rjmp	.-6      	; 0x1426 <rf_polling_rx_packet+0x19e>
    142c:	8e b5       	in	r24, 0x2e	; 46
    142e:	81 93       	st	Z+, r24
    1430:	e2 17       	cp	r30, r18
    1432:	f3 07       	cpc	r31, r19
    1434:	b9 f7       	brne	.-18     	; 0x1424 <rf_polling_rx_packet+0x19c>
    1436:	40 9a       	sbi	0x08, 0	; 8
    1438:	e0 91 01 05 	lds	r30, 0x0501
    143c:	f0 91 02 05 	lds	r31, 0x0502
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	65 e0       	ldi	r22, 0x05	; 5
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	6a 95       	dec	r22
    144c:	e1 f7       	brne	.-8      	; 0x1446 <rf_polling_rx_packet+0x1be>
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	87 83       	std	Z+7, r24	; 0x07
    1452:	40 98       	cbi	0x08, 0	; 8
    1454:	8f e7       	ldi	r24, 0x7F	; 127
    1456:	8e bd       	out	0x2e, r24	; 46
    1458:	0d b4       	in	r0, 0x2d	; 45
    145a:	07 fe       	sbrs	r0, 7
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <rf_polling_rx_packet+0x1d0>
    145e:	1e bc       	out	0x2e, r1	; 46
    1460:	0d b4       	in	r0, 0x2d	; 45
    1462:	07 fe       	sbrs	r0, 7
    1464:	fd cf       	rjmp	.-6      	; 0x1460 <rf_polling_rx_packet+0x1d8>
    1466:	e0 91 01 05 	lds	r30, 0x0501
    146a:	f0 91 02 05 	lds	r31, 0x0502
    146e:	8e b5       	in	r24, 0x2e	; 46
    1470:	80 83       	st	Z, r24
    1472:	40 9a       	sbi	0x08, 0	; 8
    1474:	40 98       	cbi	0x08, 0	; 8
    1476:	8f e7       	ldi	r24, 0x7F	; 127
    1478:	8e bd       	out	0x2e, r24	; 46
    147a:	0d b4       	in	r0, 0x2d	; 45
    147c:	07 fe       	sbrs	r0, 7
    147e:	fd cf       	rjmp	.-6      	; 0x147a <rf_polling_rx_packet+0x1f2>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <rf_polling_rx_packet+0x20a>
    1484:	1e bc       	out	0x2e, r1	; 46
    1486:	0d b4       	in	r0, 0x2d	; 45
    1488:	07 fe       	sbrs	r0, 7
    148a:	fd cf       	rjmp	.-6      	; 0x1486 <rf_polling_rx_packet+0x1fe>
    148c:	8f 5f       	subi	r24, 0xFF	; 255
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	11 f0       	breq	.+4      	; 0x1496 <rf_polling_rx_packet+0x20e>
    1492:	31 99       	sbic	0x06, 1	; 6
    1494:	f7 cf       	rjmp	.-18     	; 0x1484 <rf_polling_rx_packet+0x1fc>
    1496:	40 9a       	sbi	0x08, 0	; 8
    1498:	40 98       	cbi	0x08, 0	; 8
    149a:	8f e7       	ldi	r24, 0x7F	; 127
    149c:	8e bd       	out	0x2e, r24	; 46
    149e:	0d b4       	in	r0, 0x2d	; 45
    14a0:	07 fe       	sbrs	r0, 7
    14a2:	fd cf       	rjmp	.-6      	; 0x149e <rf_polling_rx_packet+0x216>
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	1e bc       	out	0x2e, r1	; 46
    14aa:	0d b4       	in	r0, 0x2d	; 45
    14ac:	07 fe       	sbrs	r0, 7
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <rf_polling_rx_packet+0x222>
    14b0:	e0 91 01 05 	lds	r30, 0x0501
    14b4:	f0 91 02 05 	lds	r31, 0x0502
    14b8:	e2 0f       	add	r30, r18
    14ba:	f3 1f       	adc	r31, r19
    14bc:	8e b5       	in	r24, 0x2e	; 46
    14be:	81 83       	std	Z+1, r24	; 0x01
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	79 f7       	brne	.-34     	; 0x14a8 <rf_polling_rx_packet+0x220>
    14ca:	40 9a       	sbi	0x08, 0	; 8
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	83 ff       	sbrs	r24, 3
    14d2:	56 c0       	rjmp	.+172    	; 0x1580 <rf_polling_rx_packet+0x2f8>
    14d4:	40 98       	cbi	0x08, 0	; 8
    14d6:	8f e7       	ldi	r24, 0x7F	; 127
    14d8:	8e bd       	out	0x2e, r24	; 46
    14da:	0d b4       	in	r0, 0x2d	; 45
    14dc:	07 fe       	sbrs	r0, 7
    14de:	fd cf       	rjmp	.-6      	; 0x14da <rf_polling_rx_packet+0x252>
    14e0:	e8 ef       	ldi	r30, 0xF8	; 248
    14e2:	f4 e0       	ldi	r31, 0x04	; 4
    14e4:	1e bc       	out	0x2e, r1	; 46
    14e6:	0d b4       	in	r0, 0x2d	; 45
    14e8:	07 fe       	sbrs	r0, 7
    14ea:	fd cf       	rjmp	.-6      	; 0x14e6 <rf_polling_rx_packet+0x25e>
    14ec:	8e b5       	in	r24, 0x2e	; 46
    14ee:	81 93       	st	Z+, r24
    14f0:	84 e0       	ldi	r24, 0x04	; 4
    14f2:	ec 3f       	cpi	r30, 0xFC	; 252
    14f4:	f8 07       	cpc	r31, r24
    14f6:	b1 f7       	brne	.-20     	; 0x14e4 <rf_polling_rx_packet+0x25c>
    14f8:	40 9a       	sbi	0x08, 0	; 8
    14fa:	40 98       	cbi	0x08, 0	; 8
    14fc:	89 e9       	ldi	r24, 0x99	; 153
    14fe:	8e bd       	out	0x2e, r24	; 46
    1500:	0d b4       	in	r0, 0x2d	; 45
    1502:	07 fe       	sbrs	r0, 7
    1504:	fd cf       	rjmp	.-6      	; 0x1500 <rf_polling_rx_packet+0x278>
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	8e bd       	out	0x2e, r24	; 46
    150a:	0d b4       	in	r0, 0x2d	; 45
    150c:	07 fe       	sbrs	r0, 7
    150e:	fd cf       	rjmp	.-6      	; 0x150a <rf_polling_rx_packet+0x282>
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	91 50       	subi	r25, 0x01	; 1
    1514:	e9 2f       	mov	r30, r25
    1516:	ff 27       	eor	r31, r31
    1518:	e8 50       	subi	r30, 0x08	; 8
    151a:	fb 4f       	sbci	r31, 0xFB	; 251
    151c:	80 81       	ld	r24, Z
    151e:	8e bd       	out	0x2e, r24	; 46
    1520:	0d b4       	in	r0, 0x2d	; 45
    1522:	07 fe       	sbrs	r0, 7
    1524:	fd cf       	rjmp	.-6      	; 0x1520 <rf_polling_rx_packet+0x298>
    1526:	99 23       	and	r25, r25
    1528:	a1 f7       	brne	.-24     	; 0x1512 <rf_polling_rx_packet+0x28a>
    152a:	40 9a       	sbi	0x08, 0	; 8
    152c:	40 98       	cbi	0x08, 0	; 8
    152e:	8b e9       	ldi	r24, 0x9B	; 155
    1530:	8e bd       	out	0x2e, r24	; 46
    1532:	0d b4       	in	r0, 0x2d	; 45
    1534:	07 fe       	sbrs	r0, 7
    1536:	fd cf       	rjmp	.-6      	; 0x1532 <rf_polling_rx_packet+0x2aa>
    1538:	80 e8       	ldi	r24, 0x80	; 128
    153a:	8e bd       	out	0x2e, r24	; 46
    153c:	0d b4       	in	r0, 0x2d	; 45
    153e:	07 fe       	sbrs	r0, 7
    1540:	fd cf       	rjmp	.-6      	; 0x153c <rf_polling_rx_packet+0x2b4>
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	91 50       	subi	r25, 0x01	; 1
    1546:	e9 2f       	mov	r30, r25
    1548:	ff 27       	eor	r31, r31
    154a:	e6 50       	subi	r30, 0x06	; 6
    154c:	fb 4f       	sbci	r31, 0xFB	; 251
    154e:	80 81       	ld	r24, Z
    1550:	8e bd       	out	0x2e, r24	; 46
    1552:	0d b4       	in	r0, 0x2d	; 45
    1554:	07 fe       	sbrs	r0, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <rf_polling_rx_packet+0x2ca>
    1558:	99 23       	and	r25, r25
    155a:	a1 f7       	brne	.-24     	; 0x1544 <rf_polling_rx_packet+0x2bc>
    155c:	40 9a       	sbi	0x08, 0	; 8
    155e:	40 98       	cbi	0x08, 0	; 8
    1560:	8c e0       	ldi	r24, 0x0C	; 12
    1562:	8e bd       	out	0x2e, r24	; 46
    1564:	0d b4       	in	r0, 0x2d	; 45
    1566:	07 fe       	sbrs	r0, 7
    1568:	fd cf       	rjmp	.-6      	; 0x1564 <rf_polling_rx_packet+0x2dc>
    156a:	40 9a       	sbi	0x08, 0	; 8
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 0d 05 	sts	0x050D, r24
    1572:	e0 91 01 05 	lds	r30, 0x0501
    1576:	f0 91 02 05 	lds	r31, 0x0502
    157a:	83 81       	ldd	r24, Z+3	; 0x03
    157c:	84 50       	subi	r24, 0x04	; 4
    157e:	83 83       	std	Z+3, r24	; 0x03
    1580:	40 98       	cbi	0x08, 0	; 8
    1582:	8f e7       	ldi	r24, 0x7F	; 127
    1584:	8e bd       	out	0x2e, r24	; 46
    1586:	0d b4       	in	r0, 0x2d	; 45
    1588:	07 fe       	sbrs	r0, 7
    158a:	fd cf       	rjmp	.-6      	; 0x1586 <rf_polling_rx_packet+0x2fe>
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <rf_polling_rx_packet+0x32c>
    1592:	1e bc       	out	0x2e, r1	; 46
    1594:	0d b4       	in	r0, 0x2d	; 45
    1596:	07 fe       	sbrs	r0, 7
    1598:	fd cf       	rjmp	.-6      	; 0x1594 <rf_polling_rx_packet+0x30c>
    159a:	e0 91 01 05 	lds	r30, 0x0501
    159e:	f0 91 02 05 	lds	r31, 0x0502
    15a2:	05 80       	ldd	r0, Z+5	; 0x05
    15a4:	f6 81       	ldd	r31, Z+6	; 0x06
    15a6:	e0 2d       	mov	r30, r0
    15a8:	e6 0f       	add	r30, r22
    15aa:	f1 1d       	adc	r31, r1
    15ac:	8e b5       	in	r24, 0x2e	; 46
    15ae:	80 83       	st	Z, r24
    15b0:	4f 5f       	subi	r20, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	64 2f       	mov	r22, r20
    15b6:	e0 91 01 05 	lds	r30, 0x0501
    15ba:	f0 91 02 05 	lds	r31, 0x0502
    15be:	24 2f       	mov	r18, r20
    15c0:	33 27       	eor	r19, r19
    15c2:	83 81       	ldd	r24, Z+3	; 0x03
    15c4:	99 27       	eor	r25, r25
    15c6:	87 fd       	sbrc	r24, 7
    15c8:	90 95       	com	r25
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	0c f3       	brlt	.-62     	; 0x1592 <rf_polling_rx_packet+0x30a>
    15d0:	40 9a       	sbi	0x08, 0	; 8
    15d2:	40 98       	cbi	0x08, 0	; 8
    15d4:	8f e7       	ldi	r24, 0x7F	; 127
    15d6:	8e bd       	out	0x2e, r24	; 46
    15d8:	0d b4       	in	r0, 0x2d	; 45
    15da:	07 fc       	sbrc	r0, 7
    15dc:	0a c0       	rjmp	.+20     	; 0x15f2 <rf_polling_rx_packet+0x36a>
    15de:	fc cf       	rjmp	.-8      	; 0x15d8 <rf_polling_rx_packet+0x350>
    15e0:	0d b4       	in	r0, 0x2d	; 45
    15e2:	07 fe       	sbrs	r0, 7
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <rf_polling_rx_packet+0x358>
    15e6:	5e b5       	in	r21, 0x2e	; 46
    15e8:	40 9a       	sbi	0x08, 0	; 8
    15ea:	40 98       	cbi	0x08, 0	; 8
    15ec:	8f e7       	ldi	r24, 0x7F	; 127
    15ee:	8e bd       	out	0x2e, r24	; 46
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <rf_polling_rx_packet+0x36e>
    15f2:	1e bc       	out	0x2e, r1	; 46
    15f4:	f5 cf       	rjmp	.-22     	; 0x15e0 <rf_polling_rx_packet+0x358>
    15f6:	0d b4       	in	r0, 0x2d	; 45
    15f8:	07 fe       	sbrs	r0, 7
    15fa:	fd cf       	rjmp	.-6      	; 0x15f6 <rf_polling_rx_packet+0x36e>
    15fc:	fe 01       	movw	r30, r28
    15fe:	33 96       	adiw	r30, 0x03	; 3
    1600:	9e 01       	movw	r18, r28
    1602:	2b 5f       	subi	r18, 0xFB	; 251
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	1e bc       	out	0x2e, r1	; 46
    1608:	0d b4       	in	r0, 0x2d	; 45
    160a:	07 fe       	sbrs	r0, 7
    160c:	fd cf       	rjmp	.-6      	; 0x1608 <rf_polling_rx_packet+0x380>
    160e:	8e b5       	in	r24, 0x2e	; 46
    1610:	81 93       	st	Z+, r24
    1612:	e2 17       	cp	r30, r18
    1614:	f3 07       	cpc	r31, r19
    1616:	b9 f7       	brne	.-18     	; 0x1606 <rf_polling_rx_packet+0x37e>
    1618:	40 9a       	sbi	0x08, 0	; 8
    161a:	e0 91 01 05 	lds	r30, 0x0501
    161e:	f0 91 02 05 	lds	r31, 0x0502
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	80 87       	std	Z+8, r24	; 0x08
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	0a c0       	rjmp	.+20     	; 0x1642 <rf_polling_rx_packet+0x3ba>
    162e:	e0 91 01 05 	lds	r30, 0x0501
    1632:	f0 91 02 05 	lds	r31, 0x0502
    1636:	85 81       	ldd	r24, Z+5	; 0x05
    1638:	96 81       	ldd	r25, Z+6	; 0x06
    163a:	a8 0f       	add	r26, r24
    163c:	b9 1f       	adc	r27, r25
    163e:	8c 91       	ld	r24, X
    1640:	48 0f       	add	r20, r24
    1642:	82 2f       	mov	r24, r18
    1644:	e0 91 01 05 	lds	r30, 0x0501
    1648:	f0 91 02 05 	lds	r31, 0x0502
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	a8 2f       	mov	r26, r24
    1652:	bb 27       	eor	r27, r27
    1654:	83 81       	ldd	r24, Z+3	; 0x03
    1656:	99 27       	eor	r25, r25
    1658:	87 fd       	sbrc	r24, 7
    165a:	90 95       	com	r25
    165c:	a8 17       	cp	r26, r24
    165e:	b9 07       	cpc	r27, r25
    1660:	34 f3       	brlt	.-52     	; 0x162e <rf_polling_rx_packet+0x3a6>
    1662:	45 17       	cp	r20, r21
    1664:	19 f1       	breq	.+70     	; 0x16ac <rf_polling_rx_packet+0x424>
    1666:	40 98       	cbi	0x08, 0	; 8
    1668:	8f e7       	ldi	r24, 0x7F	; 127
    166a:	8e bd       	out	0x2e, r24	; 46
    166c:	0d b4       	in	r0, 0x2d	; 45
    166e:	07 fe       	sbrs	r0, 7
    1670:	fd cf       	rjmp	.-6      	; 0x166c <rf_polling_rx_packet+0x3e4>
    1672:	1e bc       	out	0x2e, r1	; 46
    1674:	0d b4       	in	r0, 0x2d	; 45
    1676:	07 fe       	sbrs	r0, 7
    1678:	fd cf       	rjmp	.-6      	; 0x1674 <rf_polling_rx_packet+0x3ec>
    167a:	8e b5       	in	r24, 0x2e	; 46
    167c:	40 9a       	sbi	0x08, 0	; 8
    167e:	40 98       	cbi	0x08, 0	; 8
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	8e bd       	out	0x2e, r24	; 46
    1684:	0d b4       	in	r0, 0x2d	; 45
    1686:	07 fe       	sbrs	r0, 7
    1688:	fd cf       	rjmp	.-6      	; 0x1684 <rf_polling_rx_packet+0x3fc>
    168a:	40 9a       	sbi	0x08, 0	; 8
    168c:	40 98       	cbi	0x08, 0	; 8
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	8e bd       	out	0x2e, r24	; 46
    1692:	0d b4       	in	r0, 0x2d	; 45
    1694:	07 fe       	sbrs	r0, 7
    1696:	fd cf       	rjmp	.-6      	; 0x1692 <rf_polling_rx_packet+0x40a>
    1698:	40 9a       	sbi	0x08, 0	; 8
    169a:	80 91 fc 04 	lds	r24, 0x04FC
    169e:	90 91 fd 04 	lds	r25, 0x04FD
    16a2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    16a6:	8c ef       	ldi	r24, 0xFC	; 252
    16a8:	9f ef       	ldi	r25, 0xFF	; 255
    16aa:	3c c0       	rjmp	.+120    	; 0x1724 <rf_polling_rx_packet+0x49c>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	87 ff       	sbrs	r24, 7
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <rf_polling_rx_packet+0x446>
    16b2:	80 91 12 05 	lds	r24, 0x0512
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	80 93 12 05 	sts	0x0512, r24
    16bc:	80 91 fc 04 	lds	r24, 0x04FC
    16c0:	90 91 fd 04 	lds	r25, 0x04FD
    16c4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	2b c0       	rjmp	.+86     	; 0x1724 <rf_polling_rx_packet+0x49c>
    16ce:	40 98       	cbi	0x08, 0	; 8
    16d0:	8f e7       	ldi	r24, 0x7F	; 127
    16d2:	8e bd       	out	0x2e, r24	; 46
    16d4:	0d b4       	in	r0, 0x2d	; 45
    16d6:	07 fe       	sbrs	r0, 7
    16d8:	fd cf       	rjmp	.-6      	; 0x16d4 <rf_polling_rx_packet+0x44c>
    16da:	1e bc       	out	0x2e, r1	; 46
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <rf_polling_rx_packet+0x454>
    16e2:	8e b5       	in	r24, 0x2e	; 46
    16e4:	40 9a       	sbi	0x08, 0	; 8
    16e6:	40 98       	cbi	0x08, 0	; 8
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	8e bd       	out	0x2e, r24	; 46
    16ec:	0d b4       	in	r0, 0x2d	; 45
    16ee:	07 fe       	sbrs	r0, 7
    16f0:	fd cf       	rjmp	.-6      	; 0x16ec <rf_polling_rx_packet+0x464>
    16f2:	40 9a       	sbi	0x08, 0	; 8
    16f4:	40 98       	cbi	0x08, 0	; 8
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	8e bd       	out	0x2e, r24	; 46
    16fa:	0d b4       	in	r0, 0x2d	; 45
    16fc:	07 fe       	sbrs	r0, 7
    16fe:	fd cf       	rjmp	.-6      	; 0x16fa <rf_polling_rx_packet+0x472>
    1700:	40 9a       	sbi	0x08, 0	; 8
    1702:	80 91 fc 04 	lds	r24, 0x04FC
    1706:	90 91 fd 04 	lds	r25, 0x04FD
    170a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    170e:	8b ef       	ldi	r24, 0xFB	; 251
    1710:	9f ef       	ldi	r25, 0xFF	; 255
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <rf_polling_rx_packet+0x49c>
    1714:	80 91 fc 04 	lds	r24, 0x04FC
    1718:	90 91 fd 04 	lds	r25, 0x04FD
    171c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	24 96       	adiw	r28, 0x04	; 4
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	08 95       	ret

00001736 <rf_rx_off>:
    1736:	80 91 fc 04 	lds	r24, 0x04FC
    173a:	90 91 fd 04 	lds	r25, 0x04FD
    173e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1742:	10 92 09 05 	sts	0x0509, r1
    1746:	40 98       	cbi	0x08, 0	; 8
    1748:	86 e0       	ldi	r24, 0x06	; 6
    174a:	8e bd       	out	0x2e, r24	; 46
    174c:	0d b4       	in	r0, 0x2d	; 45
    174e:	07 fe       	sbrs	r0, 7
    1750:	fd cf       	rjmp	.-6      	; 0x174c <rf_rx_off+0x16>
    1752:	40 9a       	sbi	0x08, 0	; 8
    1754:	10 92 12 05 	sts	0x0512, r1
    1758:	80 91 fc 04 	lds	r24, 0x04FC
    175c:	90 91 fd 04 	lds	r25, 0x04FD
    1760:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1764:	ef 98       	cbi	0x1d, 7	; 29
    1766:	08 95       	ret

00001768 <rf_polling_rx_on>:
    1768:	80 91 fc 04 	lds	r24, 0x04FC
    176c:	90 91 fd 04 	lds	r25, 0x04FD
    1770:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	80 93 09 05 	sts	0x0509, r24
    177a:	40 98       	cbi	0x08, 0	; 8
    177c:	83 e0       	ldi	r24, 0x03	; 3
    177e:	8e bd       	out	0x2e, r24	; 46
    1780:	0d b4       	in	r0, 0x2d	; 45
    1782:	07 fe       	sbrs	r0, 7
    1784:	fd cf       	rjmp	.-6      	; 0x1780 <rf_polling_rx_on+0x18>
    1786:	40 9a       	sbi	0x08, 0	; 8
    1788:	40 98       	cbi	0x08, 0	; 8
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	8e bd       	out	0x2e, r24	; 46
    178e:	0d b4       	in	r0, 0x2d	; 45
    1790:	07 fe       	sbrs	r0, 7
    1792:	fd cf       	rjmp	.-6      	; 0x178e <rf_polling_rx_on+0x26>
    1794:	40 9a       	sbi	0x08, 0	; 8
    1796:	10 92 12 05 	sts	0x0512, r1
    179a:	80 91 fc 04 	lds	r24, 0x04FC
    179e:	90 91 fd 04 	lds	r25, 0x04FD
    17a2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    17a6:	08 95       	ret

000017a8 <rf_rx_on>:
    17a8:	80 91 fc 04 	lds	r24, 0x04FC
    17ac:	90 91 fd 04 	lds	r25, 0x04FD
    17b0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	80 93 09 05 	sts	0x0509, r24
    17ba:	40 98       	cbi	0x08, 0	; 8
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	8e bd       	out	0x2e, r24	; 46
    17c0:	0d b4       	in	r0, 0x2d	; 45
    17c2:	07 fe       	sbrs	r0, 7
    17c4:	fd cf       	rjmp	.-6      	; 0x17c0 <rf_rx_on+0x18>
    17c6:	40 9a       	sbi	0x08, 0	; 8
    17c8:	40 98       	cbi	0x08, 0	; 8
    17ca:	88 e0       	ldi	r24, 0x08	; 8
    17cc:	8e bd       	out	0x2e, r24	; 46
    17ce:	0d b4       	in	r0, 0x2d	; 45
    17d0:	07 fe       	sbrs	r0, 7
    17d2:	fd cf       	rjmp	.-6      	; 0x17ce <rf_rx_on+0x26>
    17d4:	40 9a       	sbi	0x08, 0	; 8
    17d6:	10 92 12 05 	sts	0x0512, r1
    17da:	80 91 fc 04 	lds	r24, 0x04FC
    17de:	90 91 fd 04 	lds	r25, 0x04FD
    17e2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    17e6:	80 91 6a 00 	lds	r24, 0x006A
    17ea:	80 6c       	ori	r24, 0xC0	; 192
    17ec:	80 93 6a 00 	sts	0x006A, r24
    17f0:	80 e8       	ldi	r24, 0x80	; 128
    17f2:	8c bb       	out	0x1c, r24	; 28
    17f4:	ef 9a       	sbi	0x1d, 7	; 29
    17f6:	08 95       	ret

000017f8 <rf_tx_power>:
    17f8:	1f 93       	push	r17
    17fa:	18 2f       	mov	r17, r24
    17fc:	80 91 fc 04 	lds	r24, 0x04FC
    1800:	90 91 fd 04 	lds	r25, 0x04FD
    1804:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1808:	21 2f       	mov	r18, r17
    180a:	33 27       	eor	r19, r19
    180c:	2f 71       	andi	r18, 0x1F	; 31
    180e:	30 70       	andi	r19, 0x00	; 0
    1810:	20 6e       	ori	r18, 0xE0	; 224
    1812:	30 6a       	ori	r19, 0xA0	; 160
    1814:	40 98       	cbi	0x08, 0	; 8
    1816:	85 e1       	ldi	r24, 0x15	; 21
    1818:	8e bd       	out	0x2e, r24	; 46
    181a:	0d b4       	in	r0, 0x2d	; 45
    181c:	07 fe       	sbrs	r0, 7
    181e:	fd cf       	rjmp	.-6      	; 0x181a <rf_tx_power+0x22>
    1820:	83 2f       	mov	r24, r19
    1822:	99 27       	eor	r25, r25
    1824:	8e bd       	out	0x2e, r24	; 46
    1826:	0d b4       	in	r0, 0x2d	; 45
    1828:	07 fe       	sbrs	r0, 7
    182a:	fd cf       	rjmp	.-6      	; 0x1826 <rf_tx_power+0x2e>
    182c:	2e bd       	out	0x2e, r18	; 46
    182e:	0d b4       	in	r0, 0x2d	; 45
    1830:	07 fe       	sbrs	r0, 7
    1832:	fd cf       	rjmp	.-6      	; 0x182e <rf_tx_power+0x36>
    1834:	40 9a       	sbi	0x08, 0	; 8
    1836:	80 91 fc 04 	lds	r24, 0x04FC
    183a:	90 91 fd 04 	lds	r25, 0x04FD
    183e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1842:	1f 91       	pop	r17
    1844:	08 95       	ret

00001846 <rf_tx_packet>:
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	22 97       	sbiw	r28, 0x02	; 2
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	8c 01       	movw	r16, r24
    1864:	80 91 fc 04 	lds	r24, 0x04FC
    1868:	90 91 fd 04 	lds	r25, 0x04FD
    186c:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1870:	50 91 fe 04 	lds	r21, 0x04FE
    1874:	55 23       	and	r21, r21
    1876:	39 f0       	breq	.+14     	; 0x1886 <rf_tx_packet+0x40>
    1878:	40 98       	cbi	0x08, 0	; 8
    187a:	8d e0       	ldi	r24, 0x0D	; 13
    187c:	8e bd       	out	0x2e, r24	; 46
    187e:	0d b4       	in	r0, 0x2d	; 45
    1880:	07 fe       	sbrs	r0, 7
    1882:	fd cf       	rjmp	.-6      	; 0x187e <rf_tx_packet+0x38>
    1884:	40 9a       	sbi	0x08, 0	; 8
    1886:	f8 01       	movw	r30, r16
    1888:	42 81       	ldd	r20, Z+2	; 0x02
    188a:	64 2f       	mov	r22, r20
    188c:	77 27       	eor	r23, r23
    188e:	67 fd       	sbrc	r22, 7
    1890:	70 95       	com	r23
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <rf_tx_packet+0x64>
    189a:	f8 01       	movw	r30, r16
    189c:	83 81       	ldd	r24, Z+3	; 0x03
    189e:	94 81       	ldd	r25, Z+4	; 0x04
    18a0:	e8 0e       	add	r14, r24
    18a2:	f9 1e       	adc	r15, r25
    18a4:	f7 01       	movw	r30, r14
    18a6:	80 81       	ld	r24, Z
    18a8:	a8 0f       	add	r26, r24
    18aa:	82 2f       	mov	r24, r18
    18ac:	2f 5f       	subi	r18, 0xFF	; 255
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	e8 2e       	mov	r14, r24
    18b2:	ff 24       	eor	r15, r15
    18b4:	e6 16       	cp	r14, r22
    18b6:	f7 06       	cpc	r15, r23
    18b8:	84 f3       	brlt	.-32     	; 0x189a <rf_tx_packet+0x54>
    18ba:	94 2f       	mov	r25, r20
    18bc:	94 5f       	subi	r25, 0xF4	; 244
    18be:	51 11       	cpse	r21, r1
    18c0:	9c 5f       	subi	r25, 0xFC	; 252
    18c2:	67 99       	sbic	0x0c, 7	; 12
    18c4:	fe cf       	rjmp	.-4      	; 0x18c2 <rf_tx_packet+0x7c>
    18c6:	4e 99       	sbic	0x09, 6	; 9
    18c8:	fc cf       	rjmp	.-8      	; 0x18c2 <rf_tx_packet+0x7c>
    18ca:	f8 94       	cli
    18cc:	40 98       	cbi	0x08, 0	; 8
    18ce:	89 e0       	ldi	r24, 0x09	; 9
    18d0:	8e bd       	out	0x2e, r24	; 46
    18d2:	0d b4       	in	r0, 0x2d	; 45
    18d4:	07 fe       	sbrs	r0, 7
    18d6:	fd cf       	rjmp	.-6      	; 0x18d2 <rf_tx_packet+0x8c>
    18d8:	40 9a       	sbi	0x08, 0	; 8
    18da:	40 98       	cbi	0x08, 0	; 8
    18dc:	89 e0       	ldi	r24, 0x09	; 9
    18de:	8e bd       	out	0x2e, r24	; 46
    18e0:	0d b4       	in	r0, 0x2d	; 45
    18e2:	07 fe       	sbrs	r0, 7
    18e4:	fd cf       	rjmp	.-6      	; 0x18e0 <rf_tx_packet+0x9a>
    18e6:	40 9a       	sbi	0x08, 0	; 8
    18e8:	40 98       	cbi	0x08, 0	; 8
    18ea:	8e e3       	ldi	r24, 0x3E	; 62
    18ec:	8e bd       	out	0x2e, r24	; 46
    18ee:	0d b4       	in	r0, 0x2d	; 45
    18f0:	07 fc       	sbrc	r0, 7
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <rf_tx_packet+0xb8>
    18f4:	fc cf       	rjmp	.-8      	; 0x18ee <rf_tx_packet+0xa8>
    18f6:	0d b4       	in	r0, 0x2d	; 45
    18f8:	07 fc       	sbrc	r0, 7
    18fa:	30 c1       	rjmp	.+608    	; 0x1b5c <rf_tx_packet+0x316>
    18fc:	fc cf       	rjmp	.-8      	; 0x18f6 <rf_tx_packet+0xb0>
    18fe:	9e bd       	out	0x2e, r25	; 46
    1900:	fa cf       	rjmp	.-12     	; 0x18f6 <rf_tx_packet+0xb0>
    1902:	81 e6       	ldi	r24, 0x61	; 97
    1904:	98 e8       	ldi	r25, 0x88	; 136
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	55 23       	and	r21, r21
    190c:	29 f0       	breq	.+10     	; 0x1918 <rf_tx_packet+0xd2>
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	88 60       	ori	r24, 0x08	; 8
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	40 98       	cbi	0x08, 0	; 8
    191a:	8e e3       	ldi	r24, 0x3E	; 62
    191c:	8e bd       	out	0x2e, r24	; 46
    191e:	0d b4       	in	r0, 0x2d	; 45
    1920:	07 fe       	sbrs	r0, 7
    1922:	fd cf       	rjmp	.-6      	; 0x191e <rf_tx_packet+0xd8>
    1924:	fe 01       	movw	r30, r28
    1926:	31 96       	adiw	r30, 0x01	; 1
    1928:	9e 01       	movw	r18, r28
    192a:	2d 5f       	subi	r18, 0xFD	; 253
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	8e bd       	out	0x2e, r24	; 46
    1932:	0d b4       	in	r0, 0x2d	; 45
    1934:	07 fe       	sbrs	r0, 7
    1936:	fd cf       	rjmp	.-6      	; 0x1932 <rf_tx_packet+0xec>
    1938:	31 96       	adiw	r30, 0x01	; 1
    193a:	e2 17       	cp	r30, r18
    193c:	f3 07       	cpc	r31, r19
    193e:	b9 f7       	brne	.-18     	; 0x192e <rf_tx_packet+0xe8>
    1940:	40 9a       	sbi	0x08, 0	; 8
    1942:	40 98       	cbi	0x08, 0	; 8
    1944:	8e e3       	ldi	r24, 0x3E	; 62
    1946:	8e bd       	out	0x2e, r24	; 46
    1948:	0d b4       	in	r0, 0x2d	; 45
    194a:	07 fc       	sbrc	r0, 7
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <rf_tx_packet+0x112>
    194e:	fc cf       	rjmp	.-8      	; 0x1948 <rf_tx_packet+0x102>
    1950:	0d b4       	in	r0, 0x2d	; 45
    1952:	07 fc       	sbrc	r0, 7
    1954:	0e c1       	rjmp	.+540    	; 0x1b72 <rf_tx_packet+0x32c>
    1956:	fc cf       	rjmp	.-8      	; 0x1950 <rf_tx_packet+0x10a>
    1958:	80 91 03 05 	lds	r24, 0x0503
    195c:	8e bd       	out	0x2e, r24	; 46
    195e:	f8 cf       	rjmp	.-16     	; 0x1950 <rf_tx_packet+0x10a>
    1960:	0d b4       	in	r0, 0x2d	; 45
    1962:	07 fe       	sbrs	r0, 7
    1964:	fd cf       	rjmp	.-6      	; 0x1960 <rf_tx_packet+0x11a>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	eb 5f       	subi	r30, 0xFB	; 251
    196e:	fa 4f       	sbci	r31, 0xFA	; 250
    1970:	80 81       	ld	r24, Z
    1972:	8e bd       	out	0x2e, r24	; 46
    1974:	0d b4       	in	r0, 0x2d	; 45
    1976:	07 fe       	sbrs	r0, 7
    1978:	fd cf       	rjmp	.-6      	; 0x1974 <rf_tx_packet+0x12e>
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	99 f7       	brne	.-26     	; 0x196a <rf_tx_packet+0x124>
    1984:	40 9a       	sbi	0x08, 0	; 8
    1986:	40 98       	cbi	0x08, 0	; 8
    1988:	8e e3       	ldi	r24, 0x3E	; 62
    198a:	8e bd       	out	0x2e, r24	; 46
    198c:	0d b4       	in	r0, 0x2d	; 45
    198e:	07 fe       	sbrs	r0, 7
    1990:	fd cf       	rjmp	.-6      	; 0x198c <rf_tx_packet+0x146>
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	f8 01       	movw	r30, r16
    1998:	e2 0f       	add	r30, r18
    199a:	f3 1f       	adc	r31, r19
    199c:	80 81       	ld	r24, Z
    199e:	8e bd       	out	0x2e, r24	; 46
    19a0:	0d b4       	in	r0, 0x2d	; 45
    19a2:	07 fe       	sbrs	r0, 7
    19a4:	fd cf       	rjmp	.-6      	; 0x19a0 <rf_tx_packet+0x15a>
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	99 f7       	brne	.-26     	; 0x1996 <rf_tx_packet+0x150>
    19b0:	40 9a       	sbi	0x08, 0	; 8
    19b2:	40 98       	cbi	0x08, 0	; 8
    19b4:	8e e3       	ldi	r24, 0x3E	; 62
    19b6:	8e bd       	out	0x2e, r24	; 46
    19b8:	0d b4       	in	r0, 0x2d	; 45
    19ba:	07 fe       	sbrs	r0, 7
    19bc:	fd cf       	rjmp	.-6      	; 0x19b8 <rf_tx_packet+0x172>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	f9 01       	movw	r30, r18
    19c4:	e9 5f       	subi	r30, 0xF9	; 249
    19c6:	fa 4f       	sbci	r31, 0xFA	; 250
    19c8:	80 81       	ld	r24, Z
    19ca:	8e bd       	out	0x2e, r24	; 46
    19cc:	0d b4       	in	r0, 0x2d	; 45
    19ce:	07 fe       	sbrs	r0, 7
    19d0:	fd cf       	rjmp	.-6      	; 0x19cc <rf_tx_packet+0x186>
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	99 f7       	brne	.-26     	; 0x19c2 <rf_tx_packet+0x17c>
    19dc:	40 9a       	sbi	0x08, 0	; 8
    19de:	55 23       	and	r21, r21
    19e0:	99 f0       	breq	.+38     	; 0x1a08 <rf_tx_packet+0x1c2>
    19e2:	40 98       	cbi	0x08, 0	; 8
    19e4:	8e e3       	ldi	r24, 0x3E	; 62
    19e6:	8e bd       	out	0x2e, r24	; 46
    19e8:	0d b4       	in	r0, 0x2d	; 45
    19ea:	07 fe       	sbrs	r0, 7
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <rf_tx_packet+0x1a2>
    19ee:	ee e0       	ldi	r30, 0x0E	; 14
    19f0:	f5 e0       	ldi	r31, 0x05	; 5
    19f2:	80 81       	ld	r24, Z
    19f4:	8e bd       	out	0x2e, r24	; 46
    19f6:	0d b4       	in	r0, 0x2d	; 45
    19f8:	07 fe       	sbrs	r0, 7
    19fa:	fd cf       	rjmp	.-6      	; 0x19f6 <rf_tx_packet+0x1b0>
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	85 e0       	ldi	r24, 0x05	; 5
    1a00:	e2 31       	cpi	r30, 0x12	; 18
    1a02:	f8 07       	cpc	r31, r24
    1a04:	b1 f7       	brne	.-20     	; 0x19f2 <rf_tx_packet+0x1ac>
    1a06:	40 9a       	sbi	0x08, 0	; 8
    1a08:	40 98       	cbi	0x08, 0	; 8
    1a0a:	8e e3       	ldi	r24, 0x3E	; 62
    1a0c:	8e bd       	out	0x2e, r24	; 46
    1a0e:	0d b4       	in	r0, 0x2d	; 45
    1a10:	07 fe       	sbrs	r0, 7
    1a12:	fd cf       	rjmp	.-6      	; 0x1a0e <rf_tx_packet+0x1c8>
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	0d c0       	rjmp	.+26     	; 0x1a34 <rf_tx_packet+0x1ee>
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	83 81       	ldd	r24, Z+3	; 0x03
    1a1e:	94 81       	ldd	r25, Z+4	; 0x04
    1a20:	48 0f       	add	r20, r24
    1a22:	59 1f       	adc	r21, r25
    1a24:	fa 01       	movw	r30, r20
    1a26:	80 81       	ld	r24, Z
    1a28:	8e bd       	out	0x2e, r24	; 46
    1a2a:	0d b4       	in	r0, 0x2d	; 45
    1a2c:	07 fe       	sbrs	r0, 7
    1a2e:	fd cf       	rjmp	.-6      	; 0x1a2a <rf_tx_packet+0x1e4>
    1a30:	2f 5f       	subi	r18, 0xFF	; 255
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	42 2f       	mov	r20, r18
    1a36:	55 27       	eor	r21, r21
    1a38:	46 17       	cp	r20, r22
    1a3a:	57 07       	cpc	r21, r23
    1a3c:	74 f3       	brlt	.-36     	; 0x1a1a <rf_tx_packet+0x1d4>
    1a3e:	40 9a       	sbi	0x08, 0	; 8
    1a40:	40 98       	cbi	0x08, 0	; 8
    1a42:	8e e3       	ldi	r24, 0x3E	; 62
    1a44:	8e bd       	out	0x2e, r24	; 46
    1a46:	0d b4       	in	r0, 0x2d	; 45
    1a48:	07 fc       	sbrc	r0, 7
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <rf_tx_packet+0x210>
    1a4c:	fc cf       	rjmp	.-8      	; 0x1a46 <rf_tx_packet+0x200>
    1a4e:	0d b4       	in	r0, 0x2d	; 45
    1a50:	07 fc       	sbrc	r0, 7
    1a52:	94 c0       	rjmp	.+296    	; 0x1b7c <rf_tx_packet+0x336>
    1a54:	fc cf       	rjmp	.-8      	; 0x1a4e <rf_tx_packet+0x208>
    1a56:	ae bd       	out	0x2e, r26	; 46
    1a58:	fa cf       	rjmp	.-12     	; 0x1a4e <rf_tx_packet+0x208>
    1a5a:	80 91 09 05 	lds	r24, 0x0509
    1a5e:	88 23       	and	r24, r24
    1a60:	39 f4       	brne	.+14     	; 0x1a70 <rf_tx_packet+0x22a>
    1a62:	40 98       	cbi	0x08, 0	; 8
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	8e bd       	out	0x2e, r24	; 46
    1a68:	0d b4       	in	r0, 0x2d	; 45
    1a6a:	07 fe       	sbrs	r0, 7
    1a6c:	fd cf       	rjmp	.-6      	; 0x1a68 <rf_tx_packet+0x222>
    1a6e:	40 9a       	sbi	0x08, 0	; 8
    1a70:	40 98       	cbi	0x08, 0	; 8
    1a72:	1e bc       	out	0x2e, r1	; 46
    1a74:	0d b4       	in	r0, 0x2d	; 45
    1a76:	07 fe       	sbrs	r0, 7
    1a78:	fd cf       	rjmp	.-6      	; 0x1a74 <rf_tx_packet+0x22e>
    1a7a:	8e b5       	in	r24, 0x2e	; 46
    1a7c:	40 9a       	sbi	0x08, 0	; 8
    1a7e:	81 ff       	sbrs	r24, 1
    1a80:	f7 cf       	rjmp	.-18     	; 0x1a70 <rf_tx_packet+0x22a>
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	40 98       	cbi	0x08, 0	; 8
    1a86:	85 e0       	ldi	r24, 0x05	; 5
    1a88:	8e bd       	out	0x2e, r24	; 46
    1a8a:	0d b4       	in	r0, 0x2d	; 45
    1a8c:	07 fe       	sbrs	r0, 7
    1a8e:	fd cf       	rjmp	.-6      	; 0x1a8a <rf_tx_packet+0x244>
    1a90:	40 9a       	sbi	0x08, 0	; 8
    1a92:	40 98       	cbi	0x08, 0	; 8
    1a94:	1e bc       	out	0x2e, r1	; 46
    1a96:	0d b4       	in	r0, 0x2d	; 45
    1a98:	07 fe       	sbrs	r0, 7
    1a9a:	fd cf       	rjmp	.-6      	; 0x1a96 <rf_tx_packet+0x250>
    1a9c:	1e b5       	in	r17, 0x2e	; 46
    1a9e:	40 9a       	sbi	0x08, 0	; 8
    1aa0:	0f 5f       	subi	r16, 0xFF	; 255
    1aa2:	05 36       	cpi	r16, 0x65	; 101
    1aa4:	51 f4       	brne	.+20     	; 0x1aba <rf_tx_packet+0x274>
    1aa6:	78 94       	sei
    1aa8:	80 91 fc 04 	lds	r24, 0x04FC
    1aac:	90 91 fd 04 	lds	r25, 0x04FD
    1ab0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	68 c0       	rjmp	.+208    	; 0x1b8a <rf_tx_packet+0x344>
    1aba:	84 e6       	ldi	r24, 0x64	; 100
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    1ac2:	13 fd       	sbrc	r17, 3
    1ac4:	08 c0       	rjmp	.+16     	; 0x1ad6 <rf_tx_packet+0x290>
    1ac6:	de cf       	rjmp	.-68     	; 0x1a84 <rf_tx_packet+0x23e>
    1ac8:	40 98       	cbi	0x08, 0	; 8
    1aca:	84 e0       	ldi	r24, 0x04	; 4
    1acc:	8e bd       	out	0x2e, r24	; 46
    1ace:	0d b4       	in	r0, 0x2d	; 45
    1ad0:	07 fe       	sbrs	r0, 7
    1ad2:	fd cf       	rjmp	.-6      	; 0x1ace <rf_tx_packet+0x288>
    1ad4:	40 9a       	sbi	0x08, 0	; 8
    1ad6:	78 94       	sei
    1ad8:	4e 9b       	sbis	0x09, 6	; 9
    1ada:	fe cf       	rjmp	.-4      	; 0x1ad8 <rf_tx_packet+0x292>
    1adc:	4e 99       	sbic	0x09, 6	; 9
    1ade:	fe cf       	rjmp	.-4      	; 0x1adc <rf_tx_packet+0x296>
    1ae0:	80 91 0c 05 	lds	r24, 0x050C
    1ae4:	88 23       	and	r24, r24
    1ae6:	91 f0       	breq	.+36     	; 0x1b0c <rf_tx_packet+0x2c6>
    1ae8:	84 ea       	ldi	r24, 0xA4	; 164
    1aea:	92 e0       	ldi	r25, 0x02	; 2
    1aec:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    1af0:	31 9b       	sbis	0x06, 1	; 6
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <rf_tx_packet+0x2ca>
    1af4:	40 98       	cbi	0x08, 0	; 8
    1af6:	8f e7       	ldi	r24, 0x7F	; 127
    1af8:	8e bd       	out	0x2e, r24	; 46
    1afa:	0d b4       	in	r0, 0x2d	; 45
    1afc:	07 fe       	sbrs	r0, 7
    1afe:	fd cf       	rjmp	.-6      	; 0x1afa <rf_tx_packet+0x2b4>
    1b00:	1e bc       	out	0x2e, r1	; 46
    1b02:	0d b4       	in	r0, 0x2d	; 45
    1b04:	07 fe       	sbrs	r0, 7
    1b06:	fd cf       	rjmp	.-6      	; 0x1b02 <rf_tx_packet+0x2bc>
    1b08:	8e b5       	in	r24, 0x2e	; 46
    1b0a:	40 9a       	sbi	0x08, 0	; 8
    1b0c:	11 e0       	ldi	r17, 0x01	; 1
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <rf_tx_packet+0x2e8>
    1b10:	40 98       	cbi	0x08, 0	; 8
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	8e bd       	out	0x2e, r24	; 46
    1b16:	0d b4       	in	r0, 0x2d	; 45
    1b18:	07 fe       	sbrs	r0, 7
    1b1a:	fd cf       	rjmp	.-6      	; 0x1b16 <rf_tx_packet+0x2d0>
    1b1c:	40 9a       	sbi	0x08, 0	; 8
    1b1e:	40 98       	cbi	0x08, 0	; 8
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	8e bd       	out	0x2e, r24	; 46
    1b24:	0d b4       	in	r0, 0x2d	; 45
    1b26:	07 fe       	sbrs	r0, 7
    1b28:	fd cf       	rjmp	.-6      	; 0x1b24 <rf_tx_packet+0x2de>
    1b2a:	40 9a       	sbi	0x08, 0	; 8
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	f8 94       	cli
    1b30:	40 98       	cbi	0x08, 0	; 8
    1b32:	86 e0       	ldi	r24, 0x06	; 6
    1b34:	8e bd       	out	0x2e, r24	; 46
    1b36:	0d b4       	in	r0, 0x2d	; 45
    1b38:	07 fe       	sbrs	r0, 7
    1b3a:	fd cf       	rjmp	.-6      	; 0x1b36 <rf_tx_packet+0x2f0>
    1b3c:	40 9a       	sbi	0x08, 0	; 8
    1b3e:	78 94       	sei
    1b40:	80 91 03 05 	lds	r24, 0x0503
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	80 93 03 05 	sts	0x0503, r24
    1b4a:	80 91 fc 04 	lds	r24, 0x04FC
    1b4e:	90 91 fd 04 	lds	r25, 0x04FD
    1b52:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1b56:	81 2f       	mov	r24, r17
    1b58:	99 27       	eor	r25, r25
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <rf_tx_packet+0x344>
    1b5c:	40 9a       	sbi	0x08, 0	; 8
    1b5e:	81 e4       	ldi	r24, 0x41	; 65
    1b60:	98 e8       	ldi	r25, 0x88	; 136
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	80 91 0c 05 	lds	r24, 0x050C
    1b6a:	88 23       	and	r24, r24
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <rf_tx_packet+0x32a>
    1b6e:	c9 ce       	rjmp	.-622    	; 0x1902 <rf_tx_packet+0xbc>
    1b70:	cc ce       	rjmp	.-616    	; 0x190a <rf_tx_packet+0xc4>
    1b72:	40 9a       	sbi	0x08, 0	; 8
    1b74:	40 98       	cbi	0x08, 0	; 8
    1b76:	8e e3       	ldi	r24, 0x3E	; 62
    1b78:	8e bd       	out	0x2e, r24	; 46
    1b7a:	f2 ce       	rjmp	.-540    	; 0x1960 <rf_tx_packet+0x11a>
    1b7c:	40 9a       	sbi	0x08, 0	; 8
    1b7e:	f8 01       	movw	r30, r16
    1b80:	85 81       	ldd	r24, Z+5	; 0x05
    1b82:	88 23       	and	r24, r24
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <rf_tx_packet+0x342>
    1b86:	69 cf       	rjmp	.-302    	; 0x1a5a <rf_tx_packet+0x214>
    1b88:	9f cf       	rjmp	.-194    	; 0x1ac8 <rf_tx_packet+0x282>
    1b8a:	22 96       	adiw	r28, 0x02	; 2
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	08 95       	ret

00001ba4 <rf_tx_tdma_packet>:
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	22 97       	sbiw	r28, 0x02	; 2
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	8c 01       	movw	r16, r24
    1bc8:	6b 01       	movw	r12, r22
    1bca:	7a 01       	movw	r14, r20
    1bcc:	80 91 fc 04 	lds	r24, 0x04FC
    1bd0:	90 91 fd 04 	lds	r25, 0x04FD
    1bd4:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    1bd8:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    1bdc:	40 98       	cbi	0x08, 0	; 8
    1bde:	88 e0       	ldi	r24, 0x08	; 8
    1be0:	8e bd       	out	0x2e, r24	; 46
    1be2:	0d b4       	in	r0, 0x2d	; 45
    1be4:	07 fe       	sbrs	r0, 7
    1be6:	fd cf       	rjmp	.-6      	; 0x1be2 <rf_tx_tdma_packet+0x3e>
    1be8:	40 9a       	sbi	0x08, 0	; 8
    1bea:	40 98       	cbi	0x08, 0	; 8
    1bec:	88 e0       	ldi	r24, 0x08	; 8
    1bee:	8e bd       	out	0x2e, r24	; 46
    1bf0:	0d b4       	in	r0, 0x2d	; 45
    1bf2:	07 fe       	sbrs	r0, 7
    1bf4:	fd cf       	rjmp	.-6      	; 0x1bf0 <rf_tx_tdma_packet+0x4c>
    1bf6:	40 9a       	sbi	0x08, 0	; 8
    1bf8:	67 99       	sbic	0x0c, 7	; 12
    1bfa:	fe cf       	rjmp	.-4      	; 0x1bf8 <rf_tx_tdma_packet+0x54>
    1bfc:	4e 99       	sbic	0x09, 6	; 9
    1bfe:	fc cf       	rjmp	.-8      	; 0x1bf8 <rf_tx_tdma_packet+0x54>
    1c00:	f8 94       	cli
    1c02:	40 98       	cbi	0x08, 0	; 8
    1c04:	89 e0       	ldi	r24, 0x09	; 9
    1c06:	8e bd       	out	0x2e, r24	; 46
    1c08:	0d b4       	in	r0, 0x2d	; 45
    1c0a:	07 fe       	sbrs	r0, 7
    1c0c:	fd cf       	rjmp	.-6      	; 0x1c08 <rf_tx_tdma_packet+0x64>
    1c0e:	40 9a       	sbi	0x08, 0	; 8
    1c10:	40 98       	cbi	0x08, 0	; 8
    1c12:	89 e0       	ldi	r24, 0x09	; 9
    1c14:	8e bd       	out	0x2e, r24	; 46
    1c16:	0d b4       	in	r0, 0x2d	; 45
    1c18:	07 fe       	sbrs	r0, 7
    1c1a:	fd cf       	rjmp	.-6      	; 0x1c16 <rf_tx_tdma_packet+0x72>
    1c1c:	40 9a       	sbi	0x08, 0	; 8
    1c1e:	f8 01       	movw	r30, r16
    1c20:	62 81       	ldd	r22, Z+2	; 0x02
    1c22:	46 2f       	mov	r20, r22
    1c24:	55 27       	eor	r21, r21
    1c26:	47 fd       	sbrc	r20, 7
    1c28:	50 95       	com	r21
    1c2a:	bb 24       	eor	r11, r11
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	07 c0       	rjmp	.+14     	; 0x1c40 <rf_tx_tdma_packet+0x9c>
    1c32:	f8 01       	movw	r30, r16
    1c34:	83 81       	ldd	r24, Z+3	; 0x03
    1c36:	94 81       	ldd	r25, Z+4	; 0x04
    1c38:	a8 0f       	add	r26, r24
    1c3a:	b9 1f       	adc	r27, r25
    1c3c:	8c 91       	ld	r24, X
    1c3e:	b8 0e       	add	r11, r24
    1c40:	82 2f       	mov	r24, r18
    1c42:	2f 5f       	subi	r18, 0xFF	; 255
    1c44:	3f 4f       	sbci	r19, 0xFF	; 255
    1c46:	a8 2f       	mov	r26, r24
    1c48:	bb 27       	eor	r27, r27
    1c4a:	a4 17       	cp	r26, r20
    1c4c:	b5 07       	cpc	r27, r21
    1c4e:	8c f3       	brlt	.-30     	; 0x1c32 <rf_tx_tdma_packet+0x8e>
    1c50:	96 2f       	mov	r25, r22
    1c52:	94 5f       	subi	r25, 0xF4	; 244
    1c54:	40 98       	cbi	0x08, 0	; 8
    1c56:	8e e3       	ldi	r24, 0x3E	; 62
    1c58:	8e bd       	out	0x2e, r24	; 46
    1c5a:	0d b4       	in	r0, 0x2d	; 45
    1c5c:	07 fc       	sbrc	r0, 7
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <rf_tx_tdma_packet+0xc6>
    1c60:	fc cf       	rjmp	.-8      	; 0x1c5a <rf_tx_tdma_packet+0xb6>
    1c62:	0d b4       	in	r0, 0x2d	; 45
    1c64:	07 fc       	sbrc	r0, 7
    1c66:	16 c1       	rjmp	.+556    	; 0x1e94 <rf_tx_tdma_packet+0x2f0>
    1c68:	fc cf       	rjmp	.-8      	; 0x1c62 <rf_tx_tdma_packet+0xbe>
    1c6a:	9e bd       	out	0x2e, r25	; 46
    1c6c:	fa cf       	rjmp	.-12     	; 0x1c62 <rf_tx_tdma_packet+0xbe>
    1c6e:	81 e6       	ldi	r24, 0x61	; 97
    1c70:	98 e8       	ldi	r25, 0x88	; 136
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	40 98       	cbi	0x08, 0	; 8
    1c78:	8e e3       	ldi	r24, 0x3E	; 62
    1c7a:	8e bd       	out	0x2e, r24	; 46
    1c7c:	0d b4       	in	r0, 0x2d	; 45
    1c7e:	07 fe       	sbrs	r0, 7
    1c80:	fd cf       	rjmp	.-6      	; 0x1c7c <rf_tx_tdma_packet+0xd8>
    1c82:	fe 01       	movw	r30, r28
    1c84:	31 96       	adiw	r30, 0x01	; 1
    1c86:	9e 01       	movw	r18, r28
    1c88:	2d 5f       	subi	r18, 0xFD	; 253
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8e bd       	out	0x2e, r24	; 46
    1c90:	0d b4       	in	r0, 0x2d	; 45
    1c92:	07 fe       	sbrs	r0, 7
    1c94:	fd cf       	rjmp	.-6      	; 0x1c90 <rf_tx_tdma_packet+0xec>
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	e2 17       	cp	r30, r18
    1c9a:	f3 07       	cpc	r31, r19
    1c9c:	b9 f7       	brne	.-18     	; 0x1c8c <rf_tx_tdma_packet+0xe8>
    1c9e:	40 9a       	sbi	0x08, 0	; 8
    1ca0:	40 98       	cbi	0x08, 0	; 8
    1ca2:	8e e3       	ldi	r24, 0x3E	; 62
    1ca4:	8e bd       	out	0x2e, r24	; 46
    1ca6:	0d b4       	in	r0, 0x2d	; 45
    1ca8:	07 fc       	sbrc	r0, 7
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <rf_tx_tdma_packet+0x112>
    1cac:	fc cf       	rjmp	.-8      	; 0x1ca6 <rf_tx_tdma_packet+0x102>
    1cae:	0d b4       	in	r0, 0x2d	; 45
    1cb0:	07 fc       	sbrc	r0, 7
    1cb2:	f9 c0       	rjmp	.+498    	; 0x1ea6 <rf_tx_tdma_packet+0x302>
    1cb4:	fc cf       	rjmp	.-8      	; 0x1cae <rf_tx_tdma_packet+0x10a>
    1cb6:	80 91 03 05 	lds	r24, 0x0503
    1cba:	8e bd       	out	0x2e, r24	; 46
    1cbc:	f8 cf       	rjmp	.-16     	; 0x1cae <rf_tx_tdma_packet+0x10a>
    1cbe:	0d b4       	in	r0, 0x2d	; 45
    1cc0:	07 fe       	sbrs	r0, 7
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <rf_tx_tdma_packet+0x11a>
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	f9 01       	movw	r30, r18
    1cca:	eb 5f       	subi	r30, 0xFB	; 251
    1ccc:	fa 4f       	sbci	r31, 0xFA	; 250
    1cce:	80 81       	ld	r24, Z
    1cd0:	8e bd       	out	0x2e, r24	; 46
    1cd2:	0d b4       	in	r0, 0x2d	; 45
    1cd4:	07 fe       	sbrs	r0, 7
    1cd6:	fd cf       	rjmp	.-6      	; 0x1cd2 <rf_tx_tdma_packet+0x12e>
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	99 f7       	brne	.-26     	; 0x1cc8 <rf_tx_tdma_packet+0x124>
    1ce2:	40 9a       	sbi	0x08, 0	; 8
    1ce4:	40 98       	cbi	0x08, 0	; 8
    1ce6:	8e e3       	ldi	r24, 0x3E	; 62
    1ce8:	8e bd       	out	0x2e, r24	; 46
    1cea:	0d b4       	in	r0, 0x2d	; 45
    1cec:	07 fe       	sbrs	r0, 7
    1cee:	fd cf       	rjmp	.-6      	; 0x1cea <rf_tx_tdma_packet+0x146>
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8e bd       	out	0x2e, r24	; 46
    1cfe:	0d b4       	in	r0, 0x2d	; 45
    1d00:	07 fe       	sbrs	r0, 7
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <rf_tx_tdma_packet+0x15a>
    1d04:	2f 5f       	subi	r18, 0xFF	; 255
    1d06:	3f 4f       	sbci	r19, 0xFF	; 255
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	99 f7       	brne	.-26     	; 0x1cf4 <rf_tx_tdma_packet+0x150>
    1d0e:	40 9a       	sbi	0x08, 0	; 8
    1d10:	40 98       	cbi	0x08, 0	; 8
    1d12:	8e e3       	ldi	r24, 0x3E	; 62
    1d14:	8e bd       	out	0x2e, r24	; 46
    1d16:	0d b4       	in	r0, 0x2d	; 45
    1d18:	07 fe       	sbrs	r0, 7
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <rf_tx_tdma_packet+0x172>
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	f9 01       	movw	r30, r18
    1d22:	e9 5f       	subi	r30, 0xF9	; 249
    1d24:	fa 4f       	sbci	r31, 0xFA	; 250
    1d26:	80 81       	ld	r24, Z
    1d28:	8e bd       	out	0x2e, r24	; 46
    1d2a:	0d b4       	in	r0, 0x2d	; 45
    1d2c:	07 fe       	sbrs	r0, 7
    1d2e:	fd cf       	rjmp	.-6      	; 0x1d2a <rf_tx_tdma_packet+0x186>
    1d30:	2f 5f       	subi	r18, 0xFF	; 255
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	22 30       	cpi	r18, 0x02	; 2
    1d36:	31 05       	cpc	r19, r1
    1d38:	99 f7       	brne	.-26     	; 0x1d20 <rf_tx_tdma_packet+0x17c>
    1d3a:	40 9a       	sbi	0x08, 0	; 8
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	c6 01       	movw	r24, r12
    1d40:	0e 94 a3 2b 	call	0x5746	; 0x5746 <nrk_high_speed_timer_wait>
    1d44:	f8 01       	movw	r30, r16
    1d46:	85 81       	ldd	r24, Z+5	; 0x05
    1d48:	88 23       	and	r24, r24
    1d4a:	c1 f1       	breq	.+112    	; 0x1dbc <rf_tx_tdma_packet+0x218>
    1d4c:	80 91 09 05 	lds	r24, 0x0509
    1d50:	88 23       	and	r24, r24
    1d52:	39 f4       	brne	.+14     	; 0x1d62 <rf_tx_tdma_packet+0x1be>
    1d54:	40 98       	cbi	0x08, 0	; 8
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	8e bd       	out	0x2e, r24	; 46
    1d5a:	0d b4       	in	r0, 0x2d	; 45
    1d5c:	07 fe       	sbrs	r0, 7
    1d5e:	fd cf       	rjmp	.-6      	; 0x1d5a <rf_tx_tdma_packet+0x1b6>
    1d60:	40 9a       	sbi	0x08, 0	; 8
    1d62:	40 98       	cbi	0x08, 0	; 8
    1d64:	1e bc       	out	0x2e, r1	; 46
    1d66:	0d b4       	in	r0, 0x2d	; 45
    1d68:	07 fe       	sbrs	r0, 7
    1d6a:	fd cf       	rjmp	.-6      	; 0x1d66 <rf_tx_tdma_packet+0x1c2>
    1d6c:	8e b5       	in	r24, 0x2e	; 46
    1d6e:	40 9a       	sbi	0x08, 0	; 8
    1d70:	81 ff       	sbrs	r24, 1
    1d72:	f7 cf       	rjmp	.-18     	; 0x1d62 <rf_tx_tdma_packet+0x1be>
    1d74:	ee 24       	eor	r14, r14
    1d76:	40 98       	cbi	0x08, 0	; 8
    1d78:	85 e0       	ldi	r24, 0x05	; 5
    1d7a:	8e bd       	out	0x2e, r24	; 46
    1d7c:	0d b4       	in	r0, 0x2d	; 45
    1d7e:	07 fe       	sbrs	r0, 7
    1d80:	fd cf       	rjmp	.-6      	; 0x1d7c <rf_tx_tdma_packet+0x1d8>
    1d82:	40 9a       	sbi	0x08, 0	; 8
    1d84:	40 98       	cbi	0x08, 0	; 8
    1d86:	1e bc       	out	0x2e, r1	; 46
    1d88:	0d b4       	in	r0, 0x2d	; 45
    1d8a:	07 fe       	sbrs	r0, 7
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <rf_tx_tdma_packet+0x1e4>
    1d8e:	fe b4       	in	r15, 0x2e	; 46
    1d90:	40 9a       	sbi	0x08, 0	; 8
    1d92:	e3 94       	inc	r14
    1d94:	f5 e6       	ldi	r31, 0x65	; 101
    1d96:	ef 16       	cp	r14, r31
    1d98:	51 f4       	brne	.+20     	; 0x1dae <rf_tx_tdma_packet+0x20a>
    1d9a:	78 94       	sei
    1d9c:	80 91 fc 04 	lds	r24, 0x04FC
    1da0:	90 91 fd 04 	lds	r25, 0x04FD
    1da4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	83 c0       	rjmp	.+262    	; 0x1eb4 <rf_tx_tdma_packet+0x310>
    1dae:	84 e6       	ldi	r24, 0x64	; 100
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    1db6:	f3 fc       	sbrc	r15, 3
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <rf_tx_tdma_packet+0x226>
    1dba:	dd cf       	rjmp	.-70     	; 0x1d76 <rf_tx_tdma_packet+0x1d2>
    1dbc:	40 98       	cbi	0x08, 0	; 8
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	8e bd       	out	0x2e, r24	; 46
    1dc2:	0d b4       	in	r0, 0x2d	; 45
    1dc4:	07 fe       	sbrs	r0, 7
    1dc6:	fd cf       	rjmp	.-6      	; 0x1dc2 <rf_tx_tdma_packet+0x21e>
    1dc8:	40 9a       	sbi	0x08, 0	; 8
    1dca:	40 98       	cbi	0x08, 0	; 8
    1dcc:	8e e3       	ldi	r24, 0x3E	; 62
    1dce:	8e bd       	out	0x2e, r24	; 46
    1dd0:	0d b4       	in	r0, 0x2d	; 45
    1dd2:	07 fe       	sbrs	r0, 7
    1dd4:	fd cf       	rjmp	.-6      	; 0x1dd0 <rf_tx_tdma_packet+0x22c>
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	48 2f       	mov	r20, r24
    1ddc:	55 27       	eor	r21, r21
    1dde:	47 fd       	sbrc	r20, 7
    1de0:	50 95       	com	r21
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	0c c0       	rjmp	.+24     	; 0x1e00 <rf_tx_tdma_packet+0x25c>
    1de8:	f8 01       	movw	r30, r16
    1dea:	83 81       	ldd	r24, Z+3	; 0x03
    1dec:	94 81       	ldd	r25, Z+4	; 0x04
    1dee:	a8 0f       	add	r26, r24
    1df0:	b9 1f       	adc	r27, r25
    1df2:	8c 91       	ld	r24, X
    1df4:	8e bd       	out	0x2e, r24	; 46
    1df6:	0d b4       	in	r0, 0x2d	; 45
    1df8:	07 fe       	sbrs	r0, 7
    1dfa:	fd cf       	rjmp	.-6      	; 0x1df6 <rf_tx_tdma_packet+0x252>
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	a2 2f       	mov	r26, r18
    1e02:	bb 27       	eor	r27, r27
    1e04:	a4 17       	cp	r26, r20
    1e06:	b5 07       	cpc	r27, r21
    1e08:	7c f3       	brlt	.-34     	; 0x1de8 <rf_tx_tdma_packet+0x244>
    1e0a:	40 9a       	sbi	0x08, 0	; 8
    1e0c:	40 98       	cbi	0x08, 0	; 8
    1e0e:	8e e3       	ldi	r24, 0x3E	; 62
    1e10:	8e bd       	out	0x2e, r24	; 46
    1e12:	0d b4       	in	r0, 0x2d	; 45
    1e14:	07 fc       	sbrc	r0, 7
    1e16:	05 c0       	rjmp	.+10     	; 0x1e22 <rf_tx_tdma_packet+0x27e>
    1e18:	fc cf       	rjmp	.-8      	; 0x1e12 <rf_tx_tdma_packet+0x26e>
    1e1a:	0d b4       	in	r0, 0x2d	; 45
    1e1c:	07 fc       	sbrc	r0, 7
    1e1e:	48 c0       	rjmp	.+144    	; 0x1eb0 <rf_tx_tdma_packet+0x30c>
    1e20:	fc cf       	rjmp	.-8      	; 0x1e1a <rf_tx_tdma_packet+0x276>
    1e22:	be bc       	out	0x2e, r11	; 46
    1e24:	fa cf       	rjmp	.-12     	; 0x1e1a <rf_tx_tdma_packet+0x276>
    1e26:	4e 9b       	sbis	0x09, 6	; 9
    1e28:	fe cf       	rjmp	.-4      	; 0x1e26 <rf_tx_tdma_packet+0x282>
    1e2a:	f8 94       	cli
    1e2c:	4e 99       	sbic	0x09, 6	; 9
    1e2e:	fe cf       	rjmp	.-4      	; 0x1e2c <rf_tx_tdma_packet+0x288>
    1e30:	40 98       	cbi	0x08, 0	; 8
    1e32:	88 e0       	ldi	r24, 0x08	; 8
    1e34:	8e bd       	out	0x2e, r24	; 46
    1e36:	0d b4       	in	r0, 0x2d	; 45
    1e38:	07 fe       	sbrs	r0, 7
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <rf_tx_tdma_packet+0x292>
    1e3c:	40 9a       	sbi	0x08, 0	; 8
    1e3e:	40 98       	cbi	0x08, 0	; 8
    1e40:	88 e0       	ldi	r24, 0x08	; 8
    1e42:	8e bd       	out	0x2e, r24	; 46
    1e44:	0d b4       	in	r0, 0x2d	; 45
    1e46:	07 fe       	sbrs	r0, 7
    1e48:	fd cf       	rjmp	.-6      	; 0x1e44 <rf_tx_tdma_packet+0x2a0>
    1e4a:	40 9a       	sbi	0x08, 0	; 8
    1e4c:	40 98       	cbi	0x08, 0	; 8
    1e4e:	89 e0       	ldi	r24, 0x09	; 9
    1e50:	8e bd       	out	0x2e, r24	; 46
    1e52:	0d b4       	in	r0, 0x2d	; 45
    1e54:	07 fe       	sbrs	r0, 7
    1e56:	fd cf       	rjmp	.-6      	; 0x1e52 <rf_tx_tdma_packet+0x2ae>
    1e58:	40 9a       	sbi	0x08, 0	; 8
    1e5a:	40 98       	cbi	0x08, 0	; 8
    1e5c:	89 e0       	ldi	r24, 0x09	; 9
    1e5e:	8e bd       	out	0x2e, r24	; 46
    1e60:	0d b4       	in	r0, 0x2d	; 45
    1e62:	07 fe       	sbrs	r0, 7
    1e64:	fd cf       	rjmp	.-6      	; 0x1e60 <rf_tx_tdma_packet+0x2bc>
    1e66:	40 9a       	sbi	0x08, 0	; 8
    1e68:	40 98       	cbi	0x08, 0	; 8
    1e6a:	86 e0       	ldi	r24, 0x06	; 6
    1e6c:	8e bd       	out	0x2e, r24	; 46
    1e6e:	0d b4       	in	r0, 0x2d	; 45
    1e70:	07 fe       	sbrs	r0, 7
    1e72:	fd cf       	rjmp	.-6      	; 0x1e6e <rf_tx_tdma_packet+0x2ca>
    1e74:	40 9a       	sbi	0x08, 0	; 8
    1e76:	78 94       	sei
    1e78:	80 91 03 05 	lds	r24, 0x0503
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	80 93 03 05 	sts	0x0503, r24
    1e82:	80 91 fc 04 	lds	r24, 0x04FC
    1e86:	90 91 fd 04 	lds	r25, 0x04FD
    1e8a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <rf_tx_tdma_packet+0x310>
    1e94:	40 9a       	sbi	0x08, 0	; 8
    1e96:	f8 01       	movw	r30, r16
    1e98:	86 81       	ldd	r24, Z+6	; 0x06
    1e9a:	88 23       	and	r24, r24
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <rf_tx_tdma_packet+0x2fc>
    1e9e:	e7 ce       	rjmp	.-562    	; 0x1c6e <rf_tx_tdma_packet+0xca>
    1ea0:	81 e4       	ldi	r24, 0x41	; 65
    1ea2:	98 e8       	ldi	r25, 0x88	; 136
    1ea4:	e6 ce       	rjmp	.-564    	; 0x1c72 <rf_tx_tdma_packet+0xce>
    1ea6:	40 9a       	sbi	0x08, 0	; 8
    1ea8:	40 98       	cbi	0x08, 0	; 8
    1eaa:	8e e3       	ldi	r24, 0x3E	; 62
    1eac:	8e bd       	out	0x2e, r24	; 46
    1eae:	07 cf       	rjmp	.-498    	; 0x1cbe <rf_tx_tdma_packet+0x11a>
    1eb0:	40 9a       	sbi	0x08, 0	; 8
    1eb2:	b9 cf       	rjmp	.-142    	; 0x1e26 <rf_tx_tdma_packet+0x282>
    1eb4:	22 96       	adiw	r28, 0x02	; 2
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	08 95       	ret

00001ed4 <rf_addr_decode_set_my_mac>:
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	22 97       	sbiw	r28, 0x02	; 2
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	90 93 08 05 	sts	0x0508, r25
    1ef0:	80 93 07 05 	sts	0x0507, r24
    1ef4:	84 ef       	ldi	r24, 0xF4	; 244
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    1efc:	40 98       	cbi	0x08, 0	; 8
    1efe:	8a ee       	ldi	r24, 0xEA	; 234
    1f00:	8e bd       	out	0x2e, r24	; 46
    1f02:	0d b4       	in	r0, 0x2d	; 45
    1f04:	07 fe       	sbrs	r0, 7
    1f06:	fd cf       	rjmp	.-6      	; 0x1f02 <rf_addr_decode_set_my_mac+0x2e>
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	8e bd       	out	0x2e, r24	; 46
    1f0c:	0d b4       	in	r0, 0x2d	; 45
    1f0e:	07 fe       	sbrs	r0, 7
    1f10:	fd cf       	rjmp	.-6      	; 0x1f0c <rf_addr_decode_set_my_mac+0x38>
    1f12:	fe 01       	movw	r30, r28
    1f14:	31 96       	adiw	r30, 0x01	; 1
    1f16:	9e 01       	movw	r18, r28
    1f18:	2d 5f       	subi	r18, 0xFD	; 253
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8e bd       	out	0x2e, r24	; 46
    1f20:	0d b4       	in	r0, 0x2d	; 45
    1f22:	07 fe       	sbrs	r0, 7
    1f24:	fd cf       	rjmp	.-6      	; 0x1f20 <rf_addr_decode_set_my_mac+0x4c>
    1f26:	31 96       	adiw	r30, 0x01	; 1
    1f28:	e2 17       	cp	r30, r18
    1f2a:	f3 07       	cpc	r31, r19
    1f2c:	b9 f7       	brne	.-18     	; 0x1f1c <rf_addr_decode_set_my_mac+0x48>
    1f2e:	40 9a       	sbi	0x08, 0	; 8
    1f30:	84 ef       	ldi	r24, 0xF4	; 244
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    1f38:	22 96       	adiw	r28, 0x02	; 2
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <rf_security_set_key>:
    1f4a:	6f 92       	push	r6
    1f4c:	7f 92       	push	r7
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	0f 93       	push	r16
    1f60:	1f 93       	push	r17
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	22 97       	sbiw	r28, 0x02	; 2
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	8c 01       	movw	r16, r24
    1f78:	84 e6       	ldi	r24, 0x64	; 100
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    1f80:	78 01       	movw	r14, r16
    1f82:	c1 2c       	mov	r12, r1
    1f84:	01 e0       	ldi	r16, 0x01	; 1
    1f86:	d0 2e       	mov	r13, r16
    1f88:	3e 01       	movw	r6, r28
    1f8a:	08 94       	sec
    1f8c:	61 1c       	adc	r6, r1
    1f8e:	71 1c       	adc	r7, r1
    1f90:	13 e0       	ldi	r17, 0x03	; 3
    1f92:	81 2e       	mov	r8, r17
    1f94:	91 2c       	mov	r9, r1
    1f96:	8c 0e       	add	r8, r28
    1f98:	9d 1e       	adc	r9, r29
    1f9a:	f7 01       	movw	r30, r14
    1f9c:	80 81       	ld	r24, Z
    1f9e:	21 81       	ldd	r18, Z+1	; 0x01
    1fa0:	33 27       	eor	r19, r19
    1fa2:	99 27       	eor	r25, r25
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	88 27       	eor	r24, r24
    1fa8:	28 2b       	or	r18, r24
    1faa:	39 2b       	or	r19, r25
    1fac:	3a 83       	std	Y+2, r19	; 0x02
    1fae:	29 83       	std	Y+1, r18	; 0x01
    1fb0:	84 e6       	ldi	r24, 0x64	; 100
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    1fb8:	40 98       	cbi	0x08, 0	; 8
    1fba:	8c 2d       	mov	r24, r12
    1fbc:	80 68       	ori	r24, 0x80	; 128
    1fbe:	8e bd       	out	0x2e, r24	; 46
    1fc0:	0d b4       	in	r0, 0x2d	; 45
    1fc2:	07 fe       	sbrs	r0, 7
    1fc4:	fd cf       	rjmp	.-6      	; 0x1fc0 <rf_security_set_key+0x76>
    1fc6:	c6 01       	movw	r24, r12
    1fc8:	95 95       	asr	r25
    1fca:	87 95       	ror	r24
    1fcc:	80 7c       	andi	r24, 0xC0	; 192
    1fce:	8e bd       	out	0x2e, r24	; 46
    1fd0:	0d b4       	in	r0, 0x2d	; 45
    1fd2:	07 fe       	sbrs	r0, 7
    1fd4:	fd cf       	rjmp	.-6      	; 0x1fd0 <rf_security_set_key+0x86>
    1fd6:	83 01       	movw	r16, r6
    1fd8:	53 01       	movw	r10, r6
    1fda:	f5 01       	movw	r30, r10
    1fdc:	80 81       	ld	r24, Z
    1fde:	8e bd       	out	0x2e, r24	; 46
    1fe0:	0d b4       	in	r0, 0x2d	; 45
    1fe2:	07 fe       	sbrs	r0, 7
    1fe4:	fd cf       	rjmp	.-6      	; 0x1fe0 <rf_security_set_key+0x96>
    1fe6:	08 94       	sec
    1fe8:	a1 1c       	adc	r10, r1
    1fea:	b1 1c       	adc	r11, r1
    1fec:	a8 14       	cp	r10, r8
    1fee:	b9 04       	cpc	r11, r9
    1ff0:	a1 f7       	brne	.-24     	; 0x1fda <rf_security_set_key+0x90>
    1ff2:	40 9a       	sbi	0x08, 0	; 8
    1ff4:	08 94       	sec
    1ff6:	e1 1c       	adc	r14, r1
    1ff8:	f1 1c       	adc	r15, r1
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	c8 0e       	add	r12, r24
    2000:	d9 1e       	adc	r13, r25
    2002:	90 e1       	ldi	r25, 0x10	; 16
    2004:	c9 16       	cp	r12, r25
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	d9 06       	cpc	r13, r25
    200a:	39 f6       	brne	.-114    	; 0x1f9a <rf_security_set_key+0x50>
    200c:	84 e6       	ldi	r24, 0x64	; 100
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    2014:	20 e1       	ldi	r18, 0x10	; 16
    2016:	31 e0       	ldi	r19, 0x01	; 1
    2018:	40 e4       	ldi	r20, 0x40	; 64
    201a:	51 e0       	ldi	r21, 0x01	; 1
    201c:	1a 82       	std	Y+2, r1	; 0x02
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	40 98       	cbi	0x08, 0	; 8
    2022:	84 2f       	mov	r24, r20
    2024:	80 68       	ori	r24, 0x80	; 128
    2026:	8e bd       	out	0x2e, r24	; 46
    2028:	0d b4       	in	r0, 0x2d	; 45
    202a:	07 fe       	sbrs	r0, 7
    202c:	fd cf       	rjmp	.-6      	; 0x2028 <rf_security_set_key+0xde>
    202e:	ca 01       	movw	r24, r20
    2030:	95 95       	asr	r25
    2032:	87 95       	ror	r24
    2034:	80 7c       	andi	r24, 0xC0	; 192
    2036:	8e bd       	out	0x2e, r24	; 46
    2038:	0d b4       	in	r0, 0x2d	; 45
    203a:	07 fe       	sbrs	r0, 7
    203c:	fd cf       	rjmp	.-6      	; 0x2038 <rf_security_set_key+0xee>
    203e:	f8 01       	movw	r30, r16
    2040:	80 81       	ld	r24, Z
    2042:	8e bd       	out	0x2e, r24	; 46
    2044:	0d b4       	in	r0, 0x2d	; 45
    2046:	07 fe       	sbrs	r0, 7
    2048:	fd cf       	rjmp	.-6      	; 0x2044 <rf_security_set_key+0xfa>
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	ea 15       	cp	r30, r10
    204e:	fb 05       	cpc	r31, r11
    2050:	b9 f7       	brne	.-18     	; 0x2040 <rf_security_set_key+0xf6>
    2052:	40 9a       	sbi	0x08, 0	; 8
    2054:	40 98       	cbi	0x08, 0	; 8
    2056:	82 2f       	mov	r24, r18
    2058:	80 68       	ori	r24, 0x80	; 128
    205a:	8e bd       	out	0x2e, r24	; 46
    205c:	0d b4       	in	r0, 0x2d	; 45
    205e:	07 fe       	sbrs	r0, 7
    2060:	fd cf       	rjmp	.-6      	; 0x205c <rf_security_set_key+0x112>
    2062:	c9 01       	movw	r24, r18
    2064:	95 95       	asr	r25
    2066:	87 95       	ror	r24
    2068:	80 7c       	andi	r24, 0xC0	; 192
    206a:	8e bd       	out	0x2e, r24	; 46
    206c:	0d b4       	in	r0, 0x2d	; 45
    206e:	07 fe       	sbrs	r0, 7
    2070:	fd cf       	rjmp	.-6      	; 0x206c <rf_security_set_key+0x122>
    2072:	f8 01       	movw	r30, r16
    2074:	80 81       	ld	r24, Z
    2076:	8e bd       	out	0x2e, r24	; 46
    2078:	0d b4       	in	r0, 0x2d	; 45
    207a:	07 fe       	sbrs	r0, 7
    207c:	fd cf       	rjmp	.-6      	; 0x2078 <rf_security_set_key+0x12e>
    207e:	31 96       	adiw	r30, 0x01	; 1
    2080:	ea 15       	cp	r30, r10
    2082:	fb 05       	cpc	r31, r11
    2084:	b9 f7       	brne	.-18     	; 0x2074 <rf_security_set_key+0x12a>
    2086:	40 9a       	sbi	0x08, 0	; 8
    2088:	2e 5f       	subi	r18, 0xFE	; 254
    208a:	3f 4f       	sbci	r19, 0xFF	; 255
    208c:	4e 5f       	subi	r20, 0xFE	; 254
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	e1 e0       	ldi	r30, 0x01	; 1
    2092:	2e 31       	cpi	r18, 0x1E	; 30
    2094:	3e 07       	cpc	r19, r30
    2096:	11 f6       	brne	.-124    	; 0x201c <rf_security_set_key+0xd2>
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	40 98       	cbi	0x08, 0	; 8
    20a2:	8e ec       	ldi	r24, 0xCE	; 206
    20a4:	8e bd       	out	0x2e, r24	; 46
    20a6:	0d b4       	in	r0, 0x2d	; 45
    20a8:	07 fe       	sbrs	r0, 7
    20aa:	fd cf       	rjmp	.-6      	; 0x20a6 <rf_security_set_key+0x15c>
    20ac:	80 e8       	ldi	r24, 0x80	; 128
    20ae:	8e bd       	out	0x2e, r24	; 46
    20b0:	0d b4       	in	r0, 0x2d	; 45
    20b2:	07 fe       	sbrs	r0, 7
    20b4:	fd cf       	rjmp	.-6      	; 0x20b0 <rf_security_set_key+0x166>
    20b6:	f8 01       	movw	r30, r16
    20b8:	80 81       	ld	r24, Z
    20ba:	8e bd       	out	0x2e, r24	; 46
    20bc:	0d b4       	in	r0, 0x2d	; 45
    20be:	07 fe       	sbrs	r0, 7
    20c0:	fd cf       	rjmp	.-6      	; 0x20bc <rf_security_set_key+0x172>
    20c2:	31 96       	adiw	r30, 0x01	; 1
    20c4:	ea 15       	cp	r30, r10
    20c6:	fb 05       	cpc	r31, r11
    20c8:	b9 f7       	brne	.-18     	; 0x20b8 <rf_security_set_key+0x16e>
    20ca:	40 9a       	sbi	0x08, 0	; 8
    20cc:	40 98       	cbi	0x08, 0	; 8
    20ce:	8e e9       	ldi	r24, 0x9E	; 158
    20d0:	8e bd       	out	0x2e, r24	; 46
    20d2:	0d b4       	in	r0, 0x2d	; 45
    20d4:	07 fe       	sbrs	r0, 7
    20d6:	fd cf       	rjmp	.-6      	; 0x20d2 <rf_security_set_key+0x188>
    20d8:	80 e8       	ldi	r24, 0x80	; 128
    20da:	8e bd       	out	0x2e, r24	; 46
    20dc:	0d b4       	in	r0, 0x2d	; 45
    20de:	07 fe       	sbrs	r0, 7
    20e0:	fd cf       	rjmp	.-6      	; 0x20dc <rf_security_set_key+0x192>
    20e2:	f8 01       	movw	r30, r16
    20e4:	80 81       	ld	r24, Z
    20e6:	8e bd       	out	0x2e, r24	; 46
    20e8:	0d b4       	in	r0, 0x2d	; 45
    20ea:	07 fe       	sbrs	r0, 7
    20ec:	fd cf       	rjmp	.-6      	; 0x20e8 <rf_security_set_key+0x19e>
    20ee:	0f 5f       	subi	r16, 0xFF	; 255
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	0a 15       	cp	r16, r10
    20f4:	1b 05       	cpc	r17, r11
    20f6:	a9 f7       	brne	.-22     	; 0x20e2 <rf_security_set_key+0x198>
    20f8:	40 9a       	sbi	0x08, 0	; 8
    20fa:	22 96       	adiw	r28, 0x02	; 2
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	08 95       	ret

00002124 <rf_power_up>:
    2124:	f8 94       	cli
    2126:	40 98       	cbi	0x08, 0	; 8
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	8e bd       	out	0x2e, r24	; 46
    212c:	0d b4       	in	r0, 0x2d	; 45
    212e:	07 fe       	sbrs	r0, 7
    2130:	fd cf       	rjmp	.-6      	; 0x212c <rf_power_up+0x8>
    2132:	40 9a       	sbi	0x08, 0	; 8
    2134:	88 ee       	ldi	r24, 0xE8	; 232
    2136:	93 e0       	ldi	r25, 0x03	; 3
    2138:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    213c:	78 94       	sei
    213e:	08 95       	ret

00002140 <rf_set_rx>:
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	ec 01       	movw	r28, r24
    2148:	16 2f       	mov	r17, r22
    214a:	80 91 fc 04 	lds	r24, 0x04FC
    214e:	90 91 fd 04 	lds	r25, 0x04FD
    2152:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    2156:	40 98       	cbi	0x08, 0	; 8
    2158:	88 e0       	ldi	r24, 0x08	; 8
    215a:	8e bd       	out	0x2e, r24	; 46
    215c:	0d b4       	in	r0, 0x2d	; 45
    215e:	07 fe       	sbrs	r0, 7
    2160:	fd cf       	rjmp	.-6      	; 0x215c <rf_set_rx+0x1c>
    2162:	40 9a       	sbi	0x08, 0	; 8
    2164:	40 98       	cbi	0x08, 0	; 8
    2166:	88 e0       	ldi	r24, 0x08	; 8
    2168:	8e bd       	out	0x2e, r24	; 46
    216a:	0d b4       	in	r0, 0x2d	; 45
    216c:	07 fe       	sbrs	r0, 7
    216e:	fd cf       	rjmp	.-6      	; 0x216a <rf_set_rx+0x2a>
    2170:	40 9a       	sbi	0x08, 0	; 8
    2172:	81 2f       	mov	r24, r17
    2174:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <halRfSetChannel>
    2178:	d0 93 02 05 	sts	0x0502, r29
    217c:	c0 93 01 05 	sts	0x0501, r28
    2180:	80 91 fc 04 	lds	r24, 0x04FC
    2184:	90 91 fd 04 	lds	r25, 0x04FD
    2188:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	08 95       	ret

00002194 <rf_set_channel>:
    2194:	1f 93       	push	r17
    2196:	18 2f       	mov	r17, r24
    2198:	80 91 fc 04 	lds	r24, 0x04FC
    219c:	90 91 fd 04 	lds	r25, 0x04FD
    21a0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    21a4:	81 2f       	mov	r24, r17
    21a6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <halRfSetChannel>
    21aa:	80 91 fc 04 	lds	r24, 0x04FC
    21ae:	90 91 fd 04 	lds	r25, 0x04FD
    21b2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    21b6:	1f 91       	pop	r17
    21b8:	08 95       	ret

000021ba <rf_init>:
    21ba:	df 92       	push	r13
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	22 97       	sbiw	r28, 0x02	; 2
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	8c 01       	movw	r16, r24
    21da:	d6 2e       	mov	r13, r22
    21dc:	5a 83       	std	Y+2, r21	; 0x02
    21de:	49 83       	std	Y+1, r20	; 0x01
    21e0:	79 01       	movw	r14, r18
    21e2:	64 e1       	ldi	r22, 0x14	; 20
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <nrk_sem_create>
    21ea:	90 93 fd 04 	sts	0x04FD, r25
    21ee:	80 93 fc 04 	sts	0x04FC, r24
    21f2:	89 2b       	or	r24, r25
    21f4:	31 f4       	brne	.+12     	; 0x2202 <__stack+0x3>
    21f6:	0e 94 1e 21 	call	0x423c	; 0x423c <nrk_get_pid>
    21fa:	68 2f       	mov	r22, r24
    21fc:	8f e0       	ldi	r24, 0x0F	; 15
    21fe:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    2202:	80 91 fc 04 	lds	r24, 0x04FC
    2206:	90 91 fd 04 	lds	r25, 0x04FD
    220a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <nrk_sem_pend>
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	21 f4       	brne	.+8      	; 0x221a <__stack+0x1b>
    2212:	81 e6       	ldi	r24, 0x61	; 97
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
    221a:	15 9a       	sbi	0x02, 5	; 2
    221c:	88 ee       	ldi	r24, 0xE8	; 232
    221e:	93 e0       	ldi	r25, 0x03	; 3
    2220:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    2224:	16 98       	cbi	0x02, 6	; 2
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    222e:	16 9a       	sbi	0x02, 6	; 2
    2230:	84 e6       	ldi	r24, 0x64	; 100
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <halWait>
    2238:	f8 94       	cli
    223a:	40 98       	cbi	0x08, 0	; 8
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	8e bd       	out	0x2e, r24	; 46
    2240:	0d b4       	in	r0, 0x2d	; 45
    2242:	07 fe       	sbrs	r0, 7
    2244:	fd cf       	rjmp	.-6      	; 0x2240 <__stack+0x41>
    2246:	40 9a       	sbi	0x08, 0	; 8
    2248:	82 ee       	ldi	r24, 0xE2	; 226
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	90 93 00 05 	sts	0x0500, r25
    2250:	80 93 ff 04 	sts	0x04FF, r24
    2254:	40 98       	cbi	0x08, 0	; 8
    2256:	81 e1       	ldi	r24, 0x11	; 17
    2258:	8e bd       	out	0x2e, r24	; 46
    225a:	0d b4       	in	r0, 0x2d	; 45
    225c:	07 fe       	sbrs	r0, 7
    225e:	fd cf       	rjmp	.-6      	; 0x225a <__stack+0x5b>
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	8e bd       	out	0x2e, r24	; 46
    2264:	0d b4       	in	r0, 0x2d	; 45
    2266:	07 fe       	sbrs	r0, 7
    2268:	fd cf       	rjmp	.-6      	; 0x2264 <__stack+0x65>
    226a:	82 ee       	ldi	r24, 0xE2	; 226
    226c:	8e bd       	out	0x2e, r24	; 46
    226e:	0d b4       	in	r0, 0x2d	; 45
    2270:	07 fe       	sbrs	r0, 7
    2272:	fd cf       	rjmp	.-6      	; 0x226e <__stack+0x6f>
    2274:	40 9a       	sbi	0x08, 0	; 8
    2276:	40 98       	cbi	0x08, 0	; 8
    2278:	82 e1       	ldi	r24, 0x12	; 18
    227a:	8e bd       	out	0x2e, r24	; 46
    227c:	0d b4       	in	r0, 0x2d	; 45
    227e:	07 fe       	sbrs	r0, 7
    2280:	fd cf       	rjmp	.-6      	; 0x227c <__stack+0x7d>
    2282:	85 e0       	ldi	r24, 0x05	; 5
    2284:	8e bd       	out	0x2e, r24	; 46
    2286:	0d b4       	in	r0, 0x2d	; 45
    2288:	07 fe       	sbrs	r0, 7
    228a:	fd cf       	rjmp	.-6      	; 0x2286 <__stack+0x87>
    228c:	1e bc       	out	0x2e, r1	; 46
    228e:	0d b4       	in	r0, 0x2d	; 45
    2290:	07 fe       	sbrs	r0, 7
    2292:	fd cf       	rjmp	.-6      	; 0x228e <__stack+0x8f>
    2294:	40 9a       	sbi	0x08, 0	; 8
    2296:	40 98       	cbi	0x08, 0	; 8
    2298:	8c e1       	ldi	r24, 0x1C	; 28
    229a:	8e bd       	out	0x2e, r24	; 46
    229c:	0d b4       	in	r0, 0x2d	; 45
    229e:	07 fe       	sbrs	r0, 7
    22a0:	fd cf       	rjmp	.-6      	; 0x229c <__stack+0x9d>
    22a2:	1e bc       	out	0x2e, r1	; 46
    22a4:	0d b4       	in	r0, 0x2d	; 45
    22a6:	07 fe       	sbrs	r0, 7
    22a8:	fd cf       	rjmp	.-6      	; 0x22a4 <__stack+0xa5>
    22aa:	8f e7       	ldi	r24, 0x7F	; 127
    22ac:	8e bd       	out	0x2e, r24	; 46
    22ae:	0d b4       	in	r0, 0x2d	; 45
    22b0:	07 fe       	sbrs	r0, 7
    22b2:	fd cf       	rjmp	.-6      	; 0x22ae <__stack+0xaf>
    22b4:	40 9a       	sbi	0x08, 0	; 8
    22b6:	40 98       	cbi	0x08, 0	; 8
    22b8:	89 e1       	ldi	r24, 0x19	; 25
    22ba:	8e bd       	out	0x2e, r24	; 46
    22bc:	0d b4       	in	r0, 0x2d	; 45
    22be:	07 fe       	sbrs	r0, 7
    22c0:	fd cf       	rjmp	.-6      	; 0x22bc <__stack+0xbd>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	8e bd       	out	0x2e, r24	; 46
    22c6:	0d b4       	in	r0, 0x2d	; 45
    22c8:	07 fe       	sbrs	r0, 7
    22ca:	fd cf       	rjmp	.-6      	; 0x22c6 <__stack+0xc7>
    22cc:	84 ec       	ldi	r24, 0xC4	; 196
    22ce:	8e bd       	out	0x2e, r24	; 46
    22d0:	0d b4       	in	r0, 0x2d	; 45
    22d2:	07 fe       	sbrs	r0, 7
    22d4:	fd cf       	rjmp	.-6      	; 0x22d0 <__stack+0xd1>
    22d6:	40 9a       	sbi	0x08, 0	; 8
    22d8:	40 98       	cbi	0x08, 0	; 8
    22da:	87 e1       	ldi	r24, 0x17	; 23
    22dc:	8e bd       	out	0x2e, r24	; 46
    22de:	0d b4       	in	r0, 0x2d	; 45
    22e0:	07 fe       	sbrs	r0, 7
    22e2:	fd cf       	rjmp	.-6      	; 0x22de <__stack+0xdf>
    22e4:	8a e1       	ldi	r24, 0x1A	; 26
    22e6:	8e bd       	out	0x2e, r24	; 46
    22e8:	0d b4       	in	r0, 0x2d	; 45
    22ea:	07 fe       	sbrs	r0, 7
    22ec:	fd cf       	rjmp	.-6      	; 0x22e8 <__stack+0xe9>
    22ee:	86 e5       	ldi	r24, 0x56	; 86
    22f0:	8e bd       	out	0x2e, r24	; 46
    22f2:	0d b4       	in	r0, 0x2d	; 45
    22f4:	07 fe       	sbrs	r0, 7
    22f6:	fd cf       	rjmp	.-6      	; 0x22f2 <__stack+0xf3>
    22f8:	40 9a       	sbi	0x08, 0	; 8
    22fa:	84 ef       	ldi	r24, 0xF4	; 244
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    2302:	40 98       	cbi	0x08, 0	; 8
    2304:	88 ee       	ldi	r24, 0xE8	; 232
    2306:	8e bd       	out	0x2e, r24	; 46
    2308:	0d b4       	in	r0, 0x2d	; 45
    230a:	07 fe       	sbrs	r0, 7
    230c:	fd cf       	rjmp	.-6      	; 0x2308 <__stack+0x109>
    230e:	80 e8       	ldi	r24, 0x80	; 128
    2310:	8e bd       	out	0x2e, r24	; 46
    2312:	0d b4       	in	r0, 0x2d	; 45
    2314:	07 fe       	sbrs	r0, 7
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <__stack+0x113>
    2318:	fe 01       	movw	r30, r28
    231a:	31 96       	adiw	r30, 0x01	; 1
    231c:	9e 01       	movw	r18, r28
    231e:	2d 5f       	subi	r18, 0xFD	; 253
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	8e bd       	out	0x2e, r24	; 46
    2326:	0d b4       	in	r0, 0x2d	; 45
    2328:	07 fe       	sbrs	r0, 7
    232a:	fd cf       	rjmp	.-6      	; 0x2326 <__stack+0x127>
    232c:	31 96       	adiw	r30, 0x01	; 1
    232e:	e2 17       	cp	r30, r18
    2330:	f3 07       	cpc	r31, r19
    2332:	b9 f7       	brne	.-18     	; 0x2322 <__stack+0x123>
    2334:	40 9a       	sbi	0x08, 0	; 8
    2336:	84 ef       	ldi	r24, 0xF4	; 244
    2338:	91 e0       	ldi	r25, 0x01	; 1
    233a:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    233e:	78 94       	sei
    2340:	8d 2d       	mov	r24, r13
    2342:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <halRfSetChannel>
    2346:	78 94       	sei
    2348:	10 93 02 05 	sts	0x0502, r17
    234c:	00 93 01 05 	sts	0x0501, r16
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	90 93 06 05 	sts	0x0506, r25
    2358:	80 93 05 05 	sts	0x0505, r24
    235c:	f0 92 08 05 	sts	0x0508, r15
    2360:	e0 92 07 05 	sts	0x0507, r14
    2364:	10 92 03 05 	sts	0x0503, r1
    2368:	10 92 09 05 	sts	0x0509, r1
    236c:	0e 94 ef 04 	call	0x9de	; 0x9de <halRfWaitForCrystalOscillator>
    2370:	80 91 fc 04 	lds	r24, 0x04FC
    2374:	90 91 fd 04 	lds	r25, 0x04FD
    2378:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <nrk_sem_post>
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	39 f4       	brne	.+14     	; 0x238e <__stack+0x18f>
    2380:	84 e3       	ldi	r24, 0x34	; 52
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    238e:	10 92 0c 05 	sts	0x050C, r1
    2392:	10 92 fe 04 	sts	0x04FE, r1
    2396:	10 92 0d 05 	sts	0x050D, r1
    239a:	22 96       	adiw	r28, 0x02	; 2
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	08 95       	ret

000023b6 <cc259x_tx>:
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();

    23b6:	80 91 4d 02 	lds	r24, 0x024D
    23ba:	0e 94 32 12 	call	0x2464	; 0x2464 <nrk_gpio_set>
} // rfSetChannel
    23be:	80 91 4c 02 	lds	r24, 0x024C
    23c2:	0e 94 32 12 	call	0x2464	; 0x2464 <nrk_gpio_set>
    23c6:	08 95       	ret

000023c8 <cc259x_rx>:
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    23c8:	80 91 4d 02 	lds	r24, 0x024D
    23cc:	0e 94 32 12 	call	0x2464	; 0x2464 <nrk_gpio_set>
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    23d0:	80 91 4c 02 	lds	r24, 0x024C
    23d4:	0e 94 b7 12 	call	0x256e	; 0x256e <nrk_gpio_clr>
    23d8:	08 95       	ret

000023da <nrk_uart_rx_signal_get>:
    23da:	8f ef       	ldi	r24, 0xFF	; 255
    23dc:	9f ef       	ldi	r25, 0xFF	; 255
    23de:	08 95       	ret

000023e0 <nrk_uart_data_ready>:
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	51 f4       	brne	.+20     	; 0x23f8 <nrk_uart_data_ready+0x18>
    23e4:	80 91 c8 00 	lds	r24, 0x00C8
    23e8:	99 27       	eor	r25, r25
    23ea:	87 fd       	sbrc	r24, 7
    23ec:	90 95       	com	r25
    23ee:	88 27       	eor	r24, r24
    23f0:	99 0f       	add	r25, r25
    23f2:	88 1f       	adc	r24, r24
    23f4:	99 27       	eor	r25, r25
    23f6:	08 95       	ret
    23f8:	88 23       	and	r24, r24
    23fa:	19 f0       	breq	.+6      	; 0x2402 <nrk_uart_data_ready+0x22>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	08 95       	ret
    2402:	80 91 c0 00 	lds	r24, 0x00C0
    2406:	99 27       	eor	r25, r25
    2408:	87 fd       	sbrc	r24, 7
    240a:	90 95       	com	r25
    240c:	88 27       	eor	r24, r24
    240e:	99 0f       	add	r25, r25
    2410:	88 1f       	adc	r24, r24
    2412:	99 27       	eor	r25, r25
    2414:	08 95       	ret

00002416 <getc1>:
    2416:	80 91 c8 00 	lds	r24, 0x00C8
    241a:	87 ff       	sbrs	r24, 7
    241c:	fc cf       	rjmp	.-8      	; 0x2416 <getc1>
    241e:	80 91 c8 00 	lds	r24, 0x00C8
    2422:	8f 77       	andi	r24, 0x7F	; 127
    2424:	80 93 c8 00 	sts	0x00C8, r24
    2428:	80 91 ce 00 	lds	r24, 0x00CE
    242c:	99 27       	eor	r25, r25
    242e:	08 95       	ret

00002430 <PORT_INIT>:
    2430:	85 b7       	in	r24, 0x35	; 53
    2432:	80 61       	ori	r24, 0x10	; 16
    2434:	85 bf       	out	0x35, r24	; 53
    2436:	86 e0       	ldi	r24, 0x06	; 6
    2438:	84 b9       	out	0x04, r24	; 4
    243a:	85 b9       	out	0x05, r24	; 5
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	87 b9       	out	0x07, r24	; 7
    2440:	88 b9       	out	0x08, r24	; 8
    2442:	8c e3       	ldi	r24, 0x3C	; 60
    2444:	8d b9       	out	0x0d, r24	; 13
    2446:	8b e0       	ldi	r24, 0x0B	; 11
    2448:	8a b9       	out	0x0a, r24	; 10
    244a:	8e e3       	ldi	r24, 0x3E	; 62
    244c:	8e b9       	out	0x0e, r24	; 14
    244e:	88 e7       	ldi	r24, 0x78	; 120
    2450:	81 b9       	out	0x01, r24	; 1
    2452:	16 9a       	sbi	0x02, 6	; 2
    2454:	08 95       	ret

00002456 <nrk_setup_ports>:
    2456:	0e 94 18 12 	call	0x2430	; 0x2430 <PORT_INIT>
    245a:	80 e5       	ldi	r24, 0x50	; 80
    245c:	8c bd       	out	0x2c, r24	; 44
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	8d bd       	out	0x2d, r24	; 45
    2462:	08 95       	ret

00002464 <nrk_gpio_set>:
    2464:	8f 3f       	cpi	r24, 0xFF	; 255
    2466:	09 f4       	brne	.+2      	; 0x246a <nrk_gpio_set+0x6>
    2468:	7f c0       	rjmp	.+254    	; 0x2568 <nrk_gpio_set+0x104>
    246a:	48 2f       	mov	r20, r24
    246c:	55 27       	eor	r21, r21
    246e:	9a 01       	movw	r18, r20
    2470:	27 70       	andi	r18, 0x07	; 7
    2472:	30 70       	andi	r19, 0x00	; 0
    2474:	22 30       	cpi	r18, 0x02	; 2
    2476:	31 05       	cpc	r19, r1
    2478:	a9 f1       	breq	.+106    	; 0x24e4 <nrk_gpio_set+0x80>
    247a:	23 30       	cpi	r18, 0x03	; 3
    247c:	31 05       	cpc	r19, r1
    247e:	44 f4       	brge	.+16     	; 0x2490 <nrk_gpio_set+0x2c>
    2480:	21 15       	cp	r18, r1
    2482:	31 05       	cpc	r19, r1
    2484:	89 f0       	breq	.+34     	; 0x24a8 <nrk_gpio_set+0x44>
    2486:	21 30       	cpi	r18, 0x01	; 1
    2488:	31 05       	cpc	r19, r1
    248a:	09 f0       	breq	.+2      	; 0x248e <nrk_gpio_set+0x2a>
    248c:	6d c0       	rjmp	.+218    	; 0x2568 <nrk_gpio_set+0x104>
    248e:	1c c0       	rjmp	.+56     	; 0x24c8 <nrk_gpio_set+0x64>
    2490:	24 30       	cpi	r18, 0x04	; 4
    2492:	31 05       	cpc	r19, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <nrk_gpio_set+0x34>
    2496:	46 c0       	rjmp	.+140    	; 0x2524 <nrk_gpio_set+0xc0>
    2498:	24 30       	cpi	r18, 0x04	; 4
    249a:	31 05       	cpc	r19, r1
    249c:	9c f1       	brlt	.+102    	; 0x2504 <nrk_gpio_set+0xa0>
    249e:	25 30       	cpi	r18, 0x05	; 5
    24a0:	31 05       	cpc	r19, r1
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <nrk_gpio_set+0x42>
    24a4:	61 c0       	rjmp	.+194    	; 0x2568 <nrk_gpio_set+0x104>
    24a6:	4e c0       	rjmp	.+156    	; 0x2544 <nrk_gpio_set+0xe0>
    24a8:	22 b1       	in	r18, 0x02	; 2
    24aa:	b3 e0       	ldi	r27, 0x03	; 3
    24ac:	56 95       	lsr	r21
    24ae:	47 95       	ror	r20
    24b0:	ba 95       	dec	r27
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <nrk_gpio_set+0x48>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <nrk_gpio_set+0x5a>
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	4a 95       	dec	r20
    24c0:	e2 f7       	brpl	.-8      	; 0x24ba <nrk_gpio_set+0x56>
    24c2:	28 2b       	or	r18, r24
    24c4:	22 b9       	out	0x02, r18	; 2
    24c6:	4d c0       	rjmp	.+154    	; 0x2562 <nrk_gpio_set+0xfe>
    24c8:	85 b1       	in	r24, 0x05	; 5
    24ca:	a3 e0       	ldi	r26, 0x03	; 3
    24cc:	56 95       	lsr	r21
    24ce:	47 95       	ror	r20
    24d0:	aa 95       	dec	r26
    24d2:	e1 f7       	brne	.-8      	; 0x24cc <nrk_gpio_set+0x68>
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <nrk_gpio_set+0x76>
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	4a 95       	dec	r20
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <nrk_gpio_set+0x72>
    24de:	82 2b       	or	r24, r18
    24e0:	85 b9       	out	0x05, r24	; 5
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <nrk_gpio_set+0xfe>
    24e4:	28 b1       	in	r18, 0x08	; 8
    24e6:	f3 e0       	ldi	r31, 0x03	; 3
    24e8:	56 95       	lsr	r21
    24ea:	47 95       	ror	r20
    24ec:	fa 95       	dec	r31
    24ee:	e1 f7       	brne	.-8      	; 0x24e8 <nrk_gpio_set+0x84>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <nrk_gpio_set+0x96>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	4a 95       	dec	r20
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <nrk_gpio_set+0x92>
    24fe:	28 2b       	or	r18, r24
    2500:	28 b9       	out	0x08, r18	; 8
    2502:	2f c0       	rjmp	.+94     	; 0x2562 <nrk_gpio_set+0xfe>
    2504:	2b b1       	in	r18, 0x0b	; 11
    2506:	e3 e0       	ldi	r30, 0x03	; 3
    2508:	56 95       	lsr	r21
    250a:	47 95       	ror	r20
    250c:	ea 95       	dec	r30
    250e:	e1 f7       	brne	.-8      	; 0x2508 <nrk_gpio_set+0xa4>
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 c0       	rjmp	.+4      	; 0x251a <nrk_gpio_set+0xb6>
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	4a 95       	dec	r20
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <nrk_gpio_set+0xb2>
    251e:	28 2b       	or	r18, r24
    2520:	2b b9       	out	0x0b, r18	; 11
    2522:	1f c0       	rjmp	.+62     	; 0x2562 <nrk_gpio_set+0xfe>
    2524:	2e b1       	in	r18, 0x0e	; 14
    2526:	73 e0       	ldi	r23, 0x03	; 3
    2528:	56 95       	lsr	r21
    252a:	47 95       	ror	r20
    252c:	7a 95       	dec	r23
    252e:	e1 f7       	brne	.-8      	; 0x2528 <nrk_gpio_set+0xc4>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <nrk_gpio_set+0xd6>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	4a 95       	dec	r20
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <nrk_gpio_set+0xd2>
    253e:	28 2b       	or	r18, r24
    2540:	2e b9       	out	0x0e, r18	; 14
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <nrk_gpio_set+0xfe>
    2544:	21 b3       	in	r18, 0x11	; 17
    2546:	63 e0       	ldi	r22, 0x03	; 3
    2548:	56 95       	lsr	r21
    254a:	47 95       	ror	r20
    254c:	6a 95       	dec	r22
    254e:	e1 f7       	brne	.-8      	; 0x2548 <nrk_gpio_set+0xe4>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 c0       	rjmp	.+4      	; 0x255a <nrk_gpio_set+0xf6>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	4a 95       	dec	r20
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <nrk_gpio_set+0xf2>
    255e:	28 2b       	or	r18, r24
    2560:	21 bb       	out	0x11, r18	; 17
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	08 95       	ret
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	9f ef       	ldi	r25, 0xFF	; 255
    256c:	08 95       	ret

0000256e <nrk_gpio_clr>:
    256e:	8f 3f       	cpi	r24, 0xFF	; 255
    2570:	09 f4       	brne	.+2      	; 0x2574 <nrk_gpio_clr+0x6>
    2572:	86 c0       	rjmp	.+268    	; 0x2680 <nrk_gpio_clr+0x112>
    2574:	48 2f       	mov	r20, r24
    2576:	55 27       	eor	r21, r21
    2578:	9a 01       	movw	r18, r20
    257a:	27 70       	andi	r18, 0x07	; 7
    257c:	30 70       	andi	r19, 0x00	; 0
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	c1 f1       	breq	.+112    	; 0x25f4 <nrk_gpio_clr+0x86>
    2584:	23 30       	cpi	r18, 0x03	; 3
    2586:	31 05       	cpc	r19, r1
    2588:	44 f4       	brge	.+16     	; 0x259a <nrk_gpio_clr+0x2c>
    258a:	21 15       	cp	r18, r1
    258c:	31 05       	cpc	r19, r1
    258e:	89 f0       	breq	.+34     	; 0x25b2 <nrk_gpio_clr+0x44>
    2590:	21 30       	cpi	r18, 0x01	; 1
    2592:	31 05       	cpc	r19, r1
    2594:	09 f0       	breq	.+2      	; 0x2598 <nrk_gpio_clr+0x2a>
    2596:	74 c0       	rjmp	.+232    	; 0x2680 <nrk_gpio_clr+0x112>
    2598:	1d c0       	rjmp	.+58     	; 0x25d4 <nrk_gpio_clr+0x66>
    259a:	24 30       	cpi	r18, 0x04	; 4
    259c:	31 05       	cpc	r19, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <nrk_gpio_clr+0x34>
    25a0:	4b c0       	rjmp	.+150    	; 0x2638 <nrk_gpio_clr+0xca>
    25a2:	24 30       	cpi	r18, 0x04	; 4
    25a4:	31 05       	cpc	r19, r1
    25a6:	bc f1       	brlt	.+110    	; 0x2616 <nrk_gpio_clr+0xa8>
    25a8:	25 30       	cpi	r18, 0x05	; 5
    25aa:	31 05       	cpc	r19, r1
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <nrk_gpio_clr+0x42>
    25ae:	68 c0       	rjmp	.+208    	; 0x2680 <nrk_gpio_clr+0x112>
    25b0:	54 c0       	rjmp	.+168    	; 0x265a <nrk_gpio_clr+0xec>
    25b2:	22 b1       	in	r18, 0x02	; 2
    25b4:	e3 e0       	ldi	r30, 0x03	; 3
    25b6:	56 95       	lsr	r21
    25b8:	47 95       	ror	r20
    25ba:	ea 95       	dec	r30
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <nrk_gpio_clr+0x48>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <nrk_gpio_clr+0x5a>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	4a 95       	dec	r20
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <nrk_gpio_clr+0x56>
    25cc:	80 95       	com	r24
    25ce:	82 23       	and	r24, r18
    25d0:	82 b9       	out	0x02, r24	; 2
    25d2:	53 c0       	rjmp	.+166    	; 0x267a <nrk_gpio_clr+0x10c>
    25d4:	95 b1       	in	r25, 0x05	; 5
    25d6:	73 e0       	ldi	r23, 0x03	; 3
    25d8:	56 95       	lsr	r21
    25da:	47 95       	ror	r20
    25dc:	7a 95       	dec	r23
    25de:	e1 f7       	brne	.-8      	; 0x25d8 <nrk_gpio_clr+0x6a>
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <nrk_gpio_clr+0x78>
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	4a 95       	dec	r20
    25e8:	e2 f7       	brpl	.-8      	; 0x25e2 <nrk_gpio_clr+0x74>
    25ea:	82 2f       	mov	r24, r18
    25ec:	80 95       	com	r24
    25ee:	89 23       	and	r24, r25
    25f0:	85 b9       	out	0x05, r24	; 5
    25f2:	43 c0       	rjmp	.+134    	; 0x267a <nrk_gpio_clr+0x10c>
    25f4:	28 b1       	in	r18, 0x08	; 8
    25f6:	63 e0       	ldi	r22, 0x03	; 3
    25f8:	56 95       	lsr	r21
    25fa:	47 95       	ror	r20
    25fc:	6a 95       	dec	r22
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <nrk_gpio_clr+0x8a>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 c0       	rjmp	.+4      	; 0x260a <nrk_gpio_clr+0x9c>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	4a 95       	dec	r20
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <nrk_gpio_clr+0x98>
    260e:	80 95       	com	r24
    2610:	82 23       	and	r24, r18
    2612:	88 b9       	out	0x08, r24	; 8
    2614:	32 c0       	rjmp	.+100    	; 0x267a <nrk_gpio_clr+0x10c>
    2616:	2b b1       	in	r18, 0x0b	; 11
    2618:	33 e0       	ldi	r19, 0x03	; 3
    261a:	56 95       	lsr	r21
    261c:	47 95       	ror	r20
    261e:	3a 95       	dec	r19
    2620:	e1 f7       	brne	.-8      	; 0x261a <nrk_gpio_clr+0xac>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	02 c0       	rjmp	.+4      	; 0x262c <nrk_gpio_clr+0xbe>
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	4a 95       	dec	r20
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <nrk_gpio_clr+0xba>
    2630:	80 95       	com	r24
    2632:	82 23       	and	r24, r18
    2634:	8b b9       	out	0x0b, r24	; 11
    2636:	21 c0       	rjmp	.+66     	; 0x267a <nrk_gpio_clr+0x10c>
    2638:	2e b1       	in	r18, 0x0e	; 14
    263a:	93 e0       	ldi	r25, 0x03	; 3
    263c:	56 95       	lsr	r21
    263e:	47 95       	ror	r20
    2640:	9a 95       	dec	r25
    2642:	e1 f7       	brne	.-8      	; 0x263c <nrk_gpio_clr+0xce>
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	02 c0       	rjmp	.+4      	; 0x264e <nrk_gpio_clr+0xe0>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	4a 95       	dec	r20
    2650:	e2 f7       	brpl	.-8      	; 0x264a <nrk_gpio_clr+0xdc>
    2652:	80 95       	com	r24
    2654:	82 23       	and	r24, r18
    2656:	8e b9       	out	0x0e, r24	; 14
    2658:	10 c0       	rjmp	.+32     	; 0x267a <nrk_gpio_clr+0x10c>
    265a:	21 b3       	in	r18, 0x11	; 17
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	56 95       	lsr	r21
    2660:	47 95       	ror	r20
    2662:	8a 95       	dec	r24
    2664:	e1 f7       	brne	.-8      	; 0x265e <nrk_gpio_clr+0xf0>
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <nrk_gpio_clr+0x102>
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	4a 95       	dec	r20
    2672:	e2 f7       	brpl	.-8      	; 0x266c <nrk_gpio_clr+0xfe>
    2674:	80 95       	com	r24
    2676:	82 23       	and	r24, r18
    2678:	81 bb       	out	0x11, r24	; 17
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	08 95       	ret
    2680:	8f ef       	ldi	r24, 0xFF	; 255
    2682:	9f ef       	ldi	r25, 0xFF	; 255
    2684:	08 95       	ret

00002686 <nrk_gpio_get>:
    2686:	8f 3f       	cpi	r24, 0xFF	; 255
    2688:	a9 f1       	breq	.+106    	; 0x26f4 <nrk_gpio_get+0x6e>
    268a:	28 2f       	mov	r18, r24
    268c:	33 27       	eor	r19, r19
    268e:	c9 01       	movw	r24, r18
    2690:	87 70       	andi	r24, 0x07	; 7
    2692:	90 70       	andi	r25, 0x00	; 0
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	91 05       	cpc	r25, r1
    2698:	a9 f0       	breq	.+42     	; 0x26c4 <nrk_gpio_get+0x3e>
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	91 05       	cpc	r25, r1
    269e:	2c f4       	brge	.+10     	; 0x26aa <nrk_gpio_get+0x24>
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	61 f0       	breq	.+24     	; 0x26bc <nrk_gpio_get+0x36>
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	31 f5       	brne	.+76     	; 0x26f4 <nrk_gpio_get+0x6e>
    26a8:	0b c0       	rjmp	.+22     	; 0x26c0 <nrk_gpio_get+0x3a>
    26aa:	84 30       	cpi	r24, 0x04	; 4
    26ac:	91 05       	cpc	r25, r1
    26ae:	71 f0       	breq	.+28     	; 0x26cc <nrk_gpio_get+0x46>
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	91 05       	cpc	r25, r1
    26b4:	4c f0       	brlt	.+18     	; 0x26c8 <nrk_gpio_get+0x42>
    26b6:	05 97       	sbiw	r24, 0x05	; 5
    26b8:	e9 f4       	brne	.+58     	; 0x26f4 <nrk_gpio_get+0x6e>
    26ba:	0a c0       	rjmp	.+20     	; 0x26d0 <nrk_gpio_get+0x4a>
    26bc:	80 b1       	in	r24, 0x00	; 0
    26be:	09 c0       	rjmp	.+18     	; 0x26d2 <nrk_gpio_get+0x4c>
    26c0:	83 b1       	in	r24, 0x03	; 3
    26c2:	07 c0       	rjmp	.+14     	; 0x26d2 <nrk_gpio_get+0x4c>
    26c4:	86 b1       	in	r24, 0x06	; 6
    26c6:	05 c0       	rjmp	.+10     	; 0x26d2 <nrk_gpio_get+0x4c>
    26c8:	89 b1       	in	r24, 0x09	; 9
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <nrk_gpio_get+0x4c>
    26cc:	8c b1       	in	r24, 0x0c	; 12
    26ce:	01 c0       	rjmp	.+2      	; 0x26d2 <nrk_gpio_get+0x4c>
    26d0:	8f b1       	in	r24, 0x0f	; 15
    26d2:	99 27       	eor	r25, r25
    26d4:	f3 e0       	ldi	r31, 0x03	; 3
    26d6:	36 95       	lsr	r19
    26d8:	27 95       	ror	r18
    26da:	fa 95       	dec	r31
    26dc:	e1 f7       	brne	.-8      	; 0x26d6 <nrk_gpio_get+0x50>
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <nrk_gpio_get+0x5e>
    26e0:	95 95       	asr	r25
    26e2:	87 95       	ror	r24
    26e4:	2a 95       	dec	r18
    26e6:	e2 f7       	brpl	.-8      	; 0x26e0 <nrk_gpio_get+0x5a>
    26e8:	99 27       	eor	r25, r25
    26ea:	87 fd       	sbrc	r24, 7
    26ec:	90 95       	com	r25
    26ee:	81 70       	andi	r24, 0x01	; 1
    26f0:	90 70       	andi	r25, 0x00	; 0
    26f2:	08 95       	ret
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	9f ef       	ldi	r25, 0xFF	; 255
    26f8:	08 95       	ret

000026fa <nrk_gpio_toggle>:
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	09 f4       	brne	.+2      	; 0x2700 <nrk_gpio_toggle+0x6>
    26fe:	03 c1       	rjmp	.+518    	; 0x2906 <nrk_gpio_toggle+0x20c>
    2700:	28 2f       	mov	r18, r24
    2702:	33 27       	eor	r19, r19
    2704:	a9 01       	movw	r20, r18
    2706:	47 70       	andi	r20, 0x07	; 7
    2708:	50 70       	andi	r21, 0x00	; 0
    270a:	42 30       	cpi	r20, 0x02	; 2
    270c:	51 05       	cpc	r21, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <nrk_gpio_toggle+0x18>
    2710:	5c c0       	rjmp	.+184    	; 0x27ca <nrk_gpio_toggle+0xd0>
    2712:	43 30       	cpi	r20, 0x03	; 3
    2714:	51 05       	cpc	r21, r1
    2716:	44 f4       	brge	.+16     	; 0x2728 <nrk_gpio_toggle+0x2e>
    2718:	41 15       	cp	r20, r1
    271a:	51 05       	cpc	r21, r1
    271c:	91 f0       	breq	.+36     	; 0x2742 <nrk_gpio_toggle+0x48>
    271e:	41 30       	cpi	r20, 0x01	; 1
    2720:	51 05       	cpc	r21, r1
    2722:	09 f0       	breq	.+2      	; 0x2726 <nrk_gpio_toggle+0x2c>
    2724:	f0 c0       	rjmp	.+480    	; 0x2906 <nrk_gpio_toggle+0x20c>
    2726:	34 c0       	rjmp	.+104    	; 0x2790 <nrk_gpio_toggle+0x96>
    2728:	44 30       	cpi	r20, 0x04	; 4
    272a:	51 05       	cpc	r21, r1
    272c:	09 f4       	brne	.+2      	; 0x2730 <nrk_gpio_toggle+0x36>
    272e:	9b c0       	rjmp	.+310    	; 0x2866 <nrk_gpio_toggle+0x16c>
    2730:	44 30       	cpi	r20, 0x04	; 4
    2732:	51 05       	cpc	r21, r1
    2734:	0c f4       	brge	.+2      	; 0x2738 <nrk_gpio_toggle+0x3e>
    2736:	70 c0       	rjmp	.+224    	; 0x2818 <nrk_gpio_toggle+0x11e>
    2738:	45 30       	cpi	r20, 0x05	; 5
    273a:	51 05       	cpc	r21, r1
    273c:	09 f0       	breq	.+2      	; 0x2740 <nrk_gpio_toggle+0x46>
    273e:	e3 c0       	rjmp	.+454    	; 0x2906 <nrk_gpio_toggle+0x20c>
    2740:	b9 c0       	rjmp	.+370    	; 0x28b4 <nrk_gpio_toggle+0x1ba>
    2742:	80 b1       	in	r24, 0x00	; 0
    2744:	a9 01       	movw	r20, r18
    2746:	73 e0       	ldi	r23, 0x03	; 3
    2748:	56 95       	lsr	r21
    274a:	47 95       	ror	r20
    274c:	7a 95       	dec	r23
    274e:	e1 f7       	brne	.-8      	; 0x2748 <nrk_gpio_toggle+0x4e>
    2750:	99 27       	eor	r25, r25
    2752:	04 2e       	mov	r0, r20
    2754:	02 c0       	rjmp	.+4      	; 0x275a <nrk_gpio_toggle+0x60>
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <nrk_gpio_toggle+0x5c>
    275e:	80 fd       	sbrc	r24, 0
    2760:	0b c0       	rjmp	.+22     	; 0x2778 <nrk_gpio_toggle+0x7e>
    2762:	22 b1       	in	r18, 0x02	; 2
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 c0       	rjmp	.+4      	; 0x276e <nrk_gpio_toggle+0x74>
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	4a 95       	dec	r20
    2770:	e2 f7       	brpl	.-8      	; 0x276a <nrk_gpio_toggle+0x70>
    2772:	28 2b       	or	r18, r24
    2774:	22 b9       	out	0x02, r18	; 2
    2776:	c4 c0       	rjmp	.+392    	; 0x2900 <nrk_gpio_toggle+0x206>
    2778:	22 b1       	in	r18, 0x02	; 2
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <nrk_gpio_toggle+0x8a>
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	4a 95       	dec	r20
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <nrk_gpio_toggle+0x86>
    2788:	80 95       	com	r24
    278a:	82 23       	and	r24, r18
    278c:	82 b9       	out	0x02, r24	; 2
    278e:	b8 c0       	rjmp	.+368    	; 0x2900 <nrk_gpio_toggle+0x206>
    2790:	83 b1       	in	r24, 0x03	; 3
    2792:	63 e0       	ldi	r22, 0x03	; 3
    2794:	36 95       	lsr	r19
    2796:	27 95       	ror	r18
    2798:	6a 95       	dec	r22
    279a:	e1 f7       	brne	.-8      	; 0x2794 <nrk_gpio_toggle+0x9a>
    279c:	99 27       	eor	r25, r25
    279e:	02 2e       	mov	r0, r18
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <nrk_gpio_toggle+0xac>
    27a2:	95 95       	asr	r25
    27a4:	87 95       	ror	r24
    27a6:	0a 94       	dec	r0
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <nrk_gpio_toggle+0xa8>
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <nrk_gpio_toggle+0xb6>
    27ac:	44 0f       	add	r20, r20
    27ae:	55 1f       	adc	r21, r21
    27b0:	2a 95       	dec	r18
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <nrk_gpio_toggle+0xb2>
    27b4:	80 fd       	sbrc	r24, 0
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <nrk_gpio_toggle+0xc4>
    27b8:	85 b1       	in	r24, 0x05	; 5
    27ba:	84 2b       	or	r24, r20
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <nrk_gpio_toggle+0xcc>
    27be:	95 b1       	in	r25, 0x05	; 5
    27c0:	84 2f       	mov	r24, r20
    27c2:	80 95       	com	r24
    27c4:	89 23       	and	r24, r25
    27c6:	85 b9       	out	0x05, r24	; 5
    27c8:	9b c0       	rjmp	.+310    	; 0x2900 <nrk_gpio_toggle+0x206>
    27ca:	86 b1       	in	r24, 0x06	; 6
    27cc:	a9 01       	movw	r20, r18
    27ce:	23 e0       	ldi	r18, 0x03	; 3
    27d0:	56 95       	lsr	r21
    27d2:	47 95       	ror	r20
    27d4:	2a 95       	dec	r18
    27d6:	e1 f7       	brne	.-8      	; 0x27d0 <nrk_gpio_toggle+0xd6>
    27d8:	99 27       	eor	r25, r25
    27da:	04 2e       	mov	r0, r20
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <nrk_gpio_toggle+0xe8>
    27de:	95 95       	asr	r25
    27e0:	87 95       	ror	r24
    27e2:	0a 94       	dec	r0
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <nrk_gpio_toggle+0xe4>
    27e6:	80 fd       	sbrc	r24, 0
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <nrk_gpio_toggle+0x106>
    27ea:	28 b1       	in	r18, 0x08	; 8
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <nrk_gpio_toggle+0xfc>
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	4a 95       	dec	r20
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <nrk_gpio_toggle+0xf8>
    27fa:	28 2b       	or	r18, r24
    27fc:	28 b9       	out	0x08, r18	; 8
    27fe:	80 c0       	rjmp	.+256    	; 0x2900 <nrk_gpio_toggle+0x206>
    2800:	28 b1       	in	r18, 0x08	; 8
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	02 c0       	rjmp	.+4      	; 0x280c <nrk_gpio_toggle+0x112>
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	4a 95       	dec	r20
    280e:	e2 f7       	brpl	.-8      	; 0x2808 <nrk_gpio_toggle+0x10e>
    2810:	80 95       	com	r24
    2812:	82 23       	and	r24, r18
    2814:	88 b9       	out	0x08, r24	; 8
    2816:	74 c0       	rjmp	.+232    	; 0x2900 <nrk_gpio_toggle+0x206>
    2818:	89 b1       	in	r24, 0x09	; 9
    281a:	a9 01       	movw	r20, r18
    281c:	93 e0       	ldi	r25, 0x03	; 3
    281e:	56 95       	lsr	r21
    2820:	47 95       	ror	r20
    2822:	9a 95       	dec	r25
    2824:	e1 f7       	brne	.-8      	; 0x281e <nrk_gpio_toggle+0x124>
    2826:	99 27       	eor	r25, r25
    2828:	04 2e       	mov	r0, r20
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <nrk_gpio_toggle+0x136>
    282c:	95 95       	asr	r25
    282e:	87 95       	ror	r24
    2830:	0a 94       	dec	r0
    2832:	e2 f7       	brpl	.-8      	; 0x282c <nrk_gpio_toggle+0x132>
    2834:	80 fd       	sbrc	r24, 0
    2836:	0b c0       	rjmp	.+22     	; 0x284e <nrk_gpio_toggle+0x154>
    2838:	2b b1       	in	r18, 0x0b	; 11
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	02 c0       	rjmp	.+4      	; 0x2844 <nrk_gpio_toggle+0x14a>
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	4a 95       	dec	r20
    2846:	e2 f7       	brpl	.-8      	; 0x2840 <nrk_gpio_toggle+0x146>
    2848:	28 2b       	or	r18, r24
    284a:	2b b9       	out	0x0b, r18	; 11
    284c:	59 c0       	rjmp	.+178    	; 0x2900 <nrk_gpio_toggle+0x206>
    284e:	2b b1       	in	r18, 0x0b	; 11
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	02 c0       	rjmp	.+4      	; 0x285a <nrk_gpio_toggle+0x160>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	4a 95       	dec	r20
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <nrk_gpio_toggle+0x15c>
    285e:	80 95       	com	r24
    2860:	82 23       	and	r24, r18
    2862:	8b b9       	out	0x0b, r24	; 11
    2864:	4d c0       	rjmp	.+154    	; 0x2900 <nrk_gpio_toggle+0x206>
    2866:	8c b1       	in	r24, 0x0c	; 12
    2868:	a9 01       	movw	r20, r18
    286a:	b3 e0       	ldi	r27, 0x03	; 3
    286c:	56 95       	lsr	r21
    286e:	47 95       	ror	r20
    2870:	ba 95       	dec	r27
    2872:	e1 f7       	brne	.-8      	; 0x286c <nrk_gpio_toggle+0x172>
    2874:	99 27       	eor	r25, r25
    2876:	04 2e       	mov	r0, r20
    2878:	02 c0       	rjmp	.+4      	; 0x287e <nrk_gpio_toggle+0x184>
    287a:	95 95       	asr	r25
    287c:	87 95       	ror	r24
    287e:	0a 94       	dec	r0
    2880:	e2 f7       	brpl	.-8      	; 0x287a <nrk_gpio_toggle+0x180>
    2882:	80 fd       	sbrc	r24, 0
    2884:	0b c0       	rjmp	.+22     	; 0x289c <nrk_gpio_toggle+0x1a2>
    2886:	2e b1       	in	r18, 0x0e	; 14
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <nrk_gpio_toggle+0x198>
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	4a 95       	dec	r20
    2894:	e2 f7       	brpl	.-8      	; 0x288e <nrk_gpio_toggle+0x194>
    2896:	28 2b       	or	r18, r24
    2898:	2e b9       	out	0x0e, r18	; 14
    289a:	32 c0       	rjmp	.+100    	; 0x2900 <nrk_gpio_toggle+0x206>
    289c:	2e b1       	in	r18, 0x0e	; 14
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <nrk_gpio_toggle+0x1ae>
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	4a 95       	dec	r20
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <nrk_gpio_toggle+0x1aa>
    28ac:	80 95       	com	r24
    28ae:	82 23       	and	r24, r18
    28b0:	8e b9       	out	0x0e, r24	; 14
    28b2:	26 c0       	rjmp	.+76     	; 0x2900 <nrk_gpio_toggle+0x206>
    28b4:	8f b1       	in	r24, 0x0f	; 15
    28b6:	a9 01       	movw	r20, r18
    28b8:	a3 e0       	ldi	r26, 0x03	; 3
    28ba:	56 95       	lsr	r21
    28bc:	47 95       	ror	r20
    28be:	aa 95       	dec	r26
    28c0:	e1 f7       	brne	.-8      	; 0x28ba <nrk_gpio_toggle+0x1c0>
    28c2:	99 27       	eor	r25, r25
    28c4:	04 2e       	mov	r0, r20
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <nrk_gpio_toggle+0x1d2>
    28c8:	95 95       	asr	r25
    28ca:	87 95       	ror	r24
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <nrk_gpio_toggle+0x1ce>
    28d0:	80 fd       	sbrc	r24, 0
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <nrk_gpio_toggle+0x1f0>
    28d4:	21 b3       	in	r18, 0x11	; 17
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <nrk_gpio_toggle+0x1e6>
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	4a 95       	dec	r20
    28e2:	e2 f7       	brpl	.-8      	; 0x28dc <nrk_gpio_toggle+0x1e2>
    28e4:	28 2b       	or	r18, r24
    28e6:	21 bb       	out	0x11, r18	; 17
    28e8:	0b c0       	rjmp	.+22     	; 0x2900 <nrk_gpio_toggle+0x206>
    28ea:	21 b3       	in	r18, 0x11	; 17
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <nrk_gpio_toggle+0x1fc>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	4a 95       	dec	r20
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <nrk_gpio_toggle+0x1f8>
    28fa:	80 95       	com	r24
    28fc:	82 23       	and	r24, r18
    28fe:	81 bb       	out	0x11, r24	; 17
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	08 95       	ret
    2906:	8f ef       	ldi	r24, 0xFF	; 255
    2908:	9f ef       	ldi	r25, 0xFF	; 255
    290a:	08 95       	ret

0000290c <nrk_gpio_direction>:
    290c:	8f 3f       	cpi	r24, 0xFF	; 255
    290e:	09 f4       	brne	.+2      	; 0x2912 <nrk_gpio_direction+0x6>
    2910:	1b c1       	rjmp	.+566    	; 0x2b48 <nrk_gpio_direction+0x23c>
    2912:	48 2f       	mov	r20, r24
    2914:	55 27       	eor	r21, r21
    2916:	66 23       	and	r22, r22
    2918:	09 f0       	breq	.+2      	; 0x291c <nrk_gpio_direction+0x10>
    291a:	99 c0       	rjmp	.+306    	; 0x2a4e <nrk_gpio_direction+0x142>
    291c:	ca 01       	movw	r24, r20
    291e:	87 70       	andi	r24, 0x07	; 7
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	91 05       	cpc	r25, r1
    2926:	09 f4       	brne	.+2      	; 0x292a <nrk_gpio_direction+0x1e>
    2928:	3e c0       	rjmp	.+124    	; 0x29a6 <nrk_gpio_direction+0x9a>
    292a:	83 30       	cpi	r24, 0x03	; 3
    292c:	91 05       	cpc	r25, r1
    292e:	3c f4       	brge	.+14     	; 0x293e <nrk_gpio_direction+0x32>
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	89 f0       	breq	.+34     	; 0x2956 <nrk_gpio_direction+0x4a>
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	91 05       	cpc	r25, r1
    2938:	09 f0       	breq	.+2      	; 0x293c <nrk_gpio_direction+0x30>
    293a:	06 c1       	rjmp	.+524    	; 0x2b48 <nrk_gpio_direction+0x23c>
    293c:	21 c0       	rjmp	.+66     	; 0x2980 <nrk_gpio_direction+0x74>
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <nrk_gpio_direction+0x3a>
    2944:	5a c0       	rjmp	.+180    	; 0x29fa <nrk_gpio_direction+0xee>
    2946:	84 30       	cpi	r24, 0x04	; 4
    2948:	91 05       	cpc	r25, r1
    294a:	0c f4       	brge	.+2      	; 0x294e <nrk_gpio_direction+0x42>
    294c:	41 c0       	rjmp	.+130    	; 0x29d0 <nrk_gpio_direction+0xc4>
    294e:	05 97       	sbiw	r24, 0x05	; 5
    2950:	09 f0       	breq	.+2      	; 0x2954 <nrk_gpio_direction+0x48>
    2952:	fa c0       	rjmp	.+500    	; 0x2b48 <nrk_gpio_direction+0x23c>
    2954:	67 c0       	rjmp	.+206    	; 0x2a24 <nrk_gpio_direction+0x118>
    2956:	31 b1       	in	r19, 0x01	; 1
    2958:	b3 e0       	ldi	r27, 0x03	; 3
    295a:	56 95       	lsr	r21
    295c:	47 95       	ror	r20
    295e:	ba 95       	dec	r27
    2960:	e1 f7       	brne	.-8      	; 0x295a <nrk_gpio_direction+0x4e>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <nrk_gpio_direction+0x60>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	4a 95       	dec	r20
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <nrk_gpio_direction+0x5c>
    2970:	28 2f       	mov	r18, r24
    2972:	20 95       	com	r18
    2974:	23 23       	and	r18, r19
    2976:	21 b9       	out	0x01, r18	; 1
    2978:	22 b1       	in	r18, 0x02	; 2
    297a:	82 2b       	or	r24, r18
    297c:	82 b9       	out	0x02, r24	; 2
    297e:	e1 c0       	rjmp	.+450    	; 0x2b42 <nrk_gpio_direction+0x236>
    2980:	24 b1       	in	r18, 0x04	; 4
    2982:	a3 e0       	ldi	r26, 0x03	; 3
    2984:	56 95       	lsr	r21
    2986:	47 95       	ror	r20
    2988:	aa 95       	dec	r26
    298a:	e1 f7       	brne	.-8      	; 0x2984 <nrk_gpio_direction+0x78>
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <nrk_gpio_direction+0x86>
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	4a 95       	dec	r20
    2994:	e2 f7       	brpl	.-8      	; 0x298e <nrk_gpio_direction+0x82>
    2996:	98 2f       	mov	r25, r24
    2998:	80 95       	com	r24
    299a:	82 23       	and	r24, r18
    299c:	84 b9       	out	0x04, r24	; 4
    299e:	85 b1       	in	r24, 0x05	; 5
    29a0:	98 2b       	or	r25, r24
    29a2:	95 b9       	out	0x05, r25	; 5
    29a4:	ce c0       	rjmp	.+412    	; 0x2b42 <nrk_gpio_direction+0x236>
    29a6:	37 b1       	in	r19, 0x07	; 7
    29a8:	f3 e0       	ldi	r31, 0x03	; 3
    29aa:	56 95       	lsr	r21
    29ac:	47 95       	ror	r20
    29ae:	fa 95       	dec	r31
    29b0:	e1 f7       	brne	.-8      	; 0x29aa <nrk_gpio_direction+0x9e>
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <nrk_gpio_direction+0xb0>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	4a 95       	dec	r20
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <nrk_gpio_direction+0xac>
    29c0:	28 2f       	mov	r18, r24
    29c2:	20 95       	com	r18
    29c4:	23 23       	and	r18, r19
    29c6:	27 b9       	out	0x07, r18	; 7
    29c8:	28 b1       	in	r18, 0x08	; 8
    29ca:	82 2b       	or	r24, r18
    29cc:	88 b9       	out	0x08, r24	; 8
    29ce:	b9 c0       	rjmp	.+370    	; 0x2b42 <nrk_gpio_direction+0x236>
    29d0:	3a b1       	in	r19, 0x0a	; 10
    29d2:	e3 e0       	ldi	r30, 0x03	; 3
    29d4:	56 95       	lsr	r21
    29d6:	47 95       	ror	r20
    29d8:	ea 95       	dec	r30
    29da:	e1 f7       	brne	.-8      	; 0x29d4 <nrk_gpio_direction+0xc8>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <nrk_gpio_direction+0xda>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	4a 95       	dec	r20
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <nrk_gpio_direction+0xd6>
    29ea:	28 2f       	mov	r18, r24
    29ec:	20 95       	com	r18
    29ee:	23 23       	and	r18, r19
    29f0:	2a b9       	out	0x0a, r18	; 10
    29f2:	2b b1       	in	r18, 0x0b	; 11
    29f4:	82 2b       	or	r24, r18
    29f6:	8b b9       	out	0x0b, r24	; 11
    29f8:	a4 c0       	rjmp	.+328    	; 0x2b42 <nrk_gpio_direction+0x236>
    29fa:	3d b1       	in	r19, 0x0d	; 13
    29fc:	73 e0       	ldi	r23, 0x03	; 3
    29fe:	56 95       	lsr	r21
    2a00:	47 95       	ror	r20
    2a02:	7a 95       	dec	r23
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <nrk_gpio_direction+0xf2>
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <nrk_gpio_direction+0x104>
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	4a 95       	dec	r20
    2a12:	e2 f7       	brpl	.-8      	; 0x2a0c <nrk_gpio_direction+0x100>
    2a14:	28 2f       	mov	r18, r24
    2a16:	20 95       	com	r18
    2a18:	23 23       	and	r18, r19
    2a1a:	2d b9       	out	0x0d, r18	; 13
    2a1c:	2e b1       	in	r18, 0x0e	; 14
    2a1e:	82 2b       	or	r24, r18
    2a20:	8e b9       	out	0x0e, r24	; 14
    2a22:	8f c0       	rjmp	.+286    	; 0x2b42 <nrk_gpio_direction+0x236>
    2a24:	30 b3       	in	r19, 0x10	; 16
    2a26:	63 e0       	ldi	r22, 0x03	; 3
    2a28:	56 95       	lsr	r21
    2a2a:	47 95       	ror	r20
    2a2c:	6a 95       	dec	r22
    2a2e:	e1 f7       	brne	.-8      	; 0x2a28 <nrk_gpio_direction+0x11c>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <nrk_gpio_direction+0x12e>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	4a 95       	dec	r20
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <nrk_gpio_direction+0x12a>
    2a3e:	28 2f       	mov	r18, r24
    2a40:	20 95       	com	r18
    2a42:	23 23       	and	r18, r19
    2a44:	20 bb       	out	0x10, r18	; 16
    2a46:	21 b3       	in	r18, 0x11	; 17
    2a48:	82 2b       	or	r24, r18
    2a4a:	81 bb       	out	0x11, r24	; 17
    2a4c:	7a c0       	rjmp	.+244    	; 0x2b42 <nrk_gpio_direction+0x236>
    2a4e:	9a 01       	movw	r18, r20
    2a50:	27 70       	andi	r18, 0x07	; 7
    2a52:	30 70       	andi	r19, 0x00	; 0
    2a54:	22 30       	cpi	r18, 0x02	; 2
    2a56:	31 05       	cpc	r19, r1
    2a58:	a9 f1       	breq	.+106    	; 0x2ac4 <nrk_gpio_direction+0x1b8>
    2a5a:	23 30       	cpi	r18, 0x03	; 3
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	44 f4       	brge	.+16     	; 0x2a70 <nrk_gpio_direction+0x164>
    2a60:	21 15       	cp	r18, r1
    2a62:	31 05       	cpc	r19, r1
    2a64:	89 f0       	breq	.+34     	; 0x2a88 <nrk_gpio_direction+0x17c>
    2a66:	21 30       	cpi	r18, 0x01	; 1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <nrk_gpio_direction+0x162>
    2a6c:	6d c0       	rjmp	.+218    	; 0x2b48 <nrk_gpio_direction+0x23c>
    2a6e:	1c c0       	rjmp	.+56     	; 0x2aa8 <nrk_gpio_direction+0x19c>
    2a70:	24 30       	cpi	r18, 0x04	; 4
    2a72:	31 05       	cpc	r19, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <nrk_gpio_direction+0x16c>
    2a76:	46 c0       	rjmp	.+140    	; 0x2b04 <nrk_gpio_direction+0x1f8>
    2a78:	24 30       	cpi	r18, 0x04	; 4
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	9c f1       	brlt	.+102    	; 0x2ae4 <nrk_gpio_direction+0x1d8>
    2a7e:	25 30       	cpi	r18, 0x05	; 5
    2a80:	31 05       	cpc	r19, r1
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <nrk_gpio_direction+0x17a>
    2a84:	61 c0       	rjmp	.+194    	; 0x2b48 <nrk_gpio_direction+0x23c>
    2a86:	4e c0       	rjmp	.+156    	; 0x2b24 <nrk_gpio_direction+0x218>
    2a88:	21 b1       	in	r18, 0x01	; 1
    2a8a:	33 e0       	ldi	r19, 0x03	; 3
    2a8c:	56 95       	lsr	r21
    2a8e:	47 95       	ror	r20
    2a90:	3a 95       	dec	r19
    2a92:	e1 f7       	brne	.-8      	; 0x2a8c <nrk_gpio_direction+0x180>
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <nrk_gpio_direction+0x192>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	4a 95       	dec	r20
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <nrk_gpio_direction+0x18e>
    2aa2:	28 2b       	or	r18, r24
    2aa4:	21 b9       	out	0x01, r18	; 1
    2aa6:	4d c0       	rjmp	.+154    	; 0x2b42 <nrk_gpio_direction+0x236>
    2aa8:	84 b1       	in	r24, 0x04	; 4
    2aaa:	93 e0       	ldi	r25, 0x03	; 3
    2aac:	56 95       	lsr	r21
    2aae:	47 95       	ror	r20
    2ab0:	9a 95       	dec	r25
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <nrk_gpio_direction+0x1a0>
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <nrk_gpio_direction+0x1ae>
    2ab6:	22 0f       	add	r18, r18
    2ab8:	33 1f       	adc	r19, r19
    2aba:	4a 95       	dec	r20
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <nrk_gpio_direction+0x1aa>
    2abe:	82 2b       	or	r24, r18
    2ac0:	84 b9       	out	0x04, r24	; 4
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <nrk_gpio_direction+0x236>
    2ac4:	27 b1       	in	r18, 0x07	; 7
    2ac6:	b3 e0       	ldi	r27, 0x03	; 3
    2ac8:	56 95       	lsr	r21
    2aca:	47 95       	ror	r20
    2acc:	ba 95       	dec	r27
    2ace:	e1 f7       	brne	.-8      	; 0x2ac8 <nrk_gpio_direction+0x1bc>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <nrk_gpio_direction+0x1ce>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	4a 95       	dec	r20
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <nrk_gpio_direction+0x1ca>
    2ade:	28 2b       	or	r18, r24
    2ae0:	27 b9       	out	0x07, r18	; 7
    2ae2:	2f c0       	rjmp	.+94     	; 0x2b42 <nrk_gpio_direction+0x236>
    2ae4:	2a b1       	in	r18, 0x0a	; 10
    2ae6:	a3 e0       	ldi	r26, 0x03	; 3
    2ae8:	56 95       	lsr	r21
    2aea:	47 95       	ror	r20
    2aec:	aa 95       	dec	r26
    2aee:	e1 f7       	brne	.-8      	; 0x2ae8 <nrk_gpio_direction+0x1dc>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <nrk_gpio_direction+0x1ee>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	4a 95       	dec	r20
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <nrk_gpio_direction+0x1ea>
    2afe:	28 2b       	or	r18, r24
    2b00:	2a b9       	out	0x0a, r18	; 10
    2b02:	1f c0       	rjmp	.+62     	; 0x2b42 <nrk_gpio_direction+0x236>
    2b04:	2d b1       	in	r18, 0x0d	; 13
    2b06:	f3 e0       	ldi	r31, 0x03	; 3
    2b08:	56 95       	lsr	r21
    2b0a:	47 95       	ror	r20
    2b0c:	fa 95       	dec	r31
    2b0e:	e1 f7       	brne	.-8      	; 0x2b08 <nrk_gpio_direction+0x1fc>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <nrk_gpio_direction+0x20e>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	4a 95       	dec	r20
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <nrk_gpio_direction+0x20a>
    2b1e:	28 2b       	or	r18, r24
    2b20:	2d b9       	out	0x0d, r18	; 13
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <nrk_gpio_direction+0x236>
    2b24:	20 b3       	in	r18, 0x10	; 16
    2b26:	e3 e0       	ldi	r30, 0x03	; 3
    2b28:	56 95       	lsr	r21
    2b2a:	47 95       	ror	r20
    2b2c:	ea 95       	dec	r30
    2b2e:	e1 f7       	brne	.-8      	; 0x2b28 <nrk_gpio_direction+0x21c>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <nrk_gpio_direction+0x22e>
    2b36:	88 0f       	add	r24, r24
    2b38:	99 1f       	adc	r25, r25
    2b3a:	4a 95       	dec	r20
    2b3c:	e2 f7       	brpl	.-8      	; 0x2b36 <nrk_gpio_direction+0x22a>
    2b3e:	28 2b       	or	r18, r24
    2b40:	20 bb       	out	0x10, r18	; 16
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	08 95       	ret
    2b48:	8f ef       	ldi	r24, 0xFF	; 255
    2b4a:	9f ef       	ldi	r25, 0xFF	; 255
    2b4c:	08 95       	ret

00002b4e <nrk_get_button>:
    2b4e:	88 23       	and	r24, r24
    2b50:	19 f0       	breq	.+6      	; 0x2b58 <nrk_get_button+0xa>
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	9f ef       	ldi	r25, 0xFF	; 255
    2b56:	08 95       	ret
    2b58:	80 b1       	in	r24, 0x00	; 0
    2b5a:	99 27       	eor	r25, r25
    2b5c:	87 fd       	sbrc	r24, 7
    2b5e:	90 95       	com	r25
    2b60:	80 95       	com	r24
    2b62:	90 95       	com	r25
    2b64:	88 27       	eor	r24, r24
    2b66:	99 0f       	add	r25, r25
    2b68:	88 1f       	adc	r24, r24
    2b6a:	99 27       	eor	r25, r25
    2b6c:	08 95       	ret

00002b6e <nrk_led_toggle>:
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	11 f4       	brne	.+4      	; 0x2b76 <nrk_led_toggle+0x8>
    2b72:	84 e1       	ldi	r24, 0x14	; 20
    2b74:	09 c0       	rjmp	.+18     	; 0x2b88 <nrk_led_toggle+0x1a>
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	91 05       	cpc	r25, r1
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <nrk_led_toggle+0x12>
    2b7c:	8c e1       	ldi	r24, 0x1C	; 28
    2b7e:	04 c0       	rjmp	.+8      	; 0x2b88 <nrk_led_toggle+0x1a>
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	91 05       	cpc	r25, r1
    2b84:	31 f4       	brne	.+12     	; 0x2b92 <nrk_led_toggle+0x24>
    2b86:	84 e2       	ldi	r24, 0x24	; 36
    2b88:	0e 94 7d 13 	call	0x26fa	; 0x26fa <nrk_gpio_toggle>
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	08 95       	ret
    2b92:	03 97       	sbiw	r24, 0x03	; 3
    2b94:	19 f0       	breq	.+6      	; 0x2b9c <nrk_led_toggle+0x2e>
    2b96:	8f ef       	ldi	r24, 0xFF	; 255
    2b98:	9f ef       	ldi	r25, 0xFF	; 255
    2b9a:	08 95       	ret
    2b9c:	8c e2       	ldi	r24, 0x2C	; 44
    2b9e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <nrk_gpio_toggle>
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	08 95       	ret

00002ba8 <nrk_led_clr>:
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <nrk_led_clr+0x8>
    2bac:	84 e1       	ldi	r24, 0x14	; 20
    2bae:	09 c0       	rjmp	.+18     	; 0x2bc2 <nrk_led_clr+0x1a>
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <nrk_led_clr+0x12>
    2bb6:	8c e1       	ldi	r24, 0x1C	; 28
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <nrk_led_clr+0x1a>
    2bba:	82 30       	cpi	r24, 0x02	; 2
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	31 f4       	brne	.+12     	; 0x2bcc <nrk_led_clr+0x24>
    2bc0:	84 e2       	ldi	r24, 0x24	; 36
    2bc2:	0e 94 32 12 	call	0x2464	; 0x2464 <nrk_gpio_set>
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	08 95       	ret
    2bcc:	03 97       	sbiw	r24, 0x03	; 3
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <nrk_led_clr+0x2e>
    2bd0:	8f ef       	ldi	r24, 0xFF	; 255
    2bd2:	9f ef       	ldi	r25, 0xFF	; 255
    2bd4:	08 95       	ret
    2bd6:	8c e2       	ldi	r24, 0x2C	; 44
    2bd8:	0e 94 32 12 	call	0x2464	; 0x2464 <nrk_gpio_set>
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	08 95       	ret

00002be2 <nrk_led_set>:
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	11 f4       	brne	.+4      	; 0x2bea <nrk_led_set+0x8>
    2be6:	84 e1       	ldi	r24, 0x14	; 20
    2be8:	09 c0       	rjmp	.+18     	; 0x2bfc <nrk_led_set+0x1a>
    2bea:	81 30       	cpi	r24, 0x01	; 1
    2bec:	91 05       	cpc	r25, r1
    2bee:	11 f4       	brne	.+4      	; 0x2bf4 <nrk_led_set+0x12>
    2bf0:	8c e1       	ldi	r24, 0x1C	; 28
    2bf2:	04 c0       	rjmp	.+8      	; 0x2bfc <nrk_led_set+0x1a>
    2bf4:	82 30       	cpi	r24, 0x02	; 2
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	31 f4       	brne	.+12     	; 0x2c06 <nrk_led_set+0x24>
    2bfa:	84 e2       	ldi	r24, 0x24	; 36
    2bfc:	0e 94 b7 12 	call	0x256e	; 0x256e <nrk_gpio_clr>
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	08 95       	ret
    2c06:	03 97       	sbiw	r24, 0x03	; 3
    2c08:	19 f0       	breq	.+6      	; 0x2c10 <nrk_led_set+0x2e>
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	08 95       	ret
    2c10:	8c e2       	ldi	r24, 0x2C	; 44
    2c12:	0e 94 b7 12 	call	0x256e	; 0x256e <nrk_gpio_clr>
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	08 95       	ret

00002c1c <nrk_gpio_pullups>:
    2c1c:	88 23       	and	r24, r24
    2c1e:	19 f0       	breq	.+6      	; 0x2c26 <nrk_gpio_pullups+0xa>
    2c20:	85 b7       	in	r24, 0x35	; 53
    2c22:	8f 7e       	andi	r24, 0xEF	; 239
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <nrk_gpio_pullups+0xe>
    2c26:	85 b7       	in	r24, 0x35	; 53
    2c28:	80 61       	ori	r24, 0x10	; 16
    2c2a:	85 bf       	out	0x35, r24	; 53
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	08 95       	ret

00002c32 <putc0>:
    2c32:	98 2f       	mov	r25, r24
    2c34:	80 91 c0 00 	lds	r24, 0x00C0
    2c38:	85 ff       	sbrs	r24, 5
    2c3a:	fc cf       	rjmp	.-8      	; 0x2c34 <putc0+0x2>
    2c3c:	80 91 c0 00 	lds	r24, 0x00C0
    2c40:	8f 7d       	andi	r24, 0xDF	; 223
    2c42:	80 93 c0 00 	sts	0x00C0, r24
    2c46:	90 93 c6 00 	sts	0x00C6, r25
    2c4a:	08 95       	ret

00002c4c <putc1>:
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	80 91 c8 00 	lds	r24, 0x00C8
    2c52:	85 ff       	sbrs	r24, 5
    2c54:	fc cf       	rjmp	.-8      	; 0x2c4e <putc1+0x2>
    2c56:	90 93 ce 00 	sts	0x00CE, r25
    2c5a:	08 95       	ret

00002c5c <setup_uart0>:
    2c5c:	29 2f       	mov	r18, r25
    2c5e:	33 27       	eor	r19, r19
    2c60:	20 93 c5 00 	sts	0x00C5, r18
    2c64:	80 93 c4 00 	sts	0x00C4, r24
    2c68:	86 e0       	ldi	r24, 0x06	; 6
    2c6a:	80 93 c2 00 	sts	0x00C2, r24
    2c6e:	e1 ec       	ldi	r30, 0xC1	; 193
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8b 7f       	andi	r24, 0xFB	; 251
    2c76:	80 83       	st	Z, r24
    2c78:	a0 ec       	ldi	r26, 0xC0	; 192
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	8c 91       	ld	r24, X
    2c7e:	82 60       	ori	r24, 0x02	; 2
    2c80:	8c 93       	st	X, r24
    2c82:	80 81       	ld	r24, Z
    2c84:	88 61       	ori	r24, 0x18	; 24
    2c86:	80 83       	st	Z, r24
    2c88:	08 95       	ret

00002c8a <setup_uart1>:
    2c8a:	29 2f       	mov	r18, r25
    2c8c:	33 27       	eor	r19, r19
    2c8e:	20 93 cd 00 	sts	0x00CD, r18
    2c92:	80 93 cc 00 	sts	0x00CC, r24
    2c96:	86 e0       	ldi	r24, 0x06	; 6
    2c98:	80 93 ca 00 	sts	0x00CA, r24
    2c9c:	e9 ec       	ldi	r30, 0xC9	; 201
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8b 7f       	andi	r24, 0xFB	; 251
    2ca4:	80 83       	st	Z, r24
    2ca6:	a8 ec       	ldi	r26, 0xC8	; 200
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	8c 91       	ld	r24, X
    2cac:	82 60       	ori	r24, 0x02	; 2
    2cae:	8c 93       	st	X, r24
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 61       	ori	r24, 0x18	; 24
    2cb4:	80 83       	st	Z, r24
    2cb6:	08 95       	ret

00002cb8 <getc0>:
    2cb8:	80 91 c0 00 	lds	r24, 0x00C0
    2cbc:	87 ff       	sbrs	r24, 7
    2cbe:	fc cf       	rjmp	.-8      	; 0x2cb8 <getc0>
    2cc0:	80 91 c0 00 	lds	r24, 0x00C0
    2cc4:	8f 77       	andi	r24, 0x7F	; 127
    2cc6:	80 93 c0 00 	sts	0x00C0, r24
    2cca:	80 91 c6 00 	lds	r24, 0x00C6
    2cce:	99 27       	eor	r25, r25
    2cd0:	08 95       	ret

00002cd2 <nrk_setup_uart>:
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <setup_uart1>
    2cde:	0b e0       	ldi	r16, 0x0B	; 11
    2ce0:	12 e1       	ldi	r17, 0x12	; 18
    2ce2:	56 e2       	ldi	r21, 0x26	; 38
    2ce4:	e5 2e       	mov	r14, r21
    2ce6:	56 e1       	ldi	r21, 0x16	; 22
    2ce8:	f5 2e       	mov	r15, r21
    2cea:	b8 01       	movw	r22, r16
    2cec:	c7 01       	movw	r24, r14
    2cee:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <fdevopen>
    2cf2:	90 93 94 05 	sts	0x0594, r25
    2cf6:	80 93 93 05 	sts	0x0593, r24
    2cfa:	b8 01       	movw	r22, r16
    2cfc:	c7 01       	movw	r24, r14
    2cfe:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <fdevopen>
    2d02:	90 93 92 05 	sts	0x0592, r25
    2d06:	80 93 91 05 	sts	0x0591, r24
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	08 95       	ret

00002d14 <nrk_kprintf>:
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ec 01       	movw	r28, r24
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <nrk_kprintf+0x16>
    2d1c:	60 91 93 05 	lds	r22, 0x0593
    2d20:	70 91 94 05 	lds	r23, 0x0594
    2d24:	99 27       	eor	r25, r25
    2d26:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	21 96       	adiw	r28, 0x01	; 1
    2d2e:	84 91       	lpm	r24, Z
    2d30:	88 23       	and	r24, r24
    2d32:	a1 f7       	brne	.-24     	; 0x2d1c <nrk_kprintf+0x8>
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	08 95       	ret

00002d3a <halWait>:
	...
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	d1 f7       	brne	.-12     	; 0x2d3a <halWait>
    2d46:	08 95       	ret

00002d48 <read_eeprom_current_image_checksum>:
    2d48:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2d4a:	a7 e0       	ldi	r26, 0x07	; 7
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2d52:	80 2d       	mov	r24, r0
    2d54:	80 83       	st	Z, r24
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	08 95       	ret

00002d5c <write_eeprom_current_image_checksum>:
    2d5c:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2d5e:	80 81       	ld	r24, Z
    2d60:	a7 e0       	ldi	r26, 0x07	; 7
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	08 2e       	mov	r0, r24
    2d66:	0e 94 8c 39 	call	0x7318	; 0x7318 <__eeprom_write_byte_1F2021>
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	08 95       	ret

00002d70 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2d70:	dc 01       	movw	r26, r24
    2d72:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2d76:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    2d78:	99 27       	eor	r25, r25
    2d7a:	08 95       	ret

00002d7c <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	a0 e0       	ldi	r26, 0x00	; 0
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2d86:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Chipcon Development Team 
    2d88:	43 83       	std	Z+3, r20	; 0x03
    2d8a:	a1 e0       	ldi	r26, 0x01	; 1
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2d92:	80 2d       	mov	r24, r0
*******************************************************************************/
    2d94:	82 83       	std	Z+2, r24	; 0x02
    2d96:	a2 e0       	ldi	r26, 0x02	; 2
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2d9e:	30 2d       	mov	r19, r0

    2da0:	31 83       	std	Z+1, r19	; 0x01
    2da2:	a3 e0       	ldi	r26, 0x03	; 3
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2daa:	90 2d       	mov	r25, r0

    2dac:	90 83       	st	Z, r25
    2dae:	a4 e0       	ldi	r26, 0x04	; 4
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2db6:	20 2d       	mov	r18, r0
#include <include.h>
#include <ulib.h>

    2db8:	83 0f       	add	r24, r19

    2dba:	84 0f       	add	r24, r20

//-------------------------------------------------------------------------------------------------------
    2dbc:	89 0f       	add	r24, r25
    2dbe:	28 17       	cp	r18, r24
    2dc0:	19 f4       	brne	.+6      	; 0x2dc8 <read_eeprom_mac_address+0x4c>
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	08 95       	ret
    2dc8:	8f ef       	ldi	r24, 0xFF	; 255
    2dca:	9f ef       	ldi	r25, 0xFF	; 255
//	void halRfSetChannel(UINT8 Channel)
//
//	DESCRIPTION:
    2dcc:	08 95       	ret

00002dce <read_eeprom_channel>:
//		Programs CC2420 for a given IEEE 802.15.4 channel. 
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
//
    2dce:	fc 01       	movw	r30, r24
    2dd0:	a5 e0       	ldi	r26, 0x05	; 5
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2dd8:	80 2d       	mov	r24, r0
//	PARAMETERS:
    2dda:	80 83       	st	Z, r24
//		UINT8 channel
//			The channel number (11-26)
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	08 95       	ret

00002de2 <read_eeprom_load_img_pages>:
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    2de2:	fc 01       	movw	r30, r24
    2de4:	a6 e0       	ldi	r26, 0x06	; 6
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2dec:	80 2d       	mov	r24, r0
    // Write it to the CC2420
    2dee:	80 83       	st	Z, r24
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	08 95       	ret

00002df6 <read_eeprom_aes_key>:
	ENABLE_GLOBAL_INT();

} // rfSetChannel
    2df6:	ac 01       	movw	r20, r24
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	d9 01       	movw	r26, r18
    2dfe:	18 96       	adiw	r26, 0x08	; 8
    2e00:	0e 94 84 39 	call	0x7308	; 0x7308 <__eeprom_read_byte_1F2021>
    2e04:	80 2d       	mov	r24, r0


    2e06:	fa 01       	movw	r30, r20
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	80 83       	st	Z, r24
    2e0e:	2f 5f       	subi	r18, 0xFF	; 255
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();

} // rfSetChannel


    2e12:	20 31       	cpi	r18, 0x10	; 16
    2e14:	31 05       	cpc	r19, r1
    2e16:	91 f7       	brne	.-28     	; 0x2dfc <read_eeprom_aes_key+0x6>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	08 95       	ret

00002e1e <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2e1e:	dc 01       	movw	r26, r24
    2e20:	06 2e       	mov	r0, r22
    2e22:	0e 94 8c 39 	call	0x7318	; 0x7318 <__eeprom_write_byte_1F2021>
    2e26:	08 95       	ret

00002e28 <write_eeprom_load_img_pages>:
//	PARAMETERS:
//		UINT8 channel
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
    2e28:	fc 01       	movw	r30, r24
    2e2a:	80 81       	ld	r24, Z
    2e2c:	a6 e0       	ldi	r26, 0x06	; 6
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	08 2e       	mov	r0, r24
    2e32:	0e 94 8c 39 	call	0x7318	; 0x7318 <__eeprom_write_byte_1F2021>
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	08 95       	ret

00002e3c <write_eeprom_aes_key>:
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	d9 01       	movw	r26, r18
    2e44:	18 96       	adiw	r26, 0x08	; 8
    2e46:	fa 01       	movw	r30, r20
    2e48:	e2 0f       	add	r30, r18
    2e4a:	f3 1f       	adc	r31, r19
    2e4c:	80 81       	ld	r24, Z
    2e4e:	08 2e       	mov	r0, r24
    2e50:	0e 94 8c 39 	call	0x7318	; 0x7318 <__eeprom_write_byte_1F2021>
    2e54:	2f 5f       	subi	r18, 0xFF	; 255
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	20 31       	cpi	r18, 0x10	; 16
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	91 f7       	brne	.-28     	; 0x2e42 <write_eeprom_aes_key+0x6>
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	08 95       	ret

00002e64 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2e64:	f8 94       	cli
    2e66:	08 95       	ret

00002e68 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2e68:	78 94       	sei
    2e6a:	08 95       	ret

00002e6c <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2e6c:	85 e6       	ldi	r24, 0x65	; 101
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	08 95       	ret

00002e72 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    2e72:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_nrk_scheduler>
    2e76:	08 95       	ret

00002e78 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	ec 01       	movw	r28, r24
    2e86:	8b 01       	movw	r16, r22
    2e88:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	82 30       	cpi	r24, 0x02	; 2
    2e8e:	21 f0       	breq	.+8      	; 0x2e98 <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    2e90:	80 91 5f 05 	lds	r24, 0x055F
    2e94:	88 83       	st	Y, r24
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2e98:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2e9a:	80 91 5f 05 	lds	r24, 0x055F
    2e9e:	82 30       	cpi	r24, 0x02	; 2
    2ea0:	20 f0       	brcs	.+8      	; 0x2eaa <nrk_TCB_init+0x32>
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	87 e0       	ldi	r24, 0x07	; 7
    2ea6:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	29 f0       	breq	.+10     	; 0x2eba <nrk_TCB_init+0x42>
    2eb0:	80 91 5f 05 	lds	r24, 0x055F
    2eb4:	8f 5f       	subi	r24, 0xFF	; 255
    2eb6:	80 93 5f 05 	sts	0x055F, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2eba:	80 91 5f 05 	lds	r24, 0x055F
    2ebe:	88 23       	and	r24, r24
    2ec0:	19 f4       	brne	.+6      	; 0x2ec8 <nrk_TCB_init+0x50>
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	80 93 5f 05 	sts	0x055F, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2ec8:	88 81       	ld	r24, Y
    2eca:	99 27       	eor	r25, r25
    2ecc:	87 fd       	sbrc	r24, 7
    2ece:	90 95       	com	r25
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	45 e0       	ldi	r20, 0x05	; 5
    2ed4:	ee 0f       	add	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	4a 95       	dec	r20
    2eda:	e1 f7       	brne	.-8      	; 0x2ed4 <nrk_TCB_init+0x5c>
    2edc:	e8 0f       	add	r30, r24
    2ede:	f9 1f       	adc	r31, r25
    2ee0:	eb 5e       	subi	r30, 0xEB	; 235
    2ee2:	fa 4f       	sbci	r31, 0xFA	; 250
    2ee4:	11 83       	std	Z+1, r17	; 0x01
    2ee6:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2ee8:	88 81       	ld	r24, Y
    2eea:	99 27       	eor	r25, r25
    2eec:	87 fd       	sbrc	r24, 7
    2eee:	90 95       	com	r25
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	35 e0       	ldi	r19, 0x05	; 5
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	3a 95       	dec	r19
    2efa:	e1 f7       	brne	.-8      	; 0x2ef4 <nrk_TCB_init+0x7c>
    2efc:	e8 0f       	add	r30, r24
    2efe:	f9 1f       	adc	r31, r25
    2f00:	eb 5e       	subi	r30, 0xEB	; 235
    2f02:	fa 4f       	sbci	r31, 0xFA	; 250
    2f04:	88 85       	ldd	r24, Y+8	; 0x08
    2f06:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2f08:	88 81       	ld	r24, Y
    2f0a:	99 27       	eor	r25, r25
    2f0c:	87 fd       	sbrc	r24, 7
    2f0e:	90 95       	com	r25
    2f10:	fc 01       	movw	r30, r24
    2f12:	25 e0       	ldi	r18, 0x05	; 5
    2f14:	ee 0f       	add	r30, r30
    2f16:	ff 1f       	adc	r31, r31
    2f18:	2a 95       	dec	r18
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <nrk_TCB_init+0x9c>
    2f1c:	e8 0f       	add	r30, r24
    2f1e:	f9 1f       	adc	r31, r25
    2f20:	eb 5e       	subi	r30, 0xEB	; 235
    2f22:	fa 4f       	sbci	r31, 0xFA	; 250
    2f24:	83 e0       	ldi	r24, 0x03	; 3
    2f26:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2f28:	28 81       	ld	r18, Y
    2f2a:	82 2f       	mov	r24, r18
    2f2c:	99 27       	eor	r25, r25
    2f2e:	87 fd       	sbrc	r24, 7
    2f30:	90 95       	com	r25
    2f32:	fc 01       	movw	r30, r24
    2f34:	05 e0       	ldi	r16, 0x05	; 5
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	0a 95       	dec	r16
    2f3c:	e1 f7       	brne	.-8      	; 0x2f36 <nrk_TCB_init+0xbe>
    2f3e:	e8 0f       	add	r30, r24
    2f40:	f9 1f       	adc	r31, r25
    2f42:	eb 5e       	subi	r30, 0xEB	; 235
    2f44:	fa 4f       	sbci	r31, 0xFA	; 250
    2f46:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2f48:	88 81       	ld	r24, Y
    2f4a:	99 27       	eor	r25, r25
    2f4c:	87 fd       	sbrc	r24, 7
    2f4e:	90 95       	com	r25
    2f50:	fc 01       	movw	r30, r24
    2f52:	15 e0       	ldi	r17, 0x05	; 5
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	1a 95       	dec	r17
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <nrk_TCB_init+0xdc>
    2f5c:	e8 0f       	add	r30, r24
    2f5e:	f9 1f       	adc	r31, r25
    2f60:	eb 5e       	subi	r30, 0xEB	; 235
    2f62:	fa 4f       	sbci	r31, 0xFA	; 250
    2f64:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    2f66:	08 81       	ld	r16, Y
    2f68:	11 27       	eor	r17, r17
    2f6a:	07 fd       	sbrc	r16, 7
    2f6c:	10 95       	com	r17
    2f6e:	ce 01       	movw	r24, r28
    2f70:	0b 96       	adiw	r24, 0x0b	; 11
    2f72:	0e 94 85 24 	call	0x490a	; 0x490a <_nrk_time_to_ticks>
    2f76:	f8 01       	movw	r30, r16
    2f78:	b5 e0       	ldi	r27, 0x05	; 5
    2f7a:	ee 0f       	add	r30, r30
    2f7c:	ff 1f       	adc	r31, r31
    2f7e:	ba 95       	dec	r27
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <nrk_TCB_init+0x102>
    2f82:	e0 0f       	add	r30, r16
    2f84:	f1 1f       	adc	r31, r17
    2f86:	eb 5e       	subi	r30, 0xEB	; 235
    2f88:	fa 4f       	sbci	r31, 0xFA	; 250
    2f8a:	94 8f       	std	Z+28, r25	; 0x1c
    2f8c:	83 8f       	std	Z+27, r24	; 0x1b
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    2f8e:	08 81       	ld	r16, Y
    2f90:	11 27       	eor	r17, r17
    2f92:	07 fd       	sbrc	r16, 7
    2f94:	10 95       	com	r17
    2f96:	ce 01       	movw	r24, r28
    2f98:	4b 96       	adiw	r24, 0x1b	; 27
    2f9a:	0e 94 85 24 	call	0x490a	; 0x490a <_nrk_time_to_ticks>
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	a5 e0       	ldi	r26, 0x05	; 5
    2fa2:	ee 0f       	add	r30, r30
    2fa4:	ff 1f       	adc	r31, r31
    2fa6:	aa 95       	dec	r26
    2fa8:	e1 f7       	brne	.-8      	; 0x2fa2 <nrk_TCB_init+0x12a>
    2faa:	e0 0f       	add	r30, r16
    2fac:	f1 1f       	adc	r31, r17
    2fae:	eb 5e       	subi	r30, 0xEB	; 235
    2fb0:	fa 4f       	sbci	r31, 0xFA	; 250
    2fb2:	96 8b       	std	Z+22, r25	; 0x16
    2fb4:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2fb6:	88 81       	ld	r24, Y
    2fb8:	99 27       	eor	r25, r25
    2fba:	87 fd       	sbrc	r24, 7
    2fbc:	90 95       	com	r25
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	75 e0       	ldi	r23, 0x05	; 5
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	7a 95       	dec	r23
    2fc8:	e1 f7       	brne	.-8      	; 0x2fc2 <nrk_TCB_init+0x14a>
    2fca:	e8 0f       	add	r30, r24
    2fcc:	f9 1f       	adc	r31, r25
    2fce:	eb 5e       	subi	r30, 0xEB	; 235
    2fd0:	fa 4f       	sbci	r31, 0xFA	; 250
    2fd2:	85 89       	ldd	r24, Z+21	; 0x15
    2fd4:	96 89       	ldd	r25, Z+22	; 0x16
    2fd6:	23 8d       	ldd	r18, Z+27	; 0x1b
    2fd8:	34 8d       	ldd	r19, Z+28	; 0x1c
    2fda:	82 0f       	add	r24, r18
    2fdc:	93 1f       	adc	r25, r19
    2fde:	90 8f       	std	Z+24, r25	; 0x18
    2fe0:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    2fe2:	08 81       	ld	r16, Y
    2fe4:	11 27       	eor	r17, r17
    2fe6:	07 fd       	sbrc	r16, 7
    2fe8:	10 95       	com	r17
    2fea:	ce 01       	movw	r24, r28
    2fec:	43 96       	adiw	r24, 0x13	; 19
    2fee:	0e 94 85 24 	call	0x490a	; 0x490a <_nrk_time_to_ticks>
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	65 e0       	ldi	r22, 0x05	; 5
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	6a 95       	dec	r22
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <nrk_TCB_init+0x17e>
    2ffe:	e0 0f       	add	r30, r16
    3000:	f1 1f       	adc	r31, r17
    3002:	eb 5e       	subi	r30, 0xEB	; 235
    3004:	fa 4f       	sbci	r31, 0xFA	; 250
    3006:	96 8f       	std	Z+30, r25	; 0x1e
    3008:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    300a:	88 81       	ld	r24, Y
    300c:	99 27       	eor	r25, r25
    300e:	87 fd       	sbrc	r24, 7
    3010:	90 95       	com	r25
    3012:	fc 01       	movw	r30, r24
    3014:	55 e0       	ldi	r21, 0x05	; 5
    3016:	ee 0f       	add	r30, r30
    3018:	ff 1f       	adc	r31, r31
    301a:	5a 95       	dec	r21
    301c:	e1 f7       	brne	.-8      	; 0x3016 <nrk_TCB_init+0x19e>
    301e:	e8 0f       	add	r30, r24
    3020:	f9 1f       	adc	r31, r25
    3022:	eb 5e       	subi	r30, 0xEB	; 235
    3024:	fa 4f       	sbci	r31, 0xFA	; 250
    3026:	85 8d       	ldd	r24, Z+29	; 0x1d
    3028:	96 8d       	ldd	r25, Z+30	; 0x1e
    302a:	92 8f       	std	Z+26, r25	; 0x1a
    302c:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    302e:	88 81       	ld	r24, Y
    3030:	99 27       	eor	r25, r25
    3032:	87 fd       	sbrc	r24, 7
    3034:	90 95       	com	r25
    3036:	fc 01       	movw	r30, r24
    3038:	45 e0       	ldi	r20, 0x05	; 5
    303a:	ee 0f       	add	r30, r30
    303c:	ff 1f       	adc	r31, r31
    303e:	4a 95       	dec	r20
    3040:	e1 f7       	brne	.-8      	; 0x303a <nrk_TCB_init+0x1c2>
    3042:	e8 0f       	add	r30, r24
    3044:	f9 1f       	adc	r31, r25
    3046:	eb 5e       	subi	r30, 0xEB	; 235
    3048:	fa 4f       	sbci	r31, 0xFA	; 250
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	90 a3       	std	Z+32, r25	; 0x20
    3050:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3052:	88 81       	ld	r24, Y
    3054:	99 27       	eor	r25, r25
    3056:	87 fd       	sbrc	r24, 7
    3058:	90 95       	com	r25
    305a:	fc 01       	movw	r30, r24
    305c:	35 e0       	ldi	r19, 0x05	; 5
    305e:	ee 0f       	add	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	3a 95       	dec	r19
    3064:	e1 f7       	brne	.-8      	; 0x305e <nrk_TCB_init+0x1e6>
    3066:	e8 0f       	add	r30, r24
    3068:	f9 1f       	adc	r31, r25
    306a:	eb 5e       	subi	r30, 0xEB	; 235
    306c:	fa 4f       	sbci	r31, 0xFA	; 250
    306e:	f3 82       	std	Z+3, r15	; 0x03
    3070:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3072:	88 81       	ld	r24, Y
    3074:	99 27       	eor	r25, r25
    3076:	87 fd       	sbrc	r24, 7
    3078:	90 95       	com	r25
    307a:	fc 01       	movw	r30, r24
    307c:	25 e0       	ldi	r18, 0x05	; 5
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	2a 95       	dec	r18
    3084:	e1 f7       	brne	.-8      	; 0x307e <nrk_TCB_init+0x206>
    3086:	e8 0f       	add	r30, r24
    3088:	f9 1f       	adc	r31, r25
    308a:	eb 5e       	subi	r30, 0xEB	; 235
    308c:	fa 4f       	sbci	r31, 0xFA	; 250
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	08 95       	ret

000030a4 <nrk_start>:




void nrk_start (void)
{
    30a4:	8f 92       	push	r8
    30a6:	9f 92       	push	r9
    30a8:	af 92       	push	r10
    30aa:	bf 92       	push	r11
    30ac:	cf 92       	push	r12
    30ae:	df 92       	push	r13
    30b0:	ef 92       	push	r14
    30b2:	ff 92       	push	r15
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	6d e1       	ldi	r22, 0x1D	; 29
    30be:	a6 2e       	mov	r10, r22
    30c0:	65 e0       	ldi	r22, 0x05	; 5
    30c2:	b6 2e       	mov	r11, r22
    30c4:	cc 24       	eor	r12, r12
    30c6:	dd 24       	eor	r13, r13
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    30c8:	45 01       	movw	r8, r10




void nrk_start (void)
{
    30ca:	ec 2c       	mov	r14, r12
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    30cc:	f5 01       	movw	r30, r10
    30ce:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    30d0:	ff ef       	ldi	r31, 0xFF	; 255
    30d2:	ff 16       	cp	r15, r31
    30d4:	91 f0       	breq	.+36     	; 0x30fa <nrk_start+0x56>
    30d6:	e4 01       	movw	r28, r8
    30d8:	00 e0       	ldi	r16, 0x00	; 0
    30da:	10 e0       	ldi	r17, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    30dc:	e0 16       	cp	r14, r16
    30de:	39 f0       	breq	.+14     	; 0x30ee <nrk_start+0x4a>
    30e0:	88 81       	ld	r24, Y
    30e2:	f8 16       	cp	r15, r24
    30e4:	21 f4       	brne	.+8      	; 0x30ee <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    30e6:	6f 2d       	mov	r22, r15
    30e8:	85 e0       	ldi	r24, 0x05	; 5
    30ea:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    30ee:	0f 5f       	subi	r16, 0xFF	; 255
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	a1 96       	adiw	r28, 0x21	; 33
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    30f4:	02 30       	cpi	r16, 0x02	; 2
    30f6:	11 05       	cpc	r17, r1
    30f8:	89 f7       	brne	.-30     	; 0x30dc <nrk_start+0x38>
    30fa:	08 94       	sec
    30fc:	c1 1c       	adc	r12, r1
    30fe:	d1 1c       	adc	r13, r1
    3100:	81 e2       	ldi	r24, 0x21	; 33
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a8 0e       	add	r10, r24
    3106:	b9 1e       	adc	r11, r25
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3108:	92 e0       	ldi	r25, 0x02	; 2
    310a:	c9 16       	cp	r12, r25
    310c:	d1 04       	cpc	r13, r1
    310e:	e9 f6       	brne	.-70     	; 0x30ca <nrk_start+0x26>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3110:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3114:	28 2f       	mov	r18, r24
    3116:	33 27       	eor	r19, r19
    3118:	27 fd       	sbrc	r18, 7
    311a:	30 95       	com	r19
    311c:	f9 01       	movw	r30, r18
    311e:	55 e0       	ldi	r21, 0x05	; 5
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	5a 95       	dec	r21
    3126:	e1 f7       	brne	.-8      	; 0x3120 <nrk_start+0x7c>
    3128:	e2 0f       	add	r30, r18
    312a:	f3 1f       	adc	r31, r19
    312c:	eb 5e       	subi	r30, 0xEB	; 235
    312e:	fa 4f       	sbci	r31, 0xFA	; 250
    3130:	32 85       	ldd	r19, Z+10	; 0x0a
    3132:	30 93 72 05 	sts	0x0572, r19
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3136:	21 e2       	ldi	r18, 0x21	; 33
    3138:	82 02       	muls	r24, r18
    313a:	c0 01       	movw	r24, r0
    313c:	11 24       	eor	r1, r1
    313e:	8b 5e       	subi	r24, 0xEB	; 235
    3140:	9a 4f       	sbci	r25, 0xFA	; 250
    3142:	90 93 71 05 	sts	0x0571, r25
    3146:	80 93 70 05 	sts	0x0570, r24
    314a:	90 93 62 05 	sts	0x0562, r25
    314e:	80 93 61 05 	sts	0x0561, r24
    nrk_cur_task_prio = nrk_high_ready_prio;
    3152:	30 93 63 05 	sts	0x0563, r19
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3156:	0e 94 65 2e 	call	0x5cca	; 0x5cca <nrk_target_start>
    nrk_stack_pointer_init(); 
    315a:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    315e:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <nrk_start_high_ready_task>
    3162:	ff cf       	rjmp	.-2      	; 0x3162 <nrk_start+0xbe>

00003164 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	a3 97       	sbiw	r28, 0x23	; 35
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    317c:	0e 94 82 1c 	call	0x3904	; 0x3904 <nrk_signal_create>
    3180:	80 93 60 05 	sts	0x0560, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3184:	8f 3f       	cpi	r24, 0xFF	; 255
    3186:	21 f4       	brne	.+8      	; 0x3190 <nrk_init+0x2c>
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	8e e0       	ldi	r24, 0x0E	; 14
    318c:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    3190:	0e 94 24 2c 	call	0x5848	; 0x5848 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3194:	08 2f       	mov	r16, r24
    3196:	11 27       	eor	r17, r17
    3198:	00 ff       	sbrs	r16, 0
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <nrk_init+0x40>
    319c:	60 e0       	ldi	r22, 0x00	; 0
    319e:	86 e0       	ldi	r24, 0x06	; 6
    31a0:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    31a4:	01 ff       	sbrs	r16, 1
    31a6:	04 c0       	rjmp	.+8      	; 0x31b0 <nrk_init+0x4c>
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	84 e1       	ldi	r24, 0x14	; 20
    31ac:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    31b0:	02 ff       	sbrs	r16, 2
    31b2:	04 c0       	rjmp	.+8      	; 0x31bc <nrk_init+0x58>
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	83 e1       	ldi	r24, 0x13	; 19
    31b8:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    31bc:	10 92 63 05 	sts	0x0563, r1
    nrk_cur_task_TCB = NULL;
    31c0:	10 92 71 05 	sts	0x0571, r1
    31c4:	10 92 70 05 	sts	0x0570, r1
    
    nrk_high_ready_TCB = NULL;
    31c8:	10 92 62 05 	sts	0x0562, r1
    31cc:	10 92 61 05 	sts	0x0561, r1
    nrk_high_ready_prio = 0; 
    31d0:	10 92 72 05 	sts	0x0572, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    31d4:	10 92 6f 05 	sts	0x056F, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    31d8:	8f ef       	ldi	r24, 0xFF	; 255
    31da:	80 93 59 05 	sts	0x0559, r24
    nrk_sem_list[i].value=-1;
    31de:	80 93 5b 05 	sts	0x055B, r24
    nrk_sem_list[i].resource_ceiling=-1;
    31e2:	80 93 5a 05 	sts	0x055A, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    31e6:	80 93 5c 05 	sts	0x055C, r24
    nrk_sem_list[i].value=-1;
    31ea:	80 93 5e 05 	sts	0x055E, r24
    nrk_sem_list[i].resource_ceiling=-1;
    31ee:	80 93 5d 05 	sts	0x055D, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    31f2:	93 e6       	ldi	r25, 0x63	; 99
    31f4:	90 93 1f 05 	sts	0x051F, r25
        nrk_task_TCB[i].task_ID = -1; 
    31f8:	80 93 1d 05 	sts	0x051D, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    31fc:	90 93 40 05 	sts	0x0540, r25
        nrk_task_TCB[i].task_ID = -1; 
    3200:	80 93 3e 05 	sts	0x053E, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3204:	88 e7       	ldi	r24, 0x78	; 120
    3206:	95 e0       	ldi	r25, 0x05	; 5
    3208:	90 93 77 05 	sts	0x0577, r25
    320c:	80 93 76 05 	sts	0x0576, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3210:	9c 01       	movw	r18, r24
    3212:	25 50       	subi	r18, 0x05	; 5
    3214:	30 40       	sbci	r19, 0x00	; 0
    3216:	30 93 7a 05 	sts	0x057A, r19
    321a:	20 93 79 05 	sts	0x0579, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    321e:	05 96       	adiw	r24, 0x05	; 5
    3220:	90 93 7c 05 	sts	0x057C, r25
    3224:	80 93 7b 05 	sts	0x057B, r24
    3228:	05 97       	sbiw	r24, 0x05	; 5
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    322a:	90 93 7f 05 	sts	0x057F, r25
    322e:	80 93 7e 05 	sts	0x057E, r24
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3232:	10 92 75 05 	sts	0x0575, r1
    3236:	10 92 74 05 	sts	0x0574, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    323a:	10 92 81 05 	sts	0x0581, r1
    323e:	10 92 80 05 	sts	0x0580, r1
	_head_node = NULL;
    3242:	10 92 66 05 	sts	0x0566, r1
    3246:	10 92 65 05 	sts	0x0565, r1
	_free_node = &_nrk_readyQ[0];
    324a:	30 93 14 05 	sts	0x0514, r19
    324e:	20 93 13 05 	sts	0x0513, r18
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3252:	67 e1       	ldi	r22, 0x17	; 23
    3254:	77 e2       	ldi	r23, 0x27	; 39
    3256:	8e 01       	movw	r16, r28
    3258:	0f 5f       	subi	r16, 0xFF	; 255
    325a:	1f 4f       	sbci	r17, 0xFF	; 255
    325c:	c8 01       	movw	r24, r16
    325e:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	66 e7       	ldi	r22, 0x76	; 118
    3268:	74 e0       	ldi	r23, 0x04	; 4
    326a:	c8 01       	movw	r24, r16
    326c:	0e 94 6a 2e 	call	0x5cd4	; 0x5cd4 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3270:	85 e5       	ldi	r24, 0x55	; 85
    3272:	80 93 76 04 	sts	0x0476, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3276:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    3278:	1c 86       	std	Y+12, r1	; 0x0c
    327a:	1d 86       	std	Y+13, r1	; 0x0d
    327c:	1e 86       	std	Y+14, r1	; 0x0e
    327e:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    3280:	18 8a       	std	Y+16, r1	; 0x10
    3282:	19 8a       	std	Y+17, r1	; 0x11
    3284:	1a 8a       	std	Y+18, r1	; 0x12
    3286:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    3288:	1c 8a       	std	Y+20, r1	; 0x14
    328a:	1d 8a       	std	Y+21, r1	; 0x15
    328c:	1e 8a       	std	Y+22, r1	; 0x16
    328e:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    3290:	18 8e       	std	Y+24, r1	; 0x18
    3292:	19 8e       	std	Y+25, r1	; 0x19
    3294:	1a 8e       	std	Y+26, r1	; 0x1a
    3296:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    3298:	1c 8e       	std	Y+28, r1	; 0x1c
    329a:	1d 8e       	std	Y+29, r1	; 0x1d
    329c:	1e 8e       	std	Y+30, r1	; 0x1e
    329e:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    32a0:	18 a2       	std	Y+32, r1	; 0x20
    32a2:	19 a2       	std	Y+33, r1	; 0x21
    32a4:	1a a2       	std	Y+34, r1	; 0x22
    32a6:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	98 87       	std	Y+8, r25	; 0x08
	IdleTask.Type = IDLE_TASK;
    32ac:	82 e0       	ldi	r24, 0x02	; 2
    32ae:	8a 87       	std	Y+10, r24	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    32b0:	9b 87       	std	Y+11, r25	; 0x0b
	nrk_activate_task(&IdleTask);
    32b2:	c8 01       	movw	r24, r16
    32b4:	0e 94 10 23 	call	0x4620	; 0x4620 <nrk_activate_task>
    32b8:	a3 96       	adiw	r28, 0x23	; 35
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	08 95       	ret

000032ce <nrk_halt>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    32ce:	f8 94       	cli
    32d0:	ff cf       	rjmp	.-2      	; 0x32d0 <nrk_halt+0x2>

000032d2 <_nrk_errno_set>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    32d2:	e0 91 70 05 	lds	r30, 0x0570
    32d6:	f0 91 71 05 	lds	r31, 0x0571
    32da:	84 87       	std	Z+12, r24	; 0x0c
    32dc:	08 95       	ret

000032de <nrk_errno_get>:

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    32de:	e0 91 70 05 	lds	r30, 0x0570
    32e2:	f0 91 71 05 	lds	r31, 0x0571
    32e6:	84 85       	ldd	r24, Z+12	; 0x0c

inline void nrk_int_enable(void) {
    32e8:	99 27       	eor	r25, r25
    32ea:	08 95       	ret

000032ec <nrk_error_get>:
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif
    32ec:	dc 01       	movw	r26, r24
    32ee:	fb 01       	movw	r30, r22

    32f0:	80 91 75 04 	lds	r24, 0x0475
    32f4:	88 23       	and	r24, r24
    32f6:	19 f4       	brne	.+6      	; 0x32fe <nrk_error_get+0x12>
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	08 95       	ret
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    32fe:	80 83       	st	Z, r24
    _nrk_reserve_init();
    3300:	80 91 c8 03 	lds	r24, 0x03C8
    3304:	8c 93       	st	X, r24
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    #endif

    330a:	08 95       	ret

0000330c <pause>:
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	21 97       	sbiw	r28, 0x01	; 1
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	19 82       	std	Y+1, r1	; 0x01
    3322:	07 c0       	rjmp	.+14     	; 0x3332 <pause+0x26>
    3324:	80 ed       	ldi	r24, 0xD0	; 208
    3326:	97 e0       	ldi	r25, 0x07	; 7
    3328:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	8f 5f       	subi	r24, 0xFF	; 255
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	84 36       	cpi	r24, 0x64	; 100
    3336:	b0 f3       	brcs	.-20     	; 0x3324 <pause+0x18>
    3338:	21 96       	adiw	r28, 0x01	; 1
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	08 95       	ret

0000334a <blink_dot>:
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
    3352:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    335e:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3362:	08 95       	ret

00003364 <blink_dash>:
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
    336c:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3370:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3374:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    3380:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    3384:	08 95       	ret

00003386 <blink_morse_code_error>:
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	23 97       	sbiw	r28, 0x03	; 3
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	99 27       	eor	r25, r25
    33a4:	9f 93       	push	r25
    33a6:	8f 93       	push	r24
    33a8:	8d e6       	ldi	r24, 0x6D	; 109
    33aa:	92 e0       	ldi	r25, 0x02	; 2
    33ac:	9f 93       	push	r25
    33ae:	8f 93       	push	r24
    33b0:	8e 01       	movw	r16, r28
    33b2:	0f 5f       	subi	r16, 0xFF	; 255
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	1f 93       	push	r17
    33b8:	0f 93       	push	r16
    33ba:	0e 94 41 37 	call	0x6e82	; 0x6e82 <sprintf>
    33be:	ee 24       	eor	r14, r14
    33c0:	ff 24       	eor	r15, r15
    33c2:	8d b7       	in	r24, 0x3d	; 61
    33c4:	9e b7       	in	r25, 0x3e	; 62
    33c6:	06 96       	adiw	r24, 0x06	; 6
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	9e bf       	out	0x3e, r25	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	8d bf       	out	0x3d, r24	; 61
    33d2:	73 c0       	rjmp	.+230    	; 0x34ba <blink_morse_code_error+0x134>
    33d4:	a0 0f       	add	r26, r16
    33d6:	b1 1f       	adc	r27, r17
    33d8:	8c 91       	ld	r24, X
    33da:	84 33       	cpi	r24, 0x34	; 52
    33dc:	d1 f1       	breq	.+116    	; 0x3452 <blink_morse_code_error+0xcc>
    33de:	85 33       	cpi	r24, 0x35	; 53
    33e0:	70 f4       	brcc	.+28     	; 0x33fe <blink_morse_code_error+0x78>
    33e2:	81 33       	cpi	r24, 0x31	; 49
    33e4:	f9 f0       	breq	.+62     	; 0x3424 <blink_morse_code_error+0x9e>
    33e6:	82 33       	cpi	r24, 0x32	; 50
    33e8:	20 f4       	brcc	.+8      	; 0x33f2 <blink_morse_code_error+0x6c>
    33ea:	80 33       	cpi	r24, 0x30	; 48
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <blink_morse_code_error+0x6a>
    33ee:	5c c0       	rjmp	.+184    	; 0x34a8 <blink_morse_code_error+0x122>
    33f0:	16 c0       	rjmp	.+44     	; 0x341e <blink_morse_code_error+0x98>
    33f2:	82 33       	cpi	r24, 0x32	; 50
    33f4:	11 f1       	breq	.+68     	; 0x343a <blink_morse_code_error+0xb4>
    33f6:	83 33       	cpi	r24, 0x33	; 51
    33f8:	09 f0       	breq	.+2      	; 0x33fc <blink_morse_code_error+0x76>
    33fa:	56 c0       	rjmp	.+172    	; 0x34a8 <blink_morse_code_error+0x122>
    33fc:	23 c0       	rjmp	.+70     	; 0x3444 <blink_morse_code_error+0xbe>
    33fe:	87 33       	cpi	r24, 0x37	; 55
    3400:	c9 f1       	breq	.+114    	; 0x3474 <blink_morse_code_error+0xee>
    3402:	88 33       	cpi	r24, 0x38	; 56
    3404:	30 f4       	brcc	.+12     	; 0x3412 <blink_morse_code_error+0x8c>
    3406:	85 33       	cpi	r24, 0x35	; 53
    3408:	69 f1       	breq	.+90     	; 0x3464 <blink_morse_code_error+0xde>
    340a:	86 33       	cpi	r24, 0x36	; 54
    340c:	09 f0       	breq	.+2      	; 0x3410 <blink_morse_code_error+0x8a>
    340e:	4c c0       	rjmp	.+152    	; 0x34a8 <blink_morse_code_error+0x122>
    3410:	2c c0       	rjmp	.+88     	; 0x346a <blink_morse_code_error+0xe4>
    3412:	88 33       	cpi	r24, 0x38	; 56
    3414:	b1 f1       	breq	.+108    	; 0x3482 <blink_morse_code_error+0xfc>
    3416:	89 33       	cpi	r24, 0x39	; 57
    3418:	09 f0       	breq	.+2      	; 0x341c <blink_morse_code_error+0x96>
    341a:	46 c0       	rjmp	.+140    	; 0x34a8 <blink_morse_code_error+0x122>
    341c:	3b c0       	rjmp	.+118    	; 0x3494 <blink_morse_code_error+0x10e>
    341e:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <blink_morse_code_error+0xa2>
    3424:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3428:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    342c:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3430:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3434:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3438:	37 c0       	rjmp	.+110    	; 0x34a8 <blink_morse_code_error+0x122>
    343a:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    343e:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3442:	f4 cf       	rjmp	.-24     	; 0x342c <blink_morse_code_error+0xa6>
    3444:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3448:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    344c:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3450:	ef cf       	rjmp	.-34     	; 0x3430 <blink_morse_code_error+0xaa>
    3452:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3456:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    345a:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    345e:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3462:	e8 cf       	rjmp	.-48     	; 0x3434 <blink_morse_code_error+0xae>
    3464:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3468:	02 c0       	rjmp	.+4      	; 0x346e <blink_morse_code_error+0xe8>
    346a:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    346e:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3472:	04 c0       	rjmp	.+8      	; 0x347c <blink_morse_code_error+0xf6>
    3474:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3478:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    347c:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3480:	06 c0       	rjmp	.+12     	; 0x348e <blink_morse_code_error+0x108>
    3482:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3486:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    348a:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    348e:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <blink_morse_code_error+0x11e>
    3494:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    3498:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    349c:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    34a0:	0e 94 b2 19 	call	0x3364	; 0x3364 <blink_dash>
    34a4:	0e 94 a5 19 	call	0x334a	; 0x334a <blink_dot>
    34a8:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    34ac:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    34b0:	0e 94 86 19 	call	0x330c	; 0x330c <pause>
    34b4:	08 94       	sec
    34b6:	e1 1c       	adc	r14, r1
    34b8:	f1 1c       	adc	r15, r1
    34ba:	ae 2d       	mov	r26, r14
    34bc:	bb 27       	eor	r27, r27
    34be:	f8 01       	movw	r30, r16
    34c0:	01 90       	ld	r0, Z+
    34c2:	00 20       	and	r0, r0
    34c4:	e9 f7       	brne	.-6      	; 0x34c0 <blink_morse_code_error+0x13a>
    34c6:	31 97       	sbiw	r30, 0x01	; 1
    34c8:	e0 1b       	sub	r30, r16
    34ca:	f1 0b       	sbc	r31, r17
    34cc:	ae 17       	cp	r26, r30
    34ce:	bf 07       	cpc	r27, r31
    34d0:	08 f4       	brcc	.+2      	; 0x34d4 <blink_morse_code_error+0x14e>
    34d2:	80 cf       	rjmp	.-256    	; 0x33d4 <blink_morse_code_error+0x4e>
    34d4:	23 96       	adiw	r28, 0x03	; 3
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	ff 90       	pop	r15
    34ea:	ef 90       	pop	r14
    34ec:	08 95       	ret

000034ee <nrk_error_print>:
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
{
    nrk_sem_list[i].count=-1;
    34f2:	80 91 75 04 	lds	r24, 0x0475
    34f6:	88 23       	and	r24, r24
    34f8:	09 f4       	brne	.+2      	; 0x34fc <nrk_error_print+0xe>
    34fa:	be c0       	rjmp	.+380    	; 0x3678 <nrk_error_print+0x18a>
    nrk_sem_list[i].value=-1;
    nrk_sem_list[i].resource_ceiling=-1;
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    34fc:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    3500:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
    3504:	8d e7       	ldi	r24, 0x7D	; 125
    3506:	93 e0       	ldi	r25, 0x03	; 3
    3508:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
	
    350c:	80 91 c8 03 	lds	r24, 0x03C8
    3510:	99 27       	eor	r25, r25
    3512:	9f 93       	push	r25
    3514:	8f 93       	push	r24
    3516:	8d e6       	ldi	r24, 0x6D	; 109
    3518:	92 e0       	ldi	r25, 0x02	; 2
    351a:	9f 93       	push	r25
    351c:	8f 93       	push	r24
    351e:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

    3522:	89 e7       	ldi	r24, 0x79	; 121
    3524:	93 e0       	ldi	r25, 0x03	; 3
    3526:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	80 91 75 04 	lds	r24, 0x0475
    3536:	87 31       	cpi	r24, 0x17	; 23
    3538:	10 f0       	brcs	.+4      	; 0x353e <nrk_error_print+0x50>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    353a:	10 92 75 04 	sts	0x0475, r1
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    353e:	80 91 75 04 	lds	r24, 0x0475
    3542:	99 27       	eor	r25, r25
    3544:	aa 27       	eor	r26, r26
    3546:	bb 27       	eor	r27, r27
    3548:	fc 01       	movw	r30, r24
    354a:	31 97       	sbiw	r30, 0x01	; 1
    354c:	e5 31       	cpi	r30, 0x15	; 21
    354e:	f1 05       	cpc	r31, r1
    3550:	08 f0       	brcs	.+2      	; 0x3554 <nrk_error_print+0x66>
    3552:	47 c0       	rjmp	.+142    	; 0x35e2 <nrk_error_print+0xf4>
    3554:	ea 59       	subi	r30, 0x9A	; 154
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	05 90       	lpm	r0, Z+
    355e:	f4 91       	lpm	r31, Z
    3560:	e0 2d       	mov	r30, r0
    3562:	09 94       	ijmp
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
    3564:	82 e5       	ldi	r24, 0x52	; 82
    3566:	93 e0       	ldi	r25, 0x03	; 3
    3568:	3e c0       	rjmp	.+124    	; 0x35e6 <nrk_error_print+0xf8>
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    356a:	8e e3       	ldi	r24, 0x3E	; 62
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	3b c0       	rjmp	.+118    	; 0x35e6 <nrk_error_print+0xf8>
	IdleTask.offset.secs = 0;
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    3570:	88 e2       	ldi	r24, 0x28	; 40
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	38 c0       	rjmp	.+112    	; 0x35e6 <nrk_error_print+0xf8>
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
    3576:	8d e0       	ldi	r24, 0x0D	; 13
    3578:	93 e0       	ldi	r25, 0x03	; 3
    357a:	35 c0       	rjmp	.+106    	; 0x35e6 <nrk_error_print+0xf8>
	
}

    357c:	87 ef       	ldi	r24, 0xF7	; 247
    357e:	92 e0       	ldi	r25, 0x02	; 2
    3580:	32 c0       	rjmp	.+100    	; 0x35e6 <nrk_error_print+0xf8>



    3582:	8f ed       	ldi	r24, 0xDF	; 223
    3584:	92 e0       	ldi	r25, 0x02	; 2
    3586:	2f c0       	rjmp	.+94     	; 0x35e6 <nrk_error_print+0xf8>



    3588:	8c ec       	ldi	r24, 0xCC	; 204
    358a:	92 e0       	ldi	r25, 0x02	; 2
    358c:	2c c0       	rjmp	.+88     	; 0x35e6 <nrk_error_print+0xf8>

void nrk_start (void)
{
    358e:	89 eb       	ldi	r24, 0xB9	; 185
    3590:	92 e0       	ldi	r25, 0x02	; 2
    3592:	29 c0       	rjmp	.+82     	; 0x35e6 <nrk_error_print+0xf8>
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    3594:	8b e9       	ldi	r24, 0x9B	; 155
    3596:	92 e0       	ldi	r25, 0x02	; 2
    3598:	26 c0       	rjmp	.+76     	; 0x35e6 <nrk_error_print+0xf8>
//	unsigned char *stkc;

	/*
    359a:	86 e7       	ldi	r24, 0x76	; 118
    359c:	92 e0       	ldi	r25, 0x02	; 2
    359e:	23 c0       	rjmp	.+70     	; 0x35e6 <nrk_error_print+0xf8>
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    35a0:	8a e6       	ldi	r24, 0x6A	; 106
    35a2:	92 e0       	ldi	r25, 0x02	; 2
    35a4:	20 c0       	rjmp	.+64     	; 0x35e6 <nrk_error_print+0xf8>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
    35a6:	8f e4       	ldi	r24, 0x4F	; 79
    35a8:	92 e0       	ldi	r25, 0x02	; 2
    35aa:	1d c0       	rjmp	.+58     	; 0x35e6 <nrk_error_print+0xf8>
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    35ac:	80 e4       	ldi	r24, 0x40	; 64
    35ae:	92 e0       	ldi	r25, 0x02	; 2
    35b0:	1a c0       	rjmp	.+52     	; 0x35e6 <nrk_error_print+0xf8>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
    35b2:	8c e2       	ldi	r24, 0x2C	; 44
    35b4:	92 e0       	ldi	r25, 0x02	; 2
    35b6:	17 c0       	rjmp	.+46     	; 0x35e6 <nrk_error_print+0xf8>
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    35b8:	8b e1       	ldi	r24, 0x1B	; 27
    35ba:	92 e0       	ldi	r25, 0x02	; 2
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <nrk_error_print+0xf8>

			}
		}
    35be:	87 e0       	ldi	r24, 0x07	; 7
    35c0:	92 e0       	ldi	r25, 0x02	; 2
    35c2:	11 c0       	rjmp	.+34     	; 0x35e6 <nrk_error_print+0xf8>
	}

    }
    35c4:	87 ee       	ldi	r24, 0xE7	; 231
    35c6:	91 e0       	ldi	r25, 0x01	; 1
    35c8:	0e c0       	rjmp	.+28     	; 0x35e6 <nrk_error_print+0xf8>

    task_ID = nrk_get_high_ready_task_ID();	
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    35ca:	8f ec       	ldi	r24, 0xCF	; 207
    35cc:	91 e0       	ldi	r25, 0x01	; 1
    35ce:	0b c0       	rjmp	.+22     	; 0x35e6 <nrk_error_print+0xf8>
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
    35d0:	84 eb       	ldi	r24, 0xB4	; 180
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	08 c0       	rjmp	.+16     	; 0x35e6 <nrk_error_print+0xf8>
//    nrk_stack_pointer_restore();

    /*
    35d6:	83 ea       	ldi	r24, 0xA3	; 163
    35d8:	91 e0       	ldi	r25, 0x01	; 1
    35da:	05 c0       	rjmp	.+10     	; 0x35e6 <nrk_error_print+0xf8>
    #ifdef KERNEL_STK_ARRAY
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    35dc:	84 e9       	ldi	r24, 0x94	; 148
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <nrk_error_print+0xf8>
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    35e2:	8d e8       	ldi	r24, 0x8D	; 141
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    35ea:	60 91 93 05 	lds	r22, 0x0593
    35ee:	70 91 94 05 	lds	r23, 0x0594
    35f2:	8d e0       	ldi	r24, 0x0D	; 13
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
    //TODO: this way on msp
    35fa:	60 91 93 05 	lds	r22, 0x0593
    35fe:	70 91 94 05 	lds	r23, 0x0594
    3602:	8a e0       	ldi	r24, 0x0A	; 10
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
    360a:	00 e0       	ldi	r16, 0x00	; 0
    360c:	21 c0       	rjmp	.+66     	; 0x3650 <nrk_error_print+0x162>
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
    3616:	83 e0       	ldi	r24, 0x03	; 3
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    361e:	10 e0       	ldi	r17, 0x00	; 0
    3620:	88 ee       	ldi	r24, 0xE8	; 232
    3622:	93 e0       	ldi	r25, 0x03	; 3
    3624:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    3628:	1f 5f       	subi	r17, 0xFF	; 255
    362a:	14 36       	cpi	r17, 0x64	; 100
    362c:	c9 f7       	brne	.-14     	; 0x3620 <nrk_error_print+0x132>
    362e:	83 e0       	ldi	r24, 0x03	; 3
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    363e:	10 e0       	ldi	r17, 0x00	; 0
    3640:	88 ee       	ldi	r24, 0xE8	; 232
    3642:	93 e0       	ldi	r25, 0x03	; 3
    3644:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
    3648:	1f 5f       	subi	r17, 0xFF	; 255
    364a:	14 36       	cpi	r17, 0x64	; 100
    364c:	c9 f7       	brne	.-14     	; 0x3640 <nrk_error_print+0x152>
    364e:	0f 5f       	subi	r16, 0xFF	; 255
    3650:	04 31       	cpi	r16, 0x14	; 20
    3652:	ec f2       	brlt	.-70     	; 0x360e <nrk_error_print+0x120>
    3654:	83 e0       	ldi	r24, 0x03	; 3
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    3664:	80 91 c8 03 	lds	r24, 0x03C8
    3668:	0e 94 c3 19 	call	0x3386	; 0x3386 <blink_morse_code_error>
    366c:	80 91 75 04 	lds	r24, 0x0475
    3670:	0e 94 c3 19 	call	0x3386	; 0x3386 <blink_morse_code_error>
    3674:	00 e0       	ldi	r16, 0x00	; 0
    3676:	cb cf       	rjmp	.-106    	; 0x360e <nrk_error_print+0x120>
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	08 95       	ret

00003682 <nrk_kernel_error_add>:
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	e8 2e       	mov	r14, r24
    368c:	f6 2e       	mov	r15, r22
#endif
    368e:	80 93 75 04 	sts	0x0475, r24
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3692:	60 93 c8 03 	sts	0x03C8, r22

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif


    3696:	0e 94 77 1a 	call	0x34ee	; 0x34ee <nrk_error_print>
    369a:	00 e0       	ldi	r16, 0x00	; 0
    369c:	21 c0       	rjmp	.+66     	; 0x36e0 <nrk_kernel_error_add+0x5e>
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    36a6:	83 e0       	ldi	r24, 0x03	; 3
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    36ae:	10 e0       	ldi	r17, 0x00	; 0
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    36b0:	88 ee       	ldi	r24, 0xE8	; 232
    36b2:	93 e0       	ldi	r25, 0x03	; 3
    36b4:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    36b8:	1f 5f       	subi	r17, 0xFF	; 255
    36ba:	14 36       	cpi	r17, 0x64	; 100
    36bc:	c9 f7       	brne	.-14     	; 0x36b0 <nrk_kernel_error_add+0x2e>
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <nrk_led_set>
    	*stkc = STK_CANARY_VAL;
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    36ce:	10 e0       	ldi	r17, 0x00	; 0
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    36d0:	88 ee       	ldi	r24, 0xE8	; 232
    36d2:	93 e0       	ldi	r25, 0x03	; 3
    36d4:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    36d8:	1f 5f       	subi	r17, 0xFF	; 255
    36da:	14 36       	cpi	r17, 0x64	; 100
    36dc:	c9 f7       	brne	.-14     	; 0x36d0 <nrk_kernel_error_add+0x4e>
	}
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    36de:	0f 5f       	subi	r16, 0xFF	; 255
    36e0:	04 31       	cpi	r16, 0x14	; 20
    36e2:	e8 f2       	brcs	.-70     	; 0x369e <nrk_kernel_error_add+0x1c>
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    36e4:	83 e0       	ldi	r24, 0x03	; 3
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_led_clr>
*/	
    36f4:	8f 2d       	mov	r24, r15
    36f6:	0e 94 c3 19 	call	0x3386	; 0x3386 <blink_morse_code_error>
 
    36fa:	8e 2d       	mov	r24, r14
    36fc:	0e 94 c3 19 	call	0x3386	; 0x3386 <blink_morse_code_error>
    3700:	00 e0       	ldi	r16, 0x00	; 0
    3702:	cd cf       	rjmp	.-102    	; 0x369e <nrk_kernel_error_add+0x1c>

00003704 <nrk_error_add>:
 */
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
    3704:	80 93 75 04 	sts	0x0475, r24
	
    3708:	e0 91 70 05 	lds	r30, 0x0570
    370c:	f0 91 71 05 	lds	r31, 0x0571
    3710:	80 85       	ldd	r24, Z+8	; 0x08
    3712:	80 93 c8 03 	sts	0x03C8, r24
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3716:	0e 94 77 1a 	call	0x34ee	; 0x34ee <nrk_error_print>
    371a:	08 95       	ret

0000371c <nrk_stack_check_pid>:
    371c:	99 27       	eor	r25, r25
    371e:	87 fd       	sbrc	r24, 7
    3720:	90 95       	com	r25
    3722:	fc 01       	movw	r30, r24
    3724:	25 e0       	ldi	r18, 0x05	; 5
    3726:	ee 0f       	add	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	2a 95       	dec	r18
    372c:	e1 f7       	brne	.-8      	; 0x3726 <nrk_stack_check_pid+0xa>
    372e:	e8 0f       	add	r30, r24
    3730:	f9 1f       	adc	r31, r25
    3732:	eb 5e       	subi	r30, 0xEB	; 235
    3734:	fa 4f       	sbci	r31, 0xFA	; 250
    3736:	a2 81       	ldd	r26, Z+2	; 0x02
    3738:	b3 81       	ldd	r27, Z+3	; 0x03
    373a:	8c 91       	ld	r24, X
    373c:	85 35       	cpi	r24, 0x55	; 85
    373e:	29 f0       	breq	.+10     	; 0x374a <nrk_stack_check_pid+0x2e>
    3740:	85 e5       	ldi	r24, 0x55	; 85
    3742:	8c 93       	st	X, r24
    3744:	8f ef       	ldi	r24, 0xFF	; 255
    3746:	9f ef       	ldi	r25, 0xFF	; 255
    3748:	08 95       	ret
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	80 50       	subi	r24, 0x00	; 0
    3750:	92 42       	sbci	r25, 0x22	; 34
    3752:	18 f4       	brcc	.+6      	; 0x375a <nrk_stack_check_pid+0x3e>
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	08 95       	ret
    375a:	82 e1       	ldi	r24, 0x12	; 18
    375c:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    3760:	8f ef       	ldi	r24, 0xFF	; 255
    3762:	9f ef       	ldi	r25, 0xFF	; 255
    3764:	08 95       	ret

00003766 <dump_stack_info>:
#include <ulib.h>



//-------------------------------------------------------------------------------------------------------
//	void halRfSetChannel(UINT8 Channel)
    3766:	6f 92       	push	r6
    3768:	7f 92       	push	r7
    376a:	8f 92       	push	r8
    376c:	9f 92       	push	r9
    376e:	af 92       	push	r10
    3770:	bf 92       	push	r11
    3772:	cf 92       	push	r12
    3774:	df 92       	push	r13
    3776:	ef 92       	push	r14
    3778:	ff 92       	push	r15
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
//
//	DESCRIPTION:
//		Programs CC2420 for a given IEEE 802.15.4 channel. 
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
//
    3782:	89 e8       	ldi	r24, 0x89	; 137
    3784:	93 e0       	ldi	r25, 0x03	; 3
    3786:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <nrk_kprintf>
//	PARAMETERS:
//		UINT8 channel
    378a:	e0 91 70 05 	lds	r30, 0x0570
    378e:	f0 91 71 05 	lds	r31, 0x0571
    3792:	80 85       	ldd	r24, Z+8	; 0x08
    3794:	99 27       	eor	r25, r25
    3796:	87 fd       	sbrc	r24, 7
    3798:	90 95       	com	r25
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	80 e7       	ldi	r24, 0x70	; 112
    37a0:	92 e0       	ldi	r25, 0x02	; 2
    37a2:	9f 93       	push	r25
    37a4:	8f 93       	push	r24
    37a6:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
//			The channel number (11-26)
    37aa:	e0 91 70 05 	lds	r30, 0x0570
    37ae:	f0 91 71 05 	lds	r31, 0x0571
    37b2:	02 81       	ldd	r16, Z+2	; 0x02
    37b4:	13 81       	ldd	r17, Z+3	; 0x03
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
    37b6:	1f 93       	push	r17
    37b8:	0f 93       	push	r16
    37ba:	89 e7       	ldi	r24, 0x79	; 121
    37bc:	92 e0       	ldi	r25, 0x02	; 2
    37be:	9f 93       	push	r25
    37c0:	8f 93       	push	r24
    37c2:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
	uint16_t f;
    37c6:	f8 01       	movw	r30, r16
    37c8:	80 81       	ld	r24, Z
    37ca:	99 27       	eor	r25, r25
    37cc:	9f 93       	push	r25
    37ce:	8f 93       	push	r24
    37d0:	56 e8       	ldi	r21, 0x86	; 134
    37d2:	c5 2e       	mov	r12, r21
    37d4:	52 e0       	ldi	r21, 0x02	; 2
    37d6:	d5 2e       	mov	r13, r21
    37d8:	df 92       	push	r13
    37da:	cf 92       	push	r12
    37dc:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    37e0:	e0 91 70 05 	lds	r30, 0x0570
    37e4:	f0 91 71 05 	lds	r31, 0x0571
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	9f 93       	push	r25
    37ee:	8f 93       	push	r24
    37f0:	43 e9       	ldi	r20, 0x93	; 147
    37f2:	e4 2e       	mov	r14, r20
    37f4:	42 e0       	ldi	r20, 0x02	; 2
    37f6:	f4 2e       	mov	r15, r20
    37f8:	ff 92       	push	r15
    37fa:	ef 92       	push	r14
    37fc:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    3800:	80 91 70 05 	lds	r24, 0x0570
    3804:	90 91 71 05 	lds	r25, 0x0571
    3808:	9f 93       	push	r25
    380a:	8f 93       	push	r24
    380c:	0d e9       	ldi	r16, 0x9D	; 157
    380e:	12 e0       	ldi	r17, 0x02	; 2
    3810:	1f 93       	push	r17
    3812:	0f 93       	push	r16
    3814:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
    3818:	c5 e1       	ldi	r28, 0x15	; 21
    381a:	d5 e0       	ldi	r29, 0x05	; 5
    381c:	aa 24       	eor	r10, r10
    381e:	bb 24       	eor	r11, r11
    3820:	8d b7       	in	r24, 0x3d	; 61
    3822:	9e b7       	in	r25, 0x3e	; 62
    3824:	44 96       	adiw	r24, 0x14	; 20
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	9e bf       	out	0x3e, r25	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	8d bf       	out	0x3d, r24	; 61
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();
    3830:	3d ea       	ldi	r19, 0xAD	; 173
    3832:	63 2e       	mov	r6, r19
    3834:	32 e0       	ldi	r19, 0x02	; 2
    3836:	73 2e       	mov	r7, r19

    3838:	46 01       	movw	r8, r12
} // rfSetChannel


    383a:	67 01       	movw	r12, r14
    383c:	78 01       	movw	r14, r16
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    383e:	0a 81       	ldd	r16, Y+2	; 0x02
    3840:	1b 81       	ldd	r17, Y+3	; 0x03
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();
    3842:	1f 93       	push	r17
    3844:	0f 93       	push	r16
    3846:	bf 92       	push	r11
    3848:	af 92       	push	r10
    384a:	7f 92       	push	r7
    384c:	6f 92       	push	r6
    384e:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>

    3852:	f8 01       	movw	r30, r16
    3854:	80 81       	ld	r24, Z
    3856:	99 27       	eor	r25, r25
    3858:	9f 93       	push	r25
    385a:	8f 93       	push	r24
    385c:	9f 92       	push	r9
    385e:	8f 92       	push	r8
    3860:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
} // rfSetChannel


    3864:	88 81       	ld	r24, Y
    3866:	99 81       	ldd	r25, Y+1	; 0x01
    3868:	9f 93       	push	r25
    386a:	8f 93       	push	r24
    386c:	df 92       	push	r13
    386e:	cf 92       	push	r12
    3870:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
    3874:	df 93       	push	r29
    3876:	cf 93       	push	r28
    3878:	ff 92       	push	r15
    387a:	ef 92       	push	r14
    387c:	0e 94 f7 36 	call	0x6dee	; 0x6dee <printf>
    3880:	08 94       	sec
    3882:	a1 1c       	adc	r10, r1
    3884:	b1 1c       	adc	r11, r1
    3886:	a1 96       	adiw	r28, 0x21	; 33
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    3888:	8d b7       	in	r24, 0x3d	; 61
    388a:	9e b7       	in	r25, 0x3e	; 62
    388c:	42 96       	adiw	r24, 0x12	; 18
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	9e bf       	out	0x3e, r25	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	8d bf       	out	0x3d, r24	; 61
    3898:	92 e0       	ldi	r25, 0x02	; 2
    389a:	a9 16       	cp	r10, r25
    389c:	b1 04       	cpc	r11, r1
    389e:	79 f6       	brne	.-98     	; 0x383e <dump_stack_info+0xd8>
    38a0:	df 91       	pop	r29
    38a2:	cf 91       	pop	r28
    38a4:	1f 91       	pop	r17
    38a6:	0f 91       	pop	r16
    38a8:	ff 90       	pop	r15
    38aa:	ef 90       	pop	r14
    38ac:	df 90       	pop	r13
    38ae:	cf 90       	pop	r12
    38b0:	bf 90       	pop	r11
    38b2:	af 90       	pop	r10
    38b4:	9f 90       	pop	r9
    38b6:	8f 90       	pop	r8
    38b8:	7f 90       	pop	r7
    38ba:	6f 90       	pop	r6
    38bc:	08 95       	ret

000038be <nrk_stack_check>:
    38be:	cf 93       	push	r28
    38c0:	df 93       	push	r29
    38c2:	e0 91 70 05 	lds	r30, 0x0570
    38c6:	f0 91 71 05 	lds	r31, 0x0571
    38ca:	c2 81       	ldd	r28, Z+2	; 0x02
    38cc:	d3 81       	ldd	r29, Z+3	; 0x03
    38ce:	88 81       	ld	r24, Y
    38d0:	85 35       	cpi	r24, 0x55	; 85
    38d2:	39 f0       	breq	.+14     	; 0x38e2 <nrk_stack_check+0x24>
    38d4:	0e 94 b3 1b 	call	0x3766	; 0x3766 <dump_stack_info>
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    38de:	85 e5       	ldi	r24, 0x55	; 85
    38e0:	88 83       	st	Y, r24
    38e2:	e0 91 70 05 	lds	r30, 0x0570
    38e6:	f0 91 71 05 	lds	r31, 0x0571
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	80 50       	subi	r24, 0x00	; 0
    38f0:	92 42       	sbci	r25, 0x22	; 34
    38f2:	28 f0       	brcs	.+10     	; 0x38fe <nrk_stack_check+0x40>
    38f4:	0e 94 b3 1b 	call	0x3766	; 0x3766 <dump_stack_info>
    38f8:	82 e1       	ldi	r24, 0x12	; 18
    38fa:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	08 95       	ret

00003904 <nrk_signal_create>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    3904:	40 91 ed 03 	lds	r20, 0x03ED
    3908:	50 91 ee 03 	lds	r21, 0x03EE
    390c:	60 91 ef 03 	lds	r22, 0x03EF
    3910:	70 91 f0 03 	lds	r23, 0x03F0
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	db 01       	movw	r26, r22
    391a:	ca 01       	movw	r24, r20
    391c:	02 2e       	mov	r0, r18
    391e:	04 c0       	rjmp	.+8      	; 0x3928 <nrk_signal_create+0x24>
    3920:	b6 95       	lsr	r27
    3922:	a7 95       	ror	r26
    3924:	97 95       	ror	r25
    3926:	87 95       	ror	r24
    3928:	0a 94       	dec	r0
    392a:	d2 f7       	brpl	.-12     	; 0x3920 <nrk_signal_create+0x1c>
    392c:	81 70       	andi	r24, 0x01	; 1
    392e:	90 70       	andi	r25, 0x00	; 0
    3930:	89 2b       	or	r24, r25
    3932:	e9 f4       	brne	.+58     	; 0x396e <nrk_signal_create+0x6a>

inline void nrk_int_disable(void) {
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 e0       	ldi	r26, 0x00	; 0
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	02 2e       	mov	r0, r18
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <nrk_signal_create+0x44>
    3940:	88 0f       	add	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	aa 1f       	adc	r26, r26
    3946:	bb 1f       	adc	r27, r27
    3948:	0a 94       	dec	r0
    394a:	d2 f7       	brpl	.-12     	; 0x3940 <nrk_signal_create+0x3c>
    394c:	84 2b       	or	r24, r20
    394e:	95 2b       	or	r25, r21
    3950:	a6 2b       	or	r26, r22
    3952:	b7 2b       	or	r27, r23
    3954:	80 93 ed 03 	sts	0x03ED, r24
    3958:	90 93 ee 03 	sts	0x03EE, r25
    395c:	a0 93 ef 03 	sts	0x03EF, r26
    3960:	b0 93 f0 03 	sts	0x03F0, r27
  DISABLE_GLOBAL_INT();
    3964:	82 2f       	mov	r24, r18
    3966:	99 27       	eor	r25, r25
    3968:	87 fd       	sbrc	r24, 7
    396a:	90 95       	com	r25
    396c:	08 95       	ret
    396e:	2f 5f       	subi	r18, 0xFF	; 255
    3970:	3f 4f       	sbci	r19, 0xFF	; 255
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
    3972:	20 32       	cpi	r18, 0x20	; 32
    3974:	31 05       	cpc	r19, r1
    3976:	81 f6       	brne	.-96     	; 0x3918 <nrk_signal_create+0x14>
    3978:	8f ef       	ldi	r24, 0xFF	; 255
    397a:	9f ef       	ldi	r25, 0xFF	; 255
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};

    397c:	08 95       	ret

0000397e <nrk_signal_get_registered_mask>:
uint8_t nrk_task_init_cnt;


    397e:	e0 91 70 05 	lds	r30, 0x0570
    3982:	f0 91 71 05 	lds	r31, 0x0571
    3986:	65 85       	ldd	r22, Z+13	; 0x0d
    3988:	76 85       	ldd	r23, Z+14	; 0x0e
    398a:	87 85       	ldd	r24, Z+15	; 0x0f
    398c:	90 89       	ldd	r25, Z+16	; 0x10
    398e:	08 95       	ret

00003990 <nrk_signal_unregister>:
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
#endif

   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17



    3998:	21 e0       	ldi	r18, 0x01	; 1
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	50 e0       	ldi	r21, 0x00	; 0
    39a0:	04 c0       	rjmp	.+8      	; 0x39aa <nrk_signal_unregister+0x1a>
    39a2:	22 0f       	add	r18, r18
    39a4:	33 1f       	adc	r19, r19
    39a6:	44 1f       	adc	r20, r20
    39a8:	55 1f       	adc	r21, r21
    39aa:	8a 95       	dec	r24
    39ac:	d2 f7       	brpl	.-12     	; 0x39a2 <nrk_signal_unregister+0x12>

   #ifdef NRK_REBOOT_ON_ERROR
    39ae:	e0 91 70 05 	lds	r30, 0x0570
    39b2:	f0 91 71 05 	lds	r31, 0x0571
    39b6:	e5 84       	ldd	r14, Z+13	; 0x0d
    39b8:	f6 84       	ldd	r15, Z+14	; 0x0e
    39ba:	07 85       	ldd	r16, Z+15	; 0x0f
    39bc:	10 89       	ldd	r17, Z+16	; 0x10
    39be:	da 01       	movw	r26, r20
    39c0:	c9 01       	movw	r24, r18
    39c2:	8e 21       	and	r24, r14
    39c4:	9f 21       	and	r25, r15
    39c6:	a0 23       	and	r26, r16
    39c8:	b1 23       	and	r27, r17
    39ca:	00 97       	sbiw	r24, 0x00	; 0
    39cc:	a1 05       	cpc	r26, r1
    39ce:	b1 05       	cpc	r27, r1
    39d0:	19 f4       	brne	.+6      	; 0x39d8 <nrk_signal_unregister+0x48>
    39d2:	8f ef       	ldi	r24, 0xFF	; 255
    39d4:	9f ef       	ldi	r25, 0xFF	; 255
    39d6:	1a c0       	rjmp	.+52     	; 0x3a0c <nrk_signal_unregister+0x7c>
   #ifndef NRK_WATCHDOG
   while(1)
    39d8:	20 95       	com	r18
    39da:	30 95       	com	r19
    39dc:	40 95       	com	r20
    39de:	50 95       	com	r21
    39e0:	e2 22       	and	r14, r18
    39e2:	f3 22       	and	r15, r19
    39e4:	04 23       	and	r16, r20
    39e6:	15 23       	and	r17, r21
    39e8:	e5 86       	std	Z+13, r14	; 0x0d
    39ea:	f6 86       	std	Z+14, r15	; 0x0e
    39ec:	07 87       	std	Z+15, r16	; 0x0f
    39ee:	10 8b       	std	Z+16, r17	; 0x10
	   {
    39f0:	81 89       	ldd	r24, Z+17	; 0x11
    39f2:	92 89       	ldd	r25, Z+18	; 0x12
    39f4:	a3 89       	ldd	r26, Z+19	; 0x13
    39f6:	b4 89       	ldd	r27, Z+20	; 0x14
    39f8:	82 23       	and	r24, r18
    39fa:	93 23       	and	r25, r19
    39fc:	a4 23       	and	r26, r20
    39fe:	b5 23       	and	r27, r21
    3a00:	81 8b       	std	Z+17, r24	; 0x11
    3a02:	92 8b       	std	Z+18, r25	; 0x12
    3a04:	a3 8b       	std	Z+19, r26	; 0x13
    3a06:	b4 8b       	std	Z+20, r27	; 0x14
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	1f 91       	pop	r17
    3a0e:	0f 91       	pop	r16
    3a10:	ff 90       	pop	r15
    3a12:	ef 90       	pop	r14
    3a14:	08 95       	ret

00003a16 <nrk_signal_register>:
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
    3a16:	68 2f       	mov	r22, r24
    3a18:	77 27       	eor	r23, r23
    3a1a:	67 fd       	sbrc	r22, 7
    3a1c:	70 95       	com	r23
    3a1e:	80 91 ed 03 	lds	r24, 0x03ED
    3a22:	90 91 ee 03 	lds	r25, 0x03EE
    3a26:	a0 91 ef 03 	lds	r26, 0x03EF
    3a2a:	b0 91 f0 03 	lds	r27, 0x03F0
    3a2e:	06 2e       	mov	r0, r22
    3a30:	04 c0       	rjmp	.+8      	; 0x3a3a <nrk_signal_register+0x24>
    3a32:	b6 95       	lsr	r27
    3a34:	a7 95       	ror	r26
    3a36:	97 95       	ror	r25
    3a38:	87 95       	ror	r24
    3a3a:	0a 94       	dec	r0
    3a3c:	d2 f7       	brpl	.-12     	; 0x3a32 <nrk_signal_register+0x1c>
    3a3e:	81 70       	andi	r24, 0x01	; 1
    3a40:	90 70       	andi	r25, 0x00	; 0
    3a42:	89 2b       	or	r24, r25
    3a44:	19 f4       	brne	.+6      	; 0x3a4c <nrk_signal_register+0x36>
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	9f ef       	ldi	r25, 0xFF	; 255
    3a4a:	08 95       	ret
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    3a4c:	e0 91 70 05 	lds	r30, 0x0570
    3a50:	f0 91 71 05 	lds	r31, 0x0571
    3a54:	21 e0       	ldi	r18, 0x01	; 1
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	04 c0       	rjmp	.+8      	; 0x3a66 <nrk_signal_register+0x50>
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	44 1f       	adc	r20, r20
    3a64:	55 1f       	adc	r21, r21
    3a66:	6a 95       	dec	r22
    3a68:	d2 f7       	brpl	.-12     	; 0x3a5e <nrk_signal_register+0x48>
    3a6a:	85 85       	ldd	r24, Z+13	; 0x0d
    3a6c:	96 85       	ldd	r25, Z+14	; 0x0e
    3a6e:	a7 85       	ldd	r26, Z+15	; 0x0f
    3a70:	b0 89       	ldd	r27, Z+16	; 0x10
    3a72:	82 2b       	or	r24, r18
    3a74:	93 2b       	or	r25, r19
    3a76:	a4 2b       	or	r26, r20
    3a78:	b5 2b       	or	r27, r21
    3a7a:	85 87       	std	Z+13, r24	; 0x0d
    3a7c:	96 87       	std	Z+14, r25	; 0x0e
    3a7e:	a7 87       	std	Z+15, r26	; 0x0f
    3a80:	b0 8b       	std	Z+16, r27	; 0x10
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    nrk_watchdog_enable();
    #endif
  
  // nrk_stack_pointer_init(); 
/* 
    3a86:	08 95       	ret

00003a88 <nrk_sem_create>:
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    3a88:	38 2f       	mov	r19, r24
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    3a8a:	80 91 6f 05 	lds	r24, 0x056F
    3a8e:	88 23       	and	r24, r24
    3a90:	19 f0       	breq	.+6      	; 0x3a98 <nrk_sem_create+0x10>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	08 95       	ret
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    3a98:	80 91 59 05 	lds	r24, 0x0559
    3a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9e:	11 f4       	brne	.+4      	; 0x3aa4 <nrk_sem_create+0x1c>
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	07 c0       	rjmp	.+14     	; 0x3ab2 <nrk_sem_create+0x2a>
    3aa4:	80 91 5c 05 	lds	r24, 0x055C
    3aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    3aaa:	11 f0       	breq	.+4      	; 0x3ab0 <nrk_sem_create+0x28>
    3aac:	22 e0       	ldi	r18, 0x02	; 2
    3aae:	01 c0       	rjmp	.+2      	; 0x3ab2 <nrk_sem_create+0x2a>
    3ab0:	21 e0       	ldi	r18, 0x01	; 1
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3ab2:	82 2f       	mov	r24, r18
    3ab4:	99 27       	eor	r25, r25
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	ee 0f       	add	r30, r30
    3aba:	ff 1f       	adc	r31, r31
    3abc:	e8 0f       	add	r30, r24
    3abe:	f9 1f       	adc	r31, r25
    3ac0:	e7 5a       	subi	r30, 0xA7	; 167
    3ac2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ac4:	32 83       	std	Z+2, r19	; 0x02
 
    3ac6:	30 83       	st	Z, r19
	
    3ac8:	61 83       	std	Z+1, r22	; 0x01
	         
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	80 93 6f 05 	sts	0x056F, r24

    3ad0:	83 e0       	ldi	r24, 0x03	; 3
    3ad2:	28 9f       	mul	r18, r24
    3ad4:	c0 01       	movw	r24, r0
    3ad6:	11 24       	eor	r1, r1
    3ad8:	87 5a       	subi	r24, 0xA7	; 167
    3ada:	9a 4f       	sbci	r25, 0xFA	; 250
			
    3adc:	08 95       	ret

00003ade <nrk_get_resource_index>:
    return NRK_OK;

}


/*
    3ade:	25 e0       	ldi	r18, 0x05	; 5
    3ae0:	89 35       	cpi	r24, 0x59	; 89
    3ae2:	92 07       	cpc	r25, r18
    3ae4:	11 f4       	brne	.+4      	; 0x3aea <nrk_get_resource_index+0xc>
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	07 c0       	rjmp	.+14     	; 0x3af8 <nrk_get_resource_index+0x1a>
    3aea:	8c 55       	subi	r24, 0x5C	; 92
    3aec:	95 40       	sbci	r25, 0x05	; 5
    3aee:	19 f0       	breq	.+6      	; 0x3af6 <nrk_get_resource_index+0x18>
    3af0:	8f ef       	ldi	r24, 0xFF	; 255
    3af2:	9f ef       	ldi	r25, 0xFF	; 255
    3af4:	08 95       	ret
    3af6:	81 e0       	ldi	r24, 0x01	; 1
 * _nrk_timer_tick() 
    3af8:	99 27       	eor	r25, r25
    3afa:	87 fd       	sbrc	r24, 7
    3afc:	90 95       	com	r25
 *
 * This function is called by the interrupt timer0.
    3afe:	08 95       	ret

00003b00 <nrk_sem_delete>:


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
	
    //  Already in critical section so no needenter critical section
    3b00:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <nrk_get_resource_index>
    if(Task->Type!=IDLE_TASK)
    	Task->task_ID=nrk_task_init_cnt;
    3b04:	8f 3f       	cpi	r24, 0xFF	; 255
    3b06:	11 f4       	brne	.+4      	; 0x3b0c <nrk_sem_delete+0xc>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	02 c0       	rjmp	.+4      	; 0x3b10 <nrk_sem_delete+0x10>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    3b0c:	82 30       	cpi	r24, 0x02	; 2
    3b0e:	29 f4       	brne	.+10     	; 0x3b1a <nrk_sem_delete+0x1a>
    3b10:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    3b14:	8f ef       	ldi	r24, 0xFF	; 255
    3b16:	9f ef       	ldi	r25, 0xFF	; 255
    3b18:	08 95       	ret

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    3b1a:	99 27       	eor	r25, r25
    3b1c:	87 fd       	sbrc	r24, 7
    3b1e:	90 95       	com	r25
    3b20:	fc 01       	movw	r30, r24
    3b22:	ee 0f       	add	r30, r30
    3b24:	ff 1f       	adc	r31, r31
    3b26:	e8 0f       	add	r30, r24
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	e7 5a       	subi	r30, 0xA7	; 167
    3b2c:	fa 4f       	sbci	r31, 0xFA	; 250
    3b2e:	8f ef       	ldi	r24, 0xFF	; 255
    3b30:	80 83       	st	Z, r24
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    3b32:	82 83       	std	Z+2, r24	; 0x02
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    3b34:	81 83       	std	Z+1, r24	; 0x01
    //initialize member of TCB structure
    3b36:	80 91 6f 05 	lds	r24, 0x056F
    3b3a:	81 50       	subi	r24, 0x01	; 1
    3b3c:	80 93 6f 05 	sts	0x056F, r24
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    3b44:	08 95       	ret

00003b46 <nrk_sem_query>:
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
	nrk_activate_task(&IdleTask);
	
}

    3b46:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <nrk_get_resource_index>

    3b4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b4c:	11 f4       	brne	.+4      	; 0x3b52 <nrk_sem_query+0xc>
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <nrk_sem_query+0x10>

    3b52:	82 30       	cpi	r24, 0x02	; 2
    3b54:	29 f4       	brne	.+10     	; 0x3b60 <nrk_sem_query+0x1a>
    3b56:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    3b5a:	8f ef       	ldi	r24, 0xFF	; 255
    3b5c:	9f ef       	ldi	r25, 0xFF	; 255
    3b5e:	08 95       	ret


    3b60:	99 27       	eor	r25, r25
    3b62:	87 fd       	sbrc	r24, 7
    3b64:	90 95       	com	r25
    3b66:	fc 01       	movw	r30, r24
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	e8 0f       	add	r30, r24
    3b6e:	f9 1f       	adc	r31, r25
    3b70:	e7 5a       	subi	r30, 0xA7	; 167
    3b72:	fa 4f       	sbci	r31, 0xFA	; 250
    3b74:	82 81       	ldd	r24, Z+2	; 0x02
    3b76:	99 27       	eor	r25, r25
    3b78:	87 fd       	sbrc	r24, 7
    3b7a:	90 95       	com	r25

    3b7c:	08 95       	ret

00003b7e <nrk_sem_post>:
			}
		}
	}

    }

    3b7e:	1f 93       	push	r17
    3b80:	cf 93       	push	r28
    3b82:	df 93       	push	r29
    task_ID = nrk_get_high_ready_task_ID();	
    3b84:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <nrk_get_resource_index>
    3b88:	18 2f       	mov	r17, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b8c:	11 f4       	brne	.+4      	; 0x3b92 <nrk_sem_post+0x14>
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	03 c0       	rjmp	.+6      	; 0x3b98 <nrk_sem_post+0x1a>
    nrk_cur_task_prio = nrk_high_ready_prio;
    3b92:	82 30       	cpi	r24, 0x02	; 2
    3b94:	31 f4       	brne	.+12     	; 0x3ba2 <nrk_sem_post+0x24>
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    3b9c:	8f ef       	ldi	r24, 0xFF	; 255
    3b9e:	9f ef       	ldi	r25, 0xFF	; 255
    3ba0:	6d c0       	rjmp	.+218    	; 0x3c7c <nrk_sem_post+0xfe>
		
//    nrk_stack_pointer_restore();
    3ba2:	99 27       	eor	r25, r25
    3ba4:	87 fd       	sbrc	r24, 7
    3ba6:	90 95       	com	r25
    3ba8:	ec 01       	movw	r28, r24
    3baa:	cc 0f       	add	r28, r28
    3bac:	dd 1f       	adc	r29, r29
    3bae:	c8 0f       	add	r28, r24
    3bb0:	d9 1f       	adc	r29, r25
    3bb2:	c7 5a       	subi	r28, 0xA7	; 167
    3bb4:	da 4f       	sbci	r29, 0xFA	; 250
    3bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb8:	88 81       	ld	r24, Y
    3bba:	98 17       	cp	r25, r24
    3bbc:	0c f0       	brlt	.+2      	; 0x3bc0 <nrk_sem_post+0x42>
    3bbe:	5c c0       	rjmp	.+184    	; 0x3c78 <nrk_sem_post+0xfa>

    /*
    #ifdef KERNEL_STK_ARRAY
    3bc0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	8f 5f       	subi	r24, 0xFF	; 255
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
    	stkc = NRK_KERNEL_STK_TOP;
    3bca:	e0 91 70 05 	lds	r30, 0x0570
    3bce:	f0 91 71 05 	lds	r31, 0x0571
    3bd2:	14 82       	std	Z+4, r1	; 0x04
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    3bd4:	80 91 1c 05 	lds	r24, 0x051C
    3bd8:	82 30       	cpi	r24, 0x02	; 2
    3bda:	21 f5       	brne	.+72     	; 0x3c24 <nrk_sem_post+0xa6>
    
    3bdc:	21 2f       	mov	r18, r17
    3bde:	33 27       	eor	r19, r19
    3be0:	27 fd       	sbrc	r18, 7
    3be2:	30 95       	com	r19
    3be4:	43 2f       	mov	r20, r19
    3be6:	53 2f       	mov	r21, r19
    3be8:	80 91 26 05 	lds	r24, 0x0526
    3bec:	90 91 27 05 	lds	r25, 0x0527
    3bf0:	a0 91 28 05 	lds	r26, 0x0528
    3bf4:	b0 91 29 05 	lds	r27, 0x0529
    3bf8:	82 17       	cp	r24, r18
    3bfa:	93 07       	cpc	r25, r19
    3bfc:	a4 07       	cpc	r26, r20
    3bfe:	b5 07       	cpc	r27, r21
    3c00:	89 f4       	brne	.+34     	; 0x3c24 <nrk_sem_post+0xa6>
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    3c02:	83 e0       	ldi	r24, 0x03	; 3
    3c04:	80 93 1e 05 	sts	0x051E, r24
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    3c08:	10 92 2b 05 	sts	0x052B, r1
    3c0c:	10 92 2a 05 	sts	0x052A, r1
*/
    3c10:	10 92 1c 05 	sts	0x051C, r1
    nrk_target_start();
    3c14:	10 92 26 05 	sts	0x0526, r1
    3c18:	10 92 27 05 	sts	0x0527, r1
    3c1c:	10 92 28 05 	sts	0x0528, r1
    3c20:	10 92 29 05 	sts	0x0529, r1
     	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP;
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    3c24:	80 91 3d 05 	lds	r24, 0x053D
    3c28:	82 30       	cpi	r24, 0x02	; 2
    3c2a:	21 f5       	brne	.+72     	; 0x3c74 <nrk_sem_post+0xf6>
    
    3c2c:	21 2f       	mov	r18, r17
    3c2e:	33 27       	eor	r19, r19
    3c30:	27 fd       	sbrc	r18, 7
    3c32:	30 95       	com	r19
    3c34:	43 2f       	mov	r20, r19
    3c36:	53 2f       	mov	r21, r19
    3c38:	80 91 47 05 	lds	r24, 0x0547
    3c3c:	90 91 48 05 	lds	r25, 0x0548
    3c40:	a0 91 49 05 	lds	r26, 0x0549
    3c44:	b0 91 4a 05 	lds	r27, 0x054A
    3c48:	82 17       	cp	r24, r18
    3c4a:	93 07       	cpc	r25, r19
    3c4c:	a4 07       	cpc	r26, r20
    3c4e:	b5 07       	cpc	r27, r21
    3c50:	89 f4       	brne	.+34     	; 0x3c74 <nrk_sem_post+0xf6>
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    3c52:	83 e0       	ldi	r24, 0x03	; 3
    3c54:	80 93 3f 05 	sts	0x053F, r24
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    3c58:	10 92 4c 05 	sts	0x054C, r1
    3c5c:	10 92 4b 05 	sts	0x054B, r1
*/
    3c60:	10 92 3d 05 	sts	0x053D, r1
    nrk_target_start();
    3c64:	10 92 47 05 	sts	0x0547, r1
    3c68:	10 92 48 05 	sts	0x0548, r1
    3c6c:	10 92 49 05 	sts	0x0549, r1
    3c70:	10 92 4a 05 	sts	0x054A, r1
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    3c74:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	08 95       	ret

00003c84 <nrk_event_signal>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	1f 93       	push	r17
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    3c8e:	e1 e0       	ldi	r30, 0x01	; 1
    3c90:	ee 2e       	mov	r14, r30
    3c92:	f1 2c       	mov	r15, r1
    3c94:	01 2d       	mov	r16, r1
    3c96:	11 2d       	mov	r17, r1
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <nrk_event_signal+0x1e>
    3c9a:	ee 0c       	add	r14, r14
    3c9c:	ff 1c       	adc	r15, r15
    3c9e:	00 1f       	adc	r16, r16
    3ca0:	11 1f       	adc	r17, r17
    3ca2:	8a 95       	dec	r24
    3ca4:	d2 f7       	brpl	.-12     	; 0x3c9a <nrk_event_signal+0x16>
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    3ca6:	80 91 ed 03 	lds	r24, 0x03ED
    3caa:	90 91 ee 03 	lds	r25, 0x03EE
    3cae:	a0 91 ef 03 	lds	r26, 0x03EF
    3cb2:	b0 91 f0 03 	lds	r27, 0x03F0
    3cb6:	8e 21       	and	r24, r14
    3cb8:	9f 21       	and	r25, r15
    3cba:	a0 23       	and	r26, r16
    3cbc:	b1 23       	and	r27, r17
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	a1 05       	cpc	r26, r1
    3cc2:	b1 05       	cpc	r27, r1
    3cc4:	11 f4       	brne	.+4      	; 0x3cca <nrk_event_signal+0x46>
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	43 c0       	rjmp	.+134    	; 0x3d50 <nrk_event_signal+0xcc>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    3cca:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    3cce:	ec e1       	ldi	r30, 0x1C	; 28
    3cd0:	f5 e0       	ldi	r31, 0x05	; 5
    3cd2:	dd 24       	eor	r13, r13
    
    nrk_cur_task_prio = 0;
    nrk_cur_task_TCB = NULL;
    
    nrk_high_ready_TCB = NULL;
    nrk_high_ready_prio = 0; 
    3cd4:	80 81       	ld	r24, Z
    3cd6:	81 30       	cpi	r24, 0x01	; 1
    3cd8:	b9 f4       	brne	.+46     	; 0x3d08 <nrk_event_signal+0x84>

    3cda:	82 85       	ldd	r24, Z+10	; 0x0a
    3cdc:	93 85       	ldd	r25, Z+11	; 0x0b
    3cde:	a4 85       	ldd	r26, Z+12	; 0x0c
    3ce0:	b5 85       	ldd	r27, Z+13	; 0x0d
    3ce2:	8e 21       	and	r24, r14
    3ce4:	9f 21       	and	r25, r15
    3ce6:	a0 23       	and	r26, r16
    3ce8:	b1 23       	and	r27, r17
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	a1 05       	cpc	r26, r1
    3cee:	b1 05       	cpc	r27, r1
    3cf0:	59 f0       	breq	.+22     	; 0x3d08 <nrk_event_signal+0x84>
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    3cf2:	83 e0       	ldi	r24, 0x03	; 3
    3cf4:	82 83       	std	Z+2, r24	; 0x02
   #endif
    3cf6:	17 86       	std	Z+15, r1	; 0x0f
    3cf8:	16 86       	std	Z+14, r1	; 0x0e

    3cfa:	10 82       	st	Z, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    3cfc:	e2 86       	std	Z+10, r14	; 0x0a
    3cfe:	f3 86       	std	Z+11, r15	; 0x0b
    3d00:	04 87       	std	Z+12, r16	; 0x0c
    3d02:	15 87       	std	Z+13, r17	; 0x0d
    3d04:	dd 24       	eor	r13, r13
    3d06:	d3 94       	inc	r13
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

    3d08:	80 81       	ld	r24, Z
    3d0a:	82 30       	cpi	r24, 0x02	; 2
    3d0c:	a1 f4       	brne	.+40     	; 0x3d36 <nrk_event_signal+0xb2>
for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    3d0e:	82 85       	ldd	r24, Z+10	; 0x0a
    3d10:	93 85       	ldd	r25, Z+11	; 0x0b
    3d12:	a4 85       	ldd	r26, Z+12	; 0x0c
    3d14:	b5 85       	ldd	r27, Z+13	; 0x0d
    3d16:	8e 15       	cp	r24, r14
    3d18:	9f 05       	cpc	r25, r15
    3d1a:	a0 07       	cpc	r26, r16
    3d1c:	b1 07       	cpc	r27, r17
    3d1e:	59 f4       	brne	.+22     	; 0x3d36 <nrk_event_signal+0xb2>
{
    nrk_sem_list[i].count=-1;
    3d20:	83 e0       	ldi	r24, 0x03	; 3
    3d22:	82 83       	std	Z+2, r24	; 0x02
    nrk_sem_list[i].value=-1;
    3d24:	17 86       	std	Z+15, r1	; 0x0f
    3d26:	16 86       	std	Z+14, r1	; 0x0e
    nrk_sem_list[i].resource_ceiling=-1;
    3d28:	10 82       	st	Z, r1
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    3d2a:	12 86       	std	Z+10, r1	; 0x0a
    3d2c:	13 86       	std	Z+11, r1	; 0x0b
    3d2e:	14 86       	std	Z+12, r1	; 0x0c
    3d30:	15 86       	std	Z+13, r1	; 0x0d
    3d32:	dd 24       	eor	r13, r13
    3d34:	d3 94       	inc	r13
    3d36:	b1 96       	adiw	r30, 0x21	; 33
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    3d38:	85 e0       	ldi	r24, 0x05	; 5
    3d3a:	ee 35       	cpi	r30, 0x5E	; 94
    3d3c:	f8 07       	cpc	r31, r24
    3d3e:	51 f6       	brne	.-108    	; 0x3cd4 <nrk_event_signal+0x50>
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    3d40:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
        }
    3d44:	dd 20       	and	r13, r13
    3d46:	19 f0       	breq	.+6      	; 0x3d4e <nrk_event_signal+0xca>
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	05 c0       	rjmp	.+10     	; 0x3d58 <nrk_event_signal+0xd4>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    3d4e:	82 e0       	ldi	r24, 0x02	; 2
    3d50:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    3d54:	8f ef       	ldi	r24, 0xFF	; 255
    3d56:	9f ef       	ldi	r25, 0xFF	; 255
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	08 95       	ret

00003d64 <nrk_signal_delete>:
void nrk_halt()
{
nrk_int_disable();
while(1);
}

    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
    3d70:	c8 2f       	mov	r28, r24
    3d72:	dd 27       	eor	r29, r29
    3d74:	c7 fd       	sbrc	r28, 7
    3d76:	d0 95       	com	r29
    3d78:	f1 e0       	ldi	r31, 0x01	; 1
    3d7a:	ef 2e       	mov	r14, r31
    3d7c:	f1 2c       	mov	r15, r1
    3d7e:	01 2d       	mov	r16, r1
    3d80:	11 2d       	mov	r17, r1
    3d82:	0c 2e       	mov	r0, r28
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <nrk_signal_delete+0x2a>
    3d86:	ee 0c       	add	r14, r14
    3d88:	ff 1c       	adc	r15, r15
    3d8a:	00 1f       	adc	r16, r16
    3d8c:	11 1f       	adc	r17, r17
    3d8e:	0a 94       	dec	r0
    3d90:	d2 f7       	brpl	.-12     	; 0x3d86 <nrk_signal_delete+0x22>
 *  - Init event list
 *  - Create idle task
    3d92:	80 91 ed 03 	lds	r24, 0x03ED
    3d96:	90 91 ee 03 	lds	r25, 0x03EE
    3d9a:	a0 91 ef 03 	lds	r26, 0x03EF
    3d9e:	b0 91 f0 03 	lds	r27, 0x03F0
    3da2:	8e 21       	and	r24, r14
    3da4:	9f 21       	and	r25, r15
    3da6:	a0 23       	and	r26, r16
    3da8:	b1 23       	and	r27, r17
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	a1 05       	cpc	r26, r1
    3dae:	b1 05       	cpc	r27, r1
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <nrk_signal_delete+0x54>
    3db2:	8f ef       	ldi	r24, 0xFF	; 255
    3db4:	9f ef       	ldi	r25, 0xFF	; 255
    3db6:	c1 c0       	rjmp	.+386    	; 0x3f3a <nrk_signal_delete+0x1d6>
 */
void nrk_init()
    3db8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
{
	
    3dbc:	80 91 1d 05 	lds	r24, 0x051D
    3dc0:	8f 3f       	cpi	r24, 0xFF	; 255
    3dc2:	09 f4       	brne	.+2      	; 0x3dc6 <nrk_signal_delete+0x62>
    3dc4:	4a c0       	rjmp	.+148    	; 0x3e5a <nrk_signal_delete+0xf6>
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    3dc6:	80 91 22 05 	lds	r24, 0x0522
    3dca:	90 91 23 05 	lds	r25, 0x0523
    3dce:	a0 91 24 05 	lds	r26, 0x0524
    3dd2:	b0 91 25 05 	lds	r27, 0x0525
    3dd6:	8e 15       	cp	r24, r14
    3dd8:	9f 05       	cpc	r25, r15
    3dda:	a0 07       	cpc	r26, r16
    3ddc:	b1 07       	cpc	r27, r17
    3dde:	79 f1       	breq	.+94     	; 0x3e3e <nrk_signal_delete+0xda>
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    3de0:	d8 01       	movw	r26, r16
    3de2:	c7 01       	movw	r24, r14
    3de4:	80 95       	com	r24
    3de6:	90 95       	com	r25
    3de8:	a0 95       	com	r26
    3dea:	b0 95       	com	r27
    3dec:	20 91 22 05 	lds	r18, 0x0522
    3df0:	30 91 23 05 	lds	r19, 0x0523
    3df4:	40 91 24 05 	lds	r20, 0x0524
    3df8:	50 91 25 05 	lds	r21, 0x0525
    3dfc:	28 23       	and	r18, r24
    3dfe:	39 23       	and	r19, r25
    3e00:	4a 23       	and	r20, r26
    3e02:	5b 23       	and	r21, r27
    3e04:	20 93 22 05 	sts	0x0522, r18
    3e08:	30 93 23 05 	sts	0x0523, r19
    3e0c:	40 93 24 05 	sts	0x0524, r20
    3e10:	50 93 25 05 	sts	0x0525, r21
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3e14:	20 91 26 05 	lds	r18, 0x0526
    3e18:	30 91 27 05 	lds	r19, 0x0527
    3e1c:	40 91 28 05 	lds	r20, 0x0528
    3e20:	50 91 29 05 	lds	r21, 0x0529
    3e24:	82 23       	and	r24, r18
    3e26:	93 23       	and	r25, r19
    3e28:	a4 23       	and	r26, r20
    3e2a:	b5 23       	and	r27, r21
    3e2c:	80 93 26 05 	sts	0x0526, r24
    3e30:	90 93 27 05 	sts	0x0527, r25
    3e34:	a0 93 28 05 	sts	0x0528, r26
    3e38:	b0 93 29 05 	sts	0x0529, r27
    3e3c:	0e c0       	rjmp	.+28     	; 0x3e5a <nrk_signal_delete+0xf6>
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    3e3e:	10 92 26 05 	sts	0x0526, r1
    3e42:	10 92 27 05 	sts	0x0527, r1
    3e46:	10 92 28 05 	sts	0x0528, r1
    3e4a:	10 92 29 05 	sts	0x0529, r1
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    3e4e:	10 92 1c 05 	sts	0x051C, r1
   i=_nrk_startup_error();
    3e52:	83 e0       	ldi	r24, 0x03	; 3
    3e54:	80 93 1e 05 	sts	0x051E, r24
    3e58:	c3 cf       	rjmp	.-122    	; 0x3de0 <nrk_signal_delete+0x7c>
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
	
    3e5a:	80 91 3e 05 	lds	r24, 0x053E
    3e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <nrk_signal_delete+0x100>
    3e62:	48 c0       	rjmp	.+144    	; 0x3ef4 <nrk_signal_delete+0x190>
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    3e64:	80 91 43 05 	lds	r24, 0x0543
    3e68:	90 91 44 05 	lds	r25, 0x0544
    3e6c:	a0 91 45 05 	lds	r26, 0x0545
    3e70:	b0 91 46 05 	lds	r27, 0x0546
    3e74:	8e 15       	cp	r24, r14
    3e76:	9f 05       	cpc	r25, r15
    3e78:	a0 07       	cpc	r26, r16
    3e7a:	b1 07       	cpc	r27, r17
    3e7c:	69 f4       	brne	.+26     	; 0x3e98 <nrk_signal_delete+0x134>
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    3e7e:	10 92 47 05 	sts	0x0547, r1
    3e82:	10 92 48 05 	sts	0x0548, r1
    3e86:	10 92 49 05 	sts	0x0549, r1
    3e8a:	10 92 4a 05 	sts	0x054A, r1
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    3e8e:	10 92 3d 05 	sts	0x053D, r1
   i=_nrk_startup_error();
    3e92:	83 e0       	ldi	r24, 0x03	; 3
    3e94:	80 93 3f 05 	sts	0x053F, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
    3e98:	d8 01       	movw	r26, r16
    3e9a:	c7 01       	movw	r24, r14
    3e9c:	80 95       	com	r24
    3e9e:	90 95       	com	r25
    3ea0:	a0 95       	com	r26
    3ea2:	b0 95       	com	r27
    3ea4:	20 91 43 05 	lds	r18, 0x0543
    3ea8:	30 91 44 05 	lds	r19, 0x0544
    3eac:	40 91 45 05 	lds	r20, 0x0545
    3eb0:	50 91 46 05 	lds	r21, 0x0546
    3eb4:	28 23       	and	r18, r24
    3eb6:	39 23       	and	r19, r25
    3eb8:	4a 23       	and	r20, r26
    3eba:	5b 23       	and	r21, r27
    3ebc:	20 93 43 05 	sts	0x0543, r18
    3ec0:	30 93 44 05 	sts	0x0544, r19
    3ec4:	40 93 45 05 	sts	0x0545, r20
    3ec8:	50 93 46 05 	sts	0x0546, r21
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3ecc:	20 91 47 05 	lds	r18, 0x0547
    3ed0:	30 91 48 05 	lds	r19, 0x0548
    3ed4:	40 91 49 05 	lds	r20, 0x0549
    3ed8:	50 91 4a 05 	lds	r21, 0x054A
    3edc:	82 23       	and	r24, r18
    3ede:	93 23       	and	r25, r19
    3ee0:	a4 23       	and	r26, r20
    3ee2:	b5 23       	and	r27, r21
    3ee4:	80 93 47 05 	sts	0x0547, r24
    3ee8:	90 93 48 05 	sts	0x0548, r25
    3eec:	a0 93 49 05 	sts	0x0549, r26
    3ef0:	b0 93 4a 05 	sts	0x054A, r27
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    3ef4:	2e ef       	ldi	r18, 0xFE	; 254
    3ef6:	3f ef       	ldi	r19, 0xFF	; 255
    3ef8:	4f ef       	ldi	r20, 0xFF	; 255
    3efa:	5f ef       	ldi	r21, 0xFF	; 255
    3efc:	04 c0       	rjmp	.+8      	; 0x3f06 <nrk_signal_delete+0x1a2>
    3efe:	22 0f       	add	r18, r18
    3f00:	33 1f       	adc	r19, r19
    3f02:	44 1f       	adc	r20, r20
    3f04:	55 1f       	adc	r21, r21
    3f06:	ca 95       	dec	r28
    3f08:	d2 f7       	brpl	.-12     	; 0x3efe <nrk_signal_delete+0x19a>
    3f0a:	80 91 ed 03 	lds	r24, 0x03ED
    3f0e:	90 91 ee 03 	lds	r25, 0x03EE
    3f12:	a0 91 ef 03 	lds	r26, 0x03EF
    3f16:	b0 91 f0 03 	lds	r27, 0x03F0
    3f1a:	82 23       	and	r24, r18
    3f1c:	93 23       	and	r25, r19
    3f1e:	a4 23       	and	r26, r20
    3f20:	b5 23       	and	r27, r21
    3f22:	80 93 ed 03 	sts	0x03ED, r24
    3f26:	90 93 ee 03 	sts	0x03EE, r25
    3f2a:	a0 93 ef 03 	sts	0x03EF, r26
    3f2e:	b0 93 f0 03 	sts	0x03F0, r27
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3f32:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	1f 91       	pop	r17
    3f40:	0f 91       	pop	r16
    3f42:	ff 90       	pop	r15
    3f44:	ef 90       	pop	r14
    3f46:	08 95       	ret

00003f48 <nrk_sem_pend>:



void nrk_start (void)
{
	int8_t task_ID;
    3f48:	1f 93       	push	r17
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
	uint8_t i,j;
//	NRK_STK *x;
    3f4e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <nrk_get_resource_index>
    3f52:	18 2f       	mov	r17, r24
//	unsigned char *stkc;
    3f54:	8f 3f       	cpi	r24, 0xFF	; 255
    3f56:	11 f4       	brne	.+4      	; 0x3f5c <nrk_sem_pend+0x14>
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	03 c0       	rjmp	.+6      	; 0x3f62 <nrk_sem_pend+0x1a>

    3f5c:	82 30       	cpi	r24, 0x02	; 2
    3f5e:	31 f4       	brne	.+12     	; 0x3f6c <nrk_sem_pend+0x24>
    3f60:	82 e0       	ldi	r24, 0x02	; 2
    3f62:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    3f66:	8f ef       	ldi	r24, 0xFF	; 255
    3f68:	9f ef       	ldi	r25, 0xFF	; 255
    3f6a:	3e c0       	rjmp	.+124    	; 0x3fe8 <nrk_sem_pend+0xa0>
	/*
		- Get highest priority task from rdy list
    3f6c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
		- set cur prio and start the task 
    3f70:	81 2f       	mov	r24, r17
    3f72:	99 27       	eor	r25, r25
    3f74:	87 fd       	sbrc	r24, 7
    3f76:	90 95       	com	r25
    3f78:	ec 01       	movw	r28, r24
    3f7a:	cc 0f       	add	r28, r28
    3f7c:	dd 1f       	adc	r29, r29
    3f7e:	c8 0f       	add	r28, r24
    3f80:	d9 1f       	adc	r29, r25
    3f82:	c7 5a       	subi	r28, 0xA7	; 167
    3f84:	da 4f       	sbci	r29, 0xFA	; 250
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	88 23       	and	r24, r24
    3f8a:	d9 f4       	brne	.+54     	; 0x3fc2 <nrk_sem_pend+0x7a>
	*/
    // Check to make sure all tasks unique
    3f8c:	e0 91 70 05 	lds	r30, 0x0570
    3f90:	f0 91 71 05 	lds	r31, 0x0571
    3f94:	87 81       	ldd	r24, Z+7	; 0x07
    3f96:	82 60       	ori	r24, 0x02	; 2
    3f98:	87 83       	std	Z+7, r24	; 0x07
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3f9a:	e0 91 70 05 	lds	r30, 0x0570
    3f9e:	f0 91 71 05 	lds	r31, 0x0571
    3fa2:	81 2f       	mov	r24, r17
    3fa4:	99 27       	eor	r25, r25
    3fa6:	87 fd       	sbrc	r24, 7
    3fa8:	90 95       	com	r25
    3faa:	a9 2f       	mov	r26, r25
    3fac:	b9 2f       	mov	r27, r25
    3fae:	81 8b       	std	Z+17, r24	; 0x11
    3fb0:	92 8b       	std	Z+18, r25	; 0x12
    3fb2:	a3 8b       	std	Z+19, r26	; 0x13
    3fb4:	b4 8b       	std	Z+20, r27	; 0x14
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3fb6:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
	// only check activated tasks
    3fba:	80 e0       	ldi	r24, 0x00	; 0
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	0e 94 3d 22 	call	0x447a	; 0x447a <nrk_wait_until_ticks>
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc4:	81 50       	subi	r24, 0x01	; 1
    3fc6:	8a 83       	std	Y+2, r24	; 0x02
		{
    3fc8:	e0 91 70 05 	lds	r30, 0x0570
    3fcc:	f0 91 71 05 	lds	r31, 0x0571
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	83 87       	std	Z+11, r24	; 0x0b
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    3fd4:	e0 91 70 05 	lds	r30, 0x0570
    3fd8:	f0 91 71 05 	lds	r31, 0x0571
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	84 83       	std	Z+4, r24	; 0x04
			{
    3fe0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	df 91       	pop	r29
    3fea:	cf 91       	pop	r28
    3fec:	1f 91       	pop	r17
    3fee:	08 95       	ret

00003ff0 <nrk_event_wait>:
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    3ff0:	9b 01       	movw	r18, r22
    3ff2:	ac 01       	movw	r20, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
    3ff4:	e0 91 70 05 	lds	r30, 0x0570
    3ff8:	f0 91 71 05 	lds	r31, 0x0571
    3ffc:	85 85       	ldd	r24, Z+13	; 0x0d
    3ffe:	96 85       	ldd	r25, Z+14	; 0x0e
    4000:	a7 85       	ldd	r26, Z+15	; 0x0f
    4002:	b0 89       	ldd	r27, Z+16	; 0x10
    4004:	82 23       	and	r24, r18
    4006:	93 23       	and	r25, r19
    4008:	a4 23       	and	r26, r20
    400a:	b5 23       	and	r27, r21
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	a1 05       	cpc	r26, r1
    4010:	b1 05       	cpc	r27, r1
    4012:	29 f4       	brne	.+10     	; 0x401e <nrk_event_wait+0x2e>
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	08 95       	ret
	
	
    401e:	21 8b       	std	Z+17, r18	; 0x11
    4020:	32 8b       	std	Z+18, r19	; 0x12
    4022:	43 8b       	std	Z+19, r20	; 0x13
    4024:	54 8b       	std	Z+20, r21	; 0x14

    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	87 83       	std	Z+7, r24	; 0x07
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    402a:	00 90 60 05 	lds	r0, 0x0560
    402e:	04 c0       	rjmp	.+8      	; 0x4038 <nrk_event_wait+0x48>
    4030:	56 95       	lsr	r21
    4032:	47 95       	ror	r20
    4034:	37 95       	ror	r19
    4036:	27 95       	ror	r18
    4038:	0a 94       	dec	r0
    403a:	d2 f7       	brpl	.-12     	; 0x4030 <nrk_event_wait+0x40>
    403c:	c9 01       	movw	r24, r18
    403e:	81 70       	andi	r24, 0x01	; 1
    4040:	90 70       	andi	r25, 0x00	; 0
    4042:	89 2b       	or	r24, r25
    4044:	19 f0       	breq	.+6      	; 0x404c <nrk_event_wait+0x5c>
	IdleTask.cpu_reserve.secs = 0;
    4046:	0e 94 de 21 	call	0x43bc	; 0x43bc <nrk_wait_until_nw>
    404a:	04 c0       	rjmp	.+8      	; 0x4054 <nrk_event_wait+0x64>
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 3d 22 	call	0x447a	; 0x447a <nrk_wait_until_ticks>
	IdleTask.offset.nano_secs = 0;
	IdleTask.FirstActivation = TRUE;
    4054:	e0 91 70 05 	lds	r30, 0x0570
    4058:	f0 91 71 05 	lds	r31, 0x0571
    405c:	61 89       	ldd	r22, Z+17	; 0x11
    405e:	72 89       	ldd	r23, Z+18	; 0x12
    4060:	83 89       	ldd	r24, Z+19	; 0x13
    4062:	94 89       	ldd	r25, Z+20	; 0x14
	IdleTask.Type = IDLE_TASK;
    4064:	08 95       	ret

00004066 <nrk_get_high_ready_task_ID>:
#include <nrk_error.h>
#include <nrk_events.h>
#include <nrk_stack_check.h>
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
    4066:	e0 91 65 05 	lds	r30, 0x0565
    406a:	f0 91 66 05 	lds	r31, 0x0566
    406e:	80 81       	ld	r24, Z
#include <nrk_reserve.h>
#include <nrk_cfg.h>
    4070:	99 27       	eor	r25, r25
    4072:	08 95       	ret

00004074 <nrk_print_readyQ>:
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};
    4074:	e0 91 65 05 	lds	r30, 0x0565
    4078:	f0 91 66 05 	lds	r31, 0x0566
    407c:	03 c0       	rjmp	.+6      	; 0x4084 <nrk_print_readyQ+0x10>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
};
    407e:	03 80       	ldd	r0, Z+3	; 0x03
    4080:	f4 81       	ldd	r31, Z+4	; 0x04
    4082:	e0 2d       	mov	r30, r0

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

inline void nrk_int_enable(void) {
    4084:	30 97       	sbiw	r30, 0x00	; 0
    4086:	d9 f7       	brne	.-10     	; 0x407e <nrk_print_readyQ+0xa>
    4088:	08 95       	ret

0000408a <nrk_add_to_readyQ>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	48 2f       	mov	r20, r24
while(1);
}

/**
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    4090:	c0 91 13 05 	lds	r28, 0x0513
    4094:	d0 91 14 05 	lds	r29, 0x0514
    4098:	20 97       	sbiw	r28, 0x00	; 0
    409a:	09 f4       	brne	.+2      	; 0x409e <nrk_add_to_readyQ+0x14>
    409c:	7a c0       	rjmp	.+244    	; 0x4192 <nrk_add_to_readyQ+0x108>
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
    409e:	a0 91 65 05 	lds	r26, 0x0565
    40a2:	b0 91 66 05 	lds	r27, 0x0566
{
	
    uint8_t i;	
    40a6:	10 97       	sbiw	r26, 0x00	; 0
    40a8:	b9 f1       	breq	.+110    	; 0x4118 <nrk_add_to_readyQ+0x8e>
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    40aa:	99 27       	eor	r25, r25
    40ac:	87 fd       	sbrc	r24, 7
    40ae:	90 95       	com	r25
    40b0:	9c 01       	movw	r18, r24
    40b2:	65 e0       	ldi	r22, 0x05	; 5
    40b4:	22 0f       	add	r18, r18
    40b6:	33 1f       	adc	r19, r19
    40b8:	6a 95       	dec	r22
    40ba:	e1 f7       	brne	.-8      	; 0x40b4 <nrk_add_to_readyQ+0x2a>
    40bc:	28 0f       	add	r18, r24
    40be:	39 1f       	adc	r19, r25
    40c0:	2b 5e       	subi	r18, 0xEB	; 235
    40c2:	3a 4f       	sbci	r19, 0xFA	; 250
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
    40c4:	8c 91       	ld	r24, X
    40c6:	99 27       	eor	r25, r25
    40c8:	bc 01       	movw	r22, r24
    40ca:	55 e0       	ldi	r21, 0x05	; 5
    40cc:	66 0f       	add	r22, r22
    40ce:	77 1f       	adc	r23, r23
    40d0:	5a 95       	dec	r21
    40d2:	e1 f7       	brne	.-8      	; 0x40cc <nrk_add_to_readyQ+0x42>
    40d4:	68 0f       	add	r22, r24
    40d6:	79 1f       	adc	r23, r25
    40d8:	6b 5e       	subi	r22, 0xEB	; 235
    40da:	7a 4f       	sbci	r23, 0xFA	; 250
    40dc:	fb 01       	movw	r30, r22
    40de:	84 81       	ldd	r24, Z+4	; 0x04
    40e0:	88 23       	and	r24, r24
    40e2:	29 f0       	breq	.+10     	; 0x40ee <nrk_add_to_readyQ+0x64>
   nrk_wakeup_signal = nrk_signal_create();
    40e4:	93 85       	ldd	r25, Z+11	; 0x0b
    40e6:	f9 01       	movw	r30, r18
    40e8:	82 85       	ldd	r24, Z+10	; 0x0a
    40ea:	98 17       	cp	r25, r24
    40ec:	a8 f0       	brcs	.+42     	; 0x4118 <nrk_add_to_readyQ+0x8e>
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
    40ee:	f9 01       	movw	r30, r18
    40f0:	84 81       	ldd	r24, Z+4	; 0x04
    40f2:	88 23       	and	r24, r24
    40f4:	31 f0       	breq	.+12     	; 0x4102 <nrk_add_to_readyQ+0x78>
   i=_nrk_startup_error();
    40f6:	fb 01       	movw	r30, r22
    40f8:	92 85       	ldd	r25, Z+10	; 0x0a
    40fa:	f9 01       	movw	r30, r18
    40fc:	83 85       	ldd	r24, Z+11	; 0x0b
    40fe:	98 17       	cp	r25, r24
    4100:	58 f0       	brcs	.+22     	; 0x4118 <nrk_add_to_readyQ+0x8e>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    4102:	fb 01       	movw	r30, r22
    4104:	92 85       	ldd	r25, Z+10	; 0x0a
    4106:	f9 01       	movw	r30, r18
    4108:	82 85       	ldd	r24, Z+10	; 0x0a
    410a:	98 17       	cp	r25, r24
    410c:	28 f0       	brcs	.+10     	; 0x4118 <nrk_add_to_readyQ+0x8e>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
    410e:	fd 01       	movw	r30, r26
    4110:	a3 81       	ldd	r26, Z+3	; 0x03
    4112:	b4 81       	ldd	r27, Z+4	; 0x04
void nrk_init()
{
	
    uint8_t i;	
//    unsigned char *stkc;
	
    4114:	10 97       	sbiw	r26, 0x00	; 0
    4116:	b1 f6       	brne	.-84     	; 0x40c4 <nrk_add_to_readyQ+0x3a>
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif




    4118:	48 83       	st	Y, r20
   #ifdef NRK_REBOOT_ON_ERROR
    411a:	e0 91 13 05 	lds	r30, 0x0513
    411e:	f0 91 14 05 	lds	r31, 0x0514
    4122:	23 81       	ldd	r18, Z+3	; 0x03
    4124:	34 81       	ldd	r19, Z+4	; 0x04
    4126:	30 93 14 05 	sts	0x0514, r19
    412a:	20 93 13 05 	sts	0x0513, r18
   #ifndef NRK_WATCHDOG
   while(1)
    412e:	80 91 65 05 	lds	r24, 0x0565
    4132:	90 91 66 05 	lds	r25, 0x0566
    4136:	a8 17       	cp	r26, r24
    4138:	b9 07       	cpc	r27, r25
    413a:	a1 f4       	brne	.+40     	; 0x4164 <nrk_add_to_readyQ+0xda>
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    413c:	10 97       	sbiw	r26, 0x00	; 0
    413e:	31 f0       	breq	.+12     	; 0x414c <nrk_add_to_readyQ+0xc2>
    		for (i = 0; i < 100; i++)
    4140:	bc 83       	std	Y+4, r27	; 0x04
    4142:	ab 83       	std	Y+3, r26	; 0x03
      			nrk_spin_wait_us (1000);
    4144:	1a 82       	std	Y+2, r1	; 0x02
    4146:	19 82       	std	Y+1, r1	; 0x01
	   }
    4148:	fd 01       	movw	r30, r26
    414a:	05 c0       	rjmp	.+10     	; 0x4156 <nrk_add_to_readyQ+0xcc>
   #endif
   #endif

    414c:	1c 82       	std	Y+4, r1	; 0x04
    414e:	1b 82       	std	Y+3, r1	; 0x03
   #ifdef NRK_WATCHDOG
    4150:	1a 82       	std	Y+2, r1	; 0x02
    4152:	19 82       	std	Y+1, r1	; 0x01
    if(nrk_watchdog_check()==NRK_ERROR) 
    4154:	f9 01       	movw	r30, r18
    4156:	d2 83       	std	Z+2, r29	; 0x02
    4158:	c1 83       	std	Z+1, r28	; 0x01
	{
    	nrk_watchdog_disable();
    415a:	d0 93 66 05 	sts	0x0566, r29
    415e:	c0 93 65 05 	sts	0x0565, r28
    4162:	17 c0       	rjmp	.+46     	; 0x4192 <nrk_add_to_readyQ+0x108>
    4164:	fd 01       	movw	r30, r26
    4166:	81 81       	ldd	r24, Z+1	; 0x01
    4168:	92 81       	ldd	r25, Z+2	; 0x02
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    #endif
    416a:	a2 17       	cp	r26, r18
    416c:	b3 07       	cpc	r27, r19
    416e:	51 f0       	breq	.+20     	; 0x4184 <nrk_add_to_readyQ+0xfa>
  
  // nrk_stack_pointer_init(); 
/* 
    4170:	9a 83       	std	Y+2, r25	; 0x02
    4172:	89 83       	std	Y+1, r24	; 0x01
    #ifdef KERNEL_STK_ARRAY
    4174:	bc 83       	std	Y+4, r27	; 0x04
    4176:	ab 83       	std	Y+3, r26	; 0x03
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    4178:	81 81       	ldd	r24, Z+1	; 0x01
    417a:	92 81       	ldd	r25, Z+2	; 0x02
    417c:	fc 01       	movw	r30, r24
    417e:	d4 83       	std	Z+4, r29	; 0x04
    4180:	c3 83       	std	Z+3, r28	; 0x03
    4182:	04 c0       	rjmp	.+8      	; 0x418c <nrk_add_to_readyQ+0x102>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    4184:	1c 82       	std	Y+4, r1	; 0x04
    4186:	1b 82       	std	Y+3, r1	; 0x03
    	stkc = NRK_KERNEL_STK_TOP;
    4188:	9a 83       	std	Y+2, r25	; 0x02
    418a:	89 83       	std	Y+1, r24	; 0x01
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    418c:	fd 01       	movw	r30, r26
    418e:	d2 83       	std	Z+2, r29	; 0x02
    4190:	c1 83       	std	Z+1, r28	; 0x01
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	08 95       	ret

00004198 <nrk_rem_from_readyQ>:
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
    419c:	a0 91 65 05 	lds	r26, 0x0565
    41a0:	b0 91 66 05 	lds	r27, 0x0566
    41a4:	10 97       	sbiw	r26, 0x00	; 0
    41a6:	09 f4       	brne	.+2      	; 0x41aa <nrk_rem_from_readyQ+0x12>
    41a8:	46 c0       	rjmp	.+140    	; 0x4236 <nrk_rem_from_readyQ+0x9e>
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
    41aa:	48 2f       	mov	r20, r24
    41ac:	55 27       	eor	r21, r21
    41ae:	47 fd       	sbrc	r20, 7
    41b0:	50 95       	com	r21
    41b2:	8c 91       	ld	r24, X
    41b4:	99 27       	eor	r25, r25
    41b6:	84 17       	cp	r24, r20
    41b8:	95 07       	cpc	r25, r21
    41ba:	69 f4       	brne	.+26     	; 0x41d6 <nrk_rem_from_readyQ+0x3e>
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    41bc:	ed 01       	movw	r28, r26
    41be:	eb 81       	ldd	r30, Y+3	; 0x03
    41c0:	fc 81       	ldd	r31, Y+4	; 0x04
    41c2:	f0 93 66 05 	sts	0x0566, r31
    41c6:	e0 93 65 05 	sts	0x0565, r30
	}
    41ca:	12 82       	std	Z+2, r1	; 0x02
    41cc:	11 82       	std	Z+1, r1	; 0x01
    41ce:	16 c0       	rjmp	.+44     	; 0x41fc <nrk_rem_from_readyQ+0x64>
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
	_head_node = NULL;
    41d0:	d9 01       	movw	r26, r18
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    41d2:	23 2b       	or	r18, r19
    41d4:	81 f1       	breq	.+96     	; 0x4236 <nrk_rem_from_readyQ+0x9e>
    41d6:	8c 91       	ld	r24, X
    41d8:	99 27       	eor	r25, r25
    41da:	fd 01       	movw	r30, r26
    41dc:	23 81       	ldd	r18, Z+3	; 0x03
    41de:	34 81       	ldd	r19, Z+4	; 0x04
    41e0:	84 17       	cp	r24, r20
    41e2:	95 07       	cpc	r25, r21
    41e4:	a9 f7       	brne	.-22     	; 0x41d0 <nrk_rem_from_readyQ+0x38>
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	

    41e6:	c1 81       	ldd	r28, Z+1	; 0x01
    41e8:	d2 81       	ldd	r29, Z+2	; 0x02
    41ea:	3c 83       	std	Y+4, r19	; 0x04
    41ec:	2b 83       	std	Y+3, r18	; 0x03
	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    41ee:	83 81       	ldd	r24, Z+3	; 0x03
    41f0:	94 81       	ldd	r25, Z+4	; 0x04
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	19 f0       	breq	.+6      	; 0x41fc <nrk_rem_from_readyQ+0x64>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    41f6:	fc 01       	movw	r30, r24
    41f8:	d2 83       	std	Z+2, r29	; 0x02
    41fa:	c1 83       	std	Z+1, r28	; 0x01
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
    41fc:	e0 91 13 05 	lds	r30, 0x0513
    4200:	f0 91 14 05 	lds	r31, 0x0514
    4204:	30 97       	sbiw	r30, 0x00	; 0
    4206:	41 f4       	brne	.+16     	; 0x4218 <nrk_rem_from_readyQ+0x80>
	IdleTask.offset.secs = 0;
    4208:	b0 93 14 05 	sts	0x0514, r27
    420c:	a0 93 13 05 	sts	0x0513, r26
	IdleTask.offset.nano_secs = 0;
    4210:	ed 01       	movw	r28, r26
    4212:	1c 82       	std	Y+4, r1	; 0x04
    4214:	1b 82       	std	Y+3, r1	; 0x03
    4216:	09 c0       	rjmp	.+18     	; 0x422a <nrk_rem_from_readyQ+0x92>
	IdleTask.FirstActivation = TRUE;
	IdleTask.Type = IDLE_TASK;
	IdleTask.SchType = PREEMPTIVE;
    4218:	ed 01       	movw	r28, r26
    421a:	fc 83       	std	Y+4, r31	; 0x04
    421c:	eb 83       	std	Y+3, r30	; 0x03
	nrk_activate_task(&IdleTask);
    421e:	b2 83       	std	Z+2, r27	; 0x02
    4220:	a1 83       	std	Z+1, r26	; 0x01
	
    4222:	b0 93 14 05 	sts	0x0514, r27
    4226:	a0 93 13 05 	sts	0x0513, r26
}

    422a:	e0 91 13 05 	lds	r30, 0x0513
    422e:	f0 91 14 05 	lds	r31, 0x0514
    4232:	12 82       	std	Z+2, r1	; 0x02
    4234:	11 82       	std	Z+1, r1	; 0x01
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	08 95       	ret

0000423c <nrk_get_pid>:
    423c:	e0 91 70 05 	lds	r30, 0x0570
    4240:	f0 91 71 05 	lds	r31, 0x0571
    4244:	80 85       	ldd	r24, Z+8	; 0x08
    4246:	99 27       	eor	r25, r25
    4248:	08 95       	ret

0000424a <_nrk_wait_for_scheduler>:
    424a:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <nrk_idle>
    424e:	e0 91 70 05 	lds	r30, 0x0570
    4252:	f0 91 71 05 	lds	r31, 0x0571
    4256:	85 81       	ldd	r24, Z+5	; 0x05
    4258:	88 23       	and	r24, r24
    425a:	b9 f7       	brne	.-18     	; 0x424a <_nrk_wait_for_scheduler>
    425c:	08 95       	ret

0000425e <nrk_wait>:
    425e:	ff 92       	push	r15
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	28 97       	sbiw	r28, 0x08	; 8
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	29 83       	std	Y+1, r18	; 0x01
    427a:	3a 83       	std	Y+2, r19	; 0x02
    427c:	4b 83       	std	Y+3, r20	; 0x03
    427e:	5c 83       	std	Y+4, r21	; 0x04
    4280:	6d 83       	std	Y+5, r22	; 0x05
    4282:	7e 83       	std	Y+6, r23	; 0x06
    4284:	8f 83       	std	Y+7, r24	; 0x07
    4286:	98 87       	std	Y+8, r25	; 0x08
    4288:	0e 94 5f 1c 	call	0x38be	; 0x38be <nrk_stack_check>
    428c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    4290:	e0 91 70 05 	lds	r30, 0x0570
    4294:	f0 91 71 05 	lds	r31, 0x0571
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	85 83       	std	Z+5, r24	; 0x05
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	90 a3       	std	Z+32, r25	; 0x20
    42a2:	87 8f       	std	Z+31, r24	; 0x1f
    42a4:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    42a8:	f8 2e       	mov	r15, r24
    42aa:	ce 01       	movw	r24, r28
    42ac:	01 96       	adiw	r24, 0x01	; 1
    42ae:	0e 94 85 24 	call	0x490a	; 0x490a <_nrk_time_to_ticks>
    42b2:	e0 91 70 05 	lds	r30, 0x0570
    42b6:	f0 91 71 05 	lds	r31, 0x0571
    42ba:	0f 2d       	mov	r16, r15
    42bc:	11 27       	eor	r17, r17
    42be:	80 0f       	add	r24, r16
    42c0:	91 1f       	adc	r25, r17
    42c2:	96 8b       	std	Z+22, r25	; 0x16
    42c4:	85 8b       	std	Z+21, r24	; 0x15
    42c6:	87 ef       	ldi	r24, 0xF7	; 247
    42c8:	8f 15       	cp	r24, r15
    42ca:	70 f0       	brcs	.+28     	; 0x42e8 <nrk_wait+0x8a>
    42cc:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    42d0:	0e 5f       	subi	r16, 0xFE	; 254
    42d2:	1f 4f       	sbci	r17, 0xFF	; 255
    42d4:	99 27       	eor	r25, r25
    42d6:	80 17       	cp	r24, r16
    42d8:	91 07       	cpc	r25, r17
    42da:	34 f0       	brlt	.+12     	; 0x42e8 <nrk_wait+0x8a>
    42dc:	8f 2d       	mov	r24, r15
    42de:	8e 5f       	subi	r24, 0xFE	; 254
    42e0:	80 93 74 04 	sts	0x0474, r24
    42e4:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    42e8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    42ec:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	28 96       	adiw	r28, 0x08	; 8
    42f6:	0f b6       	in	r0, 0x3f	; 63
    42f8:	f8 94       	cli
    42fa:	de bf       	out	0x3e, r29	; 62
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	cd bf       	out	0x3d, r28	; 61
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	ff 90       	pop	r15
    430a:	08 95       	ret

0000430c <nrk_wait_until>:
    430c:	8f 92       	push	r8
    430e:	9f 92       	push	r9
    4310:	af 92       	push	r10
    4312:	bf 92       	push	r11
    4314:	cf 92       	push	r12
    4316:	df 92       	push	r13
    4318:	ef 92       	push	r14
    431a:	ff 92       	push	r15
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
    4320:	cf 93       	push	r28
    4322:	df 93       	push	r29
    4324:	cd b7       	in	r28, 0x3d	; 61
    4326:	de b7       	in	r29, 0x3e	; 62
    4328:	60 97       	sbiw	r28, 0x10	; 16
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	f8 94       	cli
    432e:	de bf       	out	0x3e, r29	; 62
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	cd bf       	out	0x3d, r28	; 61
    4334:	29 87       	std	Y+9, r18	; 0x09
    4336:	3a 87       	std	Y+10, r19	; 0x0a
    4338:	4b 87       	std	Y+11, r20	; 0x0b
    433a:	5c 87       	std	Y+12, r21	; 0x0c
    433c:	6d 87       	std	Y+13, r22	; 0x0d
    433e:	7e 87       	std	Y+14, r23	; 0x0e
    4340:	8f 87       	std	Y+15, r24	; 0x0f
    4342:	98 8b       	std	Y+16, r25	; 0x10
    4344:	ce 01       	movw	r24, r28
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <nrk_time_get>
    434c:	89 80       	ldd	r8, Y+1	; 0x01
    434e:	9a 80       	ldd	r9, Y+2	; 0x02
    4350:	ab 80       	ldd	r10, Y+3	; 0x03
    4352:	bc 80       	ldd	r11, Y+4	; 0x04
    4354:	cd 80       	ldd	r12, Y+5	; 0x05
    4356:	de 80       	ldd	r13, Y+6	; 0x06
    4358:	ef 80       	ldd	r14, Y+7	; 0x07
    435a:	f8 84       	ldd	r15, Y+8	; 0x08
    435c:	09 85       	ldd	r16, Y+9	; 0x09
    435e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4360:	2b 85       	ldd	r18, Y+11	; 0x0b
    4362:	3c 85       	ldd	r19, Y+12	; 0x0c
    4364:	4d 85       	ldd	r20, Y+13	; 0x0d
    4366:	5e 85       	ldd	r21, Y+14	; 0x0e
    4368:	6f 85       	ldd	r22, Y+15	; 0x0f
    436a:	78 89       	ldd	r23, Y+16	; 0x10
    436c:	ce 01       	movw	r24, r28
    436e:	09 96       	adiw	r24, 0x09	; 9
    4370:	0e 94 66 23 	call	0x46cc	; 0x46cc <nrk_time_sub>
    4374:	8f 3f       	cpi	r24, 0xFF	; 255
    4376:	19 f4       	brne	.+6      	; 0x437e <nrk_wait_until+0x72>
    4378:	8f ef       	ldi	r24, 0xFF	; 255
    437a:	9f ef       	ldi	r25, 0xFF	; 255
    437c:	0c c0       	rjmp	.+24     	; 0x4396 <nrk_wait_until+0x8a>
    437e:	29 85       	ldd	r18, Y+9	; 0x09
    4380:	3a 85       	ldd	r19, Y+10	; 0x0a
    4382:	4b 85       	ldd	r20, Y+11	; 0x0b
    4384:	5c 85       	ldd	r21, Y+12	; 0x0c
    4386:	6d 85       	ldd	r22, Y+13	; 0x0d
    4388:	7e 85       	ldd	r23, Y+14	; 0x0e
    438a:	8f 85       	ldd	r24, Y+15	; 0x0f
    438c:	98 89       	ldd	r25, Y+16	; 0x10
    438e:	0e 94 2f 21 	call	0x425e	; 0x425e <nrk_wait>
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	60 96       	adiw	r28, 0x10	; 16
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	ff 90       	pop	r15
    43ac:	ef 90       	pop	r14
    43ae:	df 90       	pop	r13
    43b0:	cf 90       	pop	r12
    43b2:	bf 90       	pop	r11
    43b4:	af 90       	pop	r10
    43b6:	9f 90       	pop	r9
    43b8:	8f 90       	pop	r8
    43ba:	08 95       	ret

000043bc <nrk_wait_until_nw>:
    43bc:	1f 93       	push	r17
    43be:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    43c2:	e0 91 70 05 	lds	r30, 0x0570
    43c6:	f0 91 71 05 	lds	r31, 0x0571
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	85 83       	std	Z+5, r24	; 0x05
    43ce:	86 83       	std	Z+6, r24	; 0x06
    43d0:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    43d4:	18 2f       	mov	r17, r24
    43d6:	88 3f       	cpi	r24, 0xF8	; 248
    43d8:	80 f4       	brcc	.+32     	; 0x43fa <nrk_wait_until_nw+0x3e>
    43da:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    43de:	21 2f       	mov	r18, r17
    43e0:	33 27       	eor	r19, r19
    43e2:	2e 5f       	subi	r18, 0xFE	; 254
    43e4:	3f 4f       	sbci	r19, 0xFF	; 255
    43e6:	99 27       	eor	r25, r25
    43e8:	82 17       	cp	r24, r18
    43ea:	93 07       	cpc	r25, r19
    43ec:	34 f0       	brlt	.+12     	; 0x43fa <nrk_wait_until_nw+0x3e>
    43ee:	81 2f       	mov	r24, r17
    43f0:	8e 5f       	subi	r24, 0xFE	; 254
    43f2:	80 93 74 04 	sts	0x0474, r24
    43f6:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    43fa:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    43fe:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	1f 91       	pop	r17
    4408:	08 95       	ret

0000440a <nrk_set_next_wakeup>:
    440a:	1f 93       	push	r17
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	cd b7       	in	r28, 0x3d	; 61
    4412:	de b7       	in	r29, 0x3e	; 62
    4414:	28 97       	sbiw	r28, 0x08	; 8
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	f8 94       	cli
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	0f be       	out	0x3f, r0	; 63
    441e:	cd bf       	out	0x3d, r28	; 61
    4420:	29 83       	std	Y+1, r18	; 0x01
    4422:	3a 83       	std	Y+2, r19	; 0x02
    4424:	4b 83       	std	Y+3, r20	; 0x03
    4426:	5c 83       	std	Y+4, r21	; 0x04
    4428:	6d 83       	std	Y+5, r22	; 0x05
    442a:	7e 83       	std	Y+6, r23	; 0x06
    442c:	8f 83       	std	Y+7, r24	; 0x07
    442e:	98 87       	std	Y+8, r25	; 0x08
    4430:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    4434:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    4438:	18 2f       	mov	r17, r24
    443a:	ce 01       	movw	r24, r28
    443c:	01 96       	adiw	r24, 0x01	; 1
    443e:	0e 94 85 24 	call	0x490a	; 0x490a <_nrk_time_to_ticks>
    4442:	83 30       	cpi	r24, 0x03	; 3
    4444:	91 05       	cpc	r25, r1
    4446:	18 f4       	brcc	.+6      	; 0x444e <nrk_set_next_wakeup+0x44>
    4448:	8f ef       	ldi	r24, 0xFF	; 255
    444a:	9f ef       	ldi	r25, 0xFF	; 255
    444c:	0c c0       	rjmp	.+24     	; 0x4466 <nrk_set_next_wakeup+0x5c>
    444e:	e0 91 70 05 	lds	r30, 0x0570
    4452:	f0 91 71 05 	lds	r31, 0x0571
    4456:	81 0f       	add	r24, r17
    4458:	91 1d       	adc	r25, r1
    445a:	96 8b       	std	Z+22, r25	; 0x16
    445c:	85 8b       	std	Z+21, r24	; 0x15
    445e:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	28 96       	adiw	r28, 0x08	; 8
    4468:	0f b6       	in	r0, 0x3f	; 63
    446a:	f8 94       	cli
    446c:	de bf       	out	0x3e, r29	; 62
    446e:	0f be       	out	0x3f, r0	; 63
    4470:	cd bf       	out	0x3d, r28	; 61
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	08 95       	ret

0000447a <nrk_wait_until_ticks>:
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	8c 01       	movw	r16, r24
    4480:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    4484:	e0 91 70 05 	lds	r30, 0x0570
    4488:	f0 91 71 05 	lds	r31, 0x0571
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	85 83       	std	Z+5, r24	; 0x05
    4490:	16 8b       	std	Z+22, r17	; 0x16
    4492:	05 8b       	std	Z+21, r16	; 0x15
    4494:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    4498:	08 2f       	mov	r16, r24
    449a:	88 3f       	cpi	r24, 0xF8	; 248
    449c:	80 f4       	brcc	.+32     	; 0x44be <nrk_wait_until_ticks+0x44>
    449e:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    44a2:	20 2f       	mov	r18, r16
    44a4:	33 27       	eor	r19, r19
    44a6:	2e 5f       	subi	r18, 0xFE	; 254
    44a8:	3f 4f       	sbci	r19, 0xFF	; 255
    44aa:	99 27       	eor	r25, r25
    44ac:	82 17       	cp	r24, r18
    44ae:	93 07       	cpc	r25, r19
    44b0:	34 f0       	brlt	.+12     	; 0x44be <nrk_wait_until_ticks+0x44>
    44b2:	80 2f       	mov	r24, r16
    44b4:	8e 5f       	subi	r24, 0xFE	; 254
    44b6:	80 93 74 04 	sts	0x0474, r24
    44ba:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    44be:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    44c2:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	1f 91       	pop	r17
    44cc:	0f 91       	pop	r16
    44ce:	08 95       	ret

000044d0 <nrk_wait_ticks>:
    return (NRK_VERSION);
}


    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	8c 01       	movw	r16, r24
    44dc:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    44e0:	e0 91 70 05 	lds	r30, 0x0570
    44e4:	f0 91 71 05 	lds	r31, 0x0571
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	85 83       	std	Z+5, r24	; 0x05
    44ec:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    44f0:	f8 2e       	mov	r15, r24
    44f2:	e0 91 70 05 	lds	r30, 0x0570
    44f6:	f0 91 71 05 	lds	r31, 0x0571
    44fa:	c8 2f       	mov	r28, r24
    44fc:	dd 27       	eor	r29, r29
    44fe:	0c 0f       	add	r16, r28
    4500:	1d 1f       	adc	r17, r29
    4502:	16 8b       	std	Z+22, r17	; 0x16
    4504:	05 8b       	std	Z+21, r16	; 0x15
    4506:	87 ef       	ldi	r24, 0xF7	; 247
    4508:	8f 15       	cp	r24, r15
    450a:	68 f0       	brcs	.+26     	; 0x4526 <nrk_wait_ticks+0x56>
    450c:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    4510:	22 96       	adiw	r28, 0x02	; 2
    4512:	99 27       	eor	r25, r25
    4514:	8c 17       	cp	r24, r28
    4516:	9d 07       	cpc	r25, r29
    4518:	34 f0       	brlt	.+12     	; 0x4526 <nrk_wait_ticks+0x56>
    451a:	8f 2d       	mov	r24, r15
    451c:	8e 5f       	subi	r24, 0xFE	; 254
    451e:	80 93 74 04 	sts	0x0474, r24
    4522:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    4526:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    452a:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	df 91       	pop	r29
    4534:	cf 91       	pop	r28
    4536:	1f 91       	pop	r17
    4538:	0f 91       	pop	r16
    453a:	ff 90       	pop	r15
    453c:	08 95       	ret

0000453e <nrk_wait_until_next_n_periods>:
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    453e:	1f 93       	push	r17
    4540:	cf 93       	push	r28
    4542:	df 93       	push	r29
    4544:	ec 01       	movw	r28, r24
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
 
    4546:	0e 94 5f 1c 	call	0x38be	; 0x38be <nrk_stack_check>
	
	         
    454a:	20 97       	sbiw	r28, 0x00	; 0
    454c:	11 f4       	brne	.+4      	; 0x4552 <nrk_wait_until_next_n_periods+0x14>
    454e:	c1 e0       	ldi	r28, 0x01	; 1
    4550:	d0 e0       	ldi	r29, 0x00	; 0

			
    return NRK_OK;
    4552:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>

    4556:	e0 91 70 05 	lds	r30, 0x0570
    455a:	f0 91 71 05 	lds	r31, 0x0571
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	85 83       	std	Z+5, r24	; 0x05
}
    4562:	d0 a3       	std	Z+32, r29	; 0x20
    4564:	c7 8f       	std	Z+31, r28	; 0x1f

    4566:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    456a:	18 2f       	mov	r17, r24

/*
 * _nrk_timer_tick() 
 *
 * This function is called by the interrupt timer0.
    456c:	88 3f       	cpi	r24, 0xF8	; 248
    456e:	80 f4       	brcc	.+32     	; 0x4590 <nrk_wait_until_next_n_periods+0x52>
 * It calls the scheduler.
    4570:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    4574:	21 2f       	mov	r18, r17
    4576:	33 27       	eor	r19, r19
    4578:	2e 5f       	subi	r18, 0xFE	; 254
    457a:	3f 4f       	sbci	r19, 0xFF	; 255
    457c:	99 27       	eor	r25, r25
    457e:	82 17       	cp	r24, r18
    4580:	93 07       	cpc	r25, r19
    4582:	34 f0       	brlt	.+12     	; 0x4590 <nrk_wait_until_next_n_periods+0x52>
 */
    4584:	81 2f       	mov	r24, r17
    4586:	8e 5f       	subi	r24, 0xFE	; 254
void _nrk_timer_tick(void)
    4588:	80 93 74 04 	sts	0x0474, r24
{
    458c:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

    4590:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
	_nrk_scheduler();
    4594:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>

  	return;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	df 91       	pop	r29
    459e:	cf 91       	pop	r28
    45a0:	1f 91       	pop	r17
    45a2:	08 95       	ret

000045a4 <nrk_wait_until_next_period>:
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
}

    45a4:	1f 93       	push	r17

int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    45a6:	0e 94 5f 1c 	call	0x38be	; 0x38be <nrk_stack_check>
	
    //  Already in critical section so no needenter critical section
    45aa:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    if(Task->Type!=IDLE_TASK)
    45ae:	e0 91 70 05 	lds	r30, 0x0570
    45b2:	f0 91 71 05 	lds	r31, 0x0571
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	90 a3       	std	Z+32, r25	; 0x20
    45bc:	87 8f       	std	Z+31, r24	; 0x1f
    	Task->task_ID=nrk_task_init_cnt;
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	85 83       	std	Z+5, r24	; 0x05
    else Task->task_ID=NRK_IDLE_TASK_ID;
    45c2:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    45c6:	18 2f       	mov	r17, r24

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    45c8:	88 3f       	cpi	r24, 0xF8	; 248
    45ca:	80 f4       	brcc	.+32     	; 0x45ec <nrk_wait_until_next_period+0x48>
    //initialize member of TCB structure
    45cc:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    45d0:	21 2f       	mov	r18, r17
    45d2:	33 27       	eor	r19, r19
    45d4:	2e 5f       	subi	r18, 0xFE	; 254
    45d6:	3f 4f       	sbci	r19, 0xFF	; 255
    45d8:	99 27       	eor	r25, r25
    45da:	82 17       	cp	r24, r18
    45dc:	93 07       	cpc	r25, r19
    45de:	34 f0       	brlt	.+12     	; 0x45ec <nrk_wait_until_next_period+0x48>
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    45e0:	81 2f       	mov	r24, r17
    45e2:	8e 5f       	subi	r24, 0xFE	; 254
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    45e4:	80 93 74 04 	sts	0x0474, r24
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    45e8:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    45ec:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    45f0:	0e 94 25 21 	call	0x424a	; 0x424a <_nrk_wait_for_scheduler>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	1f 91       	pop	r17
    45fa:	08 95       	ret

000045fc <nrk_terminate_task>:
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
    45fc:	e0 91 70 05 	lds	r30, 0x0570
    4600:	f0 91 71 05 	lds	r31, 0x0571
    4604:	80 85       	ldd	r24, Z+8	; 0x08
    4606:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_rem_from_readyQ>
*/
    460a:	e0 91 70 05 	lds	r30, 0x0570
    460e:	f0 91 71 05 	lds	r31, 0x0571
    4612:	84 e0       	ldi	r24, 0x04	; 4
    4614:	81 87       	std	Z+9, r24	; 0x09
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	
    4616:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <nrk_wait_until_next_period>

    // you should never get here    
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	08 95       	ret

00004620 <nrk_activate_task>:





void nrk_start (void)
    4620:	ef 92       	push	r14
    4622:	ff 92       	push	r15
    4624:	0f 93       	push	r16
    4626:	1f 93       	push	r17
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	ec 01       	movw	r28, r24
{
	int8_t task_ID;
	uint8_t i,j;
//	NRK_STK *x;
    462e:	4b 81       	ldd	r20, Y+3	; 0x03
    4630:	5c 81       	ldd	r21, Y+4	; 0x04
    4632:	69 81       	ldd	r22, Y+1	; 0x01
    4634:	7a 81       	ldd	r23, Y+2	; 0x02
    4636:	8d 81       	ldd	r24, Y+5	; 0x05
    4638:	9e 81       	ldd	r25, Y+6	; 0x06
    463a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <nrk_task_stk_init>
    463e:	bc 01       	movw	r22, r24
//	unsigned char *stkc;

	/*
		- Get highest priority task from rdy list
    4640:	8f 81       	ldd	r24, Y+7	; 0x07
    4642:	88 23       	and	r24, r24
    4644:	69 f0       	breq	.+26     	; 0x4660 <nrk_activate_task+0x40>
		- set cur prio and start the task 
    4646:	4b 81       	ldd	r20, Y+3	; 0x03
    4648:	5c 81       	ldd	r21, Y+4	; 0x04
    464a:	ee 24       	eor	r14, r14
    464c:	ff 24       	eor	r15, r15
    464e:	00 e0       	ldi	r16, 0x00	; 0
    4650:	10 e0       	ldi	r17, 0x00	; 0
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	ce 01       	movw	r24, r28
    4658:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <nrk_TCB_init>
	*/
    465c:	1f 82       	std	Y+7, r1	; 0x07
    465e:	16 c0       	rjmp	.+44     	; 0x468c <nrk_activate_task+0x6c>
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    4660:	88 81       	ld	r24, Y
    4662:	99 27       	eor	r25, r25
    4664:	87 fd       	sbrc	r24, 7
    4666:	90 95       	com	r25
    4668:	fc 01       	movw	r30, r24
    466a:	a5 e0       	ldi	r26, 0x05	; 5
    466c:	ee 0f       	add	r30, r30
    466e:	ff 1f       	adc	r31, r31
    4670:	aa 95       	dec	r26
    4672:	e1 f7       	brne	.-8      	; 0x466c <nrk_activate_task+0x4c>
    4674:	e8 0f       	add	r30, r24
    4676:	f9 1f       	adc	r31, r25
    4678:	eb 5e       	subi	r30, 0xEB	; 235
    467a:	fa 4f       	sbci	r31, 0xFA	; 250
    467c:	81 85       	ldd	r24, Z+9	; 0x09
    467e:	83 30       	cpi	r24, 0x03	; 3
    4680:	19 f0       	breq	.+6      	; 0x4688 <nrk_activate_task+0x68>
    4682:	8f ef       	ldi	r24, 0xFF	; 255
    4684:	9f ef       	ldi	r25, 0xFF	; 255
    4686:	1b c0       	rjmp	.+54     	; 0x46be <nrk_activate_task+0x9e>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    4688:	71 83       	std	Z+1, r23	; 0x01
    468a:	60 83       	st	Z, r22
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    nrk_cur_task_prio = nrk_high_ready_prio;
		
//    nrk_stack_pointer_restore();

    468c:	88 81       	ld	r24, Y
    468e:	99 27       	eor	r25, r25
    4690:	87 fd       	sbrc	r24, 7
    4692:	90 95       	com	r25
    4694:	fc 01       	movw	r30, r24
    4696:	75 e0       	ldi	r23, 0x05	; 5
    4698:	ee 0f       	add	r30, r30
    469a:	ff 1f       	adc	r31, r31
    469c:	7a 95       	dec	r23
    469e:	e1 f7       	brne	.-8      	; 0x4698 <nrk_activate_task+0x78>
    46a0:	e8 0f       	add	r30, r24
    46a2:	f9 1f       	adc	r31, r25
    46a4:	eb 5e       	subi	r30, 0xEB	; 235
    46a6:	fa 4f       	sbci	r31, 0xFA	; 250
    46a8:	85 89       	ldd	r24, Z+21	; 0x15
    46aa:	96 89       	ldd	r25, Z+22	; 0x16
    46ac:	89 2b       	or	r24, r25
    46ae:	29 f4       	brne	.+10     	; 0x46ba <nrk_activate_task+0x9a>
    /*
    46b0:	82 e0       	ldi	r24, 0x02	; 2
    46b2:	81 87       	std	Z+9, r24	; 0x09
    #ifdef KERNEL_STK_ARRAY
    46b4:	88 81       	ld	r24, Y
    46b6:	0e 94 45 20 	call	0x408a	; 0x408a <nrk_add_to_readyQ>
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	1f 91       	pop	r17
    46c4:	0f 91       	pop	r16
    46c6:	ff 90       	pop	r15
    46c8:	ef 90       	pop	r14
    46ca:	08 95       	ret

000046cc <nrk_time_sub>:

void nrk_halt()
{
nrk_int_disable();
while(1);
}
    46cc:	8f 92       	push	r8
    46ce:	9f 92       	push	r9
    46d0:	af 92       	push	r10
    46d2:	bf 92       	push	r11
    46d4:	cf 92       	push	r12
    46d6:	df 92       	push	r13
    46d8:	ef 92       	push	r14
    46da:	ff 92       	push	r15
    46dc:	0f 93       	push	r16
    46de:	1f 93       	push	r17
    46e0:	cf 93       	push	r28
    46e2:	df 93       	push	r29
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	60 97       	sbiw	r28, 0x10	; 16
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	fc 01       	movw	r30, r24
    46f6:	09 83       	std	Y+1, r16	; 0x01
    46f8:	1a 83       	std	Y+2, r17	; 0x02
    46fa:	2b 83       	std	Y+3, r18	; 0x03
    46fc:	3c 83       	std	Y+4, r19	; 0x04
    46fe:	4d 83       	std	Y+5, r20	; 0x05
    4700:	5e 83       	std	Y+6, r21	; 0x06
    4702:	6f 83       	std	Y+7, r22	; 0x07
    4704:	78 87       	std	Y+8, r23	; 0x08
    4706:	89 86       	std	Y+9, r8	; 0x09
    4708:	9a 86       	std	Y+10, r9	; 0x0a
    470a:	ab 86       	std	Y+11, r10	; 0x0b
    470c:	bc 86       	std	Y+12, r11	; 0x0c
    470e:	cd 86       	std	Y+13, r12	; 0x0d
    4710:	de 86       	std	Y+14, r13	; 0x0e
    4712:	ef 86       	std	Y+15, r14	; 0x0f
    4714:	f8 8a       	std	Y+16, r15	; 0x10
    4716:	2d 81       	ldd	r18, Y+5	; 0x05
    4718:	3e 81       	ldd	r19, Y+6	; 0x06
    471a:	4f 81       	ldd	r20, Y+7	; 0x07
    471c:	58 85       	ldd	r21, Y+8	; 0x08
    471e:	89 81       	ldd	r24, Y+1	; 0x01
    4720:	9a 81       	ldd	r25, Y+2	; 0x02
    4722:	ab 81       	ldd	r26, Y+3	; 0x03
    4724:	bc 81       	ldd	r27, Y+4	; 0x04
    4726:	ad 84       	ldd	r10, Y+13	; 0x0d
    4728:	be 84       	ldd	r11, Y+14	; 0x0e
    472a:	cf 84       	ldd	r12, Y+15	; 0x0f
    472c:	d8 88       	ldd	r13, Y+16	; 0x10
    472e:	e9 84       	ldd	r14, Y+9	; 0x09
    4730:	fa 84       	ldd	r15, Y+10	; 0x0a
    4732:	0b 85       	ldd	r16, Y+11	; 0x0b
    4734:	1c 85       	ldd	r17, Y+12	; 0x0c

    4736:	8e 15       	cp	r24, r14
    4738:	9f 05       	cpc	r25, r15
    473a:	a0 07       	cpc	r26, r16
    473c:	b1 07       	cpc	r27, r17
    473e:	08 f4       	brcc	.+2      	; 0x4742 <nrk_time_sub+0x76>
    4740:	3f c0       	rjmp	.+126    	; 0x47c0 <nrk_time_sub+0xf4>
/**
    4742:	e8 16       	cp	r14, r24
    4744:	f9 06       	cpc	r15, r25
    4746:	0a 07       	cpc	r16, r26
    4748:	1b 07       	cpc	r17, r27
    474a:	91 f4       	brne	.+36     	; 0x4770 <nrk_time_sub+0xa4>
 *  nrk_init();
 * *  - Init TCBlist - linked list of empty TCBs
    474c:	2a 15       	cp	r18, r10
    474e:	3b 05       	cpc	r19, r11
    4750:	4c 05       	cpc	r20, r12
    4752:	5d 05       	cpc	r21, r13
    4754:	a8 f1       	brcs	.+106    	; 0x47c0 <nrk_time_sub+0xf4>
 *  - Init global variables
    4756:	2a 19       	sub	r18, r10
    4758:	3b 09       	sbc	r19, r11
    475a:	4c 09       	sbc	r20, r12
    475c:	5d 09       	sbc	r21, r13
    475e:	24 83       	std	Z+4, r18	; 0x04
    4760:	35 83       	std	Z+5, r19	; 0x05
    4762:	46 83       	std	Z+6, r20	; 0x06
    4764:	57 83       	std	Z+7, r21	; 0x07
 *  - Init event list
    4766:	10 82       	st	Z, r1
    4768:	11 82       	std	Z+1, r1	; 0x01
    476a:	12 82       	std	Z+2, r1	; 0x02
    476c:	13 82       	std	Z+3, r1	; 0x03
    476e:	1c c0       	rjmp	.+56     	; 0x47a8 <nrk_time_sub+0xdc>
 *  - Create idle task
 */
void nrk_init()
    4770:	2a 15       	cp	r18, r10
    4772:	3b 05       	cpc	r19, r11
    4774:	4c 05       	cpc	r20, r12
    4776:	5d 05       	cpc	r21, r13
    4778:	d0 f4       	brcc	.+52     	; 0x47ae <nrk_time_sub+0xe2>
{
	
    uint8_t i;	
//    unsigned char *stkc;
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	a1 09       	sbc	r26, r1
    477e:	b1 09       	sbc	r27, r1
    4780:	8e 19       	sub	r24, r14
    4782:	9f 09       	sbc	r25, r15
    4784:	a0 0b       	sbc	r26, r16
    4786:	b1 0b       	sbc	r27, r17
    4788:	80 83       	st	Z, r24
    478a:	91 83       	std	Z+1, r25	; 0x01
    478c:	a2 83       	std	Z+2, r26	; 0x02
    478e:	b3 83       	std	Z+3, r27	; 0x03
	
    4790:	20 50       	subi	r18, 0x00	; 0
    4792:	36 43       	sbci	r19, 0x36	; 54
    4794:	45 46       	sbci	r20, 0x65	; 101
    4796:	54 4c       	sbci	r21, 0xC4	; 196
    4798:	2a 19       	sub	r18, r10
    479a:	3b 09       	sbc	r19, r11
    479c:	4c 09       	sbc	r20, r12
    479e:	5d 09       	sbc	r21, r13
    47a0:	24 83       	std	Z+4, r18	; 0x04
    47a2:	35 83       	std	Z+5, r19	; 0x05
    47a4:	46 83       	std	Z+6, r20	; 0x06
    47a6:	57 83       	std	Z+7, r21	; 0x07
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	0b c0       	rjmp	.+22     	; 0x47c4 <nrk_time_sub+0xf8>
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    47ae:	8e 19       	sub	r24, r14
    47b0:	9f 09       	sbc	r25, r15
    47b2:	a0 0b       	sbc	r26, r16
    47b4:	b1 0b       	sbc	r27, r17
    47b6:	80 83       	st	Z, r24
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	a2 83       	std	Z+2, r26	; 0x02
    47bc:	b3 83       	std	Z+3, r27	; 0x03
    47be:	ec cf       	rjmp	.-40     	; 0x4798 <nrk_time_sub+0xcc>
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	9f ef       	ldi	r25, 0xFF	; 255
    47c4:	60 96       	adiw	r28, 0x10	; 16
    47c6:	0f b6       	in	r0, 0x3f	; 63
    47c8:	f8 94       	cli
    47ca:	de bf       	out	0x3e, r29	; 62
    47cc:	0f be       	out	0x3f, r0	; 63
    47ce:	cd bf       	out	0x3d, r28	; 61
    47d0:	df 91       	pop	r29
    47d2:	cf 91       	pop	r28
    47d4:	1f 91       	pop	r17
    47d6:	0f 91       	pop	r16
    47d8:	ff 90       	pop	r15
    47da:	ef 90       	pop	r14
    47dc:	df 90       	pop	r13
    47de:	cf 90       	pop	r12
    47e0:	bf 90       	pop	r11
    47e2:	af 90       	pop	r10
    47e4:	9f 90       	pop	r9
    47e6:	8f 90       	pop	r8
    47e8:	08 95       	ret

000047ea <nrk_time_compact_nanos>:
   #ifdef NRK_REBOOT_ON_ERROR
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
    47ea:	fc 01       	movw	r30, r24
    47ec:	13 c0       	rjmp	.+38     	; 0x4814 <nrk_time_compact_nanos+0x2a>
      			nrk_spin_wait_us (1000);
	   }
   #endif
    47ee:	80 50       	subi	r24, 0x00	; 0
    47f0:	9a 4c       	sbci	r25, 0xCA	; 202
    47f2:	aa 49       	sbci	r26, 0x9A	; 154
    47f4:	bb 43       	sbci	r27, 0x3B	; 59
    47f6:	84 83       	std	Z+4, r24	; 0x04
    47f8:	95 83       	std	Z+5, r25	; 0x05
    47fa:	a6 83       	std	Z+6, r26	; 0x06
    47fc:	b7 83       	std	Z+7, r27	; 0x07
   #endif
    47fe:	80 81       	ld	r24, Z
    4800:	91 81       	ldd	r25, Z+1	; 0x01
    4802:	a2 81       	ldd	r26, Z+2	; 0x02
    4804:	b3 81       	ldd	r27, Z+3	; 0x03
    4806:	01 96       	adiw	r24, 0x01	; 1
    4808:	a1 1d       	adc	r26, r1
    480a:	b1 1d       	adc	r27, r1
    480c:	80 83       	st	Z, r24
    480e:	91 83       	std	Z+1, r25	; 0x01
    4810:	a2 83       	std	Z+2, r26	; 0x02
    4812:	b3 83       	std	Z+3, r27	; 0x03
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
    4814:	84 81       	ldd	r24, Z+4	; 0x04
    4816:	95 81       	ldd	r25, Z+5	; 0x05
    4818:	a6 81       	ldd	r26, Z+6	; 0x06
    481a:	b7 81       	ldd	r27, Z+7	; 0x07
    481c:	80 30       	cpi	r24, 0x00	; 0
    481e:	2a ec       	ldi	r18, 0xCA	; 202
    4820:	92 07       	cpc	r25, r18
    4822:	2a e9       	ldi	r18, 0x9A	; 154
    4824:	a2 07       	cpc	r26, r18
    4826:	2b e3       	ldi	r18, 0x3B	; 59
    4828:	b2 07       	cpc	r27, r18
    482a:	08 f7       	brcc	.-62     	; 0x47ee <nrk_time_compact_nanos+0x4>
    482c:	08 95       	ret

0000482e <nrk_time_add>:
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
#endif
   //if((i&0x8)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);

    482e:	8f 92       	push	r8
    4830:	9f 92       	push	r9
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	60 97       	sbiw	r28, 0x10	; 16
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	fc 01       	movw	r30, r24
    4858:	09 83       	std	Y+1, r16	; 0x01
    485a:	1a 83       	std	Y+2, r17	; 0x02
    485c:	2b 83       	std	Y+3, r18	; 0x03
    485e:	3c 83       	std	Y+4, r19	; 0x04
    4860:	4d 83       	std	Y+5, r20	; 0x05
    4862:	5e 83       	std	Y+6, r21	; 0x06
    4864:	6f 83       	std	Y+7, r22	; 0x07
    4866:	78 87       	std	Y+8, r23	; 0x08
    4868:	89 86       	std	Y+9, r8	; 0x09
    486a:	9a 86       	std	Y+10, r9	; 0x0a
    486c:	ab 86       	std	Y+11, r10	; 0x0b
    486e:	bc 86       	std	Y+12, r11	; 0x0c
    4870:	cd 86       	std	Y+13, r12	; 0x0d
    4872:	de 86       	std	Y+14, r13	; 0x0e
    4874:	ef 86       	std	Y+15, r14	; 0x0f
    4876:	f8 8a       	std	Y+16, r15	; 0x10
    4878:	ad 80       	ldd	r10, Y+5	; 0x05
    487a:	be 80       	ldd	r11, Y+6	; 0x06
    487c:	cf 80       	ldd	r12, Y+7	; 0x07
    487e:	d8 84       	ldd	r13, Y+8	; 0x08
    4880:	ed 84       	ldd	r14, Y+13	; 0x0d
    4882:	fe 84       	ldd	r15, Y+14	; 0x0e
    4884:	0f 85       	ldd	r16, Y+15	; 0x0f
    4886:	18 89       	ldd	r17, Y+16	; 0x10
   //if(_nrk_startup_ok()==0) nrk_kernel_error_add(NRK_BAD_STARTUP,0); 
    4888:	89 85       	ldd	r24, Y+9	; 0x09
    488a:	9a 85       	ldd	r25, Y+10	; 0x0a
    488c:	ab 85       	ldd	r26, Y+11	; 0x0b
    488e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4890:	29 81       	ldd	r18, Y+1	; 0x01
    4892:	3a 81       	ldd	r19, Y+2	; 0x02
    4894:	4b 81       	ldd	r20, Y+3	; 0x03
    4896:	5c 81       	ldd	r21, Y+4	; 0x04
    4898:	82 0f       	add	r24, r18
    489a:	93 1f       	adc	r25, r19
    489c:	a4 1f       	adc	r26, r20
    489e:	b5 1f       	adc	r27, r21
    48a0:	80 83       	st	Z, r24
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	a2 83       	std	Z+2, r26	; 0x02
    48a6:	b3 83       	std	Z+3, r27	; 0x03
#endif
    48a8:	ea 0c       	add	r14, r10
    48aa:	fb 1c       	adc	r15, r11
    48ac:	0c 1d       	adc	r16, r12
    48ae:	1d 1d       	adc	r17, r13
    48b0:	e4 82       	std	Z+4, r14	; 0x04
    48b2:	f5 82       	std	Z+5, r15	; 0x05
    48b4:	06 83       	std	Z+6, r16	; 0x06
    48b6:	17 83       	std	Z+7, r17	; 0x07

    48b8:	cf 01       	movw	r24, r30
    48ba:	0e 94 f5 23 	call	0x47ea	; 0x47ea <nrk_time_compact_nanos>
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	60 96       	adiw	r28, 0x10	; 16
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	f8 94       	cli
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	df 91       	pop	r29
    48d0:	cf 91       	pop	r28
    48d2:	1f 91       	pop	r17
    48d4:	0f 91       	pop	r16
    48d6:	ff 90       	pop	r15
    48d8:	ef 90       	pop	r14
    48da:	df 90       	pop	r13
    48dc:	cf 90       	pop	r12
    48de:	bf 90       	pop	r11
    48e0:	af 90       	pop	r10
    48e2:	9f 90       	pop	r9
    48e4:	8f 90       	pop	r8
    48e6:	08 95       	ret

000048e8 <nrk_time_set>:
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
	}
    nrk_watchdog_enable();
    48e8:	60 93 67 05 	sts	0x0567, r22
    48ec:	70 93 68 05 	sts	0x0568, r23
    48f0:	80 93 69 05 	sts	0x0569, r24
    48f4:	90 93 6a 05 	sts	0x056A, r25
    #endif
    48f8:	20 93 6b 05 	sts	0x056B, r18
    48fc:	30 93 6c 05 	sts	0x056C, r19
    4900:	40 93 6d 05 	sts	0x056D, r20
    4904:	50 93 6e 05 	sts	0x056E, r21
    4908:	08 95       	ret

0000490a <_nrk_time_to_ticks>:
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
    490a:	2f 92       	push	r2
    490c:	3f 92       	push	r3
    490e:	4f 92       	push	r4
    4910:	5f 92       	push	r5
    4912:	6f 92       	push	r6
    4914:	7f 92       	push	r7
    4916:	8f 92       	push	r8
    4918:	9f 92       	push	r9
    491a:	af 92       	push	r10
    491c:	bf 92       	push	r11
    491e:	cf 92       	push	r12
    4920:	df 92       	push	r13
    4922:	ef 92       	push	r14
    4924:	ff 92       	push	r15
    4926:	0f 93       	push	r16
    4928:	1f 93       	push	r17
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
    4932:	28 97       	sbiw	r28, 0x08	; 8
    4934:	0f b6       	in	r0, 0x3f	; 63
    4936:	f8 94       	cli
    4938:	de bf       	out	0x3e, r29	; 62
    493a:	0f be       	out	0x3f, r0	; 63
    493c:	cd bf       	out	0x3d, r28	; 61
    493e:	fc 01       	movw	r30, r24
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    4940:	c0 80       	ld	r12, Z
    4942:	d1 80       	ldd	r13, Z+1	; 0x01
    4944:	e2 80       	ldd	r14, Z+2	; 0x02
    4946:	f3 80       	ldd	r15, Z+3	; 0x03
    4948:	64 81       	ldd	r22, Z+4	; 0x04
    494a:	75 81       	ldd	r23, Z+5	; 0x05
    494c:	86 81       	ldd	r24, Z+6	; 0x06
    494e:	97 81       	ldd	r25, Z+7	; 0x07
    4950:	c1 14       	cp	r12, r1
    4952:	d1 04       	cpc	r13, r1
    4954:	e1 04       	cpc	r14, r1
    4956:	f1 04       	cpc	r15, r1
    4958:	09 f4       	brne	.+2      	; 0x495c <_nrk_time_to_ticks+0x52>
    495a:	a6 c0       	rjmp	.+332    	; 0x4aa8 <_nrk_time_to_ticks+0x19e>
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    495c:	22 e4       	ldi	r18, 0x42	; 66
    495e:	c2 16       	cp	r12, r18
    4960:	d1 04       	cpc	r13, r1
    4962:	e1 04       	cpc	r14, r1
    4964:	f1 04       	cpc	r15, r1
    4966:	18 f0       	brcs	.+6      	; 0x496e <_nrk_time_to_ticks+0x64>
    4968:	80 e0       	ldi	r24, 0x00	; 0
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	a4 c0       	rjmp	.+328    	; 0x4ab6 <_nrk_time_to_ticks+0x1ac>
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    	*stkc = STK_CANARY_VAL;
    	stkc = NRK_KERNEL_STK_TOP;
    496e:	1b 01       	movw	r2, r22
    4970:	2c 01       	movw	r4, r24
    4972:	66 24       	eor	r6, r6
    4974:	77 24       	eor	r7, r7
    4976:	88 24       	eor	r8, r8
    4978:	99 24       	eor	r9, r9
    497a:	aa 24       	eor	r10, r10
    497c:	bb 24       	eor	r11, r11
    497e:	6e c0       	rjmp	.+220    	; 0x4a5c <_nrk_time_to_ticks+0x152>
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    #endif
    4980:	19 82       	std	Y+1, r1	; 0x01
    4982:	8a ec       	ldi	r24, 0xCA	; 202
    4984:	8a 83       	std	Y+2, r24	; 0x02
    4986:	ea e9       	ldi	r30, 0x9A	; 154
    4988:	eb 83       	std	Y+3, r30	; 0x03
    498a:	fb e3       	ldi	r31, 0x3B	; 59
    498c:	fc 83       	std	Y+4, r31	; 0x04
    498e:	1d 82       	std	Y+5, r1	; 0x05
    4990:	1e 82       	std	Y+6, r1	; 0x06
    4992:	1f 82       	std	Y+7, r1	; 0x07
    4994:	18 86       	std	Y+8, r1	; 0x08
    4996:	00 e0       	ldi	r16, 0x00	; 0
    4998:	02 0d       	add	r16, r2
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	02 15       	cp	r16, r2
    499e:	08 f0       	brcs	.+2      	; 0x49a2 <_nrk_time_to_ticks+0x98>
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	1a 81       	ldd	r17, Y+2	; 0x02
    49a4:	13 0d       	add	r17, r3
    49a6:	a1 e0       	ldi	r26, 0x01	; 1
    49a8:	13 15       	cp	r17, r3
    49aa:	08 f0       	brcs	.+2      	; 0x49ae <_nrk_time_to_ticks+0xa4>
    49ac:	a0 e0       	ldi	r26, 0x00	; 0
    49ae:	81 0f       	add	r24, r17
    49b0:	91 e0       	ldi	r25, 0x01	; 1
    49b2:	81 17       	cp	r24, r17
    49b4:	08 f0       	brcs	.+2      	; 0x49b8 <_nrk_time_to_ticks+0xae>
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	a9 2b       	or	r26, r25
    49ba:	18 2f       	mov	r17, r24
    49bc:	2b 81       	ldd	r18, Y+3	; 0x03
    49be:	24 0d       	add	r18, r4
    49c0:	b1 e0       	ldi	r27, 0x01	; 1
    49c2:	24 15       	cp	r18, r4
    49c4:	08 f0       	brcs	.+2      	; 0x49c8 <_nrk_time_to_ticks+0xbe>
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	8a 2f       	mov	r24, r26
    49ca:	82 0f       	add	r24, r18
    49cc:	91 e0       	ldi	r25, 0x01	; 1
    49ce:	82 17       	cp	r24, r18
    49d0:	08 f0       	brcs	.+2      	; 0x49d4 <_nrk_time_to_ticks+0xca>
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	b9 2b       	or	r27, r25
    49d6:	28 2f       	mov	r18, r24
    49d8:	3c 81       	ldd	r19, Y+4	; 0x04
    49da:	35 0d       	add	r19, r5
    49dc:	a1 e0       	ldi	r26, 0x01	; 1
    49de:	35 15       	cp	r19, r5
    49e0:	08 f0       	brcs	.+2      	; 0x49e4 <_nrk_time_to_ticks+0xda>
    49e2:	a0 e0       	ldi	r26, 0x00	; 0
    49e4:	8b 2f       	mov	r24, r27
    49e6:	83 0f       	add	r24, r19
    49e8:	91 e0       	ldi	r25, 0x01	; 1
    49ea:	83 17       	cp	r24, r19
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <_nrk_time_to_ticks+0xe6>
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	a9 2b       	or	r26, r25
    49f2:	38 2f       	mov	r19, r24
    49f4:	4d 81       	ldd	r20, Y+5	; 0x05
    49f6:	46 0d       	add	r20, r6
    49f8:	b1 e0       	ldi	r27, 0x01	; 1
    49fa:	46 15       	cp	r20, r6
    49fc:	08 f0       	brcs	.+2      	; 0x4a00 <_nrk_time_to_ticks+0xf6>
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	8a 2f       	mov	r24, r26
    4a02:	84 0f       	add	r24, r20
    4a04:	91 e0       	ldi	r25, 0x01	; 1
    4a06:	84 17       	cp	r24, r20
    4a08:	08 f0       	brcs	.+2      	; 0x4a0c <_nrk_time_to_ticks+0x102>
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	b9 2b       	or	r27, r25
    4a0e:	48 2f       	mov	r20, r24
    4a10:	5e 81       	ldd	r21, Y+6	; 0x06
    4a12:	57 0d       	add	r21, r7
    4a14:	a1 e0       	ldi	r26, 0x01	; 1
    4a16:	57 15       	cp	r21, r7
    4a18:	08 f0       	brcs	.+2      	; 0x4a1c <_nrk_time_to_ticks+0x112>
    4a1a:	a0 e0       	ldi	r26, 0x00	; 0
    4a1c:	8b 2f       	mov	r24, r27
    4a1e:	85 0f       	add	r24, r21
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	85 17       	cp	r24, r21
    4a24:	08 f0       	brcs	.+2      	; 0x4a28 <_nrk_time_to_ticks+0x11e>
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	a9 2b       	or	r26, r25
    4a2a:	58 2f       	mov	r21, r24
    4a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a2e:	68 0d       	add	r22, r8
    4a30:	f1 e0       	ldi	r31, 0x01	; 1
    4a32:	68 15       	cp	r22, r8
    4a34:	08 f0       	brcs	.+2      	; 0x4a38 <_nrk_time_to_ticks+0x12e>
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	9a 2f       	mov	r25, r26
    4a3a:	96 0f       	add	r25, r22
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	96 17       	cp	r25, r22
    4a40:	08 f0       	brcs	.+2      	; 0x4a44 <_nrk_time_to_ticks+0x13a>
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	8f 2b       	or	r24, r31
    4a46:	78 85       	ldd	r23, Y+8	; 0x08
    4a48:	79 0d       	add	r23, r9
    4a4a:	87 0f       	add	r24, r23
    4a4c:	20 2e       	mov	r2, r16
    4a4e:	31 2e       	mov	r3, r17
    4a50:	42 2e       	mov	r4, r18
    4a52:	53 2e       	mov	r5, r19
    4a54:	64 2e       	mov	r6, r20
    4a56:	75 2e       	mov	r7, r21
    4a58:	89 2e       	mov	r8, r25
    4a5a:	98 2e       	mov	r9, r24
    4a5c:	8a 2d       	mov	r24, r10
    4a5e:	99 27       	eor	r25, r25
    4a60:	aa 27       	eor	r26, r26
    4a62:	bb 27       	eor	r27, r27
    4a64:	08 94       	sec
    4a66:	a1 1c       	adc	r10, r1
    4a68:	b1 1c       	adc	r11, r1
    4a6a:	8c 15       	cp	r24, r12
    4a6c:	9d 05       	cpc	r25, r13
    4a6e:	ae 05       	cpc	r26, r14
    4a70:	bf 05       	cpc	r27, r15
    4a72:	08 f4       	brcc	.+2      	; 0x4a76 <_nrk_time_to_ticks+0x16c>
    4a74:	85 cf       	rjmp	.-246    	; 0x4980 <_nrk_time_to_ticks+0x76>
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4a76:	23 eb       	ldi	r18, 0xB3	; 179
    4a78:	a2 2e       	mov	r10, r18
    4a7a:	96 ee       	ldi	r25, 0xE6	; 230
    4a7c:	b9 2e       	mov	r11, r25
    4a7e:	8e e0       	ldi	r24, 0x0E	; 14
    4a80:	c8 2e       	mov	r12, r24
    4a82:	dd 24       	eor	r13, r13
    4a84:	ee 24       	eor	r14, r14
    4a86:	ff 24       	eor	r15, r15
    4a88:	00 e0       	ldi	r16, 0x00	; 0
    4a8a:	10 e0       	ldi	r17, 0x00	; 0
    4a8c:	22 2d       	mov	r18, r2
    4a8e:	33 2d       	mov	r19, r3
    4a90:	44 2d       	mov	r20, r4
    4a92:	55 2d       	mov	r21, r5
    4a94:	66 2d       	mov	r22, r6
    4a96:	77 2d       	mov	r23, r7
    4a98:	88 2d       	mov	r24, r8
    4a9a:	99 2d       	mov	r25, r9
    4a9c:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <__udivdi3>
    4aa0:	a2 2e       	mov	r10, r18
    4aa2:	b3 2e       	mov	r11, r19
    4aa4:	c5 01       	movw	r24, r10
    4aa6:	07 c0       	rjmp	.+14     	; 0x4ab6 <_nrk_time_to_ticks+0x1ac>
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    4aa8:	23 eb       	ldi	r18, 0xB3	; 179
    4aaa:	36 ee       	ldi	r19, 0xE6	; 230
    4aac:	4e e0       	ldi	r20, 0x0E	; 14
    4aae:	50 e0       	ldi	r21, 0x00	; 0
    4ab0:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    4ab4:	c9 01       	movw	r24, r18
    4ab6:	28 96       	adiw	r28, 0x08	; 8
    4ab8:	0f b6       	in	r0, 0x3f	; 63
    4aba:	f8 94       	cli
    4abc:	de bf       	out	0x3e, r29	; 62
    4abe:	0f be       	out	0x3f, r0	; 63
    4ac0:	cd bf       	out	0x3d, r28	; 61
    4ac2:	df 91       	pop	r29
    4ac4:	cf 91       	pop	r28
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	ff 90       	pop	r15
    4acc:	ef 90       	pop	r14
    4ace:	df 90       	pop	r13
    4ad0:	cf 90       	pop	r12
    4ad2:	bf 90       	pop	r11
    4ad4:	af 90       	pop	r10
    4ad6:	9f 90       	pop	r9
    4ad8:	8f 90       	pop	r8
    4ada:	7f 90       	pop	r7
    4adc:	6f 90       	pop	r6
    4ade:	5f 90       	pop	r5
    4ae0:	4f 90       	pop	r4
    4ae2:	3f 90       	pop	r3
    4ae4:	2f 90       	pop	r2
    4ae6:	08 95       	ret

00004ae8 <_nrk_ticks_to_time>:
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
        }
  
    4ae8:	2f 92       	push	r2
    4aea:	3f 92       	push	r3
    4aec:	4f 92       	push	r4
    4aee:	5f 92       	push	r5
    4af0:	6f 92       	push	r6
    4af2:	7f 92       	push	r7
    4af4:	8f 92       	push	r8
    4af6:	9f 92       	push	r9
    4af8:	af 92       	push	r10
    4afa:	bf 92       	push	r11
    4afc:	cf 92       	push	r12
    4afe:	df 92       	push	r13
    4b00:	ef 92       	push	r14
    4b02:	ff 92       	push	r15
    4b04:	0f 93       	push	r16
    4b06:	1f 93       	push	r17
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	cd b7       	in	r28, 0x3d	; 61
    4b0e:	de b7       	in	r29, 0x3e	; 62
    4b10:	28 97       	sbiw	r28, 0x08	; 8
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	7b 01       	movw	r14, r22
    4b1e:	8c 01       	movw	r16, r24
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    4b20:	73 70       	andi	r23, 0x03	; 3
    4b22:	80 70       	andi	r24, 0x00	; 0
    4b24:	90 70       	andi	r25, 0x00	; 0
    4b26:	23 eb       	ldi	r18, 0xB3	; 179
    4b28:	36 ee       	ldi	r19, 0xE6	; 230
    4b2a:	4e e0       	ldi	r20, 0x0E	; 14
    4b2c:	50 e0       	ldi	r21, 0x00	; 0
    4b2e:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    4b32:	6d 83       	std	Y+5, r22	; 0x05
    4b34:	7e 83       	std	Y+6, r23	; 0x06
    4b36:	8f 83       	std	Y+7, r24	; 0x07
    4b38:	98 87       	std	Y+8, r25	; 0x08
    4b3a:	3a e0       	ldi	r19, 0x0A	; 10
    4b3c:	16 95       	lsr	r17
    4b3e:	07 95       	ror	r16
    4b40:	f7 94       	ror	r15
    4b42:	e7 94       	ror	r14
    4b44:	3a 95       	dec	r19
    4b46:	d1 f7       	brne	.-12     	; 0x4b3c <_nrk_ticks_to_time+0x54>
    4b48:	e9 82       	std	Y+1, r14	; 0x01
    4b4a:	fa 82       	std	Y+2, r15	; 0x02
    4b4c:	0b 83       	std	Y+3, r16	; 0x03
    4b4e:	1c 83       	std	Y+4, r17	; 0x04
    4b50:	98 85       	ldd	r25, Y+8	; 0x08
    4b52:	29 80       	ldd	r2, Y+1	; 0x01
    4b54:	3a 80       	ldd	r3, Y+2	; 0x02
    4b56:	4b 80       	ldd	r4, Y+3	; 0x03
    4b58:	5c 80       	ldd	r5, Y+4	; 0x04
    4b5a:	6d 80       	ldd	r6, Y+5	; 0x05
    4b5c:	7e 80       	ldd	r7, Y+6	; 0x06
    4b5e:	8f 80       	ldd	r8, Y+7	; 0x07
	}
    4b60:	22 2d       	mov	r18, r2
    4b62:	33 2d       	mov	r19, r3
    4b64:	44 2d       	mov	r20, r4
    4b66:	55 2d       	mov	r21, r5
    4b68:	66 2d       	mov	r22, r6
    4b6a:	77 2d       	mov	r23, r7
    4b6c:	88 2d       	mov	r24, r8
    4b6e:	28 96       	adiw	r28, 0x08	; 8
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	df 90       	pop	r13
    4b88:	cf 90       	pop	r12
    4b8a:	bf 90       	pop	r11
    4b8c:	af 90       	pop	r10
    4b8e:	9f 90       	pop	r9
    4b90:	8f 90       	pop	r8
    4b92:	7f 90       	pop	r7
    4b94:	6f 90       	pop	r6
    4b96:	5f 90       	pop	r5
    4b98:	4f 90       	pop	r4
    4b9a:	3f 90       	pop	r3
    4b9c:	2f 90       	pop	r2
    4b9e:	08 95       	ret

00004ba0 <_nrk_time_to_ticks_long>:
	
	_nrk_readyQ[0].Prev	=	NULL;
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    4ba0:	2f 92       	push	r2
    4ba2:	3f 92       	push	r3
    4ba4:	4f 92       	push	r4
    4ba6:	5f 92       	push	r5
    4ba8:	6f 92       	push	r6
    4baa:	7f 92       	push	r7
    4bac:	8f 92       	push	r8
    4bae:	9f 92       	push	r9
    4bb0:	af 92       	push	r10
    4bb2:	bf 92       	push	r11
    4bb4:	cf 92       	push	r12
    4bb6:	df 92       	push	r13
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	cf 93       	push	r28
    4bc2:	df 93       	push	r29
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	28 97       	sbiw	r28, 0x08	; 8
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	fc 01       	movw	r30, r24
	_head_node = NULL;
	_free_node = &_nrk_readyQ[0];
	
	
	
    4bd6:	c0 80       	ld	r12, Z
    4bd8:	d1 80       	ldd	r13, Z+1	; 0x01
    4bda:	e2 80       	ldd	r14, Z+2	; 0x02
    4bdc:	f3 80       	ldd	r15, Z+3	; 0x03
    4bde:	c1 14       	cp	r12, r1
    4be0:	d1 04       	cpc	r13, r1
    4be2:	e1 04       	cpc	r14, r1
    4be4:	f1 04       	cpc	r15, r1
    4be6:	09 f4       	brne	.+2      	; 0x4bea <_nrk_time_to_ticks_long+0x4a>
    4be8:	a2 c0       	rjmp	.+324    	; 0x4d2e <_nrk_time_to_ticks_long+0x18e>

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    4bea:	24 80       	ldd	r2, Z+4	; 0x04
    4bec:	35 80       	ldd	r3, Z+5	; 0x05
    4bee:	46 80       	ldd	r4, Z+6	; 0x06
    4bf0:	57 80       	ldd	r5, Z+7	; 0x07
    4bf2:	66 24       	eor	r6, r6
    4bf4:	77 24       	eor	r7, r7
    4bf6:	88 24       	eor	r8, r8
    4bf8:	99 24       	eor	r9, r9
    4bfa:	aa 24       	eor	r10, r10
    4bfc:	bb 24       	eor	r11, r11
    4bfe:	6e c0       	rjmp	.+220    	; 0x4cdc <_nrk_time_to_ticks_long+0x13c>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    4c00:	19 82       	std	Y+1, r1	; 0x01
    4c02:	8a ec       	ldi	r24, 0xCA	; 202
    4c04:	8a 83       	std	Y+2, r24	; 0x02
    4c06:	ea e9       	ldi	r30, 0x9A	; 154
    4c08:	eb 83       	std	Y+3, r30	; 0x03
    4c0a:	fb e3       	ldi	r31, 0x3B	; 59
    4c0c:	fc 83       	std	Y+4, r31	; 0x04
    4c0e:	1d 82       	std	Y+5, r1	; 0x05
    4c10:	1e 82       	std	Y+6, r1	; 0x06
    4c12:	1f 82       	std	Y+7, r1	; 0x07
    4c14:	18 86       	std	Y+8, r1	; 0x08
    4c16:	00 e0       	ldi	r16, 0x00	; 0
    4c18:	02 0d       	add	r16, r2
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	02 15       	cp	r16, r2
    4c1e:	08 f0       	brcs	.+2      	; 0x4c22 <_nrk_time_to_ticks_long+0x82>
    4c20:	80 e0       	ldi	r24, 0x00	; 0
    4c22:	1a 81       	ldd	r17, Y+2	; 0x02
    4c24:	13 0d       	add	r17, r3
    4c26:	a1 e0       	ldi	r26, 0x01	; 1
    4c28:	13 15       	cp	r17, r3
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <_nrk_time_to_ticks_long+0x8e>
    4c2c:	a0 e0       	ldi	r26, 0x00	; 0
    4c2e:	81 0f       	add	r24, r17
    4c30:	91 e0       	ldi	r25, 0x01	; 1
    4c32:	81 17       	cp	r24, r17
    4c34:	08 f0       	brcs	.+2      	; 0x4c38 <_nrk_time_to_ticks_long+0x98>
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	a9 2b       	or	r26, r25
    4c3a:	18 2f       	mov	r17, r24
    4c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    4c3e:	24 0d       	add	r18, r4
    4c40:	b1 e0       	ldi	r27, 0x01	; 1
    4c42:	24 15       	cp	r18, r4
    4c44:	08 f0       	brcs	.+2      	; 0x4c48 <_nrk_time_to_ticks_long+0xa8>
    4c46:	b0 e0       	ldi	r27, 0x00	; 0
    4c48:	8a 2f       	mov	r24, r26
    4c4a:	82 0f       	add	r24, r18
    4c4c:	91 e0       	ldi	r25, 0x01	; 1
    4c4e:	82 17       	cp	r24, r18
    4c50:	08 f0       	brcs	.+2      	; 0x4c54 <_nrk_time_to_ticks_long+0xb4>
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	b9 2b       	or	r27, r25
    4c56:	28 2f       	mov	r18, r24
    4c58:	3c 81       	ldd	r19, Y+4	; 0x04
    4c5a:	35 0d       	add	r19, r5
    4c5c:	a1 e0       	ldi	r26, 0x01	; 1
    4c5e:	35 15       	cp	r19, r5
    4c60:	08 f0       	brcs	.+2      	; 0x4c64 <_nrk_time_to_ticks_long+0xc4>
    4c62:	a0 e0       	ldi	r26, 0x00	; 0
    4c64:	8b 2f       	mov	r24, r27
    4c66:	83 0f       	add	r24, r19
    4c68:	91 e0       	ldi	r25, 0x01	; 1
    4c6a:	83 17       	cp	r24, r19
    4c6c:	08 f0       	brcs	.+2      	; 0x4c70 <_nrk_time_to_ticks_long+0xd0>
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	a9 2b       	or	r26, r25
    4c72:	38 2f       	mov	r19, r24
    4c74:	4d 81       	ldd	r20, Y+5	; 0x05
    4c76:	46 0d       	add	r20, r6
    4c78:	b1 e0       	ldi	r27, 0x01	; 1
    4c7a:	46 15       	cp	r20, r6
    4c7c:	08 f0       	brcs	.+2      	; 0x4c80 <_nrk_time_to_ticks_long+0xe0>
    4c7e:	b0 e0       	ldi	r27, 0x00	; 0
    4c80:	8a 2f       	mov	r24, r26
    4c82:	84 0f       	add	r24, r20
    4c84:	91 e0       	ldi	r25, 0x01	; 1
    4c86:	84 17       	cp	r24, r20
    4c88:	08 f0       	brcs	.+2      	; 0x4c8c <_nrk_time_to_ticks_long+0xec>
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	b9 2b       	or	r27, r25
    4c8e:	48 2f       	mov	r20, r24
    4c90:	5e 81       	ldd	r21, Y+6	; 0x06
    4c92:	57 0d       	add	r21, r7
    4c94:	a1 e0       	ldi	r26, 0x01	; 1
    4c96:	57 15       	cp	r21, r7
    4c98:	08 f0       	brcs	.+2      	; 0x4c9c <_nrk_time_to_ticks_long+0xfc>
    4c9a:	a0 e0       	ldi	r26, 0x00	; 0
    4c9c:	8b 2f       	mov	r24, r27
    4c9e:	85 0f       	add	r24, r21
    4ca0:	91 e0       	ldi	r25, 0x01	; 1
    4ca2:	85 17       	cp	r24, r21
    4ca4:	08 f0       	brcs	.+2      	; 0x4ca8 <_nrk_time_to_ticks_long+0x108>
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	a9 2b       	or	r26, r25
    4caa:	58 2f       	mov	r21, r24
    4cac:	6f 81       	ldd	r22, Y+7	; 0x07
    4cae:	68 0d       	add	r22, r8
    4cb0:	f1 e0       	ldi	r31, 0x01	; 1
    4cb2:	68 15       	cp	r22, r8
    4cb4:	08 f0       	brcs	.+2      	; 0x4cb8 <_nrk_time_to_ticks_long+0x118>
    4cb6:	f0 e0       	ldi	r31, 0x00	; 0
    4cb8:	9a 2f       	mov	r25, r26
    4cba:	96 0f       	add	r25, r22
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	96 17       	cp	r25, r22
    4cc0:	08 f0       	brcs	.+2      	; 0x4cc4 <_nrk_time_to_ticks_long+0x124>
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	8f 2b       	or	r24, r31
    4cc6:	78 85       	ldd	r23, Y+8	; 0x08
    4cc8:	79 0d       	add	r23, r9
    4cca:	87 0f       	add	r24, r23
    4ccc:	20 2e       	mov	r2, r16
    4cce:	31 2e       	mov	r3, r17
    4cd0:	42 2e       	mov	r4, r18
    4cd2:	53 2e       	mov	r5, r19
    4cd4:	64 2e       	mov	r6, r20
    4cd6:	75 2e       	mov	r7, r21
    4cd8:	89 2e       	mov	r8, r25
    4cda:	98 2e       	mov	r9, r24
    4cdc:	8a 2d       	mov	r24, r10
    4cde:	99 27       	eor	r25, r25
    4ce0:	aa 27       	eor	r26, r26
    4ce2:	bb 27       	eor	r27, r27
    4ce4:	08 94       	sec
    4ce6:	a1 1c       	adc	r10, r1
    4ce8:	b1 1c       	adc	r11, r1
    4cea:	8c 15       	cp	r24, r12
    4cec:	9d 05       	cpc	r25, r13
    4cee:	ae 05       	cpc	r26, r14
    4cf0:	bf 05       	cpc	r27, r15
    4cf2:	08 f4       	brcc	.+2      	; 0x4cf6 <_nrk_time_to_ticks_long+0x156>
    4cf4:	85 cf       	rjmp	.-246    	; 0x4c00 <_nrk_time_to_ticks_long+0x60>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    4cf6:	63 eb       	ldi	r22, 0xB3	; 179
    4cf8:	a6 2e       	mov	r10, r22
    4cfa:	56 ee       	ldi	r21, 0xE6	; 230
    4cfc:	b5 2e       	mov	r11, r21
    4cfe:	4e e0       	ldi	r20, 0x0E	; 14
    4d00:	c4 2e       	mov	r12, r20
    4d02:	dd 24       	eor	r13, r13
    4d04:	ee 24       	eor	r14, r14
    4d06:	ff 24       	eor	r15, r15
    4d08:	00 e0       	ldi	r16, 0x00	; 0
    4d0a:	10 e0       	ldi	r17, 0x00	; 0
    4d0c:	22 2d       	mov	r18, r2
    4d0e:	33 2d       	mov	r19, r3
    4d10:	44 2d       	mov	r20, r4
    4d12:	55 2d       	mov	r21, r5
    4d14:	66 2d       	mov	r22, r6
    4d16:	77 2d       	mov	r23, r7
    4d18:	88 2d       	mov	r24, r8
    4d1a:	99 2d       	mov	r25, r9
    4d1c:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <__udivdi3>
    4d20:	a2 2e       	mov	r10, r18
    4d22:	b3 2e       	mov	r11, r19
    4d24:	c4 2e       	mov	r12, r20
    4d26:	d5 2e       	mov	r13, r21
    4d28:	a6 01       	movw	r20, r12
    4d2a:	95 01       	movw	r18, r10
    4d2c:	0a c0       	rjmp	.+20     	; 0x4d42 <_nrk_time_to_ticks_long+0x1a2>
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
	IdleTask.period.secs = 0;
	IdleTask.period.nano_secs = 0;
    4d2e:	64 81       	ldd	r22, Z+4	; 0x04
    4d30:	75 81       	ldd	r23, Z+5	; 0x05
    4d32:	86 81       	ldd	r24, Z+6	; 0x06
    4d34:	97 81       	ldd	r25, Z+7	; 0x07
    4d36:	23 eb       	ldi	r18, 0xB3	; 179
    4d38:	36 ee       	ldi	r19, 0xE6	; 230
    4d3a:	4e e0       	ldi	r20, 0x0E	; 14
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
	IdleTask.cpu_reserve.secs = 0;
	IdleTask.cpu_reserve.nano_secs = 0;
	IdleTask.offset.secs = 0;
    4d42:	ca 01       	movw	r24, r20
    4d44:	b9 01       	movw	r22, r18
    4d46:	28 96       	adiw	r28, 0x08	; 8
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	de bf       	out	0x3e, r29	; 62
    4d4e:	0f be       	out	0x3f, r0	; 63
    4d50:	cd bf       	out	0x3d, r28	; 61
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	1f 91       	pop	r17
    4d58:	0f 91       	pop	r16
    4d5a:	ff 90       	pop	r15
    4d5c:	ef 90       	pop	r14
    4d5e:	df 90       	pop	r13
    4d60:	cf 90       	pop	r12
    4d62:	bf 90       	pop	r11
    4d64:	af 90       	pop	r10
    4d66:	9f 90       	pop	r9
    4d68:	8f 90       	pop	r8
    4d6a:	7f 90       	pop	r7
    4d6c:	6f 90       	pop	r6
    4d6e:	5f 90       	pop	r5
    4d70:	4f 90       	pop	r4
    4d72:	3f 90       	pop	r3
    4d74:	2f 90       	pop	r2
    4d76:	08 95       	ret

00004d78 <nrk_time_get>:
#include <nrk_status.h>
#include <nrk_watchdog.h>
#include <nrk_sw_wdt.h>
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>
    4d78:	ef 92       	push	r14
    4d7a:	ff 92       	push	r15
    4d7c:	0f 93       	push	r16
    4d7e:	1f 93       	push	r17
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	ec 01       	movw	r28, r24

    4d86:	80 91 67 05 	lds	r24, 0x0567
    4d8a:	90 91 68 05 	lds	r25, 0x0568
    4d8e:	a0 91 69 05 	lds	r26, 0x0569
    4d92:	b0 91 6a 05 	lds	r27, 0x056A
    4d96:	88 83       	st	Y, r24
    4d98:	99 83       	std	Y+1, r25	; 0x01
    4d9a:	aa 83       	std	Y+2, r26	; 0x02
    4d9c:	bb 83       	std	Y+3, r27	; 0x03
inline void nrk_int_disable(void) {
    4d9e:	e0 90 6b 05 	lds	r14, 0x056B
    4da2:	f0 90 6c 05 	lds	r15, 0x056C
    4da6:	00 91 6d 05 	lds	r16, 0x056D
    4daa:	10 91 6e 05 	lds	r17, 0x056E
    4dae:	ec 82       	std	Y+4, r14	; 0x04
    4db0:	fd 82       	std	Y+5, r15	; 0x05
    4db2:	0e 83       	std	Y+6, r16	; 0x06
    4db4:	1f 83       	std	Y+7, r17	; 0x07
  DISABLE_GLOBAL_INT();
};
    4db6:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    4dba:	99 27       	eor	r25, r25
    4dbc:	aa 27       	eor	r26, r26
    4dbe:	bb 27       	eor	r27, r27
    4dc0:	bc 01       	movw	r22, r24
    4dc2:	cd 01       	movw	r24, r26
    4dc4:	23 eb       	ldi	r18, 0xB3	; 179
    4dc6:	36 ee       	ldi	r19, 0xE6	; 230
    4dc8:	4e e0       	ldi	r20, 0x0E	; 14
    4dca:	50 e0       	ldi	r21, 0x00	; 0
    4dcc:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    4dd0:	e6 0e       	add	r14, r22
    4dd2:	f7 1e       	adc	r15, r23
    4dd4:	08 1f       	adc	r16, r24
    4dd6:	19 1f       	adc	r17, r25
    4dd8:	ec 82       	std	Y+4, r14	; 0x04
    4dda:	fd 82       	std	Y+5, r15	; 0x05
    4ddc:	0e 83       	std	Y+6, r16	; 0x06
    4dde:	1f 83       	std	Y+7, r17	; 0x07
    4de0:	13 c0       	rjmp	.+38     	; 0x4e08 <nrk_time_get+0x90>

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    4de2:	80 50       	subi	r24, 0x00	; 0
    4de4:	9a 4c       	sbci	r25, 0xCA	; 202
    4de6:	aa 49       	sbci	r26, 0x9A	; 154
    4de8:	bb 43       	sbci	r27, 0x3B	; 59
    4dea:	8c 83       	std	Y+4, r24	; 0x04
    4dec:	9d 83       	std	Y+5, r25	; 0x05
    4dee:	ae 83       	std	Y+6, r26	; 0x06
    4df0:	bf 83       	std	Y+7, r27	; 0x07
};
    4df2:	88 81       	ld	r24, Y
    4df4:	99 81       	ldd	r25, Y+1	; 0x01
    4df6:	aa 81       	ldd	r26, Y+2	; 0x02
    4df8:	bb 81       	ldd	r27, Y+3	; 0x03
    4dfa:	01 96       	adiw	r24, 0x01	; 1
    4dfc:	a1 1d       	adc	r26, r1
    4dfe:	b1 1d       	adc	r27, r1
    4e00:	88 83       	st	Y, r24
    4e02:	99 83       	std	Y+1, r25	; 0x01
    4e04:	aa 83       	std	Y+2, r26	; 0x02
    4e06:	bb 83       	std	Y+3, r27	; 0x03
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
};

    4e08:	8c 81       	ldd	r24, Y+4	; 0x04
    4e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0c:	ae 81       	ldd	r26, Y+6	; 0x06
    4e0e:	bf 81       	ldd	r27, Y+7	; 0x07
    4e10:	80 30       	cpi	r24, 0x00	; 0
    4e12:	2a ec       	ldi	r18, 0xCA	; 202
    4e14:	92 07       	cpc	r25, r18
    4e16:	2a e9       	ldi	r18, 0x9A	; 154
    4e18:	a2 07       	cpc	r26, r18
    4e1a:	2b e3       	ldi	r18, 0x3B	; 59
    4e1c:	b2 07       	cpc	r27, r18
    4e1e:	08 f7       	brcc	.-62     	; 0x4de2 <nrk_time_get+0x6a>
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	ff 90       	pop	r15
    4e2a:	ef 90       	pop	r14
    4e2c:	08 95       	ret

00004e2e <nrk_idle_task>:
//	PARAMETERS:
//		UINT8 channel
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
    4e2e:	0e 94 5f 1c 	call	0x38be	; 0x38be <nrk_stack_check>
	
	// Derive frequency programming from the given channel number
    4e32:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_nrk_get_next_wakeup>
    4e36:	8b 30       	cpi	r24, 0x0B	; 11
    4e38:	30 f4       	brcc	.+12     	; 0x4e46 <nrk_idle_task+0x18>
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	80 93 64 05 	sts	0x0564, r24
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    4e40:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <nrk_idle>
    4e44:	09 c0       	rjmp	.+18     	; 0x4e58 <nrk_idle_task+0x2a>
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();
    4e46:	8a e0       	ldi	r24, 0x0A	; 10
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <nrk_spin_wait_us>

    4e4e:	82 e0       	ldi	r24, 0x02	; 2
    4e50:	80 93 64 05 	sts	0x0564, r24
} // rfSetChannel
    4e54:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <nrk_sleep>

    4e58:	80 91 76 04 	lds	r24, 0x0476
    4e5c:	85 35       	cpi	r24, 0x55	; 85
    4e5e:	19 f0       	breq	.+6      	; 0x4e66 <nrk_idle_task+0x38>
    4e60:	88 e0       	ldi	r24, 0x08	; 8
    4e62:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    4e66:	80 91 7e 21 	lds	r24, 0x217E
    4e6a:	85 35       	cpi	r24, 0x55	; 85
    4e6c:	01 f3       	breq	.-64     	; 0x4e2e <nrk_idle_task>
    4e6e:	88 e0       	ldi	r24, 0x08	; 8
    4e70:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    4e74:	dc cf       	rjmp	.-72     	; 0x4e2e <nrk_idle_task>

00004e76 <_nrk_scheduler>:
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    4e76:	8f 92       	push	r8
    4e78:	9f 92       	push	r9
    4e7a:	af 92       	push	r10
    4e7c:	bf 92       	push	r11
    4e7e:	cf 92       	push	r12
    4e80:	df 92       	push	r13
    4e82:	ef 92       	push	r14
    4e84:	ff 92       	push	r15
    4e86:	0f 93       	push	r16
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();
    4e8e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>

} // rfSetChannel


    4e92:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_nrk_high_speed_timer_reset>
    4e96:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <_nrk_high_speed_timer_get>
    4e9a:	4c 01       	movw	r8, r24
    4e9c:	8a ef       	ldi	r24, 0xFA	; 250
    4e9e:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    4ea2:	60 91 74 04 	lds	r22, 0x0474
    4ea6:	77 27       	eor	r23, r23
    4ea8:	88 27       	eor	r24, r24
    4eaa:	99 27       	eor	r25, r25
    4eac:	23 eb       	ldi	r18, 0xB3	; 179
    4eae:	36 ee       	ldi	r19, 0xE6	; 230
    4eb0:	4e e0       	ldi	r20, 0x0E	; 14
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    4eb8:	7b 01       	movw	r14, r22
    4eba:	8c 01       	movw	r16, r24
    4ebc:	80 91 6b 05 	lds	r24, 0x056B
    4ec0:	90 91 6c 05 	lds	r25, 0x056C
    4ec4:	a0 91 6d 05 	lds	r26, 0x056D
    4ec8:	b0 91 6e 05 	lds	r27, 0x056E
    4ecc:	e8 0e       	add	r14, r24
    4ece:	f9 1e       	adc	r15, r25
    4ed0:	0a 1f       	adc	r16, r26
    4ed2:	1b 1f       	adc	r17, r27
    4ed4:	c8 01       	movw	r24, r16
    4ed6:	b7 01       	movw	r22, r14
    4ed8:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    4edc:	a8 01       	movw	r20, r16
    4ede:	97 01       	movw	r18, r14
    4ee0:	26 1b       	sub	r18, r22
    4ee2:	37 0b       	sbc	r19, r23
    4ee4:	48 0b       	sbc	r20, r24
    4ee6:	59 0b       	sbc	r21, r25
    4ee8:	80 91 67 05 	lds	r24, 0x0567
    4eec:	90 91 68 05 	lds	r25, 0x0568
    4ef0:	a0 91 69 05 	lds	r26, 0x0569
    4ef4:	b0 91 6a 05 	lds	r27, 0x056A
    4ef8:	1b c0       	rjmp	.+54     	; 0x4f30 <_nrk_scheduler+0xba>
    4efa:	e1 2c       	mov	r14, r1
    4efc:	66 e3       	ldi	r22, 0x36	; 54
    4efe:	f6 2e       	mov	r15, r22
    4f00:	65 e6       	ldi	r22, 0x65	; 101
    4f02:	06 2f       	mov	r16, r22
    4f04:	64 ec       	ldi	r22, 0xC4	; 196
    4f06:	16 2f       	mov	r17, r22
    4f08:	e2 0e       	add	r14, r18
    4f0a:	f3 1e       	adc	r15, r19
    4f0c:	04 1f       	adc	r16, r20
    4f0e:	15 1f       	adc	r17, r21
    4f10:	c8 01       	movw	r24, r16
    4f12:	b7 01       	movw	r22, r14
    4f14:	23 eb       	ldi	r18, 0xB3	; 179
    4f16:	36 ee       	ldi	r19, 0xE6	; 230
    4f18:	4e e0       	ldi	r20, 0x0E	; 14
    4f1a:	50 e0       	ldi	r21, 0x00	; 0
    4f1c:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    4f20:	a8 01       	movw	r20, r16
    4f22:	97 01       	movw	r18, r14
    4f24:	26 1b       	sub	r18, r22
    4f26:	37 0b       	sbc	r19, r23
    4f28:	48 0b       	sbc	r20, r24
    4f2a:	59 0b       	sbc	r21, r25
    4f2c:	d6 01       	movw	r26, r12
    4f2e:	c5 01       	movw	r24, r10
    4f30:	5c 01       	movw	r10, r24
    4f32:	6d 01       	movw	r12, r26
    4f34:	08 94       	sec
    4f36:	a1 1c       	adc	r10, r1
    4f38:	b1 1c       	adc	r11, r1
    4f3a:	c1 1c       	adc	r12, r1
    4f3c:	d1 1c       	adc	r13, r1
    4f3e:	20 30       	cpi	r18, 0x00	; 0
    4f40:	6a ec       	ldi	r22, 0xCA	; 202
    4f42:	36 07       	cpc	r19, r22
    4f44:	6a e9       	ldi	r22, 0x9A	; 154
    4f46:	46 07       	cpc	r20, r22
    4f48:	6b e3       	ldi	r22, 0x3B	; 59
    4f4a:	56 07       	cpc	r21, r22
    4f4c:	b0 f6       	brcc	.-84     	; 0x4efa <_nrk_scheduler+0x84>
    4f4e:	80 93 67 05 	sts	0x0567, r24
    4f52:	90 93 68 05 	sts	0x0568, r25
    4f56:	a0 93 69 05 	sts	0x0569, r26
    4f5a:	b0 93 6a 05 	sts	0x056A, r27
    4f5e:	20 93 6b 05 	sts	0x056B, r18
    4f62:	30 93 6c 05 	sts	0x056C, r19
    4f66:	40 93 6d 05 	sts	0x056D, r20
    4f6a:	50 93 6e 05 	sts	0x056E, r21
    4f6e:	e0 91 70 05 	lds	r30, 0x0570
    4f72:	f0 91 71 05 	lds	r31, 0x0571
    4f76:	85 81       	ldd	r24, Z+5	; 0x05
    4f78:	88 23       	and	r24, r24
    4f7a:	19 f1       	breq	.+70     	; 0x4fc2 <_nrk_scheduler+0x14c>
    4f7c:	81 85       	ldd	r24, Z+9	; 0x09
    4f7e:	84 30       	cpi	r24, 0x04	; 4
    4f80:	01 f1       	breq	.+64     	; 0x4fc2 <_nrk_scheduler+0x14c>
    4f82:	87 81       	ldd	r24, Z+7	; 0x07
    4f84:	82 30       	cpi	r24, 0x02	; 2
    4f86:	29 f0       	breq	.+10     	; 0x4f92 <_nrk_scheduler+0x11c>
    4f88:	88 23       	and	r24, r24
    4f8a:	41 f0       	breq	.+16     	; 0x4f9c <_nrk_scheduler+0x126>
    4f8c:	86 81       	ldd	r24, Z+6	; 0x06
    4f8e:	88 23       	and	r24, r24
    4f90:	11 f4       	brne	.+4      	; 0x4f96 <_nrk_scheduler+0x120>
    4f92:	85 e0       	ldi	r24, 0x05	; 5
    4f94:	01 c0       	rjmp	.+2      	; 0x4f98 <_nrk_scheduler+0x122>
    4f96:	83 e0       	ldi	r24, 0x03	; 3
    4f98:	81 87       	std	Z+9, r24	; 0x09
    4f9a:	0c c0       	rjmp	.+24     	; 0x4fb4 <_nrk_scheduler+0x13e>
    4f9c:	83 e0       	ldi	r24, 0x03	; 3
    4f9e:	81 87       	std	Z+9, r24	; 0x09
    4fa0:	e0 91 70 05 	lds	r30, 0x0570
    4fa4:	f0 91 71 05 	lds	r31, 0x0571
    4fa8:	17 82       	std	Z+7, r1	; 0x07
    4faa:	e0 91 70 05 	lds	r30, 0x0570
    4fae:	f0 91 71 05 	lds	r31, 0x0571
    4fb2:	16 82       	std	Z+6, r1	; 0x06
    4fb4:	e0 91 70 05 	lds	r30, 0x0570
    4fb8:	f0 91 71 05 	lds	r31, 0x0571
    4fbc:	80 85       	ldd	r24, Z+8	; 0x08
    4fbe:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_rem_from_readyQ>
    4fc2:	e0 91 70 05 	lds	r30, 0x0570
    4fc6:	f0 91 71 05 	lds	r31, 0x0571
    4fca:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fcc:	96 8d       	ldd	r25, Z+30	; 0x1e
    4fce:	89 2b       	or	r24, r25
    4fd0:	91 f1       	breq	.+100    	; 0x5036 <_nrk_scheduler+0x1c0>
    4fd2:	60 85       	ldd	r22, Z+8	; 0x08
    4fd4:	66 23       	and	r22, r22
    4fd6:	79 f1       	breq	.+94     	; 0x5036 <_nrk_scheduler+0x1c0>
    4fd8:	81 85       	ldd	r24, Z+9	; 0x09
    4fda:	84 30       	cpi	r24, 0x04	; 4
    4fdc:	61 f1       	breq	.+88     	; 0x5036 <_nrk_scheduler+0x1c0>
    4fde:	21 8d       	ldd	r18, Z+25	; 0x19
    4fe0:	32 8d       	ldd	r19, Z+26	; 0x1a
    4fe2:	80 91 74 04 	lds	r24, 0x0474
    4fe6:	99 27       	eor	r25, r25
    4fe8:	28 17       	cp	r18, r24
    4fea:	39 07       	cpc	r19, r25
    4fec:	50 f4       	brcc	.+20     	; 0x5002 <_nrk_scheduler+0x18c>
    4fee:	82 e0       	ldi	r24, 0x02	; 2
    4ff0:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    4ff4:	e0 91 70 05 	lds	r30, 0x0570
    4ff8:	f0 91 71 05 	lds	r31, 0x0571
    4ffc:	12 8e       	std	Z+26, r1	; 0x1a
    4ffe:	11 8e       	std	Z+25, r1	; 0x19
    5000:	04 c0       	rjmp	.+8      	; 0x500a <_nrk_scheduler+0x194>
    5002:	28 1b       	sub	r18, r24
    5004:	39 0b       	sbc	r19, r25
    5006:	32 8f       	std	Z+26, r19	; 0x1a
    5008:	21 8f       	std	Z+25, r18	; 0x19
    500a:	e0 91 70 05 	lds	r30, 0x0570
    500e:	f0 91 71 05 	lds	r31, 0x0571
    5012:	10 85       	ldd	r17, Z+8	; 0x08
    5014:	81 8d       	ldd	r24, Z+25	; 0x19
    5016:	92 8d       	ldd	r25, Z+26	; 0x1a
    5018:	89 2b       	or	r24, r25
    501a:	69 f4       	brne	.+26     	; 0x5036 <_nrk_scheduler+0x1c0>
    501c:	61 2f       	mov	r22, r17
    501e:	83 e0       	ldi	r24, 0x03	; 3
    5020:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    5024:	e0 91 70 05 	lds	r30, 0x0570
    5028:	f0 91 71 05 	lds	r31, 0x0571
    502c:	83 e0       	ldi	r24, 0x03	; 3
    502e:	81 87       	std	Z+9, r24	; 0x09
    5030:	81 2f       	mov	r24, r17
    5032:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_rem_from_readyQ>
    5036:	c5 e1       	ldi	r28, 0x15	; 21
    5038:	d5 e0       	ldi	r29, 0x05	; 5
    503a:	00 e6       	ldi	r16, 0x60	; 96
    503c:	1a ee       	ldi	r17, 0xEA	; 234
    503e:	cc 24       	eor	r12, r12
    5040:	dd 24       	eor	r13, r13
    5042:	ec 2d       	mov	r30, r12
    5044:	88 85       	ldd	r24, Y+8	; 0x08
    5046:	8f 3f       	cpi	r24, 0xFF	; 255
    5048:	09 f4       	brne	.+2      	; 0x504c <_nrk_scheduler+0x1d6>
    504a:	94 c0       	rjmp	.+296    	; 0x5174 <_nrk_scheduler+0x2fe>
    504c:	1d 82       	std	Y+5, r1	; 0x05
    504e:	88 23       	and	r24, r24
    5050:	91 f1       	breq	.+100    	; 0x50b6 <_nrk_scheduler+0x240>
    5052:	89 85       	ldd	r24, Y+9	; 0x09
    5054:	84 30       	cpi	r24, 0x04	; 4
    5056:	79 f1       	breq	.+94     	; 0x50b6 <_nrk_scheduler+0x240>
    5058:	2d 89       	ldd	r18, Y+21	; 0x15
    505a:	3e 89       	ldd	r19, Y+22	; 0x16
    505c:	80 91 74 04 	lds	r24, 0x0474
    5060:	99 27       	eor	r25, r25
    5062:	28 17       	cp	r18, r24
    5064:	39 07       	cpc	r19, r25
    5066:	28 f0       	brcs	.+10     	; 0x5072 <_nrk_scheduler+0x1fc>
    5068:	28 1b       	sub	r18, r24
    506a:	39 0b       	sbc	r19, r25
    506c:	3e 8b       	std	Y+22, r19	; 0x16
    506e:	2d 8b       	std	Y+21, r18	; 0x15
    5070:	02 c0       	rjmp	.+4      	; 0x5076 <_nrk_scheduler+0x200>
    5072:	1e 8a       	std	Y+22, r1	; 0x16
    5074:	1d 8a       	std	Y+21, r1	; 0x15
    5076:	2f 89       	ldd	r18, Y+23	; 0x17
    5078:	38 8d       	ldd	r19, Y+24	; 0x18
    507a:	28 17       	cp	r18, r24
    507c:	39 07       	cpc	r19, r25
    507e:	28 f0       	brcs	.+10     	; 0x508a <_nrk_scheduler+0x214>
    5080:	28 1b       	sub	r18, r24
    5082:	39 0b       	sbc	r19, r25
    5084:	38 8f       	std	Y+24, r19	; 0x18
    5086:	2f 8b       	std	Y+23, r18	; 0x17
    5088:	0e c0       	rjmp	.+28     	; 0x50a6 <_nrk_scheduler+0x230>
    508a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    508c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    508e:	86 17       	cp	r24, r22
    5090:	97 07       	cpc	r25, r23
    5092:	28 f4       	brcc	.+10     	; 0x509e <_nrk_scheduler+0x228>
    5094:	68 1b       	sub	r22, r24
    5096:	79 0b       	sbc	r23, r25
    5098:	78 8f       	std	Y+24, r23	; 0x18
    509a:	6f 8b       	std	Y+23, r22	; 0x17
    509c:	04 c0       	rjmp	.+8      	; 0x50a6 <_nrk_scheduler+0x230>
    509e:	0e 94 04 39 	call	0x7208	; 0x7208 <__udivmodhi4>
    50a2:	98 8f       	std	Y+24, r25	; 0x18
    50a4:	8f 8b       	std	Y+23, r24	; 0x17
    50a6:	8f 89       	ldd	r24, Y+23	; 0x17
    50a8:	98 8d       	ldd	r25, Y+24	; 0x18
    50aa:	89 2b       	or	r24, r25
    50ac:	21 f4       	brne	.+8      	; 0x50b6 <_nrk_scheduler+0x240>
    50ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50b2:	98 8f       	std	Y+24, r25	; 0x18
    50b4:	8f 8b       	std	Y+23, r24	; 0x17
    50b6:	89 85       	ldd	r24, Y+9	; 0x09
    50b8:	83 30       	cpi	r24, 0x03	; 3
    50ba:	09 f0       	breq	.+2      	; 0x50be <_nrk_scheduler+0x248>
    50bc:	5b c0       	rjmp	.+182    	; 0x5174 <_nrk_scheduler+0x2fe>
    50be:	8d 89       	ldd	r24, Y+21	; 0x15
    50c0:	9e 89       	ldd	r25, Y+22	; 0x16
    50c2:	89 2b       	or	r24, r25
    50c4:	09 f0       	breq	.+2      	; 0x50c8 <_nrk_scheduler+0x252>
    50c6:	4e c0       	rjmp	.+156    	; 0x5164 <_nrk_scheduler+0x2ee>
    50c8:	8f 81       	ldd	r24, Y+7	; 0x07
    50ca:	88 23       	and	r24, r24
    50cc:	a1 f0       	breq	.+40     	; 0x50f6 <_nrk_scheduler+0x280>
    50ce:	8e 81       	ldd	r24, Y+6	; 0x06
    50d0:	88 23       	and	r24, r24
    50d2:	89 f0       	breq	.+34     	; 0x50f6 <_nrk_scheduler+0x280>
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	a0 e0       	ldi	r26, 0x00	; 0
    50da:	b0 e0       	ldi	r27, 0x00	; 0
    50dc:	00 90 60 05 	lds	r0, 0x0560
    50e0:	04 c0       	rjmp	.+8      	; 0x50ea <_nrk_scheduler+0x274>
    50e2:	88 0f       	add	r24, r24
    50e4:	99 1f       	adc	r25, r25
    50e6:	aa 1f       	adc	r26, r26
    50e8:	bb 1f       	adc	r27, r27
    50ea:	0a 94       	dec	r0
    50ec:	d2 f7       	brpl	.-12     	; 0x50e2 <_nrk_scheduler+0x26c>
    50ee:	89 8b       	std	Y+17, r24	; 0x11
    50f0:	9a 8b       	std	Y+18, r25	; 0x12
    50f2:	ab 8b       	std	Y+19, r26	; 0x13
    50f4:	bc 8b       	std	Y+20, r27	; 0x14
    50f6:	1f 82       	std	Y+7, r1	; 0x07
    50f8:	1e 82       	std	Y+6, r1	; 0x06
    50fa:	1d 82       	std	Y+5, r1	; 0x05
    50fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50fe:	98 a1       	ldd	r25, Y+32	; 0x20
    5100:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5102:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5104:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5106:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5108:	81 30       	cpi	r24, 0x01	; 1
    510a:	91 05       	cpc	r25, r1
    510c:	91 f4       	brne	.+36     	; 0x5132 <_nrk_scheduler+0x2bc>
    510e:	3a 8f       	std	Y+26, r19	; 0x1a
    5110:	29 8f       	std	Y+25, r18	; 0x19
    5112:	82 e0       	ldi	r24, 0x02	; 2
    5114:	89 87       	std	Y+9, r24	; 0x09
    5116:	8f 89       	ldd	r24, Y+23	; 0x17
    5118:	98 8d       	ldd	r25, Y+24	; 0x18
    511a:	9e 8b       	std	Y+22, r25	; 0x16
    511c:	8d 8b       	std	Y+21, r24	; 0x15
    511e:	45 2b       	or	r20, r21
    5120:	21 f4       	brne	.+8      	; 0x512a <_nrk_scheduler+0x2b4>
    5122:	8a ef       	ldi	r24, 0xFA	; 250
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	9e 8b       	std	Y+22, r25	; 0x16
    5128:	8d 8b       	std	Y+21, r24	; 0x15
    512a:	8e 2f       	mov	r24, r30
    512c:	0e 94 45 20 	call	0x408a	; 0x408a <nrk_add_to_readyQ>
    5130:	19 c0       	rjmp	.+50     	; 0x5164 <_nrk_scheduler+0x2ee>
    5132:	3a 8f       	std	Y+26, r19	; 0x1a
    5134:	29 8f       	std	Y+25, r18	; 0x19
    5136:	01 97       	sbiw	r24, 0x01	; 1
    5138:	9c 01       	movw	r18, r24
    513a:	24 9f       	mul	r18, r20
    513c:	c0 01       	movw	r24, r0
    513e:	25 9f       	mul	r18, r21
    5140:	90 0d       	add	r25, r0
    5142:	34 9f       	mul	r19, r20
    5144:	90 0d       	add	r25, r0
    5146:	11 24       	eor	r1, r1
    5148:	9e 8b       	std	Y+22, r25	; 0x16
    514a:	8d 8b       	std	Y+21, r24	; 0x15
    514c:	98 8f       	std	Y+24, r25	; 0x18
    514e:	8f 8b       	std	Y+23, r24	; 0x17
    5150:	45 2b       	or	r20, r21
    5152:	21 f4       	brne	.+8      	; 0x515c <_nrk_scheduler+0x2e6>
    5154:	8a ef       	ldi	r24, 0xFA	; 250
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	9e 8b       	std	Y+22, r25	; 0x16
    515a:	8d 8b       	std	Y+21, r24	; 0x15
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	98 a3       	std	Y+32, r25	; 0x20
    5162:	8f 8f       	std	Y+31, r24	; 0x1f
    5164:	8d 89       	ldd	r24, Y+21	; 0x15
    5166:	9e 89       	ldd	r25, Y+22	; 0x16
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	21 f0       	breq	.+8      	; 0x5174 <_nrk_scheduler+0x2fe>
    516c:	80 17       	cp	r24, r16
    516e:	91 07       	cpc	r25, r17
    5170:	08 f4       	brcc	.+2      	; 0x5174 <_nrk_scheduler+0x2fe>
    5172:	8c 01       	movw	r16, r24
    5174:	08 94       	sec
    5176:	c1 1c       	adc	r12, r1
    5178:	d1 1c       	adc	r13, r1
    517a:	a1 96       	adiw	r28, 0x21	; 33
    517c:	32 e0       	ldi	r19, 0x02	; 2
    517e:	c3 16       	cp	r12, r19
    5180:	d1 04       	cpc	r13, r1
    5182:	09 f0       	breq	.+2      	; 0x5186 <_nrk_scheduler+0x310>
    5184:	5e cf       	rjmp	.-324    	; 0x5042 <_nrk_scheduler+0x1cc>
    5186:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_get_high_ready_task_ID>
    518a:	e8 2e       	mov	r14, r24
    518c:	99 27       	eor	r25, r25
    518e:	87 fd       	sbrc	r24, 7
    5190:	90 95       	com	r25
    5192:	fc 01       	movw	r30, r24
    5194:	25 e0       	ldi	r18, 0x05	; 5
    5196:	ee 0f       	add	r30, r30
    5198:	ff 1f       	adc	r31, r31
    519a:	2a 95       	dec	r18
    519c:	e1 f7       	brne	.-8      	; 0x5196 <_nrk_scheduler+0x320>
    519e:	e8 0f       	add	r30, r24
    51a0:	f9 1f       	adc	r31, r25
    51a2:	eb 5e       	subi	r30, 0xEB	; 235
    51a4:	fa 4f       	sbci	r31, 0xFA	; 250
    51a6:	42 85       	ldd	r20, Z+10	; 0x0a
    51a8:	40 93 72 05 	sts	0x0572, r20
    51ac:	81 e2       	ldi	r24, 0x21	; 33
    51ae:	6e 2d       	mov	r22, r14
    51b0:	68 02       	muls	r22, r24
    51b2:	90 01       	movw	r18, r0
    51b4:	11 24       	eor	r1, r1
    51b6:	2b 5e       	subi	r18, 0xEB	; 235
    51b8:	3a 4f       	sbci	r19, 0xFA	; 250
    51ba:	30 93 62 05 	sts	0x0562, r19
    51be:	20 93 61 05 	sts	0x0561, r18
    51c2:	ee 20       	and	r14, r14
    51c4:	91 f0       	breq	.+36     	; 0x51ea <_nrk_scheduler+0x374>
    51c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    51c8:	96 8d       	ldd	r25, Z+30	; 0x1e
    51ca:	89 2b       	or	r24, r25
    51cc:	51 f0       	breq	.+20     	; 0x51e2 <_nrk_scheduler+0x36c>
    51ce:	81 8d       	ldd	r24, Z+25	; 0x19
    51d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    51d2:	8a 3f       	cpi	r24, 0xFA	; 250
    51d4:	91 05       	cpc	r25, r1
    51d6:	28 f4       	brcc	.+10     	; 0x51e2 <_nrk_scheduler+0x36c>
    51d8:	80 17       	cp	r24, r16
    51da:	91 07       	cpc	r25, r17
    51dc:	e0 f4       	brcc	.+56     	; 0x5216 <_nrk_scheduler+0x3a0>
    51de:	8c 01       	movw	r16, r24
    51e0:	1a c0       	rjmp	.+52     	; 0x5216 <_nrk_scheduler+0x3a0>
    51e2:	0b 3f       	cpi	r16, 0xFB	; 251
    51e4:	11 05       	cpc	r17, r1
    51e6:	b8 f0       	brcs	.+46     	; 0x5216 <_nrk_scheduler+0x3a0>
    51e8:	14 c0       	rjmp	.+40     	; 0x5212 <_nrk_scheduler+0x39c>
    51ea:	0b 30       	cpi	r16, 0x0B	; 11
    51ec:	11 05       	cpc	r17, r1
    51ee:	98 f0       	brcs	.+38     	; 0x5216 <_nrk_scheduler+0x3a0>
    51f0:	c8 01       	movw	r24, r16
    51f2:	0a 97       	sbiw	r24, 0x0a	; 10
    51f4:	8a 3f       	cpi	r24, 0xFA	; 250
    51f6:	91 05       	cpc	r25, r1
    51f8:	30 f4       	brcc	.+12     	; 0x5206 <_nrk_scheduler+0x390>
    51fa:	8c 01       	movw	r16, r24
    51fc:	09 97       	sbiw	r24, 0x09	; 9
    51fe:	58 f4       	brcc	.+22     	; 0x5216 <_nrk_scheduler+0x3a0>
    5200:	09 e0       	ldi	r16, 0x09	; 9
    5202:	10 e0       	ldi	r17, 0x00	; 0
    5204:	08 c0       	rjmp	.+16     	; 0x5216 <_nrk_scheduler+0x3a0>
    5206:	05 50       	subi	r16, 0x05	; 5
    5208:	11 40       	sbci	r17, 0x01	; 1
    520a:	18 f4       	brcc	.+6      	; 0x5212 <_nrk_scheduler+0x39c>
    520c:	00 ef       	ldi	r16, 0xF0	; 240
    520e:	10 e0       	ldi	r17, 0x00	; 0
    5210:	02 c0       	rjmp	.+4      	; 0x5216 <_nrk_scheduler+0x3a0>
    5212:	0a ef       	ldi	r16, 0xFA	; 250
    5214:	10 e0       	ldi	r17, 0x00	; 0
    5216:	40 93 63 05 	sts	0x0563, r20
    521a:	30 93 71 05 	sts	0x0571, r19
    521e:	20 93 70 05 	sts	0x0570, r18
    5222:	00 93 74 04 	sts	0x0474, r16
    5226:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    522a:	99 27       	eor	r25, r25
    522c:	01 96       	adiw	r24, 0x01	; 1
    522e:	80 17       	cp	r24, r16
    5230:	91 07       	cpc	r25, r17
    5232:	40 f0       	brcs	.+16     	; 0x5244 <_nrk_scheduler+0x3ce>
    5234:	0e 94 1e 2b 	call	0x563c	; 0x563c <_nrk_os_timer_get>
    5238:	08 2f       	mov	r16, r24
    523a:	11 27       	eor	r17, r17
    523c:	0e 5f       	subi	r16, 0xFE	; 254
    523e:	1f 4f       	sbci	r17, 0xFF	; 255
    5240:	00 93 74 04 	sts	0x0474, r16
    5244:	ee 20       	and	r14, r14
    5246:	11 f0       	breq	.+4      	; 0x524c <_nrk_scheduler+0x3d6>
    5248:	10 92 64 05 	sts	0x0564, r1
    524c:	80 2f       	mov	r24, r16
    524e:	0e 94 af 2a 	call	0x555e	; 0x555e <_nrk_set_next_wakeup>
    5252:	6e ee       	ldi	r22, 0xEE	; 238
    5254:	72 e0       	ldi	r23, 0x02	; 2
    5256:	c4 01       	movw	r24, r8
    5258:	0e 94 a3 2b 	call	0x5746	; 0x5746 <nrk_high_speed_timer_wait>
    525c:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <nrk_stack_pointer_restore>
    5260:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <nrk_start_high_ready_task>
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	1f 91       	pop	r17
    526a:	0f 91       	pop	r16
    526c:	ff 90       	pop	r15
    526e:	ef 90       	pop	r14
    5270:	df 90       	pop	r13
    5272:	cf 90       	pop	r12
    5274:	bf 90       	pop	r11
    5276:	af 90       	pop	r10
    5278:	9f 90       	pop	r9
    527a:	8f 90       	pop	r8
    527c:	08 95       	ret

0000527e <nrk_register_driver>:


void nrk_halt()
{
nrk_int_disable();
while(1);
    527e:	20 91 83 05 	lds	r18, 0x0583
    5282:	12 16       	cp	r1, r18
    5284:	1c f4       	brge	.+6      	; 0x528c <nrk_register_driver+0xe>
    5286:	8f ef       	ldi	r24, 0xFF	; 255
    5288:	9f ef       	ldi	r25, 0xFF	; 255
    528a:	08 95       	ret
}

    528c:	e2 2f       	mov	r30, r18
    528e:	ff 27       	eor	r31, r31
    5290:	e7 fd       	sbrc	r30, 7
    5292:	f0 95       	com	r31
    5294:	ee 0f       	add	r30, r30
    5296:	ff 1f       	adc	r31, r31
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	df 01       	movw	r26, r30
    529e:	ac 57       	subi	r26, 0x7C	; 124
    52a0:	ba 4f       	sbci	r27, 0xFA	; 250
    52a2:	6c 93       	st	X, r22
/**
    52a4:	ea 57       	subi	r30, 0x7A	; 122
    52a6:	fa 4f       	sbci	r31, 0xFA	; 250
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
 *  nrk_init();
    52ac:	2f 5f       	subi	r18, 0xFF	; 255
    52ae:	20 93 83 05 	sts	0x0583, r18
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	90 e0       	ldi	r25, 0x00	; 0
 * *  - Init TCBlist - linked list of empty TCBs
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
    52b6:	08 95       	ret

000052b8 <nrk_open>:
void nrk_init()
{
	
    uint8_t i;	
    52b8:	0f 93       	push	r16
    52ba:	1f 93       	push	r17
    52bc:	cf 93       	push	r28
    52be:	df 93       	push	r29
    52c0:	06 2f       	mov	r16, r22
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    52c2:	90 91 83 05 	lds	r25, 0x0583
    52c6:	a9 2f       	mov	r26, r25
    52c8:	bb 27       	eor	r27, r27
    52ca:	a7 fd       	sbrc	r26, 7
    52cc:	b0 95       	com	r27
    52ce:	40 e0       	ldi	r20, 0x00	; 0
    52d0:	50 e0       	ldi	r21, 0x00	; 0
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    52d2:	68 2f       	mov	r22, r24
    52d4:	77 27       	eor	r23, r23
    52d6:	34 c0       	rjmp	.+104    	; 0x5340 <nrk_open+0x88>
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    52d8:	4f 5f       	subi	r20, 0xFF	; 255
    52da:	5f 4f       	sbci	r21, 0xFF	; 255
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
    52dc:	e9 01       	movw	r28, r18
    52de:	cc 0f       	add	r28, r28
    52e0:	dd 1f       	adc	r29, r29
    52e2:	cc 0f       	add	r28, r28
    52e4:	dd 1f       	adc	r29, r29
    52e6:	fe 01       	movw	r30, r28
    52e8:	ec 57       	subi	r30, 0x7C	; 124
    52ea:	fa 4f       	sbci	r31, 0xFA	; 250
    52ec:	80 81       	ld	r24, Z
    52ee:	99 27       	eor	r25, r25
    52f0:	87 fd       	sbrc	r24, 7
    52f2:	90 95       	com	r25
    52f4:	86 17       	cp	r24, r22
    52f6:	97 07       	cpc	r25, r23
    52f8:	19 f5       	brne	.+70     	; 0x5340 <nrk_open+0x88>
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    52fa:	f9 01       	movw	r30, r18
    52fc:	e8 57       	subi	r30, 0x78	; 120
    52fe:	fa 4f       	sbci	r31, 0xFA	; 250
    5300:	80 81       	ld	r24, Z
    5302:	88 23       	and	r24, r24
    5304:	71 f4       	brne	.+28     	; 0x5322 <nrk_open+0x6a>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	80 83       	st	Z, r24
#endif
    530a:	fe 01       	movw	r30, r28
    530c:	ea 57       	subi	r30, 0x7A	; 122
    530e:	fa 4f       	sbci	r31, 0xFA	; 250
    5310:	01 90       	ld	r0, Z+
    5312:	f0 81       	ld	r31, Z
    5314:	e0 2d       	mov	r30, r0
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	40 e0       	ldi	r20, 0x00	; 0
    531a:	50 e0       	ldi	r21, 0x00	; 0
    531c:	60 2f       	mov	r22, r16
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	09 95       	icall
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    5322:	ca 57       	subi	r28, 0x7A	; 122
    5324:	da 4f       	sbci	r29, 0xFA	; 250
    5326:	e8 81       	ld	r30, Y
    5328:	f9 81       	ldd	r31, Y+1	; 0x01
    532a:	20 e0       	ldi	r18, 0x00	; 0
    532c:	40 e0       	ldi	r20, 0x00	; 0
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	60 2f       	mov	r22, r16
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	09 95       	icall
#endif
    5336:	81 2f       	mov	r24, r17
    5338:	99 27       	eor	r25, r25
    533a:	87 fd       	sbrc	r24, 7
    533c:	90 95       	com	r25
    533e:	08 c0       	rjmp	.+16     	; 0x5350 <nrk_open+0x98>
    5340:	14 2f       	mov	r17, r20
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    5342:	24 2f       	mov	r18, r20
    5344:	33 27       	eor	r19, r19
    5346:	2a 17       	cp	r18, r26
    5348:	3b 07       	cpc	r19, r27
    534a:	34 f2       	brlt	.-116    	; 0x52d8 <nrk_open+0x20>
    534c:	8f ef       	ldi	r24, 0xFF	; 255
    534e:	9f ef       	ldi	r25, 0xFF	; 255
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	08 95       	ret

0000535a <nrk_get_status>:
   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    535a:	e8 2f       	mov	r30, r24
    535c:	ff 27       	eor	r31, r31
    535e:	80 91 83 05 	lds	r24, 0x0583
    5362:	99 27       	eor	r25, r25
    5364:	87 fd       	sbrc	r24, 7
    5366:	90 95       	com	r25
    5368:	8e 17       	cp	r24, r30
    536a:	9f 07       	cpc	r25, r31
    536c:	34 f4       	brge	.+12     	; 0x537a <nrk_get_status+0x20>
    _nrk_reserve_init();
    #endif
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    5374:	8f ef       	ldi	r24, 0xFF	; 255
    5376:	9f ef       	ldi	r25, 0xFF	; 255
    5378:	08 95       	ret

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    537a:	ee 0f       	add	r30, r30
    537c:	ff 1f       	adc	r31, r31
    537e:	ee 0f       	add	r30, r30
    5380:	ff 1f       	adc	r31, r31
    5382:	ea 57       	subi	r30, 0x7A	; 122
    5384:	fa 4f       	sbci	r31, 0xFA	; 250
    5386:	01 90       	ld	r0, Z+
    5388:	f0 81       	ld	r31, Z
    538a:	e0 2d       	mov	r30, r0
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	40 e0       	ldi	r20, 0x00	; 0
    5390:	50 e0       	ldi	r21, 0x00	; 0
    5392:	83 e0       	ldi	r24, 0x03	; 3
    5394:	09 95       	icall
    5396:	99 27       	eor	r25, r25
    5398:	87 fd       	sbrc	r24, 7
    539a:	90 95       	com	r25
{
    539c:	08 95       	ret

0000539e <nrk_set_status>:
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    539e:	24 2f       	mov	r18, r20
    nrk_cur_task_TCB = NULL;
    53a0:	e8 2f       	mov	r30, r24
    53a2:	ff 27       	eor	r31, r31
    53a4:	80 91 83 05 	lds	r24, 0x0583
    53a8:	99 27       	eor	r25, r25
    53aa:	87 fd       	sbrc	r24, 7
    53ac:	90 95       	com	r25
    53ae:	8e 17       	cp	r24, r30
    53b0:	9f 07       	cpc	r25, r31
    53b2:	34 f4       	brge	.+12     	; 0x53c0 <nrk_set_status+0x22>
    
    nrk_high_ready_TCB = NULL;
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    53ba:	8f ef       	ldi	r24, 0xFF	; 255
    53bc:	9f ef       	ldi	r25, 0xFF	; 255
    53be:	08 95       	ret
    nrk_high_ready_prio = 0; 

   #ifdef NRK_STATS_TRACKER
    53c0:	ee 0f       	add	r30, r30
    53c2:	ff 1f       	adc	r31, r31
    53c4:	ee 0f       	add	r30, r30
    53c6:	ff 1f       	adc	r31, r31
    53c8:	ea 57       	subi	r30, 0x7A	; 122
    53ca:	fa 4f       	sbci	r31, 0xFA	; 250
    53cc:	01 90       	ld	r0, Z+
    53ce:	f0 81       	ld	r31, Z
    53d0:	e0 2d       	mov	r30, r0
    53d2:	40 e0       	ldi	r20, 0x00	; 0
    53d4:	50 e0       	ldi	r21, 0x00	; 0
    53d6:	84 e0       	ldi	r24, 0x04	; 4
    53d8:	09 95       	icall
    53da:	99 27       	eor	r25, r25
    53dc:	87 fd       	sbrc	r24, 7
    53de:	90 95       	com	r25
	nrk_stats_reset();
    53e0:	08 95       	ret

000053e2 <nrk_read>:
    #ifdef KERNEL_STK_ARRAY
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    	nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
    	stkc = NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE;
    53e2:	24 2f       	mov	r18, r20
    	*stkc = STK_CANARY_VAL;
    53e4:	e8 2f       	mov	r30, r24
    53e6:	ff 27       	eor	r31, r31
    53e8:	80 91 83 05 	lds	r24, 0x0583
    53ec:	99 27       	eor	r25, r25
    53ee:	87 fd       	sbrc	r24, 7
    53f0:	90 95       	com	r25
    53f2:	8e 17       	cp	r24, r30
    53f4:	9f 07       	cpc	r25, r31
    53f6:	34 f4       	brge	.+12     	; 0x5404 <nrk_read+0x22>
    	stkc = NRK_KERNEL_STK_TOP;
	nrk_kernel_stk_ptr = NRK_KERNEL_STK_TOP;
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    53fe:	8f ef       	ldi	r24, 0xFF	; 255
    5400:	9f ef       	ldi	r25, 0xFF	; 255
    5402:	08 95       	ret
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF); 
*/	
    5404:	ee 0f       	add	r30, r30
    5406:	ff 1f       	adc	r31, r31
    5408:	ee 0f       	add	r30, r30
    540a:	ff 1f       	adc	r31, r31
    540c:	ea 57       	subi	r30, 0x7A	; 122
    540e:	fa 4f       	sbci	r31, 0xFA	; 250
    5410:	01 90       	ld	r0, Z+
    5412:	f0 81       	ld	r31, Z
    5414:	e0 2d       	mov	r30, r0
    5416:	ab 01       	movw	r20, r22
    5418:	60 e0       	ldi	r22, 0x00	; 0
    541a:	85 e0       	ldi	r24, 0x05	; 5
    541c:	09 95       	icall
    541e:	99 27       	eor	r25, r25
    5420:	87 fd       	sbrc	r24, 7
    5422:	90 95       	com	r25
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );
    5424:	08 95       	ret

00005426 <nrk_write>:

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
	{
    	nrk_watchdog_disable();
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    5426:	24 2f       	mov	r18, r20
	}
    5428:	e8 2f       	mov	r30, r24
    542a:	ff 27       	eor	r31, r31
    542c:	80 91 83 05 	lds	r24, 0x0583
    5430:	99 27       	eor	r25, r25
    5432:	87 fd       	sbrc	r24, 7
    5434:	90 95       	com	r25
    5436:	8e 17       	cp	r24, r30
    5438:	9f 07       	cpc	r25, r31
    543a:	34 f4       	brge	.+12     	; 0x5448 <nrk_write+0x22>
    nrk_watchdog_enable();
    #endif
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    5442:	8f ef       	ldi	r24, 0xFF	; 255
    5444:	9f ef       	ldi	r25, 0xFF	; 255
    5446:	08 95       	ret
  
  // nrk_stack_pointer_init(); 
/* 
    #ifdef KERNEL_STK_ARRAY
    5448:	ee 0f       	add	r30, r30
    544a:	ff 1f       	adc	r31, r31
    544c:	ee 0f       	add	r30, r30
    544e:	ff 1f       	adc	r31, r31
    5450:	ea 57       	subi	r30, 0x7A	; 122
    5452:	fa 4f       	sbci	r31, 0xFA	; 250
    5454:	01 90       	ld	r0, Z+
    5456:	f0 81       	ld	r31, Z
    5458:	e0 2d       	mov	r30, r0
    545a:	ab 01       	movw	r20, r22
    545c:	60 e0       	ldi	r22, 0x00	; 0
    545e:	86 e0       	ldi	r24, 0x06	; 6
    5460:	09 95       	icall
    5462:	99 27       	eor	r25, r25
    5464:	87 fd       	sbrc	r24, 7
    5466:	90 95       	com	r25
	stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
	nrk_kernel_stk[0]=STK_CANARY_VAL;
    5468:	08 95       	ret

0000546a <nrk_close>:
   #ifdef NRK_STARTUP_VOLTAGE_CHECK
   	if(nrk_voltage_status()==0) nrk_kernel_error_add(NRK_LOW_VOLTAGE,0);
   #endif



    546a:	e8 2f       	mov	r30, r24
    546c:	ff 27       	eor	r31, r31
    546e:	80 91 83 05 	lds	r24, 0x0583
    5472:	99 27       	eor	r25, r25
    5474:	87 fd       	sbrc	r24, 7
    5476:	90 95       	com	r25
    5478:	8e 17       	cp	r24, r30
    547a:	9f 07       	cpc	r25, r31
    547c:	34 f4       	brge	.+12     	; 0x548a <nrk_close+0x20>

   #ifdef NRK_REBOOT_ON_ERROR
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_nrk_errno_set>
    5484:	8f ef       	ldi	r24, 0xFF	; 255
    5486:	9f ef       	ldi	r25, 0xFF	; 255
    5488:	08 95       	ret
   #ifndef NRK_WATCHDOG
   while(1)
	   {
		nrk_kprintf( PSTR("KERNEL CONFIG CONFLICT:  NRK_REBOOT_ON_ERROR needs watchdog!\r\n") );
    548a:	ee 0f       	add	r30, r30
    548c:	ff 1f       	adc	r31, r31
    548e:	ee 0f       	add	r30, r30
    5490:	ff 1f       	adc	r31, r31
    5492:	ea 57       	subi	r30, 0x7A	; 122
    5494:	fa 4f       	sbci	r31, 0xFA	; 250
    5496:	01 90       	ld	r0, Z+
    5498:	f0 81       	ld	r31, Z
    549a:	e0 2d       	mov	r30, r0
    549c:	20 e0       	ldi	r18, 0x00	; 0
    549e:	40 e0       	ldi	r20, 0x00	; 0
    54a0:	50 e0       	ldi	r21, 0x00	; 0
    54a2:	60 e0       	ldi	r22, 0x00	; 0
    54a4:	82 e0       	ldi	r24, 0x02	; 2
    54a6:	09 95       	icall
    		for (i = 0; i < 100; i++)
      			nrk_spin_wait_us (1000);
	   }
   #endif
   #endif

    54a8:	99 27       	eor	r25, r25
    54aa:	87 fd       	sbrc	r24, 7
    54ac:	90 95       	com	r25
   #ifdef NRK_WATCHDOG
    54ae:	08 95       	ret

000054b0 <nrk_spin_wait_us>:
	...
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
//
//	PARAMETERS:
//		UINT8 channel
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
    54b8:	01 97       	sbiw	r24, 0x01	; 1
    54ba:	d1 f7       	brne	.-12     	; 0x54b0 <nrk_spin_wait_us>
    54bc:	08 95       	ret

000054be <_nrk_high_speed_timer_stop>:
    54be:	10 92 81 00 	sts	0x0081, r1
    54c2:	08 95       	ret

000054c4 <_nrk_high_speed_timer_start>:
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 93 81 00 	sts	0x0081, r24
    54ca:	08 95       	ret

000054cc <_nrk_high_speed_timer_reset>:
    54cc:	83 b5       	in	r24, 0x23	; 35
    54ce:	81 60       	ori	r24, 0x01	; 1
    54d0:	83 bd       	out	0x23, r24	; 35
    54d2:	10 92 85 00 	sts	0x0085, r1
    54d6:	10 92 84 00 	sts	0x0084, r1
    54da:	08 95       	ret

000054dc <_nrk_high_speed_timer_get>:
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	cd b7       	in	r28, 0x3d	; 61
    54e2:	de b7       	in	r29, 0x3e	; 62
    54e4:	22 97       	sbiw	r28, 0x02	; 2
    54e6:	0f b6       	in	r0, 0x3f	; 63
    54e8:	f8 94       	cli
    54ea:	de bf       	out	0x3e, r29	; 62
    54ec:	0f be       	out	0x3f, r0	; 63
    54ee:	cd bf       	out	0x3d, r28	; 61
    54f0:	80 91 84 00 	lds	r24, 0x0084
    54f4:	90 91 85 00 	lds	r25, 0x0085
    54f8:	9a 83       	std	Y+2, r25	; 0x02
    54fa:	89 83       	std	Y+1, r24	; 0x01
    54fc:	89 81       	ldd	r24, Y+1	; 0x01
    54fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5500:	22 96       	adiw	r28, 0x02	; 2
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	df 91       	pop	r29
    550e:	cf 91       	pop	r28
    5510:	08 95       	ret

00005512 <_nrk_os_timer_stop>:
    5512:	10 92 b1 00 	sts	0x00B1, r1
    5516:	e0 e7       	ldi	r30, 0x70	; 112
    5518:	f0 e0       	ldi	r31, 0x00	; 0
    551a:	80 81       	ld	r24, Z
    551c:	8d 7f       	andi	r24, 0xFD	; 253
    551e:	80 83       	st	Z, r24
    5520:	80 81       	ld	r24, Z
    5522:	8e 7f       	andi	r24, 0xFE	; 254
    5524:	80 83       	st	Z, r24
    5526:	08 95       	ret

00005528 <_nrk_os_timer_set>:
    5528:	80 93 b2 00 	sts	0x00B2, r24
    552c:	08 95       	ret

0000552e <_nrk_os_timer_start>:
    552e:	e0 e7       	ldi	r30, 0x70	; 112
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	80 81       	ld	r24, Z
    5534:	83 60       	ori	r24, 0x03	; 3
    5536:	80 83       	st	Z, r24
    5538:	83 e0       	ldi	r24, 0x03	; 3
    553a:	80 93 b1 00 	sts	0x00B1, r24
    553e:	08 95       	ret

00005540 <_nrk_os_timer_reset>:
    5540:	83 b5       	in	r24, 0x23	; 35
    5542:	82 60       	ori	r24, 0x02	; 2
    5544:	83 bd       	out	0x23, r24	; 35
    5546:	10 92 b2 00 	sts	0x00B2, r1
    554a:	10 92 c9 03 	sts	0x03C9, r1
    554e:	10 92 74 04 	sts	0x0474, r1
    5552:	08 95       	ret

00005554 <_nrk_get_next_wakeup>:
    5554:	80 91 b3 00 	lds	r24, 0x00B3
    5558:	8f 5f       	subi	r24, 0xFF	; 255
    555a:	99 27       	eor	r25, r25
    555c:	08 95       	ret

0000555e <_nrk_set_next_wakeup>:
    555e:	81 50       	subi	r24, 0x01	; 1
    5560:	80 93 b3 00 	sts	0x00B3, r24
    5564:	08 95       	ret

00005566 <nrk_timer_int_stop>:
    5566:	88 23       	and	r24, r24
    5568:	11 f4       	brne	.+4      	; 0x556e <nrk_timer_int_stop+0x8>
    556a:	10 92 71 00 	sts	0x0071, r1
    556e:	8f ef       	ldi	r24, 0xFF	; 255
    5570:	9f ef       	ldi	r25, 0xFF	; 255
    5572:	08 95       	ret

00005574 <nrk_timer_int_reset>:
    5574:	88 23       	and	r24, r24
    5576:	19 f0       	breq	.+6      	; 0x557e <nrk_timer_int_reset+0xa>
    5578:	8f ef       	ldi	r24, 0xFF	; 255
    557a:	9f ef       	ldi	r25, 0xFF	; 255
    557c:	08 95       	ret
    557e:	10 92 95 00 	sts	0x0095, r1
    5582:	10 92 94 00 	sts	0x0094, r1
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	08 95       	ret

0000558c <nrk_timer_int_read>:
    558c:	88 23       	and	r24, r24
    558e:	19 f0       	breq	.+6      	; 0x5596 <nrk_timer_int_read+0xa>
    5590:	80 e0       	ldi	r24, 0x00	; 0
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	08 95       	ret
    5596:	80 91 94 00 	lds	r24, 0x0094
    559a:	90 91 95 00 	lds	r25, 0x0095
    559e:	08 95       	ret

000055a0 <nrk_timer_int_start>:
    55a0:	88 23       	and	r24, r24
    55a2:	19 f0       	breq	.+6      	; 0x55aa <nrk_timer_int_start+0xa>
    55a4:	8f ef       	ldi	r24, 0xFF	; 255
    55a6:	9f ef       	ldi	r25, 0xFF	; 255
    55a8:	08 95       	ret
    55aa:	82 e0       	ldi	r24, 0x02	; 2
    55ac:	80 93 71 00 	sts	0x0071, r24
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	08 95       	ret

000055b6 <nrk_timer_int_configure>:
    55b6:	88 23       	and	r24, r24
    55b8:	19 f0       	breq	.+6      	; 0x55c0 <nrk_timer_int_configure+0xa>
    55ba:	8f ef       	ldi	r24, 0xFF	; 255
    55bc:	9f ef       	ldi	r25, 0xFF	; 255
    55be:	08 95       	ret
    55c0:	cb 01       	movw	r24, r22
    55c2:	01 97       	sbiw	r24, 0x01	; 1
    55c4:	05 97       	sbiw	r24, 0x05	; 5
    55c6:	10 f4       	brcc	.+4      	; 0x55cc <nrk_timer_int_configure+0x16>
    55c8:	60 93 73 04 	sts	0x0473, r22
    55cc:	10 92 90 00 	sts	0x0090, r1
    55d0:	88 e0       	ldi	r24, 0x08	; 8
    55d2:	80 93 91 00 	sts	0x0091, r24
    55d6:	85 2f       	mov	r24, r21
    55d8:	99 27       	eor	r25, r25
    55da:	80 93 99 00 	sts	0x0099, r24
    55de:	40 93 98 00 	sts	0x0098, r20
    55e2:	30 93 c7 03 	sts	0x03C7, r19
    55e6:	20 93 c6 03 	sts	0x03C6, r18
    55ea:	80 91 73 04 	lds	r24, 0x0473
    55ee:	81 30       	cpi	r24, 0x01	; 1
    55f0:	21 f4       	brne	.+8      	; 0x55fa <nrk_timer_int_configure+0x44>
    55f2:	80 91 91 00 	lds	r24, 0x0091
    55f6:	81 60       	ori	r24, 0x01	; 1
    55f8:	0b c0       	rjmp	.+22     	; 0x5610 <nrk_timer_int_configure+0x5a>
    55fa:	82 30       	cpi	r24, 0x02	; 2
    55fc:	21 f4       	brne	.+8      	; 0x5606 <nrk_timer_int_configure+0x50>
    55fe:	80 91 91 00 	lds	r24, 0x0091
    5602:	82 60       	ori	r24, 0x02	; 2
    5604:	05 c0       	rjmp	.+10     	; 0x5610 <nrk_timer_int_configure+0x5a>
    5606:	83 30       	cpi	r24, 0x03	; 3
    5608:	31 f4       	brne	.+12     	; 0x5616 <nrk_timer_int_configure+0x60>
    560a:	80 91 91 00 	lds	r24, 0x0091
    560e:	83 60       	ori	r24, 0x03	; 3
    5610:	80 93 91 00 	sts	0x0091, r24
    5614:	08 c0       	rjmp	.+16     	; 0x5626 <nrk_timer_int_configure+0x70>
    5616:	84 30       	cpi	r24, 0x04	; 4
    5618:	21 f4       	brne	.+8      	; 0x5622 <nrk_timer_int_configure+0x6c>
    561a:	80 91 91 00 	lds	r24, 0x0091
    561e:	84 60       	ori	r24, 0x04	; 4
    5620:	f7 cf       	rjmp	.-18     	; 0x5610 <nrk_timer_int_configure+0x5a>
    5622:	85 30       	cpi	r24, 0x05	; 5
    5624:	19 f0       	breq	.+6      	; 0x562c <nrk_timer_int_configure+0x76>
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	08 95       	ret
    562c:	80 91 91 00 	lds	r24, 0x0091
    5630:	85 60       	ori	r24, 0x05	; 5
    5632:	80 93 91 00 	sts	0x0091, r24
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	08 95       	ret

0000563c <_nrk_os_timer_get>:
    563c:	80 91 b2 00 	lds	r24, 0x00B2
    5640:	99 27       	eor	r25, r25
    5642:	08 95       	ret

00005644 <__vector_13>:
    5644:	0f 92       	push	r0
    5646:	0f b6       	in	r0, 0x3f	; 63
    5648:	0f 92       	push	r0
    564a:	1f 92       	push	r1
    564c:	2f 92       	push	r2
    564e:	3f 92       	push	r3
    5650:	4f 92       	push	r4
    5652:	5f 92       	push	r5
    5654:	6f 92       	push	r6
    5656:	7f 92       	push	r7
    5658:	8f 92       	push	r8
    565a:	9f 92       	push	r9
    565c:	af 92       	push	r10
    565e:	bf 92       	push	r11
    5660:	cf 92       	push	r12
    5662:	df 92       	push	r13
    5664:	ef 92       	push	r14
    5666:	ff 92       	push	r15
    5668:	0f 93       	push	r16
    566a:	1f 93       	push	r17
    566c:	2f 93       	push	r18
    566e:	3f 93       	push	r19
    5670:	4f 93       	push	r20
    5672:	5f 93       	push	r21
    5674:	6f 93       	push	r22
    5676:	7f 93       	push	r23
    5678:	8f 93       	push	r24
    567a:	9f 93       	push	r25
    567c:	af 93       	push	r26
    567e:	bf 93       	push	r27
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	ef 93       	push	r30
    5686:	ff 93       	push	r31
    5688:	a0 91 70 05 	lds	r26, 0x0570
    568c:	b0 91 71 05 	lds	r27, 0x0571
    5690:	0d b6       	in	r0, 0x3d	; 61
    5692:	0d 92       	st	X+, r0
    5694:	0e b6       	in	r0, 0x3e	; 62
    5696:	0d 92       	st	X+, r0
    5698:	1f 92       	push	r1
    569a:	a0 91 71 04 	lds	r26, 0x0471
    569e:	b0 91 72 04 	lds	r27, 0x0472
    56a2:	1e 90       	ld	r1, -X
    56a4:	be bf       	out	0x3e, r27	; 62
    56a6:	ad bf       	out	0x3d, r26	; 61
    56a8:	08 95       	ret

000056aa <__vector_17>:
    56aa:	1f 92       	push	r1
    56ac:	0f 92       	push	r0
    56ae:	0f b6       	in	r0, 0x3f	; 63
    56b0:	0f 92       	push	r0
    56b2:	11 24       	eor	r1, r1
    56b4:	0f 90       	pop	r0
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	0f 90       	pop	r0
    56ba:	1f 90       	pop	r1
    56bc:	18 95       	reti

000056be <__vector_32>:
    56be:	1f 92       	push	r1
    56c0:	0f 92       	push	r0
    56c2:	0f b6       	in	r0, 0x3f	; 63
    56c4:	0f 92       	push	r0
    56c6:	11 24       	eor	r1, r1
    56c8:	2f 93       	push	r18
    56ca:	3f 93       	push	r19
    56cc:	4f 93       	push	r20
    56ce:	5f 93       	push	r21
    56d0:	6f 93       	push	r22
    56d2:	7f 93       	push	r23
    56d4:	8f 93       	push	r24
    56d6:	9f 93       	push	r25
    56d8:	af 93       	push	r26
    56da:	bf 93       	push	r27
    56dc:	ef 93       	push	r30
    56de:	ff 93       	push	r31
    56e0:	e0 91 c6 03 	lds	r30, 0x03C6
    56e4:	f0 91 c7 03 	lds	r31, 0x03C7
    56e8:	30 97       	sbiw	r30, 0x00	; 0
    56ea:	11 f0       	breq	.+4      	; 0x56f0 <__vector_32+0x32>
    56ec:	09 95       	icall
    56ee:	04 c0       	rjmp	.+8      	; 0x56f8 <__vector_32+0x3a>
    56f0:	60 e0       	ldi	r22, 0x00	; 0
    56f2:	8a e0       	ldi	r24, 0x0A	; 10
    56f4:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    56f8:	ff 91       	pop	r31
    56fa:	ef 91       	pop	r30
    56fc:	bf 91       	pop	r27
    56fe:	af 91       	pop	r26
    5700:	9f 91       	pop	r25
    5702:	8f 91       	pop	r24
    5704:	7f 91       	pop	r23
    5706:	6f 91       	pop	r22
    5708:	5f 91       	pop	r21
    570a:	4f 91       	pop	r20
    570c:	3f 91       	pop	r19
    570e:	2f 91       	pop	r18
    5710:	0f 90       	pop	r0
    5712:	0f be       	out	0x3f, r0	; 63
    5714:	0f 90       	pop	r0
    5716:	1f 90       	pop	r1
    5718:	18 95       	reti

0000571a <__vector_default>:
    571a:	1f 92       	push	r1
    571c:	0f 92       	push	r0
    571e:	0f b6       	in	r0, 0x3f	; 63
    5720:	0f 92       	push	r0
    5722:	11 24       	eor	r1, r1
    5724:	2f 93       	push	r18
    5726:	3f 93       	push	r19
    5728:	4f 93       	push	r20
    572a:	5f 93       	push	r21
    572c:	6f 93       	push	r22
    572e:	7f 93       	push	r23
    5730:	8f 93       	push	r24
    5732:	9f 93       	push	r25
    5734:	af 93       	push	r26
    5736:	bf 93       	push	r27
    5738:	ef 93       	push	r30
    573a:	ff 93       	push	r31
    573c:	60 e0       	ldi	r22, 0x00	; 0
    573e:	8a e0       	ldi	r24, 0x0A	; 10
    5740:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    5744:	ff cf       	rjmp	.-2      	; 0x5744 <__vector_default+0x2a>

00005746 <nrk_high_speed_timer_wait>:
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
    574a:	cd b7       	in	r28, 0x3d	; 61
    574c:	de b7       	in	r29, 0x3e	; 62
    574e:	22 97       	sbiw	r28, 0x02	; 2
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	de bf       	out	0x3e, r29	; 62
    5756:	0f be       	out	0x3f, r0	; 63
    5758:	cd bf       	out	0x3d, r28	; 61
    575a:	fc 01       	movw	r30, r24
    575c:	8f ef       	ldi	r24, 0xFF	; 255
    575e:	e9 37       	cpi	r30, 0x79	; 121
    5760:	f8 07       	cpc	r31, r24
    5762:	10 f0       	brcs	.+4      	; 0x5768 <nrk_high_speed_timer_wait+0x22>
    5764:	e0 e0       	ldi	r30, 0x00	; 0
    5766:	f0 e0       	ldi	r31, 0x00	; 0
    5768:	9f 01       	movw	r18, r30
    576a:	44 27       	eor	r20, r20
    576c:	55 27       	eor	r21, r21
    576e:	cb 01       	movw	r24, r22
    5770:	aa 27       	eor	r26, r26
    5772:	bb 27       	eor	r27, r27
    5774:	28 0f       	add	r18, r24
    5776:	39 1f       	adc	r19, r25
    5778:	4a 1f       	adc	r20, r26
    577a:	5b 1f       	adc	r21, r27
    577c:	21 30       	cpi	r18, 0x01	; 1
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	38 07       	cpc	r19, r24
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	48 07       	cpc	r20, r24
    5786:	80 e0       	ldi	r24, 0x00	; 0
    5788:	58 07       	cpc	r21, r24
    578a:	78 f0       	brcs	.+30     	; 0x57aa <nrk_high_speed_timer_wait+0x64>
    578c:	80 91 84 00 	lds	r24, 0x0084
    5790:	90 91 85 00 	lds	r25, 0x0085
    5794:	9a 83       	std	Y+2, r25	; 0x02
    5796:	89 83       	std	Y+1, r24	; 0x01
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	9a 81       	ldd	r25, Y+2	; 0x02
    579c:	e8 17       	cp	r30, r24
    579e:	f9 07       	cpc	r31, r25
    57a0:	a8 f3       	brcs	.-22     	; 0x578c <nrk_high_speed_timer_wait+0x46>
    57a2:	20 50       	subi	r18, 0x00	; 0
    57a4:	30 40       	sbci	r19, 0x00	; 0
    57a6:	41 40       	sbci	r20, 0x01	; 1
    57a8:	50 40       	sbci	r21, 0x00	; 0
    57aa:	80 91 84 00 	lds	r24, 0x0084
    57ae:	90 91 85 00 	lds	r25, 0x0085
    57b2:	9a 83       	std	Y+2, r25	; 0x02
    57b4:	89 83       	std	Y+1, r24	; 0x01
    57b6:	89 81       	ldd	r24, Y+1	; 0x01
    57b8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ba:	82 17       	cp	r24, r18
    57bc:	93 07       	cpc	r25, r19
    57be:	a8 f3       	brcs	.-22     	; 0x57aa <nrk_high_speed_timer_wait+0x64>
    57c0:	22 96       	adiw	r28, 0x02	; 2
    57c2:	0f b6       	in	r0, 0x3f	; 63
    57c4:	f8 94       	cli
    57c6:	de bf       	out	0x3e, r29	; 62
    57c8:	0f be       	out	0x3f, r0	; 63
    57ca:	cd bf       	out	0x3d, r28	; 61
    57cc:	df 91       	pop	r29
    57ce:	cf 91       	pop	r28
    57d0:	08 95       	ret

000057d2 <_nrk_setup_timer>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	1f 93       	push	r17
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    57d8:	9e ef       	ldi	r25, 0xFE	; 254
    57da:	90 93 74 04 	sts	0x0474, r25
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    // Write it to the CC2420
    57de:	80 e2       	ldi	r24, 0x20	; 32
    57e0:	80 93 b6 00 	sts	0x00B6, r24
	DISABLE_GLOBAL_INT();
    57e4:	90 93 b3 00 	sts	0x00B3, r25
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    57e8:	13 e0       	ldi	r17, 0x03	; 3
    57ea:	17 bb       	out	0x17, r17	; 23
	ENABLE_GLOBAL_INT();
    57ec:	82 e0       	ldi	r24, 0x02	; 2
    57ee:	80 93 b0 00 	sts	0x00B0, r24

    57f2:	91 eb       	ldi	r25, 0xB1	; 177
    57f4:	e9 2e       	mov	r14, r25
    57f6:	f1 2c       	mov	r15, r1
    57f8:	f7 01       	movw	r30, r14
    57fa:	10 83       	st	Z, r17
} // rfSetChannel
    57fc:	83 b5       	in	r24, 0x23	; 35
    57fe:	82 60       	ori	r24, 0x02	; 2
    5800:	83 bd       	out	0x23, r24	; 35


    5802:	17 bb       	out	0x17, r17	; 23
    5804:	14 bd       	out	0x24, r17	; 36
    5806:	83 b5       	in	r24, 0x23	; 35
    5808:	82 60       	ori	r24, 0x02	; 2
    580a:	83 bd       	out	0x23, r24	; 35
    580c:	10 92 80 00 	sts	0x0080, r1
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	80 93 81 00 	sts	0x0081, r24
    5816:	10 92 85 00 	sts	0x0085, r1
    581a:	10 92 84 00 	sts	0x0084, r1
    581e:	83 b5       	in	r24, 0x23	; 35
    5820:	82 60       	ori	r24, 0x02	; 2
    5822:	83 bd       	out	0x23, r24	; 35
    5824:	83 b5       	in	r24, 0x23	; 35
    5826:	81 60       	ori	r24, 0x01	; 1
    5828:	83 bd       	out	0x23, r24	; 35
    582a:	0e 94 a0 2a 	call	0x5540	; 0x5540 <_nrk_os_timer_reset>
    582e:	e0 e7       	ldi	r30, 0x70	; 112
    5830:	f0 e0       	ldi	r31, 0x00	; 0
    5832:	80 81       	ld	r24, Z
    5834:	83 60       	ori	r24, 0x03	; 3
    5836:	80 83       	st	Z, r24
    5838:	f7 01       	movw	r30, r14
    583a:	10 83       	st	Z, r17
    583c:	10 92 c9 03 	sts	0x03C9, r1
    5840:	1f 91       	pop	r17
    5842:	ff 90       	pop	r15
    5844:	ef 90       	pop	r14
    5846:	08 95       	ret

00005848 <_nrk_startup_error>:
//	DESCRIPTION:
//		Programs CC2420 for a given IEEE 802.15.4 channel. 
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
//
//	PARAMETERS:
//		UINT8 channel
    5848:	04 b6       	in	r0, 0x34	; 52
    584a:	03 fe       	sbrs	r0, 3
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <_nrk_startup_error+0xa>
    584e:	90 e1       	ldi	r25, 0x10	; 16
    5850:	01 c0       	rjmp	.+2      	; 0x5854 <_nrk_startup_error+0xc>
    5852:	90 e0       	ldi	r25, 0x00	; 0
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    5854:	04 b6       	in	r0, 0x34	; 52
    5856:	02 fe       	sbrs	r0, 2
    5858:	06 c0       	rjmp	.+12     	; 0x5866 <_nrk_startup_error+0x1e>
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    585a:	84 b7       	in	r24, 0x34	; 52
    585c:	8b 7f       	andi	r24, 0xFB	; 251
    585e:	84 bf       	out	0x34, r24	; 52
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    5860:	04 b6       	in	r0, 0x34	; 52
    5862:	00 fe       	sbrs	r0, 0
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    5864:	94 60       	ori	r25, 0x04	; 4
	ENABLE_GLOBAL_INT();

} // rfSetChannel

    5866:	04 b6       	in	r0, 0x34	; 52
    5868:	01 fe       	sbrs	r0, 1
    586a:	04 c0       	rjmp	.+8      	; 0x5874 <_nrk_startup_error+0x2c>

    586c:	84 b7       	in	r24, 0x34	; 52
    586e:	8d 7f       	andi	r24, 0xFD	; 253
    5870:	84 bf       	out	0x34, r24	; 52
    5872:	92 60       	ori	r25, 0x02	; 2
    5874:	99 23       	and	r25, r25
    5876:	19 f0       	breq	.+6      	; 0x587e <_nrk_startup_error+0x36>
    5878:	89 2f       	mov	r24, r25
    587a:	99 27       	eor	r25, r25
    587c:	08 95       	ret
    587e:	04 b6       	in	r0, 0x34	; 52
    5880:	00 fc       	sbrc	r0, 0
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <_nrk_startup_error+0x40>
    5884:	91 e0       	ldi	r25, 0x01	; 1
    5886:	03 c0       	rjmp	.+6      	; 0x588e <_nrk_startup_error+0x46>
    5888:	84 b7       	in	r24, 0x34	; 52
    588a:	8e 7f       	andi	r24, 0xFE	; 254
    588c:	84 bf       	out	0x34, r24	; 52
    588e:	80 91 b0 00 	lds	r24, 0x00B0
    5892:	81 11       	cpse	r24, r1
    5894:	91 60       	ori	r25, 0x01	; 1
    5896:	89 2f       	mov	r24, r25
    5898:	99 27       	eor	r25, r25
    589a:	08 95       	ret

0000589c <nrk_ext_int_enable>:

//-------------------------------------------------------------------------------------------------------
//	void halRfSetChannel(UINT8 Channel)
//
//	DESCRIPTION:
//		Programs CC2420 for a given IEEE 802.15.4 channel. 
    589c:	88 23       	and	r24, r24
    589e:	11 f4       	brne	.+4      	; 0x58a4 <nrk_ext_int_enable+0x8>
    58a0:	e8 9a       	sbi	0x1d, 0	; 29
    58a2:	33 c0       	rjmp	.+102    	; 0x590a <nrk_ext_int_enable+0x6e>
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
    58a4:	81 30       	cpi	r24, 0x01	; 1
    58a6:	11 f4       	brne	.+4      	; 0x58ac <nrk_ext_int_enable+0x10>
    58a8:	e9 9a       	sbi	0x1d, 1	; 29
    58aa:	2f c0       	rjmp	.+94     	; 0x590a <nrk_ext_int_enable+0x6e>
//
    58ac:	82 30       	cpi	r24, 0x02	; 2
    58ae:	11 f4       	brne	.+4      	; 0x58b4 <nrk_ext_int_enable+0x18>
    58b0:	ea 9a       	sbi	0x1d, 2	; 29
    58b2:	2b c0       	rjmp	.+86     	; 0x590a <nrk_ext_int_enable+0x6e>
//	PARAMETERS:
    58b4:	83 30       	cpi	r24, 0x03	; 3
    58b6:	21 f4       	brne	.+8      	; 0x58c0 <nrk_ext_int_enable+0x24>
    58b8:	80 91 6b 00 	lds	r24, 0x006B
    58bc:	81 60       	ori	r24, 0x01	; 1
    58be:	23 c0       	rjmp	.+70     	; 0x5906 <nrk_ext_int_enable+0x6a>
//		UINT8 channel
    58c0:	84 30       	cpi	r24, 0x04	; 4
    58c2:	21 f4       	brne	.+8      	; 0x58cc <nrk_ext_int_enable+0x30>
    58c4:	80 91 6b 00 	lds	r24, 0x006B
    58c8:	82 60       	ori	r24, 0x02	; 2
    58ca:	1d c0       	rjmp	.+58     	; 0x5906 <nrk_ext_int_enable+0x6a>
//			The channel number (11-26)
    58cc:	85 30       	cpi	r24, 0x05	; 5
    58ce:	21 f4       	brne	.+8      	; 0x58d8 <nrk_ext_int_enable+0x3c>
    58d0:	80 91 6b 00 	lds	r24, 0x006B
    58d4:	84 60       	ori	r24, 0x04	; 4
    58d6:	17 c0       	rjmp	.+46     	; 0x5906 <nrk_ext_int_enable+0x6a>
//-------------------------------------------------------------------------------------------------------
    58d8:	86 30       	cpi	r24, 0x06	; 6
    58da:	21 f4       	brne	.+8      	; 0x58e4 <nrk_ext_int_enable+0x48>
    58dc:	80 91 6b 00 	lds	r24, 0x006B
    58e0:	88 60       	ori	r24, 0x08	; 8
    58e2:	11 c0       	rjmp	.+34     	; 0x5906 <nrk_ext_int_enable+0x6a>
void halRfSetChannel(uint8_t channel) {
    58e4:	87 30       	cpi	r24, 0x07	; 7
    58e6:	21 f4       	brne	.+8      	; 0x58f0 <nrk_ext_int_enable+0x54>
    58e8:	80 91 6b 00 	lds	r24, 0x006B
    58ec:	80 61       	ori	r24, 0x10	; 16
    58ee:	0b c0       	rjmp	.+22     	; 0x5906 <nrk_ext_int_enable+0x6a>
	uint16_t f;
    58f0:	88 30       	cpi	r24, 0x08	; 8
    58f2:	21 f4       	brne	.+8      	; 0x58fc <nrk_ext_int_enable+0x60>
    58f4:	80 91 6b 00 	lds	r24, 0x006B
    58f8:	80 62       	ori	r24, 0x20	; 32
    58fa:	05 c0       	rjmp	.+10     	; 0x5906 <nrk_ext_int_enable+0x6a>
	
    58fc:	89 30       	cpi	r24, 0x09	; 9
    58fe:	41 f4       	brne	.+16     	; 0x5910 <nrk_ext_int_enable+0x74>
    5900:	80 91 6b 00 	lds	r24, 0x006B
    5904:	80 64       	ori	r24, 0x40	; 64
    5906:	80 93 6b 00 	sts	0x006B, r24
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	08 95       	ret
	// Derive frequency programming from the given channel number
    5910:	8a 30       	cpi	r24, 0x0A	; 10
    5912:	19 f0       	breq	.+6      	; 0x591a <nrk_ext_int_enable+0x7e>
    5914:	8f ef       	ldi	r24, 0xFF	; 255
    5916:	9f ef       	ldi	r25, 0xFF	; 255
    5918:	08 95       	ret
    591a:	80 91 6b 00 	lds	r24, 0x006B
    591e:	80 68       	ori	r24, 0x80	; 128
    5920:	80 93 6b 00 	sts	0x006B, r24
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	90 e0       	ldi	r25, 0x00	; 0
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
    5928:	08 95       	ret

0000592a <nrk_ext_int_disable>:
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
    592a:	88 23       	and	r24, r24
    592c:	11 f4       	brne	.+4      	; 0x5932 <nrk_ext_int_disable+0x8>
    592e:	e8 98       	cbi	0x1d, 0	; 29
    5930:	31 c0       	rjmp	.+98     	; 0x5994 <nrk_ext_int_disable+0x6a>
	FASTSPI_SETREG(CC2420_FSCTRL, f);
    5932:	81 30       	cpi	r24, 0x01	; 1
    5934:	11 f0       	breq	.+4      	; 0x593a <nrk_ext_int_disable+0x10>
	ENABLE_GLOBAL_INT();
    5936:	82 30       	cpi	r24, 0x02	; 2
    5938:	11 f4       	brne	.+4      	; 0x593e <nrk_ext_int_disable+0x14>
    593a:	e9 98       	cbi	0x1d, 1	; 29
    593c:	2b c0       	rjmp	.+86     	; 0x5994 <nrk_ext_int_disable+0x6a>

    593e:	83 30       	cpi	r24, 0x03	; 3
    5940:	21 f4       	brne	.+8      	; 0x594a <nrk_ext_int_disable+0x20>
    5942:	80 91 6b 00 	lds	r24, 0x006B
    5946:	8e 7f       	andi	r24, 0xFE	; 254
    5948:	23 c0       	rjmp	.+70     	; 0x5990 <nrk_ext_int_disable+0x66>
} // rfSetChannel
    594a:	84 30       	cpi	r24, 0x04	; 4
    594c:	21 f4       	brne	.+8      	; 0x5956 <nrk_ext_int_disable+0x2c>
    594e:	80 91 6b 00 	lds	r24, 0x006B
    5952:	8d 7f       	andi	r24, 0xFD	; 253
    5954:	1d c0       	rjmp	.+58     	; 0x5990 <nrk_ext_int_disable+0x66>

    5956:	85 30       	cpi	r24, 0x05	; 5
    5958:	21 f4       	brne	.+8      	; 0x5962 <nrk_ext_int_disable+0x38>
    595a:	80 91 6b 00 	lds	r24, 0x006B
    595e:	8b 7f       	andi	r24, 0xFB	; 251
    5960:	17 c0       	rjmp	.+46     	; 0x5990 <nrk_ext_int_disable+0x66>

    5962:	86 30       	cpi	r24, 0x06	; 6
    5964:	21 f4       	brne	.+8      	; 0x596e <nrk_ext_int_disable+0x44>
    5966:	80 91 6b 00 	lds	r24, 0x006B
    596a:	87 7f       	andi	r24, 0xF7	; 247
    596c:	11 c0       	rjmp	.+34     	; 0x5990 <nrk_ext_int_disable+0x66>
    596e:	87 30       	cpi	r24, 0x07	; 7
    5970:	21 f4       	brne	.+8      	; 0x597a <nrk_ext_int_disable+0x50>
    5972:	80 91 6b 00 	lds	r24, 0x006B
    5976:	8f 7e       	andi	r24, 0xEF	; 239
    5978:	0b c0       	rjmp	.+22     	; 0x5990 <nrk_ext_int_disable+0x66>
    597a:	88 30       	cpi	r24, 0x08	; 8
    597c:	21 f4       	brne	.+8      	; 0x5986 <nrk_ext_int_disable+0x5c>
    597e:	80 91 6b 00 	lds	r24, 0x006B
    5982:	8f 7d       	andi	r24, 0xDF	; 223
    5984:	05 c0       	rjmp	.+10     	; 0x5990 <nrk_ext_int_disable+0x66>
    5986:	89 30       	cpi	r24, 0x09	; 9
    5988:	41 f4       	brne	.+16     	; 0x599a <nrk_ext_int_disable+0x70>
    598a:	80 91 6b 00 	lds	r24, 0x006B
    598e:	8f 7b       	andi	r24, 0xBF	; 191
    5990:	80 93 6b 00 	sts	0x006B, r24
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	08 95       	ret
    599a:	8a 30       	cpi	r24, 0x0A	; 10
    599c:	19 f0       	breq	.+6      	; 0x59a4 <nrk_ext_int_disable+0x7a>
    599e:	8f ef       	ldi	r24, 0xFF	; 255
    59a0:	9f ef       	ldi	r25, 0xFF	; 255
    59a2:	08 95       	ret
    59a4:	80 91 6b 00 	lds	r24, 0x006B
    59a8:	8f 77       	andi	r24, 0x7F	; 127
    59aa:	80 93 6b 00 	sts	0x006B, r24
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	08 95       	ret

000059b4 <nrk_ext_int_configure>:
    59b4:	88 23       	and	r24, r24
    59b6:	39 f5       	brne	.+78     	; 0x5a06 <nrk_ext_int_configure+0x52>
    59b8:	50 93 8c 05 	sts	0x058C, r21
    59bc:	40 93 8b 05 	sts	0x058B, r20
    59c0:	66 23       	and	r22, r22
    59c2:	21 f4       	brne	.+8      	; 0x59cc <nrk_ext_int_configure+0x18>
    59c4:	80 91 69 00 	lds	r24, 0x0069
    59c8:	8c 7f       	andi	r24, 0xFC	; 252
    59ca:	45 c0       	rjmp	.+138    	; 0x5a56 <nrk_ext_int_configure+0xa2>
    59cc:	61 30       	cpi	r22, 0x01	; 1
    59ce:	49 f4       	brne	.+18     	; 0x59e2 <nrk_ext_int_configure+0x2e>
    59d0:	80 91 69 00 	lds	r24, 0x0069
    59d4:	8d 7f       	andi	r24, 0xFD	; 253
    59d6:	80 93 69 00 	sts	0x0069, r24
    59da:	80 91 69 00 	lds	r24, 0x0069
    59de:	81 60       	ori	r24, 0x01	; 1
    59e0:	3a c0       	rjmp	.+116    	; 0x5a56 <nrk_ext_int_configure+0xa2>
    59e2:	62 30       	cpi	r22, 0x02	; 2
    59e4:	49 f4       	brne	.+18     	; 0x59f8 <nrk_ext_int_configure+0x44>
    59e6:	80 91 69 00 	lds	r24, 0x0069
    59ea:	82 60       	ori	r24, 0x02	; 2
    59ec:	80 93 69 00 	sts	0x0069, r24
    59f0:	80 91 69 00 	lds	r24, 0x0069
    59f4:	8e 7f       	andi	r24, 0xFE	; 254
    59f6:	2f c0       	rjmp	.+94     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    59f8:	63 30       	cpi	r22, 0x03	; 3
    59fa:	09 f0       	breq	.+2      	; 0x59fe <nrk_ext_int_configure+0x4a>
    59fc:	69 c0       	rjmp	.+210    	; 0x5ad0 <nrk_ext_int_configure+0x11c>
    59fe:	80 91 69 00 	lds	r24, 0x0069
    5a02:	83 60       	ori	r24, 0x03	; 3
    5a04:	28 c0       	rjmp	.+80     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a06:	81 30       	cpi	r24, 0x01	; 1
    5a08:	49 f5       	brne	.+82     	; 0x5a5c <nrk_ext_int_configure+0xa8>
    5a0a:	50 93 8a 05 	sts	0x058A, r21
    5a0e:	40 93 89 05 	sts	0x0589, r20
    5a12:	66 23       	and	r22, r22
    5a14:	21 f4       	brne	.+8      	; 0x5a1e <nrk_ext_int_configure+0x6a>
    5a16:	80 91 69 00 	lds	r24, 0x0069
    5a1a:	83 7f       	andi	r24, 0xF3	; 243
    5a1c:	1c c0       	rjmp	.+56     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a1e:	61 30       	cpi	r22, 0x01	; 1
    5a20:	49 f4       	brne	.+18     	; 0x5a34 <nrk_ext_int_configure+0x80>
    5a22:	80 91 69 00 	lds	r24, 0x0069
    5a26:	87 7f       	andi	r24, 0xF7	; 247
    5a28:	80 93 69 00 	sts	0x0069, r24
    5a2c:	80 91 69 00 	lds	r24, 0x0069
    5a30:	84 60       	ori	r24, 0x04	; 4
    5a32:	11 c0       	rjmp	.+34     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a34:	62 30       	cpi	r22, 0x02	; 2
    5a36:	49 f4       	brne	.+18     	; 0x5a4a <nrk_ext_int_configure+0x96>
    5a38:	80 91 69 00 	lds	r24, 0x0069
    5a3c:	88 60       	ori	r24, 0x08	; 8
    5a3e:	80 93 69 00 	sts	0x0069, r24
    5a42:	80 91 69 00 	lds	r24, 0x0069
    5a46:	8b 7f       	andi	r24, 0xFB	; 251
    5a48:	06 c0       	rjmp	.+12     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a4a:	63 30       	cpi	r22, 0x03	; 3
    5a4c:	09 f0       	breq	.+2      	; 0x5a50 <nrk_ext_int_configure+0x9c>
    5a4e:	40 c0       	rjmp	.+128    	; 0x5ad0 <nrk_ext_int_configure+0x11c>
    5a50:	80 91 69 00 	lds	r24, 0x0069
    5a54:	8c 60       	ori	r24, 0x0C	; 12
    5a56:	80 93 69 00 	sts	0x0069, r24
    5a5a:	37 c0       	rjmp	.+110    	; 0x5aca <nrk_ext_int_configure+0x116>
    5a5c:	82 30       	cpi	r24, 0x02	; 2
    5a5e:	31 f5       	brne	.+76     	; 0x5aac <nrk_ext_int_configure+0xf8>
    5a60:	50 93 8a 05 	sts	0x058A, r21
    5a64:	40 93 89 05 	sts	0x0589, r20
    5a68:	66 23       	and	r22, r22
    5a6a:	21 f4       	brne	.+8      	; 0x5a74 <nrk_ext_int_configure+0xc0>
    5a6c:	80 91 69 00 	lds	r24, 0x0069
    5a70:	8f 7c       	andi	r24, 0xCF	; 207
    5a72:	f1 cf       	rjmp	.-30     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a74:	61 30       	cpi	r22, 0x01	; 1
    5a76:	49 f4       	brne	.+18     	; 0x5a8a <nrk_ext_int_configure+0xd6>
    5a78:	80 91 69 00 	lds	r24, 0x0069
    5a7c:	8f 7d       	andi	r24, 0xDF	; 223
    5a7e:	80 93 69 00 	sts	0x0069, r24
    5a82:	80 91 69 00 	lds	r24, 0x0069
    5a86:	80 61       	ori	r24, 0x10	; 16
    5a88:	e6 cf       	rjmp	.-52     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5a8a:	62 30       	cpi	r22, 0x02	; 2
    5a8c:	49 f4       	brne	.+18     	; 0x5aa0 <nrk_ext_int_configure+0xec>
    5a8e:	80 91 69 00 	lds	r24, 0x0069
    5a92:	80 62       	ori	r24, 0x20	; 32
    5a94:	80 93 69 00 	sts	0x0069, r24
    5a98:	80 91 69 00 	lds	r24, 0x0069
    5a9c:	8f 7e       	andi	r24, 0xEF	; 239
    5a9e:	db cf       	rjmp	.-74     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5aa0:	63 30       	cpi	r22, 0x03	; 3
    5aa2:	b1 f4       	brne	.+44     	; 0x5ad0 <nrk_ext_int_configure+0x11c>
    5aa4:	80 91 69 00 	lds	r24, 0x0069
    5aa8:	80 63       	ori	r24, 0x30	; 48
    5aaa:	d5 cf       	rjmp	.-86     	; 0x5a56 <nrk_ext_int_configure+0xa2>
    5aac:	83 50       	subi	r24, 0x03	; 3
    5aae:	88 30       	cpi	r24, 0x08	; 8
    5ab0:	18 f0       	brcs	.+6      	; 0x5ab8 <nrk_ext_int_configure+0x104>
    5ab2:	8f ef       	ldi	r24, 0xFF	; 255
    5ab4:	9f ef       	ldi	r25, 0xFF	; 255
    5ab6:	08 95       	ret
    5ab8:	80 91 68 00 	lds	r24, 0x0068
    5abc:	81 60       	ori	r24, 0x01	; 1
    5abe:	80 93 68 00 	sts	0x0068, r24
    5ac2:	50 93 90 05 	sts	0x0590, r21
    5ac6:	40 93 8f 05 	sts	0x058F, r20
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	08 95       	ret
    5ad0:	81 e0       	ldi	r24, 0x01	; 1
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	08 95       	ret

00005ad6 <__vector_1>:
    5ad6:	1f 92       	push	r1
    5ad8:	0f 92       	push	r0
    5ada:	0f b6       	in	r0, 0x3f	; 63
    5adc:	0f 92       	push	r0
    5ade:	11 24       	eor	r1, r1
    5ae0:	2f 93       	push	r18
    5ae2:	3f 93       	push	r19
    5ae4:	4f 93       	push	r20
    5ae6:	5f 93       	push	r21
    5ae8:	6f 93       	push	r22
    5aea:	7f 93       	push	r23
    5aec:	8f 93       	push	r24
    5aee:	9f 93       	push	r25
    5af0:	af 93       	push	r26
    5af2:	bf 93       	push	r27
    5af4:	ef 93       	push	r30
    5af6:	ff 93       	push	r31
    5af8:	e0 91 8b 05 	lds	r30, 0x058B
    5afc:	f0 91 8c 05 	lds	r31, 0x058C
    5b00:	30 97       	sbiw	r30, 0x00	; 0
    5b02:	11 f0       	breq	.+4      	; 0x5b08 <__vector_1+0x32>
    5b04:	09 95       	icall
    5b06:	04 c0       	rjmp	.+8      	; 0x5b10 <__vector_1+0x3a>
    5b08:	60 e0       	ldi	r22, 0x00	; 0
    5b0a:	8a e0       	ldi	r24, 0x0A	; 10
    5b0c:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    5b10:	ff 91       	pop	r31
    5b12:	ef 91       	pop	r30
    5b14:	bf 91       	pop	r27
    5b16:	af 91       	pop	r26
    5b18:	9f 91       	pop	r25
    5b1a:	8f 91       	pop	r24
    5b1c:	7f 91       	pop	r23
    5b1e:	6f 91       	pop	r22
    5b20:	5f 91       	pop	r21
    5b22:	4f 91       	pop	r20
    5b24:	3f 91       	pop	r19
    5b26:	2f 91       	pop	r18
    5b28:	0f 90       	pop	r0
    5b2a:	0f be       	out	0x3f, r0	; 63
    5b2c:	0f 90       	pop	r0
    5b2e:	1f 90       	pop	r1
    5b30:	18 95       	reti

00005b32 <__vector_9>:
    5b32:	1f 92       	push	r1
    5b34:	0f 92       	push	r0
    5b36:	0f b6       	in	r0, 0x3f	; 63
    5b38:	0f 92       	push	r0
    5b3a:	11 24       	eor	r1, r1
    5b3c:	2f 93       	push	r18
    5b3e:	3f 93       	push	r19
    5b40:	4f 93       	push	r20
    5b42:	5f 93       	push	r21
    5b44:	6f 93       	push	r22
    5b46:	7f 93       	push	r23
    5b48:	8f 93       	push	r24
    5b4a:	9f 93       	push	r25
    5b4c:	af 93       	push	r26
    5b4e:	bf 93       	push	r27
    5b50:	ef 93       	push	r30
    5b52:	ff 93       	push	r31
    5b54:	e0 91 8f 05 	lds	r30, 0x058F
    5b58:	f0 91 90 05 	lds	r31, 0x0590
    5b5c:	30 97       	sbiw	r30, 0x00	; 0
    5b5e:	11 f0       	breq	.+4      	; 0x5b64 <__vector_9+0x32>
    5b60:	09 95       	icall
    5b62:	04 c0       	rjmp	.+8      	; 0x5b6c <__vector_9+0x3a>
    5b64:	60 e0       	ldi	r22, 0x00	; 0
    5b66:	8a e0       	ldi	r24, 0x0A	; 10
    5b68:	0e 94 41 1b 	call	0x3682	; 0x3682 <nrk_kernel_error_add>
    5b6c:	ff 91       	pop	r31
    5b6e:	ef 91       	pop	r30
    5b70:	bf 91       	pop	r27
    5b72:	af 91       	pop	r26
    5b74:	9f 91       	pop	r25
    5b76:	8f 91       	pop	r24
    5b78:	7f 91       	pop	r23
    5b7a:	6f 91       	pop	r22
    5b7c:	5f 91       	pop	r21
    5b7e:	4f 91       	pop	r20
    5b80:	3f 91       	pop	r19
    5b82:	2f 91       	pop	r18
    5b84:	0f 90       	pop	r0
    5b86:	0f be       	out	0x3f, r0	; 63
    5b88:	0f 90       	pop	r0
    5b8a:	1f 90       	pop	r1
    5b8c:	18 95       	reti

00005b8e <nrk_watchdog_check>:
	FASTSPI_SETREG(CC2420_FSCTRL, f);
	ENABLE_GLOBAL_INT();

} // rfSetChannel


    5b8e:	04 b6       	in	r0, 0x34	; 52
    5b90:	03 fc       	sbrc	r0, 3
    5b92:	03 c0       	rjmp	.+6      	; 0x5b9a <nrk_watchdog_check+0xc>
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	08 95       	ret
    5b9a:	8f ef       	ldi	r24, 0xFF	; 255
    5b9c:	9f ef       	ldi	r25, 0xFF	; 255
    5b9e:	08 95       	ret

00005ba0 <nrk_watchdog_reset>:
    5ba0:	a8 95       	wdr
    5ba2:	08 95       	ret

00005ba4 <nrk_watchdog_disable>:



//-------------------------------------------------------------------------------------------------------
//	void halRfSetChannel(UINT8 Channel)
//
    5ba4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
    5ba8:	a8 95       	wdr

//-------------------------------------------------------------------------------------------------------
//	void halRfSetChannel(UINT8 Channel)
//
//	DESCRIPTION:
//		Programs CC2420 for a given IEEE 802.15.4 channel. 
    5baa:	84 b7       	in	r24, 0x34	; 52
    5bac:	87 7f       	andi	r24, 0xF7	; 247
    5bae:	84 bf       	out	0x34, r24	; 52
//		Note that SRXON, STXON or STXONCCA must be run for the new channel selection to take full effect.
    5bb0:	e0 e6       	ldi	r30, 0x60	; 96
    5bb2:	f0 e0       	ldi	r31, 0x00	; 0
    5bb4:	80 81       	ld	r24, Z
    5bb6:	88 61       	ori	r24, 0x18	; 24
    5bb8:	80 83       	st	Z, r24
//
    5bba:	10 82       	st	Z, r1
//	PARAMETERS:
    5bbc:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    5bc0:	08 95       	ret

00005bc2 <nrk_watchdog_enable>:
//			The channel number (11-26)
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
    5bc2:	0e 94 32 17 	call	0x2e64	; 0x2e64 <nrk_int_disable>
	f = (uint16_t) (channel - 11); // Subtract the base channel 
    5bc6:	84 b7       	in	r24, 0x34	; 52
    5bc8:	87 7f       	andi	r24, 0xF7	; 247
    5bca:	84 bf       	out	0x34, r24	; 52
    5bcc:	a8 95       	wdr
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
    5bce:	e0 e6       	ldi	r30, 0x60	; 96
    5bd0:	f0 e0       	ldi	r31, 0x00	; 0
    5bd2:	80 81       	ld	r24, Z
    5bd4:	88 61       	ori	r24, 0x18	; 24
    5bd6:	80 83       	st	Z, r24
	
    5bd8:	8d e0       	ldi	r24, 0x0D	; 13
    5bda:	80 83       	st	Z, r24
    // Write it to the CC2420
    5bdc:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    5be0:	08 95       	ret

00005be2 <nrk_battery_save>:
    5be2:	08 95       	ret

00005be4 <nrk_sleep>:
    5be4:	83 b7       	in	r24, 0x33	; 51
    5be6:	81 7f       	andi	r24, 0xF1	; 241
    5be8:	86 60       	ori	r24, 0x06	; 6
    5bea:	83 bf       	out	0x33, r24	; 51
    5bec:	83 b7       	in	r24, 0x33	; 51
    5bee:	81 60       	ori	r24, 0x01	; 1
    5bf0:	83 bf       	out	0x33, r24	; 51
    5bf2:	88 95       	sleep
    5bf4:	83 b7       	in	r24, 0x33	; 51
    5bf6:	8e 7f       	andi	r24, 0xFE	; 254
    5bf8:	83 bf       	out	0x33, r24	; 51
    5bfa:	08 95       	ret

00005bfc <nrk_idle>:
    5bfc:	83 b7       	in	r24, 0x33	; 51
    5bfe:	81 7f       	andi	r24, 0xF1	; 241
    5c00:	83 bf       	out	0x33, r24	; 51
    5c02:	83 b7       	in	r24, 0x33	; 51
    5c04:	81 60       	ori	r24, 0x01	; 1
    5c06:	83 bf       	out	0x33, r24	; 51
    5c08:	88 95       	sleep
    5c0a:	83 b7       	in	r24, 0x33	; 51
    5c0c:	8e 7f       	andi	r24, 0xFE	; 254
    5c0e:	83 bf       	out	0x33, r24	; 51
    5c10:	08 95       	ret

00005c12 <nrk_task_set_entry_function>:
    5c12:	fc 01       	movw	r30, r24
    5c14:	76 83       	std	Z+6, r23	; 0x06
    5c16:	65 83       	std	Z+5, r22	; 0x05
    5c18:	08 95       	ret

00005c1a <nrk_task_stk_init>:
    5c1a:	fb 01       	movw	r30, r22
    5c1c:	da 01       	movw	r26, r20
    5c1e:	25 e5       	ldi	r18, 0x55	; 85
    5c20:	2c 93       	st	X, r18
    5c22:	32 97       	sbiw	r30, 0x02	; 2
    5c24:	29 2f       	mov	r18, r25
    5c26:	33 27       	eor	r19, r19
    5c28:	20 83       	st	Z, r18
    5c2a:	81 83       	std	Z+1, r24	; 0x01
    5c2c:	32 97       	sbiw	r30, 0x02	; 2
    5c2e:	11 82       	std	Z+1, r1	; 0x01
    5c30:	10 82       	st	Z, r1
    5c32:	32 97       	sbiw	r30, 0x02	; 2
    5c34:	11 82       	std	Z+1, r1	; 0x01
    5c36:	10 82       	st	Z, r1
    5c38:	32 97       	sbiw	r30, 0x02	; 2
    5c3a:	11 82       	std	Z+1, r1	; 0x01
    5c3c:	10 82       	st	Z, r1
    5c3e:	32 97       	sbiw	r30, 0x02	; 2
    5c40:	11 82       	std	Z+1, r1	; 0x01
    5c42:	10 82       	st	Z, r1
    5c44:	32 97       	sbiw	r30, 0x02	; 2
    5c46:	11 82       	std	Z+1, r1	; 0x01
    5c48:	10 82       	st	Z, r1
    5c4a:	32 97       	sbiw	r30, 0x02	; 2
    5c4c:	11 82       	std	Z+1, r1	; 0x01
    5c4e:	10 82       	st	Z, r1
    5c50:	32 97       	sbiw	r30, 0x02	; 2
    5c52:	11 82       	std	Z+1, r1	; 0x01
    5c54:	10 82       	st	Z, r1
    5c56:	32 97       	sbiw	r30, 0x02	; 2
    5c58:	11 82       	std	Z+1, r1	; 0x01
    5c5a:	10 82       	st	Z, r1
    5c5c:	32 97       	sbiw	r30, 0x02	; 2
    5c5e:	11 82       	std	Z+1, r1	; 0x01
    5c60:	10 82       	st	Z, r1
    5c62:	32 97       	sbiw	r30, 0x02	; 2
    5c64:	11 82       	std	Z+1, r1	; 0x01
    5c66:	10 82       	st	Z, r1
    5c68:	32 97       	sbiw	r30, 0x02	; 2
    5c6a:	11 82       	std	Z+1, r1	; 0x01
    5c6c:	10 82       	st	Z, r1
    5c6e:	32 97       	sbiw	r30, 0x02	; 2
    5c70:	11 82       	std	Z+1, r1	; 0x01
    5c72:	10 82       	st	Z, r1
    5c74:	32 97       	sbiw	r30, 0x02	; 2
    5c76:	11 82       	std	Z+1, r1	; 0x01
    5c78:	10 82       	st	Z, r1
    5c7a:	32 97       	sbiw	r30, 0x02	; 2
    5c7c:	11 82       	std	Z+1, r1	; 0x01
    5c7e:	10 82       	st	Z, r1
    5c80:	32 97       	sbiw	r30, 0x02	; 2
    5c82:	11 82       	std	Z+1, r1	; 0x01
    5c84:	10 82       	st	Z, r1
    5c86:	32 97       	sbiw	r30, 0x02	; 2
    5c88:	11 82       	std	Z+1, r1	; 0x01
    5c8a:	10 82       	st	Z, r1
    5c8c:	32 97       	sbiw	r30, 0x02	; 2
    5c8e:	11 82       	std	Z+1, r1	; 0x01
    5c90:	10 82       	st	Z, r1
    5c92:	cf 01       	movw	r24, r30
    5c94:	08 95       	ret

00005c96 <nrk_stack_pointer_init>:
    5c96:	85 e5       	ldi	r24, 0x55	; 85
    5c98:	80 93 7e 21 	sts	0x217E, r24
    5c9c:	ee ef       	ldi	r30, 0xFE	; 254
    5c9e:	f1 e2       	ldi	r31, 0x21	; 33
    5ca0:	f0 93 72 04 	sts	0x0472, r31
    5ca4:	e0 93 71 04 	sts	0x0471, r30
    5ca8:	29 e3       	ldi	r18, 0x39	; 57
    5caa:	37 e1       	ldi	r19, 0x17	; 23
    5cac:	83 2f       	mov	r24, r19
    5cae:	99 27       	eor	r25, r25
    5cb0:	80 83       	st	Z, r24
    5cb2:	20 93 ff 21 	sts	0x21FF, r18
    5cb6:	08 95       	ret

00005cb8 <nrk_stack_pointer_restore>:
    5cb8:	29 e3       	ldi	r18, 0x39	; 57
    5cba:	37 e1       	ldi	r19, 0x17	; 23
    5cbc:	83 2f       	mov	r24, r19
    5cbe:	99 27       	eor	r25, r25
    5cc0:	80 93 fe 21 	sts	0x21FE, r24
    5cc4:	20 93 ff 21 	sts	0x21FF, r18
    5cc8:	08 95       	ret

00005cca <nrk_target_start>:
    5cca:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <_nrk_setup_timer>
    5cce:	0e 94 34 17 	call	0x2e68	; 0x2e68 <nrk_int_enable>
    5cd2:	08 95       	ret

00005cd4 <nrk_task_set_stk>:
    5cd4:	ef 92       	push	r14
    5cd6:	ff 92       	push	r15
    5cd8:	0f 93       	push	r16
    5cda:	1f 93       	push	r17
    5cdc:	cf 93       	push	r28
    5cde:	df 93       	push	r29
    5ce0:	7c 01       	movw	r14, r24
    5ce2:	8b 01       	movw	r16, r22
    5ce4:	ea 01       	movw	r28, r20
    5ce6:	40 32       	cpi	r20, 0x20	; 32
    5ce8:	51 05       	cpc	r21, r1
    5cea:	18 f4       	brcc	.+6      	; 0x5cf2 <nrk_task_set_stk+0x1e>
    5cec:	81 e1       	ldi	r24, 0x11	; 17
    5cee:	0e 94 82 1b 	call	0x3704	; 0x3704 <nrk_error_add>
    5cf2:	c8 01       	movw	r24, r16
    5cf4:	01 97       	sbiw	r24, 0x01	; 1
    5cf6:	8c 0f       	add	r24, r28
    5cf8:	9d 1f       	adc	r25, r29
    5cfa:	f7 01       	movw	r30, r14
    5cfc:	92 83       	std	Z+2, r25	; 0x02
    5cfe:	81 83       	std	Z+1, r24	; 0x01
    5d00:	14 83       	std	Z+4, r17	; 0x04
    5d02:	03 83       	std	Z+3, r16	; 0x03
    5d04:	df 91       	pop	r29
    5d06:	cf 91       	pop	r28
    5d08:	1f 91       	pop	r17
    5d0a:	0f 91       	pop	r16
    5d0c:	ff 90       	pop	r15
    5d0e:	ef 90       	pop	r14
    5d10:	08 95       	ret

00005d12 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5d12:	a0 91 61 05 	lds	r26, 0x0561
	lds r27,nrk_high_ready_TCB+1
    5d16:	b0 91 62 05 	lds	r27, 0x0562

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5d1a:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5d1c:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5d1e:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5d20:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5d22:	ff 91       	pop	r31
	pop r30
    5d24:	ef 91       	pop	r30
	pop r29
    5d26:	df 91       	pop	r29
	pop r28
    5d28:	cf 91       	pop	r28
	pop r27
    5d2a:	bf 91       	pop	r27
	pop r26
    5d2c:	af 91       	pop	r26
	pop r25
    5d2e:	9f 91       	pop	r25
	pop r24			
    5d30:	8f 91       	pop	r24
	pop r23
    5d32:	7f 91       	pop	r23
	pop r22
    5d34:	6f 91       	pop	r22
	pop r21
    5d36:	5f 91       	pop	r21
	pop r20	
    5d38:	4f 91       	pop	r20
	pop r19
    5d3a:	3f 91       	pop	r19
	pop r18	
    5d3c:	2f 91       	pop	r18
	pop r17
    5d3e:	1f 91       	pop	r17
	pop r16
    5d40:	0f 91       	pop	r16
	pop r15
    5d42:	ff 90       	pop	r15
	pop r14
    5d44:	ef 90       	pop	r14
	pop r13
    5d46:	df 90       	pop	r13
	pop r12
    5d48:	cf 90       	pop	r12
	pop r11
    5d4a:	bf 90       	pop	r11
	pop r10
    5d4c:	af 90       	pop	r10
	pop r9
    5d4e:	9f 90       	pop	r9
	pop r8
    5d50:	8f 90       	pop	r8
	pop r7
    5d52:	7f 90       	pop	r7
	pop r6
    5d54:	6f 90       	pop	r6
	pop r5
    5d56:	5f 90       	pop	r5
	pop r4
    5d58:	4f 90       	pop	r4
	pop r3
    5d5a:	3f 90       	pop	r3
	pop r2
    5d5c:	2f 90       	pop	r2
	pop r1
    5d5e:	1f 90       	pop	r1
	pop r0
    5d60:	0f 90       	pop	r0
	out __SREG__, r0
    5d62:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5d64:	0f 90       	pop	r0
	   
    	reti 
    5d66:	18 95       	reti

00005d68 <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    5d68:	ab e0       	ldi	r26, 0x0B	; 11
    5d6a:	b0 e0       	ldi	r27, 0x00	; 0
    5d6c:	ea eb       	ldi	r30, 0xBA	; 186
    5d6e:	fe e2       	ldi	r31, 0x2E	; 46
    5d70:	0c 94 4d 39 	jmp	0x729a	; 0x729a <__prologue_saves__>
    5d74:	4c 01       	movw	r8, r24
    5d76:	6b 01       	movw	r12, r22
    5d78:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    5d7a:	fc 01       	movw	r30, r24
    5d7c:	17 82       	std	Z+7, r1	; 0x07
    5d7e:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    5d80:	83 81       	ldd	r24, Z+3	; 0x03
    5d82:	81 fd       	sbrc	r24, 1
    5d84:	08 c0       	rjmp	.+16     	; 0x5d96 <vfprintf+0x2e>
    5d86:	8f ef       	ldi	r24, 0xFF	; 255
    5d88:	9f ef       	ldi	r25, 0xFF	; 255
    5d8a:	1a c1       	rjmp	.+564    	; 0x5fc0 <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    5d8c:	22 e0       	ldi	r18, 0x02	; 2
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	e2 0e       	add	r14, r18
    5d92:	f3 1e       	adc	r15, r19
    5d94:	0c c0       	rjmp	.+24     	; 0x5dae <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    5d96:	9f e9       	ldi	r25, 0x9F	; 159
    5d98:	29 2e       	mov	r2, r25
    5d9a:	93 e0       	ldi	r25, 0x03	; 3
    5d9c:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    5d9e:	3e 01       	movw	r6, r28
    5da0:	08 94       	sec
    5da2:	61 1c       	adc	r6, r1
    5da4:	71 1c       	adc	r7, r1
    5da6:	88 e9       	ldi	r24, 0x98	; 152
    5da8:	48 2e       	mov	r4, r24
    5daa:	83 e0       	ldi	r24, 0x03	; 3
    5dac:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    5dae:	f4 01       	movw	r30, r8
    5db0:	03 81       	ldd	r16, Z+3	; 0x03
    5db2:	f6 01       	movw	r30, r12
    5db4:	03 fd       	sbrc	r16, 3
    5db6:	85 91       	lpm	r24, Z+
    5db8:	03 ff       	sbrs	r16, 3
    5dba:	81 91       	ld	r24, Z+
    5dbc:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    5dbe:	88 23       	and	r24, r24
    5dc0:	09 f4       	brne	.+2      	; 0x5dc4 <vfprintf+0x5c>
    5dc2:	fb c0       	rjmp	.+502    	; 0x5fba <vfprintf+0x252>
	    if (c == '%') {
    5dc4:	85 32       	cpi	r24, 0x25	; 37
    5dc6:	59 f4       	brne	.+22     	; 0x5dde <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    5dc8:	03 fd       	sbrc	r16, 3
    5dca:	65 91       	lpm	r22, Z+
    5dcc:	03 ff       	sbrs	r16, 3
    5dce:	61 91       	ld	r22, Z+
    5dd0:	6f 01       	movw	r12, r30
		if (c != '%') break;
    5dd2:	65 32       	cpi	r22, 0x25	; 37
    5dd4:	19 f0       	breq	.+6      	; 0x5ddc <vfprintf+0x74>
    5dd6:	16 2f       	mov	r17, r22
    5dd8:	bb 24       	eor	r11, r11
    5dda:	1c c0       	rjmp	.+56     	; 0x5e14 <vfprintf+0xac>
    5ddc:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    5dde:	b4 01       	movw	r22, r8
    5de0:	99 27       	eor	r25, r25
    5de2:	2a c0       	rjmp	.+84     	; 0x5e38 <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    5de4:	11 23       	and	r17, r17
    5de6:	59 f1       	breq	.+86     	; 0x5e3e <vfprintf+0xd6>
    5de8:	61 2f       	mov	r22, r17
    5dea:	77 27       	eor	r23, r23
    5dec:	c1 01       	movw	r24, r2
    5dee:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <strchr_P>
    5df2:	89 2b       	or	r24, r25
    5df4:	49 f4       	brne	.+18     	; 0x5e08 <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    5df6:	13 32       	cpi	r17, 0x23	; 35
    5df8:	19 f4       	brne	.+6      	; 0x5e00 <vfprintf+0x98>
		flags |= FL_ALT;
    5dfa:	f0 e1       	ldi	r31, 0x10	; 16
    5dfc:	bf 2a       	or	r11, r31
    5dfe:	04 c0       	rjmp	.+8      	; 0x5e08 <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    5e00:	1c 36       	cpi	r17, 0x6C	; 108
    5e02:	61 f4       	brne	.+24     	; 0x5e1c <vfprintf+0xb4>
		flags |= FL_LONG;
    5e04:	20 e8       	ldi	r18, 0x80	; 128
    5e06:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    5e08:	f6 01       	movw	r30, r12
    5e0a:	03 fd       	sbrc	r16, 3
    5e0c:	15 91       	lpm	r17, Z+
    5e0e:	03 ff       	sbrs	r16, 3
    5e10:	11 91       	ld	r17, Z+
    5e12:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    5e14:	b7 fe       	sbrs	r11, 7
    5e16:	e6 cf       	rjmp	.-52     	; 0x5de4 <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    5e18:	11 23       	and	r17, r17
    5e1a:	89 f0       	breq	.+34     	; 0x5e3e <vfprintf+0xd6>
    5e1c:	61 2f       	mov	r22, r17
    5e1e:	77 27       	eor	r23, r23
    5e20:	c2 01       	movw	r24, r4
    5e22:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <strchr_P>
    5e26:	89 2b       	or	r24, r25
    5e28:	51 f0       	breq	.+20     	; 0x5e3e <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    5e2a:	24 e0       	ldi	r18, 0x04	; 4
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	e2 0e       	add	r14, r18
    5e30:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    5e32:	b4 01       	movw	r22, r8
    5e34:	8f e3       	ldi	r24, 0x3F	; 63
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
    5e3c:	b8 cf       	rjmp	.-144    	; 0x5dae <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    5e3e:	13 36       	cpi	r17, 0x63	; 99
    5e40:	29 f0       	breq	.+10     	; 0x5e4c <vfprintf+0xe4>
    5e42:	13 37       	cpi	r17, 0x73	; 115
    5e44:	81 f0       	breq	.+32     	; 0x5e66 <vfprintf+0xfe>
    5e46:	13 35       	cpi	r17, 0x53	; 83
    5e48:	f9 f4       	brne	.+62     	; 0x5e88 <vfprintf+0x120>
    5e4a:	0b c0       	rjmp	.+22     	; 0x5e62 <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    5e4c:	87 01       	movw	r16, r14
    5e4e:	0e 5f       	subi	r16, 0xFE	; 254
    5e50:	1f 4f       	sbci	r17, 0xFF	; 255
    5e52:	b4 01       	movw	r22, r8
    5e54:	f7 01       	movw	r30, r14
    5e56:	80 81       	ld	r24, Z
    5e58:	91 81       	ldd	r25, Z+1	; 0x01
    5e5a:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
    5e5e:	78 01       	movw	r14, r16
    5e60:	a6 cf       	rjmp	.-180    	; 0x5dae <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    5e62:	f1 e0       	ldi	r31, 0x01	; 1
    5e64:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    5e66:	f7 01       	movw	r30, r14
    5e68:	00 81       	ld	r16, Z
    5e6a:	11 81       	ldd	r17, Z+1	; 0x01
    5e6c:	04 c0       	rjmp	.+8      	; 0x5e76 <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    5e6e:	b4 01       	movw	r22, r8
    5e70:	99 27       	eor	r25, r25
    5e72:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    5e76:	f8 01       	movw	r30, r16
    5e78:	b0 fc       	sbrc	r11, 0
    5e7a:	85 91       	lpm	r24, Z+
    5e7c:	b0 fe       	sbrs	r11, 0
    5e7e:	81 91       	ld	r24, Z+
    5e80:	8f 01       	movw	r16, r30
    5e82:	88 23       	and	r24, r24
    5e84:	a1 f7       	brne	.-24     	; 0x5e6e <vfprintf+0x106>
    5e86:	82 cf       	rjmp	.-252    	; 0x5d8c <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    5e88:	14 36       	cpi	r17, 0x64	; 100
    5e8a:	11 f0       	breq	.+4      	; 0x5e90 <vfprintf+0x128>
    5e8c:	19 36       	cpi	r17, 0x69	; 105
    5e8e:	49 f5       	brne	.+82     	; 0x5ee2 <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    5e90:	b7 fe       	sbrs	r11, 7
    5e92:	0a c0       	rjmp	.+20     	; 0x5ea8 <vfprintf+0x140>
    5e94:	f7 01       	movw	r30, r14
    5e96:	60 81       	ld	r22, Z
    5e98:	71 81       	ldd	r23, Z+1	; 0x01
    5e9a:	82 81       	ldd	r24, Z+2	; 0x02
    5e9c:	93 81       	ldd	r25, Z+3	; 0x03
    5e9e:	24 e0       	ldi	r18, 0x04	; 4
    5ea0:	30 e0       	ldi	r19, 0x00	; 0
    5ea2:	e2 0e       	add	r14, r18
    5ea4:	f3 1e       	adc	r15, r19
    5ea6:	0d c0       	rjmp	.+26     	; 0x5ec2 <vfprintf+0x15a>
    5ea8:	f7 01       	movw	r30, r14
    5eaa:	80 81       	ld	r24, Z
    5eac:	91 81       	ldd	r25, Z+1	; 0x01
    5eae:	9c 01       	movw	r18, r24
    5eb0:	b9 01       	movw	r22, r18
    5eb2:	88 27       	eor	r24, r24
    5eb4:	77 fd       	sbrc	r23, 7
    5eb6:	80 95       	com	r24
    5eb8:	98 2f       	mov	r25, r24
    5eba:	42 e0       	ldi	r20, 0x02	; 2
    5ebc:	50 e0       	ldi	r21, 0x00	; 0
    5ebe:	e4 0e       	add	r14, r20
    5ec0:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    5ec2:	5f ee       	ldi	r21, 0xEF	; 239
    5ec4:	b5 22       	and	r11, r21
	    if (x < 0) {
    5ec6:	97 ff       	sbrs	r25, 7
    5ec8:	09 c0       	rjmp	.+18     	; 0x5edc <vfprintf+0x174>
		x = -x;
    5eca:	90 95       	com	r25
    5ecc:	80 95       	com	r24
    5ece:	70 95       	com	r23
    5ed0:	61 95       	neg	r22
    5ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ed6:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    5ed8:	e0 e4       	ldi	r30, 0x40	; 64
    5eda:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    5edc:	2a e0       	ldi	r18, 0x0A	; 10
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	3a c0       	rjmp	.+116    	; 0x5f56 <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    5ee2:	10 37       	cpi	r17, 0x70	; 112
    5ee4:	b1 f0       	breq	.+44     	; 0x5f12 <vfprintf+0x1aa>
    5ee6:	11 37       	cpi	r17, 0x71	; 113
    5ee8:	30 f4       	brcc	.+12     	; 0x5ef6 <vfprintf+0x18e>
    5eea:	18 35       	cpi	r17, 0x58	; 88
    5eec:	c9 f0       	breq	.+50     	; 0x5f20 <vfprintf+0x1b8>
    5eee:	1f 36       	cpi	r17, 0x6F	; 111
    5ef0:	09 f0       	breq	.+2      	; 0x5ef4 <vfprintf+0x18c>
    5ef2:	63 c0       	rjmp	.+198    	; 0x5fba <vfprintf+0x252>
    5ef4:	06 c0       	rjmp	.+12     	; 0x5f02 <vfprintf+0x19a>
    5ef6:	15 37       	cpi	r17, 0x75	; 117
    5ef8:	39 f0       	breq	.+14     	; 0x5f08 <vfprintf+0x1a0>
    5efa:	18 37       	cpi	r17, 0x78	; 120
    5efc:	09 f0       	breq	.+2      	; 0x5f00 <vfprintf+0x198>
    5efe:	5d c0       	rjmp	.+186    	; 0x5fba <vfprintf+0x252>
    5f00:	0a c0       	rjmp	.+20     	; 0x5f16 <vfprintf+0x1ae>
    5f02:	28 e0       	ldi	r18, 0x08	; 8
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	10 c0       	rjmp	.+32     	; 0x5f28 <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    5f08:	ff ee       	ldi	r31, 0xEF	; 239
    5f0a:	bf 22       	and	r11, r31
    5f0c:	2a e0       	ldi	r18, 0x0A	; 10
    5f0e:	30 e0       	ldi	r19, 0x00	; 0
    5f10:	0b c0       	rjmp	.+22     	; 0x5f28 <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    5f12:	20 e1       	ldi	r18, 0x10	; 16
    5f14:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    5f16:	34 e2       	ldi	r19, 0x24	; 36
    5f18:	b3 2a       	or	r11, r19
    5f1a:	20 e1       	ldi	r18, 0x10	; 16
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	04 c0       	rjmp	.+8      	; 0x5f28 <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    5f20:	44 e0       	ldi	r20, 0x04	; 4
    5f22:	b4 2a       	or	r11, r20
    5f24:	20 e1       	ldi	r18, 0x10	; 16
    5f26:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    5f28:	b7 fe       	sbrs	r11, 7
    5f2a:	0a c0       	rjmp	.+20     	; 0x5f40 <vfprintf+0x1d8>
    5f2c:	f7 01       	movw	r30, r14
    5f2e:	60 81       	ld	r22, Z
    5f30:	71 81       	ldd	r23, Z+1	; 0x01
    5f32:	82 81       	ldd	r24, Z+2	; 0x02
    5f34:	93 81       	ldd	r25, Z+3	; 0x03
    5f36:	44 e0       	ldi	r20, 0x04	; 4
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	e4 0e       	add	r14, r20
    5f3c:	f5 1e       	adc	r15, r21
    5f3e:	0b c0       	rjmp	.+22     	; 0x5f56 <vfprintf+0x1ee>
    5f40:	f7 01       	movw	r30, r14
    5f42:	80 81       	ld	r24, Z
    5f44:	91 81       	ldd	r25, Z+1	; 0x01
    5f46:	ac 01       	movw	r20, r24
    5f48:	ba 01       	movw	r22, r20
    5f4a:	88 27       	eor	r24, r24
    5f4c:	99 27       	eor	r25, r25
    5f4e:	e2 e0       	ldi	r30, 0x02	; 2
    5f50:	f0 e0       	ldi	r31, 0x00	; 0
    5f52:	ee 0e       	add	r14, r30
    5f54:	ff 1e       	adc	r15, r31
    5f56:	a3 01       	movw	r20, r6
    5f58:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <__ultoa_invert>
    5f5c:	a8 2e       	mov	r10, r24
    5f5e:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    5f60:	0b 2d       	mov	r16, r11
    5f62:	11 27       	eor	r17, r17
    5f64:	06 ff       	sbrs	r16, 6
    5f66:	05 c0       	rjmp	.+10     	; 0x5f72 <vfprintf+0x20a>
	    putc ('-', stream);
    5f68:	b4 01       	movw	r22, r8
    5f6a:	8d e2       	ldi	r24, 0x2D	; 45
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    5f72:	04 ff       	sbrs	r16, 4
    5f74:	15 c0       	rjmp	.+42     	; 0x5fa0 <vfprintf+0x238>
    5f76:	fe 01       	movw	r30, r28
    5f78:	ea 0d       	add	r30, r10
    5f7a:	f1 1d       	adc	r31, r1
    5f7c:	80 81       	ld	r24, Z
    5f7e:	80 33       	cpi	r24, 0x30	; 48
    5f80:	79 f0       	breq	.+30     	; 0x5fa0 <vfprintf+0x238>
	    putc ('0', stream);
    5f82:	b4 01       	movw	r22, r8
    5f84:	80 e3       	ldi	r24, 0x30	; 48
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
	    if (flags & FL_ALTHEX)
    5f8c:	02 ff       	sbrs	r16, 2
    5f8e:	08 c0       	rjmp	.+16     	; 0x5fa0 <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    5f90:	00 72       	andi	r16, 0x20	; 32
    5f92:	10 70       	andi	r17, 0x00	; 0
    5f94:	b4 01       	movw	r22, r8
    5f96:	c8 01       	movw	r24, r16
    5f98:	88 5a       	subi	r24, 0xA8	; 168
    5f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9c:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
	}
	do {
	    putc (buf[--c], stream);
    5fa0:	aa 94       	dec	r10
    5fa2:	f3 01       	movw	r30, r6
    5fa4:	ea 0d       	add	r30, r10
    5fa6:	f1 1d       	adc	r31, r1
    5fa8:	80 81       	ld	r24, Z
    5faa:	b4 01       	movw	r22, r8
    5fac:	99 27       	eor	r25, r25
    5fae:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <fputc>
	} while (c);
    5fb2:	aa 20       	and	r10, r10
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <vfprintf+0x250>
    5fb6:	fb ce       	rjmp	.-522    	; 0x5dae <vfprintf+0x46>
    5fb8:	f3 cf       	rjmp	.-26     	; 0x5fa0 <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    5fba:	f4 01       	movw	r30, r8
    5fbc:	86 81       	ldd	r24, Z+6	; 0x06
    5fbe:	97 81       	ldd	r25, Z+7	; 0x07
    5fc0:	e2 e1       	ldi	r30, 0x12	; 18
    5fc2:	2b 96       	adiw	r28, 0x0b	; 11
    5fc4:	0c 94 69 39 	jmp	0x72d2	; 0x72d2 <__epilogue_restores__>

00005fc8 <__udivdi3>:
    5fc8:	ac e6       	ldi	r26, 0x6C	; 108
    5fca:	b0 e0       	ldi	r27, 0x00	; 0
    5fcc:	ea ee       	ldi	r30, 0xEA	; 234
    5fce:	ff e2       	ldi	r31, 0x2F	; 47
    5fd0:	0c 94 4d 39 	jmp	0x729a	; 0x729a <__prologue_saves__>
    5fd4:	22 2e       	mov	r2, r18
    5fd6:	33 2e       	mov	r3, r19
    5fd8:	44 2e       	mov	r4, r20
    5fda:	55 2e       	mov	r5, r21
    5fdc:	66 2e       	mov	r6, r22
    5fde:	77 2e       	mov	r7, r23
    5fe0:	88 2e       	mov	r8, r24
    5fe2:	99 2e       	mov	r9, r25
    5fe4:	6e 2d       	mov	r22, r14
    5fe6:	a8 e0       	ldi	r26, 0x08	; 8
    5fe8:	fe 01       	movw	r30, r28
    5fea:	31 96       	adiw	r30, 0x01	; 1
    5fec:	ea 2e       	mov	r14, r26
    5fee:	11 92       	st	Z+, r1
    5ff0:	ea 94       	dec	r14
    5ff2:	e9 f7       	brne	.-6      	; 0x5fee <__udivdi3+0x26>
    5ff4:	29 82       	std	Y+1, r2	; 0x01
    5ff6:	3a 82       	std	Y+2, r3	; 0x02
    5ff8:	4b 82       	std	Y+3, r4	; 0x03
    5ffa:	5c 82       	std	Y+4, r5	; 0x04
    5ffc:	6d 82       	std	Y+5, r6	; 0x05
    5ffe:	7e 82       	std	Y+6, r7	; 0x06
    6000:	8f 82       	std	Y+7, r8	; 0x07
    6002:	98 86       	std	Y+8, r9	; 0x08
    6004:	fe 01       	movw	r30, r28
    6006:	39 96       	adiw	r30, 0x09	; 9
    6008:	11 92       	st	Z+, r1
    600a:	aa 95       	dec	r26
    600c:	e9 f7       	brne	.-6      	; 0x6008 <__udivdi3+0x40>
    600e:	a9 86       	std	Y+9, r10	; 0x09
    6010:	ba 86       	std	Y+10, r11	; 0x0a
    6012:	cb 86       	std	Y+11, r12	; 0x0b
    6014:	dc 86       	std	Y+12, r13	; 0x0c
    6016:	6d 87       	std	Y+13, r22	; 0x0d
    6018:	fe 86       	std	Y+14, r15	; 0x0e
    601a:	0f 87       	std	Y+15, r16	; 0x0f
    601c:	18 8b       	std	Y+16, r17	; 0x10
    601e:	a9 84       	ldd	r10, Y+9	; 0x09
    6020:	ba 84       	ldd	r11, Y+10	; 0x0a
    6022:	cb 84       	ldd	r12, Y+11	; 0x0b
    6024:	dc 84       	ldd	r13, Y+12	; 0x0c
    6026:	6d 84       	ldd	r6, Y+13	; 0x0d
    6028:	7e 84       	ldd	r7, Y+14	; 0x0e
    602a:	8f 84       	ldd	r8, Y+15	; 0x0f
    602c:	98 88       	ldd	r9, Y+16	; 0x10
    602e:	09 81       	ldd	r16, Y+1	; 0x01
    6030:	1a 81       	ldd	r17, Y+2	; 0x02
    6032:	2b 81       	ldd	r18, Y+3	; 0x03
    6034:	3c 81       	ldd	r19, Y+4	; 0x04
    6036:	09 ab       	std	Y+49, r16	; 0x31
    6038:	1a ab       	std	Y+50, r17	; 0x32
    603a:	2b ab       	std	Y+51, r18	; 0x33
    603c:	3c ab       	std	Y+52, r19	; 0x34
    603e:	2d 80       	ldd	r2, Y+5	; 0x05
    6040:	3e 80       	ldd	r3, Y+6	; 0x06
    6042:	4f 80       	ldd	r4, Y+7	; 0x07
    6044:	58 84       	ldd	r5, Y+8	; 0x08
    6046:	61 14       	cp	r6, r1
    6048:	71 04       	cpc	r7, r1
    604a:	81 04       	cpc	r8, r1
    604c:	91 04       	cpc	r9, r1
    604e:	09 f0       	breq	.+2      	; 0x6052 <__udivdi3+0x8a>
    6050:	b8 c3       	rjmp	.+1904   	; 0x67c2 <__udivdi3+0x7fa>
    6052:	2a 14       	cp	r2, r10
    6054:	3b 04       	cpc	r3, r11
    6056:	4c 04       	cpc	r4, r12
    6058:	5d 04       	cpc	r5, r13
    605a:	08 f0       	brcs	.+2      	; 0x605e <__udivdi3+0x96>
    605c:	61 c1       	rjmp	.+706    	; 0x6320 <__udivdi3+0x358>
    605e:	10 e0       	ldi	r17, 0x00	; 0
    6060:	a1 16       	cp	r10, r17
    6062:	10 e0       	ldi	r17, 0x00	; 0
    6064:	b1 06       	cpc	r11, r17
    6066:	11 e0       	ldi	r17, 0x01	; 1
    6068:	c1 06       	cpc	r12, r17
    606a:	10 e0       	ldi	r17, 0x00	; 0
    606c:	d1 06       	cpc	r13, r17
    606e:	88 f4       	brcc	.+34     	; 0x6092 <__udivdi3+0xca>
    6070:	2f ef       	ldi	r18, 0xFF	; 255
    6072:	a2 16       	cp	r10, r18
    6074:	b1 04       	cpc	r11, r1
    6076:	c1 04       	cpc	r12, r1
    6078:	d1 04       	cpc	r13, r1
    607a:	09 f0       	breq	.+2      	; 0x607e <__udivdi3+0xb6>
    607c:	28 f4       	brcc	.+10     	; 0x6088 <__udivdi3+0xc0>
    607e:	20 e0       	ldi	r18, 0x00	; 0
    6080:	30 e0       	ldi	r19, 0x00	; 0
    6082:	40 e0       	ldi	r20, 0x00	; 0
    6084:	50 e0       	ldi	r21, 0x00	; 0
    6086:	17 c0       	rjmp	.+46     	; 0x60b6 <__udivdi3+0xee>
    6088:	28 e0       	ldi	r18, 0x08	; 8
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	40 e0       	ldi	r20, 0x00	; 0
    608e:	50 e0       	ldi	r21, 0x00	; 0
    6090:	12 c0       	rjmp	.+36     	; 0x60b6 <__udivdi3+0xee>
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	a3 16       	cp	r10, r19
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	b3 06       	cpc	r11, r19
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	c3 06       	cpc	r12, r19
    609e:	31 e0       	ldi	r19, 0x01	; 1
    60a0:	d3 06       	cpc	r13, r19
    60a2:	28 f4       	brcc	.+10     	; 0x60ae <__udivdi3+0xe6>
    60a4:	20 e1       	ldi	r18, 0x10	; 16
    60a6:	30 e0       	ldi	r19, 0x00	; 0
    60a8:	40 e0       	ldi	r20, 0x00	; 0
    60aa:	50 e0       	ldi	r21, 0x00	; 0
    60ac:	04 c0       	rjmp	.+8      	; 0x60b6 <__udivdi3+0xee>
    60ae:	28 e1       	ldi	r18, 0x18	; 24
    60b0:	30 e0       	ldi	r19, 0x00	; 0
    60b2:	40 e0       	ldi	r20, 0x00	; 0
    60b4:	50 e0       	ldi	r21, 0x00	; 0
    60b6:	80 e2       	ldi	r24, 0x20	; 32
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	a0 e0       	ldi	r26, 0x00	; 0
    60bc:	b0 e0       	ldi	r27, 0x00	; 0
    60be:	82 1b       	sub	r24, r18
    60c0:	93 0b       	sbc	r25, r19
    60c2:	a4 0b       	sbc	r26, r20
    60c4:	b5 0b       	sbc	r27, r21
    60c6:	35 01       	movw	r6, r10
    60c8:	46 01       	movw	r8, r12
    60ca:	04 c0       	rjmp	.+8      	; 0x60d4 <__udivdi3+0x10c>
    60cc:	96 94       	lsr	r9
    60ce:	87 94       	ror	r8
    60d0:	77 94       	ror	r7
    60d2:	67 94       	ror	r6
    60d4:	2a 95       	dec	r18
    60d6:	d2 f7       	brpl	.-12     	; 0x60cc <__udivdi3+0x104>
    60d8:	a4 01       	movw	r20, r8
    60da:	93 01       	movw	r18, r6
    60dc:	22 54       	subi	r18, 0x42	; 66
    60de:	3d 4f       	sbci	r19, 0xFD	; 253
    60e0:	f9 01       	movw	r30, r18
    60e2:	20 81       	ld	r18, Z
    60e4:	ac 01       	movw	r20, r24
    60e6:	bd 01       	movw	r22, r26
    60e8:	42 1b       	sub	r20, r18
    60ea:	51 09       	sbc	r21, r1
    60ec:	61 09       	sbc	r22, r1
    60ee:	71 09       	sbc	r23, r1
    60f0:	41 15       	cp	r20, r1
    60f2:	51 05       	cpc	r21, r1
    60f4:	61 05       	cpc	r22, r1
    60f6:	71 05       	cpc	r23, r1
    60f8:	b9 f1       	breq	.+110    	; 0x6168 <__udivdi3+0x1a0>
    60fa:	ca 01       	movw	r24, r20
    60fc:	04 2e       	mov	r0, r20
    60fe:	04 c0       	rjmp	.+8      	; 0x6108 <__udivdi3+0x140>
    6100:	aa 0c       	add	r10, r10
    6102:	bb 1c       	adc	r11, r11
    6104:	cc 1c       	adc	r12, r12
    6106:	dd 1c       	adc	r13, r13
    6108:	0a 94       	dec	r0
    610a:	d2 f7       	brpl	.-12     	; 0x6100 <__udivdi3+0x138>
    610c:	20 e2       	ldi	r18, 0x20	; 32
    610e:	30 e0       	ldi	r19, 0x00	; 0
    6110:	24 1b       	sub	r18, r20
    6112:	35 0b       	sbc	r19, r21
    6114:	69 a8       	ldd	r6, Y+49	; 0x31
    6116:	7a a8       	ldd	r7, Y+50	; 0x32
    6118:	8b a8       	ldd	r8, Y+51	; 0x33
    611a:	9c a8       	ldd	r9, Y+52	; 0x34
    611c:	04 c0       	rjmp	.+8      	; 0x6126 <__udivdi3+0x15e>
    611e:	96 94       	lsr	r9
    6120:	87 94       	ror	r8
    6122:	77 94       	ror	r7
    6124:	67 94       	ror	r6
    6126:	2a 95       	dec	r18
    6128:	d2 f7       	brpl	.-12     	; 0x611e <__udivdi3+0x156>
    612a:	82 01       	movw	r16, r4
    612c:	71 01       	movw	r14, r2
    612e:	08 2e       	mov	r0, r24
    6130:	04 c0       	rjmp	.+8      	; 0x613a <__udivdi3+0x172>
    6132:	ee 0c       	add	r14, r14
    6134:	ff 1c       	adc	r15, r15
    6136:	00 1f       	adc	r16, r16
    6138:	11 1f       	adc	r17, r17
    613a:	0a 94       	dec	r0
    613c:	d2 f7       	brpl	.-12     	; 0x6132 <__udivdi3+0x16a>
    613e:	13 01       	movw	r2, r6
    6140:	24 01       	movw	r4, r8
    6142:	2e 28       	or	r2, r14
    6144:	3f 28       	or	r3, r15
    6146:	40 2a       	or	r4, r16
    6148:	51 2a       	or	r5, r17
    614a:	e9 a8       	ldd	r14, Y+49	; 0x31
    614c:	fa a8       	ldd	r15, Y+50	; 0x32
    614e:	0b a9       	ldd	r16, Y+51	; 0x33
    6150:	1c a9       	ldd	r17, Y+52	; 0x34
    6152:	04 c0       	rjmp	.+8      	; 0x615c <__udivdi3+0x194>
    6154:	ee 0c       	add	r14, r14
    6156:	ff 1c       	adc	r15, r15
    6158:	00 1f       	adc	r16, r16
    615a:	11 1f       	adc	r17, r17
    615c:	8a 95       	dec	r24
    615e:	d2 f7       	brpl	.-12     	; 0x6154 <__udivdi3+0x18c>
    6160:	e9 aa       	std	Y+49, r14	; 0x31
    6162:	fa aa       	std	Y+50, r15	; 0x32
    6164:	0b ab       	std	Y+51, r16	; 0x33
    6166:	1c ab       	std	Y+52, r17	; 0x34
    6168:	86 01       	movw	r16, r12
    616a:	22 27       	eor	r18, r18
    616c:	33 27       	eor	r19, r19
    616e:	21 96       	adiw	r28, 0x01	; 1
    6170:	0c af       	std	Y+60, r16	; 0x3c
    6172:	1d af       	std	Y+61, r17	; 0x3d
    6174:	2e af       	std	Y+62, r18	; 0x3e
    6176:	3f af       	std	Y+63, r19	; 0x3f
    6178:	21 97       	sbiw	r28, 0x01	; 1
    617a:	a6 01       	movw	r20, r12
    617c:	95 01       	movw	r18, r10
    617e:	40 70       	andi	r20, 0x00	; 0
    6180:	50 70       	andi	r21, 0x00	; 0
    6182:	25 96       	adiw	r28, 0x05	; 5
    6184:	2c af       	std	Y+60, r18	; 0x3c
    6186:	3d af       	std	Y+61, r19	; 0x3d
    6188:	4e af       	std	Y+62, r20	; 0x3e
    618a:	5f af       	std	Y+63, r21	; 0x3f
    618c:	25 97       	sbiw	r28, 0x05	; 5
    618e:	c2 01       	movw	r24, r4
    6190:	b1 01       	movw	r22, r2
    6192:	21 96       	adiw	r28, 0x01	; 1
    6194:	2c ad       	ldd	r18, Y+60	; 0x3c
    6196:	3d ad       	ldd	r19, Y+61	; 0x3d
    6198:	4e ad       	ldd	r20, Y+62	; 0x3e
    619a:	5f ad       	ldd	r21, Y+63	; 0x3f
    619c:	21 97       	sbiw	r28, 0x01	; 1
    619e:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    61a2:	29 96       	adiw	r28, 0x09	; 9
    61a4:	2c af       	std	Y+60, r18	; 0x3c
    61a6:	3d af       	std	Y+61, r19	; 0x3d
    61a8:	4e af       	std	Y+62, r20	; 0x3e
    61aa:	5f af       	std	Y+63, r21	; 0x3f
    61ac:	29 97       	sbiw	r28, 0x09	; 9
    61ae:	ca 01       	movw	r24, r20
    61b0:	b9 01       	movw	r22, r18
    61b2:	25 96       	adiw	r28, 0x05	; 5
    61b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    61b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    61b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    61ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    61bc:	25 97       	sbiw	r28, 0x05	; 5
    61be:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    61c2:	3b 01       	movw	r6, r22
    61c4:	4c 01       	movw	r8, r24
    61c6:	c2 01       	movw	r24, r4
    61c8:	b1 01       	movw	r22, r2
    61ca:	21 96       	adiw	r28, 0x01	; 1
    61cc:	2c ad       	ldd	r18, Y+60	; 0x3c
    61ce:	3d ad       	ldd	r19, Y+61	; 0x3d
    61d0:	4e ad       	ldd	r20, Y+62	; 0x3e
    61d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    61d4:	21 97       	sbiw	r28, 0x01	; 1
    61d6:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    61da:	cb 01       	movw	r24, r22
    61dc:	77 27       	eor	r23, r23
    61de:	66 27       	eor	r22, r22
    61e0:	e9 a8       	ldd	r14, Y+49	; 0x31
    61e2:	fa a8       	ldd	r15, Y+50	; 0x32
    61e4:	0b a9       	ldd	r16, Y+51	; 0x33
    61e6:	1c a9       	ldd	r17, Y+52	; 0x34
    61e8:	98 01       	movw	r18, r16
    61ea:	44 27       	eor	r20, r20
    61ec:	55 27       	eor	r21, r21
    61ee:	7b 01       	movw	r14, r22
    61f0:	8c 01       	movw	r16, r24
    61f2:	e2 2a       	or	r14, r18
    61f4:	f3 2a       	or	r15, r19
    61f6:	04 2b       	or	r16, r20
    61f8:	15 2b       	or	r17, r21
    61fa:	e6 14       	cp	r14, r6
    61fc:	f7 04       	cpc	r15, r7
    61fe:	08 05       	cpc	r16, r8
    6200:	19 05       	cpc	r17, r9
    6202:	60 f5       	brcc	.+88     	; 0x625c <__udivdi3+0x294>
    6204:	29 96       	adiw	r28, 0x09	; 9
    6206:	2c ad       	ldd	r18, Y+60	; 0x3c
    6208:	3d ad       	ldd	r19, Y+61	; 0x3d
    620a:	4e ad       	ldd	r20, Y+62	; 0x3e
    620c:	5f ad       	ldd	r21, Y+63	; 0x3f
    620e:	29 97       	sbiw	r28, 0x09	; 9
    6210:	21 50       	subi	r18, 0x01	; 1
    6212:	30 40       	sbci	r19, 0x00	; 0
    6214:	40 40       	sbci	r20, 0x00	; 0
    6216:	50 40       	sbci	r21, 0x00	; 0
    6218:	29 96       	adiw	r28, 0x09	; 9
    621a:	2c af       	std	Y+60, r18	; 0x3c
    621c:	3d af       	std	Y+61, r19	; 0x3d
    621e:	4e af       	std	Y+62, r20	; 0x3e
    6220:	5f af       	std	Y+63, r21	; 0x3f
    6222:	29 97       	sbiw	r28, 0x09	; 9
    6224:	ea 0c       	add	r14, r10
    6226:	fb 1c       	adc	r15, r11
    6228:	0c 1d       	adc	r16, r12
    622a:	1d 1d       	adc	r17, r13
    622c:	ea 14       	cp	r14, r10
    622e:	fb 04       	cpc	r15, r11
    6230:	0c 05       	cpc	r16, r12
    6232:	1d 05       	cpc	r17, r13
    6234:	98 f0       	brcs	.+38     	; 0x625c <__udivdi3+0x294>
    6236:	e6 14       	cp	r14, r6
    6238:	f7 04       	cpc	r15, r7
    623a:	08 05       	cpc	r16, r8
    623c:	19 05       	cpc	r17, r9
    623e:	70 f4       	brcc	.+28     	; 0x625c <__udivdi3+0x294>
    6240:	21 50       	subi	r18, 0x01	; 1
    6242:	30 40       	sbci	r19, 0x00	; 0
    6244:	40 40       	sbci	r20, 0x00	; 0
    6246:	50 40       	sbci	r21, 0x00	; 0
    6248:	29 96       	adiw	r28, 0x09	; 9
    624a:	2c af       	std	Y+60, r18	; 0x3c
    624c:	3d af       	std	Y+61, r19	; 0x3d
    624e:	4e af       	std	Y+62, r20	; 0x3e
    6250:	5f af       	std	Y+63, r21	; 0x3f
    6252:	29 97       	sbiw	r28, 0x09	; 9
    6254:	ea 0c       	add	r14, r10
    6256:	fb 1c       	adc	r15, r11
    6258:	0c 1d       	adc	r16, r12
    625a:	1d 1d       	adc	r17, r13
    625c:	e6 18       	sub	r14, r6
    625e:	f7 08       	sbc	r15, r7
    6260:	08 09       	sbc	r16, r8
    6262:	19 09       	sbc	r17, r9
    6264:	c8 01       	movw	r24, r16
    6266:	b7 01       	movw	r22, r14
    6268:	21 96       	adiw	r28, 0x01	; 1
    626a:	2c ad       	ldd	r18, Y+60	; 0x3c
    626c:	3d ad       	ldd	r19, Y+61	; 0x3d
    626e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6270:	5f ad       	ldd	r21, Y+63	; 0x3f
    6272:	21 97       	sbiw	r28, 0x01	; 1
    6274:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6278:	39 01       	movw	r6, r18
    627a:	4a 01       	movw	r8, r20
    627c:	ca 01       	movw	r24, r20
    627e:	b9 01       	movw	r22, r18
    6280:	25 96       	adiw	r28, 0x05	; 5
    6282:	2c ad       	ldd	r18, Y+60	; 0x3c
    6284:	3d ad       	ldd	r19, Y+61	; 0x3d
    6286:	4e ad       	ldd	r20, Y+62	; 0x3e
    6288:	5f ad       	ldd	r21, Y+63	; 0x3f
    628a:	25 97       	sbiw	r28, 0x05	; 5
    628c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6290:	1b 01       	movw	r2, r22
    6292:	2c 01       	movw	r4, r24
    6294:	c8 01       	movw	r24, r16
    6296:	b7 01       	movw	r22, r14
    6298:	21 96       	adiw	r28, 0x01	; 1
    629a:	2c ad       	ldd	r18, Y+60	; 0x3c
    629c:	3d ad       	ldd	r19, Y+61	; 0x3d
    629e:	4e ad       	ldd	r20, Y+62	; 0x3e
    62a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    62a2:	21 97       	sbiw	r28, 0x01	; 1
    62a4:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    62a8:	cb 01       	movw	r24, r22
    62aa:	77 27       	eor	r23, r23
    62ac:	66 27       	eor	r22, r22
    62ae:	29 a9       	ldd	r18, Y+49	; 0x31
    62b0:	3a a9       	ldd	r19, Y+50	; 0x32
    62b2:	4b a9       	ldd	r20, Y+51	; 0x33
    62b4:	5c a9       	ldd	r21, Y+52	; 0x34
    62b6:	40 70       	andi	r20, 0x00	; 0
    62b8:	50 70       	andi	r21, 0x00	; 0
    62ba:	26 2b       	or	r18, r22
    62bc:	37 2b       	or	r19, r23
    62be:	48 2b       	or	r20, r24
    62c0:	59 2b       	or	r21, r25
    62c2:	22 15       	cp	r18, r2
    62c4:	33 05       	cpc	r19, r3
    62c6:	44 05       	cpc	r20, r4
    62c8:	55 05       	cpc	r21, r5
    62ca:	c0 f4       	brcc	.+48     	; 0x62fc <__udivdi3+0x334>
    62cc:	08 94       	sec
    62ce:	61 08       	sbc	r6, r1
    62d0:	71 08       	sbc	r7, r1
    62d2:	81 08       	sbc	r8, r1
    62d4:	91 08       	sbc	r9, r1
    62d6:	2a 0d       	add	r18, r10
    62d8:	3b 1d       	adc	r19, r11
    62da:	4c 1d       	adc	r20, r12
    62dc:	5d 1d       	adc	r21, r13
    62de:	2a 15       	cp	r18, r10
    62e0:	3b 05       	cpc	r19, r11
    62e2:	4c 05       	cpc	r20, r12
    62e4:	5d 05       	cpc	r21, r13
    62e6:	50 f0       	brcs	.+20     	; 0x62fc <__udivdi3+0x334>
    62e8:	22 15       	cp	r18, r2
    62ea:	33 05       	cpc	r19, r3
    62ec:	44 05       	cpc	r20, r4
    62ee:	55 05       	cpc	r21, r5
    62f0:	28 f4       	brcc	.+10     	; 0x62fc <__udivdi3+0x334>
    62f2:	08 94       	sec
    62f4:	61 08       	sbc	r6, r1
    62f6:	71 08       	sbc	r7, r1
    62f8:	81 08       	sbc	r8, r1
    62fa:	91 08       	sbc	r9, r1
    62fc:	29 96       	adiw	r28, 0x09	; 9
    62fe:	ec ac       	ldd	r14, Y+60	; 0x3c
    6300:	fd ac       	ldd	r15, Y+61	; 0x3d
    6302:	0e ad       	ldd	r16, Y+62	; 0x3e
    6304:	1f ad       	ldd	r17, Y+63	; 0x3f
    6306:	29 97       	sbiw	r28, 0x09	; 9
    6308:	d7 01       	movw	r26, r14
    630a:	99 27       	eor	r25, r25
    630c:	88 27       	eor	r24, r24
    630e:	68 2a       	or	r6, r24
    6310:	79 2a       	or	r7, r25
    6312:	8a 2a       	or	r8, r26
    6314:	9b 2a       	or	r9, r27
    6316:	6d aa       	std	Y+53, r6	; 0x35
    6318:	7e aa       	std	Y+54, r7	; 0x36
    631a:	8f aa       	std	Y+55, r8	; 0x37
    631c:	98 ae       	std	Y+56, r9	; 0x38
    631e:	b2 c4       	rjmp	.+2404   	; 0x6c84 <__udivdi3+0xcbc>
    6320:	a1 14       	cp	r10, r1
    6322:	b1 04       	cpc	r11, r1
    6324:	c1 04       	cpc	r12, r1
    6326:	d1 04       	cpc	r13, r1
    6328:	61 f4       	brne	.+24     	; 0x6342 <__udivdi3+0x37a>
    632a:	61 e0       	ldi	r22, 0x01	; 1
    632c:	70 e0       	ldi	r23, 0x00	; 0
    632e:	80 e0       	ldi	r24, 0x00	; 0
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	20 e0       	ldi	r18, 0x00	; 0
    6334:	30 e0       	ldi	r19, 0x00	; 0
    6336:	40 e0       	ldi	r20, 0x00	; 0
    6338:	50 e0       	ldi	r21, 0x00	; 0
    633a:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    633e:	59 01       	movw	r10, r18
    6340:	6a 01       	movw	r12, r20
    6342:	00 e0       	ldi	r16, 0x00	; 0
    6344:	a0 16       	cp	r10, r16
    6346:	00 e0       	ldi	r16, 0x00	; 0
    6348:	b0 06       	cpc	r11, r16
    634a:	01 e0       	ldi	r16, 0x01	; 1
    634c:	c0 06       	cpc	r12, r16
    634e:	00 e0       	ldi	r16, 0x00	; 0
    6350:	d0 06       	cpc	r13, r16
    6352:	88 f4       	brcc	.+34     	; 0x6376 <__udivdi3+0x3ae>
    6354:	1f ef       	ldi	r17, 0xFF	; 255
    6356:	a1 16       	cp	r10, r17
    6358:	b1 04       	cpc	r11, r1
    635a:	c1 04       	cpc	r12, r1
    635c:	d1 04       	cpc	r13, r1
    635e:	09 f0       	breq	.+2      	; 0x6362 <__udivdi3+0x39a>
    6360:	28 f4       	brcc	.+10     	; 0x636c <__udivdi3+0x3a4>
    6362:	20 e0       	ldi	r18, 0x00	; 0
    6364:	30 e0       	ldi	r19, 0x00	; 0
    6366:	40 e0       	ldi	r20, 0x00	; 0
    6368:	50 e0       	ldi	r21, 0x00	; 0
    636a:	17 c0       	rjmp	.+46     	; 0x639a <__udivdi3+0x3d2>
    636c:	28 e0       	ldi	r18, 0x08	; 8
    636e:	30 e0       	ldi	r19, 0x00	; 0
    6370:	40 e0       	ldi	r20, 0x00	; 0
    6372:	50 e0       	ldi	r21, 0x00	; 0
    6374:	12 c0       	rjmp	.+36     	; 0x639a <__udivdi3+0x3d2>
    6376:	20 e0       	ldi	r18, 0x00	; 0
    6378:	a2 16       	cp	r10, r18
    637a:	20 e0       	ldi	r18, 0x00	; 0
    637c:	b2 06       	cpc	r11, r18
    637e:	20 e0       	ldi	r18, 0x00	; 0
    6380:	c2 06       	cpc	r12, r18
    6382:	21 e0       	ldi	r18, 0x01	; 1
    6384:	d2 06       	cpc	r13, r18
    6386:	28 f4       	brcc	.+10     	; 0x6392 <__udivdi3+0x3ca>
    6388:	20 e1       	ldi	r18, 0x10	; 16
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	40 e0       	ldi	r20, 0x00	; 0
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	04 c0       	rjmp	.+8      	; 0x639a <__udivdi3+0x3d2>
    6392:	28 e1       	ldi	r18, 0x18	; 24
    6394:	30 e0       	ldi	r19, 0x00	; 0
    6396:	40 e0       	ldi	r20, 0x00	; 0
    6398:	50 e0       	ldi	r21, 0x00	; 0
    639a:	f0 e2       	ldi	r31, 0x20	; 32
    639c:	ef 2e       	mov	r14, r31
    639e:	f1 2c       	mov	r15, r1
    63a0:	01 2d       	mov	r16, r1
    63a2:	11 2d       	mov	r17, r1
    63a4:	d8 01       	movw	r26, r16
    63a6:	c7 01       	movw	r24, r14
    63a8:	82 1b       	sub	r24, r18
    63aa:	93 0b       	sbc	r25, r19
    63ac:	a4 0b       	sbc	r26, r20
    63ae:	b5 0b       	sbc	r27, r21
    63b0:	35 01       	movw	r6, r10
    63b2:	46 01       	movw	r8, r12
    63b4:	04 c0       	rjmp	.+8      	; 0x63be <__udivdi3+0x3f6>
    63b6:	96 94       	lsr	r9
    63b8:	87 94       	ror	r8
    63ba:	77 94       	ror	r7
    63bc:	67 94       	ror	r6
    63be:	2a 95       	dec	r18
    63c0:	d2 f7       	brpl	.-12     	; 0x63b6 <__udivdi3+0x3ee>
    63c2:	a4 01       	movw	r20, r8
    63c4:	93 01       	movw	r18, r6
    63c6:	22 54       	subi	r18, 0x42	; 66
    63c8:	3d 4f       	sbci	r19, 0xFD	; 253
    63ca:	f9 01       	movw	r30, r18
    63cc:	20 81       	ld	r18, Z
    63ce:	82 1b       	sub	r24, r18
    63d0:	91 09       	sbc	r25, r1
    63d2:	a1 09       	sbc	r26, r1
    63d4:	b1 09       	sbc	r27, r1
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	a1 05       	cpc	r26, r1
    63da:	b1 05       	cpc	r27, r1
    63dc:	61 f4       	brne	.+24     	; 0x63f6 <__udivdi3+0x42e>
    63de:	82 01       	movw	r16, r4
    63e0:	71 01       	movw	r14, r2
    63e2:	ea 18       	sub	r14, r10
    63e4:	fb 08       	sbc	r15, r11
    63e6:	0c 09       	sbc	r16, r12
    63e8:	1d 09       	sbc	r17, r13
    63ea:	e1 e0       	ldi	r30, 0x01	; 1
    63ec:	6e 2e       	mov	r6, r30
    63ee:	71 2c       	mov	r7, r1
    63f0:	81 2c       	mov	r8, r1
    63f2:	91 2c       	mov	r9, r1
    63f4:	1a c1       	rjmp	.+564    	; 0x662a <__udivdi3+0x662>
    63f6:	98 a3       	std	Y+32, r25	; 0x20
    63f8:	8f 8f       	std	Y+31, r24	; 0x1f
    63fa:	0f 8c       	ldd	r0, Y+31	; 0x1f
    63fc:	04 c0       	rjmp	.+8      	; 0x6406 <__udivdi3+0x43e>
    63fe:	aa 0c       	add	r10, r10
    6400:	bb 1c       	adc	r11, r11
    6402:	cc 1c       	adc	r12, r12
    6404:	dd 1c       	adc	r13, r13
    6406:	0a 94       	dec	r0
    6408:	d2 f7       	brpl	.-12     	; 0x63fe <__udivdi3+0x436>
    640a:	e8 1a       	sub	r14, r24
    640c:	f9 0a       	sbc	r15, r25
    640e:	0a 0b       	sbc	r16, r26
    6410:	1b 0b       	sbc	r17, r27
    6412:	d8 01       	movw	r26, r16
    6414:	c7 01       	movw	r24, r14
    6416:	82 01       	movw	r16, r4
    6418:	71 01       	movw	r14, r2
    641a:	08 2e       	mov	r0, r24
    641c:	04 c0       	rjmp	.+8      	; 0x6426 <__udivdi3+0x45e>
    641e:	16 95       	lsr	r17
    6420:	07 95       	ror	r16
    6422:	f7 94       	ror	r15
    6424:	e7 94       	ror	r14
    6426:	0a 94       	dec	r0
    6428:	d2 f7       	brpl	.-12     	; 0x641e <__udivdi3+0x456>
    642a:	29 a9       	ldd	r18, Y+49	; 0x31
    642c:	3a a9       	ldd	r19, Y+50	; 0x32
    642e:	4b a9       	ldd	r20, Y+51	; 0x33
    6430:	5c a9       	ldd	r21, Y+52	; 0x34
    6432:	04 c0       	rjmp	.+8      	; 0x643c <__udivdi3+0x474>
    6434:	56 95       	lsr	r21
    6436:	47 95       	ror	r20
    6438:	37 95       	ror	r19
    643a:	27 95       	ror	r18
    643c:	8a 95       	dec	r24
    643e:	d2 f7       	brpl	.-12     	; 0x6434 <__udivdi3+0x46c>
    6440:	d2 01       	movw	r26, r4
    6442:	c1 01       	movw	r24, r2
    6444:	0f 8c       	ldd	r0, Y+31	; 0x1f
    6446:	04 c0       	rjmp	.+8      	; 0x6450 <__udivdi3+0x488>
    6448:	88 0f       	add	r24, r24
    644a:	99 1f       	adc	r25, r25
    644c:	aa 1f       	adc	r26, r26
    644e:	bb 1f       	adc	r27, r27
    6450:	0a 94       	dec	r0
    6452:	d2 f7       	brpl	.-12     	; 0x6448 <__udivdi3+0x480>
    6454:	28 2b       	or	r18, r24
    6456:	39 2b       	or	r19, r25
    6458:	4a 2b       	or	r20, r26
    645a:	5b 2b       	or	r21, r27
    645c:	2d a7       	std	Y+45, r18	; 0x2d
    645e:	3e a7       	std	Y+46, r19	; 0x2e
    6460:	4f a7       	std	Y+47, r20	; 0x2f
    6462:	58 ab       	std	Y+48, r21	; 0x30
    6464:	96 01       	movw	r18, r12
    6466:	44 27       	eor	r20, r20
    6468:	55 27       	eor	r21, r21
    646a:	2d 96       	adiw	r28, 0x0d	; 13
    646c:	2c af       	std	Y+60, r18	; 0x3c
    646e:	3d af       	std	Y+61, r19	; 0x3d
    6470:	4e af       	std	Y+62, r20	; 0x3e
    6472:	5f af       	std	Y+63, r21	; 0x3f
    6474:	2d 97       	sbiw	r28, 0x0d	; 13
    6476:	6f ef       	ldi	r22, 0xFF	; 255
    6478:	26 2e       	mov	r2, r22
    647a:	6f ef       	ldi	r22, 0xFF	; 255
    647c:	36 2e       	mov	r3, r22
    647e:	41 2c       	mov	r4, r1
    6480:	51 2c       	mov	r5, r1
    6482:	2a 20       	and	r2, r10
    6484:	3b 20       	and	r3, r11
    6486:	4c 20       	and	r4, r12
    6488:	5d 20       	and	r5, r13
    648a:	c8 01       	movw	r24, r16
    648c:	b7 01       	movw	r22, r14
    648e:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6492:	61 96       	adiw	r28, 0x11	; 17
    6494:	2c af       	std	Y+60, r18	; 0x3c
    6496:	3d af       	std	Y+61, r19	; 0x3d
    6498:	4e af       	std	Y+62, r20	; 0x3e
    649a:	5f af       	std	Y+63, r21	; 0x3f
    649c:	61 97       	sbiw	r28, 0x11	; 17
    649e:	ca 01       	movw	r24, r20
    64a0:	b9 01       	movw	r22, r18
    64a2:	a2 01       	movw	r20, r4
    64a4:	91 01       	movw	r18, r2
    64a6:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    64aa:	3b 01       	movw	r6, r22
    64ac:	4c 01       	movw	r8, r24
    64ae:	c8 01       	movw	r24, r16
    64b0:	b7 01       	movw	r22, r14
    64b2:	2d 96       	adiw	r28, 0x0d	; 13
    64b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    64b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    64b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    64ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    64bc:	2d 97       	sbiw	r28, 0x0d	; 13
    64be:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    64c2:	cb 01       	movw	r24, r22
    64c4:	77 27       	eor	r23, r23
    64c6:	66 27       	eor	r22, r22
    64c8:	ed a4       	ldd	r14, Y+45	; 0x2d
    64ca:	fe a4       	ldd	r15, Y+46	; 0x2e
    64cc:	0f a5       	ldd	r16, Y+47	; 0x2f
    64ce:	18 a9       	ldd	r17, Y+48	; 0x30
    64d0:	98 01       	movw	r18, r16
    64d2:	44 27       	eor	r20, r20
    64d4:	55 27       	eor	r21, r21
    64d6:	79 01       	movw	r14, r18
    64d8:	8a 01       	movw	r16, r20
    64da:	e6 2a       	or	r14, r22
    64dc:	f7 2a       	or	r15, r23
    64de:	08 2b       	or	r16, r24
    64e0:	19 2b       	or	r17, r25
    64e2:	e6 14       	cp	r14, r6
    64e4:	f7 04       	cpc	r15, r7
    64e6:	08 05       	cpc	r16, r8
    64e8:	19 05       	cpc	r17, r9
    64ea:	60 f5       	brcc	.+88     	; 0x6544 <__udivdi3+0x57c>
    64ec:	61 96       	adiw	r28, 0x11	; 17
    64ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    64f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    64f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    64f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    64f6:	61 97       	sbiw	r28, 0x11	; 17
    64f8:	21 50       	subi	r18, 0x01	; 1
    64fa:	30 40       	sbci	r19, 0x00	; 0
    64fc:	40 40       	sbci	r20, 0x00	; 0
    64fe:	50 40       	sbci	r21, 0x00	; 0
    6500:	61 96       	adiw	r28, 0x11	; 17
    6502:	2c af       	std	Y+60, r18	; 0x3c
    6504:	3d af       	std	Y+61, r19	; 0x3d
    6506:	4e af       	std	Y+62, r20	; 0x3e
    6508:	5f af       	std	Y+63, r21	; 0x3f
    650a:	61 97       	sbiw	r28, 0x11	; 17
    650c:	ea 0c       	add	r14, r10
    650e:	fb 1c       	adc	r15, r11
    6510:	0c 1d       	adc	r16, r12
    6512:	1d 1d       	adc	r17, r13
    6514:	ea 14       	cp	r14, r10
    6516:	fb 04       	cpc	r15, r11
    6518:	0c 05       	cpc	r16, r12
    651a:	1d 05       	cpc	r17, r13
    651c:	98 f0       	brcs	.+38     	; 0x6544 <__udivdi3+0x57c>
    651e:	e6 14       	cp	r14, r6
    6520:	f7 04       	cpc	r15, r7
    6522:	08 05       	cpc	r16, r8
    6524:	19 05       	cpc	r17, r9
    6526:	70 f4       	brcc	.+28     	; 0x6544 <__udivdi3+0x57c>
    6528:	21 50       	subi	r18, 0x01	; 1
    652a:	30 40       	sbci	r19, 0x00	; 0
    652c:	40 40       	sbci	r20, 0x00	; 0
    652e:	50 40       	sbci	r21, 0x00	; 0
    6530:	61 96       	adiw	r28, 0x11	; 17
    6532:	2c af       	std	Y+60, r18	; 0x3c
    6534:	3d af       	std	Y+61, r19	; 0x3d
    6536:	4e af       	std	Y+62, r20	; 0x3e
    6538:	5f af       	std	Y+63, r21	; 0x3f
    653a:	61 97       	sbiw	r28, 0x11	; 17
    653c:	ea 0c       	add	r14, r10
    653e:	fb 1c       	adc	r15, r11
    6540:	0c 1d       	adc	r16, r12
    6542:	1d 1d       	adc	r17, r13
    6544:	e6 18       	sub	r14, r6
    6546:	f7 08       	sbc	r15, r7
    6548:	08 09       	sbc	r16, r8
    654a:	19 09       	sbc	r17, r9
    654c:	c8 01       	movw	r24, r16
    654e:	b7 01       	movw	r22, r14
    6550:	2d 96       	adiw	r28, 0x0d	; 13
    6552:	2c ad       	ldd	r18, Y+60	; 0x3c
    6554:	3d ad       	ldd	r19, Y+61	; 0x3d
    6556:	4e ad       	ldd	r20, Y+62	; 0x3e
    6558:	5f ad       	ldd	r21, Y+63	; 0x3f
    655a:	2d 97       	sbiw	r28, 0x0d	; 13
    655c:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6560:	39 01       	movw	r6, r18
    6562:	4a 01       	movw	r8, r20
    6564:	ca 01       	movw	r24, r20
    6566:	b9 01       	movw	r22, r18
    6568:	a2 01       	movw	r20, r4
    656a:	91 01       	movw	r18, r2
    656c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6570:	1b 01       	movw	r2, r22
    6572:	2c 01       	movw	r4, r24
    6574:	c8 01       	movw	r24, r16
    6576:	b7 01       	movw	r22, r14
    6578:	2d 96       	adiw	r28, 0x0d	; 13
    657a:	2c ad       	ldd	r18, Y+60	; 0x3c
    657c:	3d ad       	ldd	r19, Y+61	; 0x3d
    657e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6580:	5f ad       	ldd	r21, Y+63	; 0x3f
    6582:	2d 97       	sbiw	r28, 0x0d	; 13
    6584:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6588:	cb 01       	movw	r24, r22
    658a:	77 27       	eor	r23, r23
    658c:	66 27       	eor	r22, r22
    658e:	2d a5       	ldd	r18, Y+45	; 0x2d
    6590:	3e a5       	ldd	r19, Y+46	; 0x2e
    6592:	4f a5       	ldd	r20, Y+47	; 0x2f
    6594:	58 a9       	ldd	r21, Y+48	; 0x30
    6596:	40 70       	andi	r20, 0x00	; 0
    6598:	50 70       	andi	r21, 0x00	; 0
    659a:	7b 01       	movw	r14, r22
    659c:	8c 01       	movw	r16, r24
    659e:	e2 2a       	or	r14, r18
    65a0:	f3 2a       	or	r15, r19
    65a2:	04 2b       	or	r16, r20
    65a4:	15 2b       	or	r17, r21
    65a6:	e2 14       	cp	r14, r2
    65a8:	f3 04       	cpc	r15, r3
    65aa:	04 05       	cpc	r16, r4
    65ac:	15 05       	cpc	r17, r5
    65ae:	e0 f4       	brcc	.+56     	; 0x65e8 <__udivdi3+0x620>
    65b0:	08 94       	sec
    65b2:	61 08       	sbc	r6, r1
    65b4:	71 08       	sbc	r7, r1
    65b6:	81 08       	sbc	r8, r1
    65b8:	91 08       	sbc	r9, r1
    65ba:	ea 0c       	add	r14, r10
    65bc:	fb 1c       	adc	r15, r11
    65be:	0c 1d       	adc	r16, r12
    65c0:	1d 1d       	adc	r17, r13
    65c2:	ea 14       	cp	r14, r10
    65c4:	fb 04       	cpc	r15, r11
    65c6:	0c 05       	cpc	r16, r12
    65c8:	1d 05       	cpc	r17, r13
    65ca:	70 f0       	brcs	.+28     	; 0x65e8 <__udivdi3+0x620>
    65cc:	e2 14       	cp	r14, r2
    65ce:	f3 04       	cpc	r15, r3
    65d0:	04 05       	cpc	r16, r4
    65d2:	15 05       	cpc	r17, r5
    65d4:	48 f4       	brcc	.+18     	; 0x65e8 <__udivdi3+0x620>
    65d6:	08 94       	sec
    65d8:	61 08       	sbc	r6, r1
    65da:	71 08       	sbc	r7, r1
    65dc:	81 08       	sbc	r8, r1
    65de:	91 08       	sbc	r9, r1
    65e0:	ea 0c       	add	r14, r10
    65e2:	fb 1c       	adc	r15, r11
    65e4:	0c 1d       	adc	r16, r12
    65e6:	1d 1d       	adc	r17, r13
    65e8:	89 a9       	ldd	r24, Y+49	; 0x31
    65ea:	9a a9       	ldd	r25, Y+50	; 0x32
    65ec:	ab a9       	ldd	r26, Y+51	; 0x33
    65ee:	bc a9       	ldd	r27, Y+52	; 0x34
    65f0:	0f 8c       	ldd	r0, Y+31	; 0x1f
    65f2:	04 c0       	rjmp	.+8      	; 0x65fc <__udivdi3+0x634>
    65f4:	88 0f       	add	r24, r24
    65f6:	99 1f       	adc	r25, r25
    65f8:	aa 1f       	adc	r26, r26
    65fa:	bb 1f       	adc	r27, r27
    65fc:	0a 94       	dec	r0
    65fe:	d2 f7       	brpl	.-12     	; 0x65f4 <__udivdi3+0x62c>
    6600:	89 ab       	std	Y+49, r24	; 0x31
    6602:	9a ab       	std	Y+50, r25	; 0x32
    6604:	ab ab       	std	Y+51, r26	; 0x33
    6606:	bc ab       	std	Y+52, r27	; 0x34
    6608:	e2 18       	sub	r14, r2
    660a:	f3 08       	sbc	r15, r3
    660c:	04 09       	sbc	r16, r4
    660e:	15 09       	sbc	r17, r5
    6610:	61 96       	adiw	r28, 0x11	; 17
    6612:	2c ad       	ldd	r18, Y+60	; 0x3c
    6614:	3d ad       	ldd	r19, Y+61	; 0x3d
    6616:	4e ad       	ldd	r20, Y+62	; 0x3e
    6618:	5f ad       	ldd	r21, Y+63	; 0x3f
    661a:	61 97       	sbiw	r28, 0x11	; 17
    661c:	d9 01       	movw	r26, r18
    661e:	99 27       	eor	r25, r25
    6620:	88 27       	eor	r24, r24
    6622:	68 2a       	or	r6, r24
    6624:	79 2a       	or	r7, r25
    6626:	8a 2a       	or	r8, r26
    6628:	9b 2a       	or	r9, r27
    662a:	69 ae       	std	Y+57, r6	; 0x39
    662c:	7a ae       	std	Y+58, r7	; 0x3a
    662e:	8b ae       	std	Y+59, r8	; 0x3b
    6630:	9c ae       	std	Y+60, r9	; 0x3c
    6632:	c6 01       	movw	r24, r12
    6634:	aa 27       	eor	r26, r26
    6636:	bb 27       	eor	r27, r27
    6638:	65 96       	adiw	r28, 0x15	; 21
    663a:	8c af       	std	Y+60, r24	; 0x3c
    663c:	9d af       	std	Y+61, r25	; 0x3d
    663e:	ae af       	std	Y+62, r26	; 0x3e
    6640:	bf af       	std	Y+63, r27	; 0x3f
    6642:	65 97       	sbiw	r28, 0x15	; 21
    6644:	a6 01       	movw	r20, r12
    6646:	95 01       	movw	r18, r10
    6648:	40 70       	andi	r20, 0x00	; 0
    664a:	50 70       	andi	r21, 0x00	; 0
    664c:	69 96       	adiw	r28, 0x19	; 25
    664e:	2c af       	std	Y+60, r18	; 0x3c
    6650:	3d af       	std	Y+61, r19	; 0x3d
    6652:	4e af       	std	Y+62, r20	; 0x3e
    6654:	5f af       	std	Y+63, r21	; 0x3f
    6656:	69 97       	sbiw	r28, 0x19	; 25
    6658:	c8 01       	movw	r24, r16
    665a:	b7 01       	movw	r22, r14
    665c:	65 96       	adiw	r28, 0x15	; 21
    665e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6660:	3d ad       	ldd	r19, Y+61	; 0x3d
    6662:	4e ad       	ldd	r20, Y+62	; 0x3e
    6664:	5f ad       	ldd	r21, Y+63	; 0x3f
    6666:	65 97       	sbiw	r28, 0x15	; 21
    6668:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    666c:	19 01       	movw	r2, r18
    666e:	2a 01       	movw	r4, r20
    6670:	ca 01       	movw	r24, r20
    6672:	b9 01       	movw	r22, r18
    6674:	69 96       	adiw	r28, 0x19	; 25
    6676:	2c ad       	ldd	r18, Y+60	; 0x3c
    6678:	3d ad       	ldd	r19, Y+61	; 0x3d
    667a:	4e ad       	ldd	r20, Y+62	; 0x3e
    667c:	5f ad       	ldd	r21, Y+63	; 0x3f
    667e:	69 97       	sbiw	r28, 0x19	; 25
    6680:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6684:	3b 01       	movw	r6, r22
    6686:	4c 01       	movw	r8, r24
    6688:	c8 01       	movw	r24, r16
    668a:	b7 01       	movw	r22, r14
    668c:	65 96       	adiw	r28, 0x15	; 21
    668e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6690:	3d ad       	ldd	r19, Y+61	; 0x3d
    6692:	4e ad       	ldd	r20, Y+62	; 0x3e
    6694:	5f ad       	ldd	r21, Y+63	; 0x3f
    6696:	65 97       	sbiw	r28, 0x15	; 21
    6698:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    669c:	cb 01       	movw	r24, r22
    669e:	77 27       	eor	r23, r23
    66a0:	66 27       	eor	r22, r22
    66a2:	e9 a8       	ldd	r14, Y+49	; 0x31
    66a4:	fa a8       	ldd	r15, Y+50	; 0x32
    66a6:	0b a9       	ldd	r16, Y+51	; 0x33
    66a8:	1c a9       	ldd	r17, Y+52	; 0x34
    66aa:	98 01       	movw	r18, r16
    66ac:	44 27       	eor	r20, r20
    66ae:	55 27       	eor	r21, r21
    66b0:	7b 01       	movw	r14, r22
    66b2:	8c 01       	movw	r16, r24
    66b4:	e2 2a       	or	r14, r18
    66b6:	f3 2a       	or	r15, r19
    66b8:	04 2b       	or	r16, r20
    66ba:	15 2b       	or	r17, r21
    66bc:	e6 14       	cp	r14, r6
    66be:	f7 04       	cpc	r15, r7
    66c0:	08 05       	cpc	r16, r8
    66c2:	19 05       	cpc	r17, r9
    66c4:	e0 f4       	brcc	.+56     	; 0x66fe <__udivdi3+0x736>
    66c6:	08 94       	sec
    66c8:	21 08       	sbc	r2, r1
    66ca:	31 08       	sbc	r3, r1
    66cc:	41 08       	sbc	r4, r1
    66ce:	51 08       	sbc	r5, r1
    66d0:	ea 0c       	add	r14, r10
    66d2:	fb 1c       	adc	r15, r11
    66d4:	0c 1d       	adc	r16, r12
    66d6:	1d 1d       	adc	r17, r13
    66d8:	ea 14       	cp	r14, r10
    66da:	fb 04       	cpc	r15, r11
    66dc:	0c 05       	cpc	r16, r12
    66de:	1d 05       	cpc	r17, r13
    66e0:	70 f0       	brcs	.+28     	; 0x66fe <__udivdi3+0x736>
    66e2:	e6 14       	cp	r14, r6
    66e4:	f7 04       	cpc	r15, r7
    66e6:	08 05       	cpc	r16, r8
    66e8:	19 05       	cpc	r17, r9
    66ea:	48 f4       	brcc	.+18     	; 0x66fe <__udivdi3+0x736>
    66ec:	08 94       	sec
    66ee:	21 08       	sbc	r2, r1
    66f0:	31 08       	sbc	r3, r1
    66f2:	41 08       	sbc	r4, r1
    66f4:	51 08       	sbc	r5, r1
    66f6:	ea 0c       	add	r14, r10
    66f8:	fb 1c       	adc	r15, r11
    66fa:	0c 1d       	adc	r16, r12
    66fc:	1d 1d       	adc	r17, r13
    66fe:	e6 18       	sub	r14, r6
    6700:	f7 08       	sbc	r15, r7
    6702:	08 09       	sbc	r16, r8
    6704:	19 09       	sbc	r17, r9
    6706:	c8 01       	movw	r24, r16
    6708:	b7 01       	movw	r22, r14
    670a:	65 96       	adiw	r28, 0x15	; 21
    670c:	2c ad       	ldd	r18, Y+60	; 0x3c
    670e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6710:	4e ad       	ldd	r20, Y+62	; 0x3e
    6712:	5f ad       	ldd	r21, Y+63	; 0x3f
    6714:	65 97       	sbiw	r28, 0x15	; 21
    6716:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    671a:	39 01       	movw	r6, r18
    671c:	4a 01       	movw	r8, r20
    671e:	ca 01       	movw	r24, r20
    6720:	b9 01       	movw	r22, r18
    6722:	69 96       	adiw	r28, 0x19	; 25
    6724:	2c ad       	ldd	r18, Y+60	; 0x3c
    6726:	3d ad       	ldd	r19, Y+61	; 0x3d
    6728:	4e ad       	ldd	r20, Y+62	; 0x3e
    672a:	5f ad       	ldd	r21, Y+63	; 0x3f
    672c:	69 97       	sbiw	r28, 0x19	; 25
    672e:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6732:	69 8f       	std	Y+25, r22	; 0x19
    6734:	7a 8f       	std	Y+26, r23	; 0x1a
    6736:	8b 8f       	std	Y+27, r24	; 0x1b
    6738:	9c 8f       	std	Y+28, r25	; 0x1c
    673a:	c8 01       	movw	r24, r16
    673c:	b7 01       	movw	r22, r14
    673e:	65 96       	adiw	r28, 0x15	; 21
    6740:	2c ad       	ldd	r18, Y+60	; 0x3c
    6742:	3d ad       	ldd	r19, Y+61	; 0x3d
    6744:	4e ad       	ldd	r20, Y+62	; 0x3e
    6746:	5f ad       	ldd	r21, Y+63	; 0x3f
    6748:	65 97       	sbiw	r28, 0x15	; 21
    674a:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    674e:	cb 01       	movw	r24, r22
    6750:	77 27       	eor	r23, r23
    6752:	66 27       	eor	r22, r22
    6754:	29 a9       	ldd	r18, Y+49	; 0x31
    6756:	3a a9       	ldd	r19, Y+50	; 0x32
    6758:	4b a9       	ldd	r20, Y+51	; 0x33
    675a:	5c a9       	ldd	r21, Y+52	; 0x34
    675c:	40 70       	andi	r20, 0x00	; 0
    675e:	50 70       	andi	r21, 0x00	; 0
    6760:	26 2b       	or	r18, r22
    6762:	37 2b       	or	r19, r23
    6764:	48 2b       	or	r20, r24
    6766:	59 2b       	or	r21, r25
    6768:	89 8d       	ldd	r24, Y+25	; 0x19
    676a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    676c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    676e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6770:	28 17       	cp	r18, r24
    6772:	39 07       	cpc	r19, r25
    6774:	4a 07       	cpc	r20, r26
    6776:	5b 07       	cpc	r21, r27
    6778:	c0 f4       	brcc	.+48     	; 0x67aa <__udivdi3+0x7e2>
    677a:	08 94       	sec
    677c:	61 08       	sbc	r6, r1
    677e:	71 08       	sbc	r7, r1
    6780:	81 08       	sbc	r8, r1
    6782:	91 08       	sbc	r9, r1
    6784:	2a 0d       	add	r18, r10
    6786:	3b 1d       	adc	r19, r11
    6788:	4c 1d       	adc	r20, r12
    678a:	5d 1d       	adc	r21, r13
    678c:	2a 15       	cp	r18, r10
    678e:	3b 05       	cpc	r19, r11
    6790:	4c 05       	cpc	r20, r12
    6792:	5d 05       	cpc	r21, r13
    6794:	50 f0       	brcs	.+20     	; 0x67aa <__udivdi3+0x7e2>
    6796:	28 17       	cp	r18, r24
    6798:	39 07       	cpc	r19, r25
    679a:	4a 07       	cpc	r20, r26
    679c:	5b 07       	cpc	r21, r27
    679e:	28 f4       	brcc	.+10     	; 0x67aa <__udivdi3+0x7e2>
    67a0:	08 94       	sec
    67a2:	61 08       	sbc	r6, r1
    67a4:	71 08       	sbc	r7, r1
    67a6:	81 08       	sbc	r8, r1
    67a8:	91 08       	sbc	r9, r1
    67aa:	d1 01       	movw	r26, r2
    67ac:	99 27       	eor	r25, r25
    67ae:	88 27       	eor	r24, r24
    67b0:	68 2a       	or	r6, r24
    67b2:	79 2a       	or	r7, r25
    67b4:	8a 2a       	or	r8, r26
    67b6:	9b 2a       	or	r9, r27
    67b8:	6d aa       	std	Y+53, r6	; 0x35
    67ba:	7e aa       	std	Y+54, r7	; 0x36
    67bc:	8f aa       	std	Y+55, r8	; 0x37
    67be:	98 ae       	std	Y+56, r9	; 0x38
    67c0:	65 c2       	rjmp	.+1226   	; 0x6c8c <__udivdi3+0xcc4>
    67c2:	26 14       	cp	r2, r6
    67c4:	37 04       	cpc	r3, r7
    67c6:	48 04       	cpc	r4, r8
    67c8:	59 04       	cpc	r5, r9
    67ca:	08 f4       	brcc	.+2      	; 0x67ce <__udivdi3+0x806>
    67cc:	4e c2       	rjmp	.+1180   	; 0x6c6a <__udivdi3+0xca2>
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	69 16       	cp	r6, r25
    67d2:	90 e0       	ldi	r25, 0x00	; 0
    67d4:	79 06       	cpc	r7, r25
    67d6:	91 e0       	ldi	r25, 0x01	; 1
    67d8:	89 06       	cpc	r8, r25
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	99 06       	cpc	r9, r25
    67de:	88 f4       	brcc	.+34     	; 0x6802 <__udivdi3+0x83a>
    67e0:	af ef       	ldi	r26, 0xFF	; 255
    67e2:	6a 16       	cp	r6, r26
    67e4:	71 04       	cpc	r7, r1
    67e6:	81 04       	cpc	r8, r1
    67e8:	91 04       	cpc	r9, r1
    67ea:	09 f0       	breq	.+2      	; 0x67ee <__udivdi3+0x826>
    67ec:	28 f4       	brcc	.+10     	; 0x67f8 <__udivdi3+0x830>
    67ee:	20 e0       	ldi	r18, 0x00	; 0
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	50 e0       	ldi	r21, 0x00	; 0
    67f6:	17 c0       	rjmp	.+46     	; 0x6826 <__udivdi3+0x85e>
    67f8:	28 e0       	ldi	r18, 0x08	; 8
    67fa:	30 e0       	ldi	r19, 0x00	; 0
    67fc:	40 e0       	ldi	r20, 0x00	; 0
    67fe:	50 e0       	ldi	r21, 0x00	; 0
    6800:	12 c0       	rjmp	.+36     	; 0x6826 <__udivdi3+0x85e>
    6802:	b0 e0       	ldi	r27, 0x00	; 0
    6804:	6b 16       	cp	r6, r27
    6806:	b0 e0       	ldi	r27, 0x00	; 0
    6808:	7b 06       	cpc	r7, r27
    680a:	b0 e0       	ldi	r27, 0x00	; 0
    680c:	8b 06       	cpc	r8, r27
    680e:	b1 e0       	ldi	r27, 0x01	; 1
    6810:	9b 06       	cpc	r9, r27
    6812:	28 f4       	brcc	.+10     	; 0x681e <__udivdi3+0x856>
    6814:	20 e1       	ldi	r18, 0x10	; 16
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	40 e0       	ldi	r20, 0x00	; 0
    681a:	50 e0       	ldi	r21, 0x00	; 0
    681c:	04 c0       	rjmp	.+8      	; 0x6826 <__udivdi3+0x85e>
    681e:	28 e1       	ldi	r18, 0x18	; 24
    6820:	30 e0       	ldi	r19, 0x00	; 0
    6822:	40 e0       	ldi	r20, 0x00	; 0
    6824:	50 e0       	ldi	r21, 0x00	; 0
    6826:	e0 e2       	ldi	r30, 0x20	; 32
    6828:	ee 2e       	mov	r14, r30
    682a:	f1 2c       	mov	r15, r1
    682c:	01 2d       	mov	r16, r1
    682e:	11 2d       	mov	r17, r1
    6830:	d8 01       	movw	r26, r16
    6832:	c7 01       	movw	r24, r14
    6834:	82 1b       	sub	r24, r18
    6836:	93 0b       	sbc	r25, r19
    6838:	a4 0b       	sbc	r26, r20
    683a:	b5 0b       	sbc	r27, r21
    683c:	ad 96       	adiw	r28, 0x2d	; 45
    683e:	8c af       	std	Y+60, r24	; 0x3c
    6840:	9d af       	std	Y+61, r25	; 0x3d
    6842:	ae af       	std	Y+62, r26	; 0x3e
    6844:	bf af       	std	Y+63, r27	; 0x3f
    6846:	ad 97       	sbiw	r28, 0x2d	; 45
    6848:	d4 01       	movw	r26, r8
    684a:	c3 01       	movw	r24, r6
    684c:	04 c0       	rjmp	.+8      	; 0x6856 <__udivdi3+0x88e>
    684e:	b6 95       	lsr	r27
    6850:	a7 95       	ror	r26
    6852:	97 95       	ror	r25
    6854:	87 95       	ror	r24
    6856:	2a 95       	dec	r18
    6858:	d2 f7       	brpl	.-12     	; 0x684e <__udivdi3+0x886>
    685a:	9c 01       	movw	r18, r24
    685c:	ad 01       	movw	r20, r26
    685e:	22 54       	subi	r18, 0x42	; 66
    6860:	3d 4f       	sbci	r19, 0xFD	; 253
    6862:	d9 01       	movw	r26, r18
    6864:	2c 91       	ld	r18, X
    6866:	ad 96       	adiw	r28, 0x2d	; 45
    6868:	8c ad       	ldd	r24, Y+60	; 0x3c
    686a:	9d ad       	ldd	r25, Y+61	; 0x3d
    686c:	ae ad       	ldd	r26, Y+62	; 0x3e
    686e:	bf ad       	ldd	r27, Y+63	; 0x3f
    6870:	ad 97       	sbiw	r28, 0x2d	; 45
    6872:	82 1b       	sub	r24, r18
    6874:	91 09       	sbc	r25, r1
    6876:	a1 09       	sbc	r26, r1
    6878:	b1 09       	sbc	r27, r1
    687a:	00 97       	sbiw	r24, 0x00	; 0
    687c:	a1 05       	cpc	r26, r1
    687e:	b1 05       	cpc	r27, r1
    6880:	89 f4       	brne	.+34     	; 0x68a4 <__udivdi3+0x8dc>
    6882:	62 14       	cp	r6, r2
    6884:	73 04       	cpc	r7, r3
    6886:	84 04       	cpc	r8, r4
    6888:	95 04       	cpc	r9, r5
    688a:	08 f4       	brcc	.+2      	; 0x688e <__udivdi3+0x8c6>
    688c:	f3 c1       	rjmp	.+998    	; 0x6c74 <__udivdi3+0xcac>
    688e:	69 a8       	ldd	r6, Y+49	; 0x31
    6890:	7a a8       	ldd	r7, Y+50	; 0x32
    6892:	8b a8       	ldd	r8, Y+51	; 0x33
    6894:	9c a8       	ldd	r9, Y+52	; 0x34
    6896:	6a 14       	cp	r6, r10
    6898:	7b 04       	cpc	r7, r11
    689a:	8c 04       	cpc	r8, r12
    689c:	9d 04       	cpc	r9, r13
    689e:	08 f0       	brcs	.+2      	; 0x68a2 <__udivdi3+0x8da>
    68a0:	e9 c1       	rjmp	.+978    	; 0x6c74 <__udivdi3+0xcac>
    68a2:	e3 c1       	rjmp	.+966    	; 0x6c6a <__udivdi3+0xca2>
    68a4:	9e 8f       	std	Y+30, r25	; 0x1e
    68a6:	8d 8f       	std	Y+29, r24	; 0x1d
    68a8:	e8 1a       	sub	r14, r24
    68aa:	f9 0a       	sbc	r15, r25
    68ac:	0a 0b       	sbc	r16, r26
    68ae:	1b 0b       	sbc	r17, r27
    68b0:	a8 01       	movw	r20, r16
    68b2:	97 01       	movw	r18, r14
    68b4:	86 01       	movw	r16, r12
    68b6:	75 01       	movw	r14, r10
    68b8:	02 2e       	mov	r0, r18
    68ba:	04 c0       	rjmp	.+8      	; 0x68c4 <__udivdi3+0x8fc>
    68bc:	16 95       	lsr	r17
    68be:	07 95       	ror	r16
    68c0:	f7 94       	ror	r15
    68c2:	e7 94       	ror	r14
    68c4:	0a 94       	dec	r0
    68c6:	d2 f7       	brpl	.-12     	; 0x68bc <__udivdi3+0x8f4>
    68c8:	d4 01       	movw	r26, r8
    68ca:	c3 01       	movw	r24, r6
    68cc:	0d 8c       	ldd	r0, Y+29	; 0x1d
    68ce:	04 c0       	rjmp	.+8      	; 0x68d8 <__udivdi3+0x910>
    68d0:	88 0f       	add	r24, r24
    68d2:	99 1f       	adc	r25, r25
    68d4:	aa 1f       	adc	r26, r26
    68d6:	bb 1f       	adc	r27, r27
    68d8:	0a 94       	dec	r0
    68da:	d2 f7       	brpl	.-12     	; 0x68d0 <__udivdi3+0x908>
    68dc:	37 01       	movw	r6, r14
    68de:	48 01       	movw	r8, r16
    68e0:	68 2a       	or	r6, r24
    68e2:	79 2a       	or	r7, r25
    68e4:	8a 2a       	or	r8, r26
    68e6:	9b 2a       	or	r9, r27
    68e8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    68ea:	04 c0       	rjmp	.+8      	; 0x68f4 <__udivdi3+0x92c>
    68ec:	aa 0c       	add	r10, r10
    68ee:	bb 1c       	adc	r11, r11
    68f0:	cc 1c       	adc	r12, r12
    68f2:	dd 1c       	adc	r13, r13
    68f4:	0a 94       	dec	r0
    68f6:	d2 f7       	brpl	.-12     	; 0x68ec <__udivdi3+0x924>
    68f8:	a9 a2       	std	Y+33, r10	; 0x21
    68fa:	ba a2       	std	Y+34, r11	; 0x22
    68fc:	cb a2       	std	Y+35, r12	; 0x23
    68fe:	dc a2       	std	Y+36, r13	; 0x24
    6900:	82 01       	movw	r16, r4
    6902:	71 01       	movw	r14, r2
    6904:	02 2e       	mov	r0, r18
    6906:	04 c0       	rjmp	.+8      	; 0x6910 <__udivdi3+0x948>
    6908:	16 95       	lsr	r17
    690a:	07 95       	ror	r16
    690c:	f7 94       	ror	r15
    690e:	e7 94       	ror	r14
    6910:	0a 94       	dec	r0
    6912:	d2 f7       	brpl	.-12     	; 0x6908 <__udivdi3+0x940>
    6914:	89 a9       	ldd	r24, Y+49	; 0x31
    6916:	9a a9       	ldd	r25, Y+50	; 0x32
    6918:	ab a9       	ldd	r26, Y+51	; 0x33
    691a:	bc a9       	ldd	r27, Y+52	; 0x34
    691c:	04 c0       	rjmp	.+8      	; 0x6926 <__udivdi3+0x95e>
    691e:	b6 95       	lsr	r27
    6920:	a7 95       	ror	r26
    6922:	97 95       	ror	r25
    6924:	87 95       	ror	r24
    6926:	2a 95       	dec	r18
    6928:	d2 f7       	brpl	.-12     	; 0x691e <__udivdi3+0x956>
    692a:	9c 01       	movw	r18, r24
    692c:	ad 01       	movw	r20, r26
    692e:	d2 01       	movw	r26, r4
    6930:	c1 01       	movw	r24, r2
    6932:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6934:	04 c0       	rjmp	.+8      	; 0x693e <__udivdi3+0x976>
    6936:	88 0f       	add	r24, r24
    6938:	99 1f       	adc	r25, r25
    693a:	aa 1f       	adc	r26, r26
    693c:	bb 1f       	adc	r27, r27
    693e:	0a 94       	dec	r0
    6940:	d2 f7       	brpl	.-12     	; 0x6936 <__udivdi3+0x96e>
    6942:	28 2b       	or	r18, r24
    6944:	39 2b       	or	r19, r25
    6946:	4a 2b       	or	r20, r26
    6948:	5b 2b       	or	r21, r27
    694a:	29 a7       	std	Y+41, r18	; 0x29
    694c:	3a a7       	std	Y+42, r19	; 0x2a
    694e:	4b a7       	std	Y+43, r20	; 0x2b
    6950:	5c a7       	std	Y+44, r21	; 0x2c
    6952:	94 01       	movw	r18, r8
    6954:	44 27       	eor	r20, r20
    6956:	55 27       	eor	r21, r21
    6958:	6d 96       	adiw	r28, 0x1d	; 29
    695a:	2c af       	std	Y+60, r18	; 0x3c
    695c:	3d af       	std	Y+61, r19	; 0x3d
    695e:	4e af       	std	Y+62, r20	; 0x3e
    6960:	5f af       	std	Y+63, r21	; 0x3f
    6962:	6d 97       	sbiw	r28, 0x1d	; 29
    6964:	6f ef       	ldi	r22, 0xFF	; 255
    6966:	26 2e       	mov	r2, r22
    6968:	6f ef       	ldi	r22, 0xFF	; 255
    696a:	36 2e       	mov	r3, r22
    696c:	41 2c       	mov	r4, r1
    696e:	51 2c       	mov	r5, r1
    6970:	26 20       	and	r2, r6
    6972:	37 20       	and	r3, r7
    6974:	48 20       	and	r4, r8
    6976:	59 20       	and	r5, r9
    6978:	c8 01       	movw	r24, r16
    697a:	b7 01       	movw	r22, r14
    697c:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6980:	a1 96       	adiw	r28, 0x21	; 33
    6982:	2c af       	std	Y+60, r18	; 0x3c
    6984:	3d af       	std	Y+61, r19	; 0x3d
    6986:	4e af       	std	Y+62, r20	; 0x3e
    6988:	5f af       	std	Y+63, r21	; 0x3f
    698a:	a1 97       	sbiw	r28, 0x21	; 33
    698c:	ca 01       	movw	r24, r20
    698e:	b9 01       	movw	r22, r18
    6990:	a2 01       	movw	r20, r4
    6992:	91 01       	movw	r18, r2
    6994:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6998:	5b 01       	movw	r10, r22
    699a:	6c 01       	movw	r12, r24
    699c:	c8 01       	movw	r24, r16
    699e:	b7 01       	movw	r22, r14
    69a0:	6d 96       	adiw	r28, 0x1d	; 29
    69a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    69a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    69a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    69a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    69aa:	6d 97       	sbiw	r28, 0x1d	; 29
    69ac:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    69b0:	cb 01       	movw	r24, r22
    69b2:	77 27       	eor	r23, r23
    69b4:	66 27       	eor	r22, r22
    69b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    69b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    69ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    69bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    69be:	98 01       	movw	r18, r16
    69c0:	44 27       	eor	r20, r20
    69c2:	55 27       	eor	r21, r21
    69c4:	7b 01       	movw	r14, r22
    69c6:	8c 01       	movw	r16, r24
    69c8:	e2 2a       	or	r14, r18
    69ca:	f3 2a       	or	r15, r19
    69cc:	04 2b       	or	r16, r20
    69ce:	15 2b       	or	r17, r21
    69d0:	ea 14       	cp	r14, r10
    69d2:	fb 04       	cpc	r15, r11
    69d4:	0c 05       	cpc	r16, r12
    69d6:	1d 05       	cpc	r17, r13
    69d8:	60 f5       	brcc	.+88     	; 0x6a32 <__udivdi3+0xa6a>
    69da:	a1 96       	adiw	r28, 0x21	; 33
    69dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    69de:	3d ad       	ldd	r19, Y+61	; 0x3d
    69e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    69e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    69e4:	a1 97       	sbiw	r28, 0x21	; 33
    69e6:	21 50       	subi	r18, 0x01	; 1
    69e8:	30 40       	sbci	r19, 0x00	; 0
    69ea:	40 40       	sbci	r20, 0x00	; 0
    69ec:	50 40       	sbci	r21, 0x00	; 0
    69ee:	a1 96       	adiw	r28, 0x21	; 33
    69f0:	2c af       	std	Y+60, r18	; 0x3c
    69f2:	3d af       	std	Y+61, r19	; 0x3d
    69f4:	4e af       	std	Y+62, r20	; 0x3e
    69f6:	5f af       	std	Y+63, r21	; 0x3f
    69f8:	a1 97       	sbiw	r28, 0x21	; 33
    69fa:	e6 0c       	add	r14, r6
    69fc:	f7 1c       	adc	r15, r7
    69fe:	08 1d       	adc	r16, r8
    6a00:	19 1d       	adc	r17, r9
    6a02:	e6 14       	cp	r14, r6
    6a04:	f7 04       	cpc	r15, r7
    6a06:	08 05       	cpc	r16, r8
    6a08:	19 05       	cpc	r17, r9
    6a0a:	98 f0       	brcs	.+38     	; 0x6a32 <__udivdi3+0xa6a>
    6a0c:	ea 14       	cp	r14, r10
    6a0e:	fb 04       	cpc	r15, r11
    6a10:	0c 05       	cpc	r16, r12
    6a12:	1d 05       	cpc	r17, r13
    6a14:	70 f4       	brcc	.+28     	; 0x6a32 <__udivdi3+0xa6a>
    6a16:	21 50       	subi	r18, 0x01	; 1
    6a18:	30 40       	sbci	r19, 0x00	; 0
    6a1a:	40 40       	sbci	r20, 0x00	; 0
    6a1c:	50 40       	sbci	r21, 0x00	; 0
    6a1e:	a1 96       	adiw	r28, 0x21	; 33
    6a20:	2c af       	std	Y+60, r18	; 0x3c
    6a22:	3d af       	std	Y+61, r19	; 0x3d
    6a24:	4e af       	std	Y+62, r20	; 0x3e
    6a26:	5f af       	std	Y+63, r21	; 0x3f
    6a28:	a1 97       	sbiw	r28, 0x21	; 33
    6a2a:	e6 0c       	add	r14, r6
    6a2c:	f7 1c       	adc	r15, r7
    6a2e:	08 1d       	adc	r16, r8
    6a30:	19 1d       	adc	r17, r9
    6a32:	ea 18       	sub	r14, r10
    6a34:	fb 08       	sbc	r15, r11
    6a36:	0c 09       	sbc	r16, r12
    6a38:	1d 09       	sbc	r17, r13
    6a3a:	c8 01       	movw	r24, r16
    6a3c:	b7 01       	movw	r22, r14
    6a3e:	6d 96       	adiw	r28, 0x1d	; 29
    6a40:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a42:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a44:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a46:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a48:	6d 97       	sbiw	r28, 0x1d	; 29
    6a4a:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6a4e:	59 01       	movw	r10, r18
    6a50:	6a 01       	movw	r12, r20
    6a52:	ca 01       	movw	r24, r20
    6a54:	b9 01       	movw	r22, r18
    6a56:	a2 01       	movw	r20, r4
    6a58:	91 01       	movw	r18, r2
    6a5a:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6a5e:	1b 01       	movw	r2, r22
    6a60:	2c 01       	movw	r4, r24
    6a62:	c8 01       	movw	r24, r16
    6a64:	b7 01       	movw	r22, r14
    6a66:	6d 96       	adiw	r28, 0x1d	; 29
    6a68:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a6a:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a6c:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a6e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a70:	6d 97       	sbiw	r28, 0x1d	; 29
    6a72:	0e 94 2b 39 	call	0x7256	; 0x7256 <__udivmodsi4>
    6a76:	cb 01       	movw	r24, r22
    6a78:	77 27       	eor	r23, r23
    6a7a:	66 27       	eor	r22, r22
    6a7c:	29 a5       	ldd	r18, Y+41	; 0x29
    6a7e:	3a a5       	ldd	r19, Y+42	; 0x2a
    6a80:	4b a5       	ldd	r20, Y+43	; 0x2b
    6a82:	5c a5       	ldd	r21, Y+44	; 0x2c
    6a84:	40 70       	andi	r20, 0x00	; 0
    6a86:	50 70       	andi	r21, 0x00	; 0
    6a88:	7b 01       	movw	r14, r22
    6a8a:	8c 01       	movw	r16, r24
    6a8c:	e2 2a       	or	r14, r18
    6a8e:	f3 2a       	or	r15, r19
    6a90:	04 2b       	or	r16, r20
    6a92:	15 2b       	or	r17, r21
    6a94:	e2 14       	cp	r14, r2
    6a96:	f3 04       	cpc	r15, r3
    6a98:	04 05       	cpc	r16, r4
    6a9a:	15 05       	cpc	r17, r5
    6a9c:	e0 f4       	brcc	.+56     	; 0x6ad6 <__udivdi3+0xb0e>
    6a9e:	08 94       	sec
    6aa0:	a1 08       	sbc	r10, r1
    6aa2:	b1 08       	sbc	r11, r1
    6aa4:	c1 08       	sbc	r12, r1
    6aa6:	d1 08       	sbc	r13, r1
    6aa8:	e6 0c       	add	r14, r6
    6aaa:	f7 1c       	adc	r15, r7
    6aac:	08 1d       	adc	r16, r8
    6aae:	19 1d       	adc	r17, r9
    6ab0:	e6 14       	cp	r14, r6
    6ab2:	f7 04       	cpc	r15, r7
    6ab4:	08 05       	cpc	r16, r8
    6ab6:	19 05       	cpc	r17, r9
    6ab8:	70 f0       	brcs	.+28     	; 0x6ad6 <__udivdi3+0xb0e>
    6aba:	e2 14       	cp	r14, r2
    6abc:	f3 04       	cpc	r15, r3
    6abe:	04 05       	cpc	r16, r4
    6ac0:	15 05       	cpc	r17, r5
    6ac2:	48 f4       	brcc	.+18     	; 0x6ad6 <__udivdi3+0xb0e>
    6ac4:	08 94       	sec
    6ac6:	a1 08       	sbc	r10, r1
    6ac8:	b1 08       	sbc	r11, r1
    6aca:	c1 08       	sbc	r12, r1
    6acc:	d1 08       	sbc	r13, r1
    6ace:	e6 0c       	add	r14, r6
    6ad0:	f7 1c       	adc	r15, r7
    6ad2:	08 1d       	adc	r16, r8
    6ad4:	19 1d       	adc	r17, r9
    6ad6:	e2 18       	sub	r14, r2
    6ad8:	f3 08       	sbc	r15, r3
    6ada:	04 09       	sbc	r16, r4
    6adc:	15 09       	sbc	r17, r5
    6ade:	ed a2       	std	Y+37, r14	; 0x25
    6ae0:	fe a2       	std	Y+38, r15	; 0x26
    6ae2:	0f a3       	std	Y+39, r16	; 0x27
    6ae4:	18 a7       	std	Y+40, r17	; 0x28
    6ae6:	a1 96       	adiw	r28, 0x21	; 33
    6ae8:	6c ac       	ldd	r6, Y+60	; 0x3c
    6aea:	7d ac       	ldd	r7, Y+61	; 0x3d
    6aec:	8e ac       	ldd	r8, Y+62	; 0x3e
    6aee:	9f ac       	ldd	r9, Y+63	; 0x3f
    6af0:	a1 97       	sbiw	r28, 0x21	; 33
    6af2:	d3 01       	movw	r26, r6
    6af4:	99 27       	eor	r25, r25
    6af6:	88 27       	eor	r24, r24
    6af8:	a8 2a       	or	r10, r24
    6afa:	b9 2a       	or	r11, r25
    6afc:	ca 2a       	or	r12, r26
    6afe:	db 2a       	or	r13, r27
    6b00:	ad aa       	std	Y+53, r10	; 0x35
    6b02:	be aa       	std	Y+54, r11	; 0x36
    6b04:	cf aa       	std	Y+55, r12	; 0x37
    6b06:	d8 ae       	std	Y+56, r13	; 0x38
    6b08:	86 01       	movw	r16, r12
    6b0a:	75 01       	movw	r14, r10
    6b0c:	2f ef       	ldi	r18, 0xFF	; 255
    6b0e:	3f ef       	ldi	r19, 0xFF	; 255
    6b10:	40 e0       	ldi	r20, 0x00	; 0
    6b12:	50 e0       	ldi	r21, 0x00	; 0
    6b14:	e2 22       	and	r14, r18
    6b16:	f3 22       	and	r15, r19
    6b18:	04 23       	and	r16, r20
    6b1a:	15 23       	and	r17, r21
    6b1c:	c6 01       	movw	r24, r12
    6b1e:	aa 27       	eor	r26, r26
    6b20:	bb 27       	eor	r27, r27
    6b22:	a9 96       	adiw	r28, 0x29	; 41
    6b24:	8c af       	std	Y+60, r24	; 0x3c
    6b26:	9d af       	std	Y+61, r25	; 0x3d
    6b28:	ae af       	std	Y+62, r26	; 0x3e
    6b2a:	bf af       	std	Y+63, r27	; 0x3f
    6b2c:	a9 97       	sbiw	r28, 0x29	; 41
    6b2e:	a9 a0       	ldd	r10, Y+33	; 0x21
    6b30:	ba a0       	ldd	r11, Y+34	; 0x22
    6b32:	cb a0       	ldd	r12, Y+35	; 0x23
    6b34:	dc a0       	ldd	r13, Y+36	; 0x24
    6b36:	a2 22       	and	r10, r18
    6b38:	b3 22       	and	r11, r19
    6b3a:	c4 22       	and	r12, r20
    6b3c:	d5 22       	and	r13, r21
    6b3e:	69 a0       	ldd	r6, Y+33	; 0x21
    6b40:	7a a0       	ldd	r7, Y+34	; 0x22
    6b42:	8b a0       	ldd	r8, Y+35	; 0x23
    6b44:	9c a0       	ldd	r9, Y+36	; 0x24
    6b46:	14 01       	movw	r2, r8
    6b48:	44 24       	eor	r4, r4
    6b4a:	55 24       	eor	r5, r5
    6b4c:	c8 01       	movw	r24, r16
    6b4e:	b7 01       	movw	r22, r14
    6b50:	a6 01       	movw	r20, r12
    6b52:	95 01       	movw	r18, r10
    6b54:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6b58:	a5 96       	adiw	r28, 0x25	; 37
    6b5a:	6c af       	std	Y+60, r22	; 0x3c
    6b5c:	7d af       	std	Y+61, r23	; 0x3d
    6b5e:	8e af       	std	Y+62, r24	; 0x3e
    6b60:	9f af       	std	Y+63, r25	; 0x3f
    6b62:	a5 97       	sbiw	r28, 0x25	; 37
    6b64:	c8 01       	movw	r24, r16
    6b66:	b7 01       	movw	r22, r14
    6b68:	a2 01       	movw	r20, r4
    6b6a:	91 01       	movw	r18, r2
    6b6c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6b70:	3b 01       	movw	r6, r22
    6b72:	4c 01       	movw	r8, r24
    6b74:	a9 96       	adiw	r28, 0x29	; 41
    6b76:	6c ad       	ldd	r22, Y+60	; 0x3c
    6b78:	7d ad       	ldd	r23, Y+61	; 0x3d
    6b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b7e:	a9 97       	sbiw	r28, 0x29	; 41
    6b80:	a6 01       	movw	r20, r12
    6b82:	95 01       	movw	r18, r10
    6b84:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6b88:	7b 01       	movw	r14, r22
    6b8a:	8c 01       	movw	r16, r24
    6b8c:	a9 96       	adiw	r28, 0x29	; 41
    6b8e:	6c ad       	ldd	r22, Y+60	; 0x3c
    6b90:	7d ad       	ldd	r23, Y+61	; 0x3d
    6b92:	8e ad       	ldd	r24, Y+62	; 0x3e
    6b94:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b96:	a9 97       	sbiw	r28, 0x29	; 41
    6b98:	a2 01       	movw	r20, r4
    6b9a:	91 01       	movw	r18, r2
    6b9c:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__mulsi3>
    6ba0:	5b 01       	movw	r10, r22
    6ba2:	6c 01       	movw	r12, r24
    6ba4:	a8 01       	movw	r20, r16
    6ba6:	97 01       	movw	r18, r14
    6ba8:	26 0d       	add	r18, r6
    6baa:	37 1d       	adc	r19, r7
    6bac:	48 1d       	adc	r20, r8
    6bae:	59 1d       	adc	r21, r9
    6bb0:	a5 96       	adiw	r28, 0x25	; 37
    6bb2:	6c ac       	ldd	r6, Y+60	; 0x3c
    6bb4:	7d ac       	ldd	r7, Y+61	; 0x3d
    6bb6:	8e ac       	ldd	r8, Y+62	; 0x3e
    6bb8:	9f ac       	ldd	r9, Y+63	; 0x3f
    6bba:	a5 97       	sbiw	r28, 0x25	; 37
    6bbc:	c4 01       	movw	r24, r8
    6bbe:	aa 27       	eor	r26, r26
    6bc0:	bb 27       	eor	r27, r27
    6bc2:	28 0f       	add	r18, r24
    6bc4:	39 1f       	adc	r19, r25
    6bc6:	4a 1f       	adc	r20, r26
    6bc8:	5b 1f       	adc	r21, r27
    6bca:	2e 15       	cp	r18, r14
    6bcc:	3f 05       	cpc	r19, r15
    6bce:	40 07       	cpc	r20, r16
    6bd0:	51 07       	cpc	r21, r17
    6bd2:	48 f4       	brcc	.+18     	; 0x6be6 <__udivdi3+0xc1e>
    6bd4:	e1 2c       	mov	r14, r1
    6bd6:	f1 2c       	mov	r15, r1
    6bd8:	61 e0       	ldi	r22, 0x01	; 1
    6bda:	06 2f       	mov	r16, r22
    6bdc:	11 2d       	mov	r17, r1
    6bde:	ae 0c       	add	r10, r14
    6be0:	bf 1c       	adc	r11, r15
    6be2:	c0 1e       	adc	r12, r16
    6be4:	d1 1e       	adc	r13, r17
    6be6:	ca 01       	movw	r24, r20
    6be8:	aa 27       	eor	r26, r26
    6bea:	bb 27       	eor	r27, r27
    6bec:	a8 0e       	add	r10, r24
    6bee:	b9 1e       	adc	r11, r25
    6bf0:	ca 1e       	adc	r12, r26
    6bf2:	db 1e       	adc	r13, r27
    6bf4:	6d a0       	ldd	r6, Y+37	; 0x25
    6bf6:	7e a0       	ldd	r7, Y+38	; 0x26
    6bf8:	8f a0       	ldd	r8, Y+39	; 0x27
    6bfa:	98 a4       	ldd	r9, Y+40	; 0x28
    6bfc:	6a 14       	cp	r6, r10
    6bfe:	7b 04       	cpc	r7, r11
    6c00:	8c 04       	cpc	r8, r12
    6c02:	9d 04       	cpc	r9, r13
    6c04:	28 f1       	brcs	.+74     	; 0x6c50 <__udivdi3+0xc88>
    6c06:	a6 14       	cp	r10, r6
    6c08:	b7 04       	cpc	r11, r7
    6c0a:	c8 04       	cpc	r12, r8
    6c0c:	d9 04       	cpc	r13, r9
    6c0e:	d1 f5       	brne	.+116    	; 0x6c84 <__udivdi3+0xcbc>
    6c10:	d9 01       	movw	r26, r18
    6c12:	99 27       	eor	r25, r25
    6c14:	88 27       	eor	r24, r24
    6c16:	a5 96       	adiw	r28, 0x25	; 37
    6c18:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c20:	a5 97       	sbiw	r28, 0x25	; 37
    6c22:	40 70       	andi	r20, 0x00	; 0
    6c24:	50 70       	andi	r21, 0x00	; 0
    6c26:	82 0f       	add	r24, r18
    6c28:	93 1f       	adc	r25, r19
    6c2a:	a4 1f       	adc	r26, r20
    6c2c:	b5 1f       	adc	r27, r21
    6c2e:	29 a9       	ldd	r18, Y+49	; 0x31
    6c30:	3a a9       	ldd	r19, Y+50	; 0x32
    6c32:	4b a9       	ldd	r20, Y+51	; 0x33
    6c34:	5c a9       	ldd	r21, Y+52	; 0x34
    6c36:	0d 8c       	ldd	r0, Y+29	; 0x1d
    6c38:	04 c0       	rjmp	.+8      	; 0x6c42 <__udivdi3+0xc7a>
    6c3a:	22 0f       	add	r18, r18
    6c3c:	33 1f       	adc	r19, r19
    6c3e:	44 1f       	adc	r20, r20
    6c40:	55 1f       	adc	r21, r21
    6c42:	0a 94       	dec	r0
    6c44:	d2 f7       	brpl	.-12     	; 0x6c3a <__udivdi3+0xc72>
    6c46:	28 17       	cp	r18, r24
    6c48:	39 07       	cpc	r19, r25
    6c4a:	4a 07       	cpc	r20, r26
    6c4c:	5b 07       	cpc	r21, r27
    6c4e:	d0 f4       	brcc	.+52     	; 0x6c84 <__udivdi3+0xcbc>
    6c50:	0d a9       	ldd	r16, Y+53	; 0x35
    6c52:	1e a9       	ldd	r17, Y+54	; 0x36
    6c54:	2f a9       	ldd	r18, Y+55	; 0x37
    6c56:	38 ad       	ldd	r19, Y+56	; 0x38
    6c58:	01 50       	subi	r16, 0x01	; 1
    6c5a:	10 40       	sbci	r17, 0x00	; 0
    6c5c:	20 40       	sbci	r18, 0x00	; 0
    6c5e:	30 40       	sbci	r19, 0x00	; 0
    6c60:	0d ab       	std	Y+53, r16	; 0x35
    6c62:	1e ab       	std	Y+54, r17	; 0x36
    6c64:	2f ab       	std	Y+55, r18	; 0x37
    6c66:	38 af       	std	Y+56, r19	; 0x38
    6c68:	0d c0       	rjmp	.+26     	; 0x6c84 <__udivdi3+0xcbc>
    6c6a:	1d aa       	std	Y+53, r1	; 0x35
    6c6c:	1e aa       	std	Y+54, r1	; 0x36
    6c6e:	1f aa       	std	Y+55, r1	; 0x37
    6c70:	18 ae       	std	Y+56, r1	; 0x38
    6c72:	08 c0       	rjmp	.+16     	; 0x6c84 <__udivdi3+0xcbc>
    6c74:	21 e0       	ldi	r18, 0x01	; 1
    6c76:	30 e0       	ldi	r19, 0x00	; 0
    6c78:	40 e0       	ldi	r20, 0x00	; 0
    6c7a:	50 e0       	ldi	r21, 0x00	; 0
    6c7c:	2d ab       	std	Y+53, r18	; 0x35
    6c7e:	3e ab       	std	Y+54, r19	; 0x36
    6c80:	4f ab       	std	Y+55, r20	; 0x37
    6c82:	58 af       	std	Y+56, r21	; 0x38
    6c84:	19 ae       	std	Y+57, r1	; 0x39
    6c86:	1a ae       	std	Y+58, r1	; 0x3a
    6c88:	1b ae       	std	Y+59, r1	; 0x3b
    6c8a:	1c ae       	std	Y+60, r1	; 0x3c
    6c8c:	88 e0       	ldi	r24, 0x08	; 8
    6c8e:	fe 01       	movw	r30, r28
    6c90:	71 96       	adiw	r30, 0x11	; 17
    6c92:	11 92       	st	Z+, r1
    6c94:	8a 95       	dec	r24
    6c96:	e9 f7       	brne	.-6      	; 0x6c92 <__udivdi3+0xcca>
    6c98:	8d a9       	ldd	r24, Y+53	; 0x35
    6c9a:	9e a9       	ldd	r25, Y+54	; 0x36
    6c9c:	af a9       	ldd	r26, Y+55	; 0x37
    6c9e:	b8 ad       	ldd	r27, Y+56	; 0x38
    6ca0:	89 8b       	std	Y+17, r24	; 0x11
    6ca2:	9a 8b       	std	Y+18, r25	; 0x12
    6ca4:	ab 8b       	std	Y+19, r26	; 0x13
    6ca6:	bc 8b       	std	Y+20, r27	; 0x14
    6ca8:	69 ac       	ldd	r6, Y+57	; 0x39
    6caa:	7a ac       	ldd	r7, Y+58	; 0x3a
    6cac:	8b ac       	ldd	r8, Y+59	; 0x3b
    6cae:	9c ac       	ldd	r9, Y+60	; 0x3c
    6cb0:	6d 8a       	std	Y+21, r6	; 0x15
    6cb2:	7e 8a       	std	Y+22, r7	; 0x16
    6cb4:	8f 8a       	std	Y+23, r8	; 0x17
    6cb6:	98 8e       	std	Y+24, r9	; 0x18
    6cb8:	29 88       	ldd	r2, Y+17	; 0x11
    6cba:	3a 88       	ldd	r3, Y+18	; 0x12
    6cbc:	4b 88       	ldd	r4, Y+19	; 0x13
    6cbe:	5c 88       	ldd	r5, Y+20	; 0x14
    6cc0:	6d 88       	ldd	r6, Y+21	; 0x15
    6cc2:	7e 88       	ldd	r7, Y+22	; 0x16
    6cc4:	8f 88       	ldd	r8, Y+23	; 0x17
    6cc6:	98 8c       	ldd	r9, Y+24	; 0x18
    6cc8:	22 2d       	mov	r18, r2
    6cca:	33 2d       	mov	r19, r3
    6ccc:	44 2d       	mov	r20, r4
    6cce:	55 2d       	mov	r21, r5
    6cd0:	66 2d       	mov	r22, r6
    6cd2:	77 2d       	mov	r23, r7
    6cd4:	88 2d       	mov	r24, r8
    6cd6:	99 2d       	mov	r25, r9
    6cd8:	e2 e1       	ldi	r30, 0x12	; 18
    6cda:	c4 59       	subi	r28, 0x94	; 148
    6cdc:	df 4f       	sbci	r29, 0xFF	; 255
    6cde:	0c 94 69 39 	jmp	0x72d2	; 0x72d2 <__epilogue_restores__>

00006ce2 <strchr_P>:
    6ce2:	fc 01       	movw	r30, r24
    6ce4:	05 90       	lpm	r0, Z+
    6ce6:	06 16       	cp	r0, r22
    6ce8:	21 f0       	breq	.+8      	; 0x6cf2 <strchr_P+0x10>
    6cea:	00 20       	and	r0, r0
    6cec:	d9 f7       	brne	.-10     	; 0x6ce4 <strchr_P+0x2>
    6cee:	c0 01       	movw	r24, r0
    6cf0:	08 95       	ret
    6cf2:	31 97       	sbiw	r30, 0x01	; 1
    6cf4:	cf 01       	movw	r24, r30
    6cf6:	08 95       	ret

00006cf8 <fdevopen>:
	: "r" (flag),				\
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
    6cf8:	ef 92       	push	r14
    6cfa:	ff 92       	push	r15
    6cfc:	0f 93       	push	r16
    6cfe:	1f 93       	push	r17
    6d00:	cf 93       	push	r28
    6d02:	df 93       	push	r29
    6d04:	8c 01       	movw	r16, r24
    6d06:	7b 01       	movw	r14, r22
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    6d08:	89 2b       	or	r24, r25
    6d0a:	11 f4       	brne	.+4      	; 0x6d10 <fdevopen+0x18>
    6d0c:	67 2b       	or	r22, r23
    6d0e:	d1 f1       	breq	.+116    	; 0x6d84 <fdevopen+0x8c>
	"sbrc	%2,%3	\n\t"			\
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    6d10:	6e e0       	ldi	r22, 0x0E	; 14
    6d12:	70 e0       	ldi	r23, 0x00	; 0
    6d14:	81 e0       	ldi	r24, 0x01	; 1
    6d16:	90 e0       	ldi	r25, 0x00	; 0
    6d18:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <calloc>
    6d1c:	fc 01       	movw	r30, r24
    6d1e:	00 97       	sbiw	r24, 0x00	; 0
    6d20:	89 f1       	breq	.+98     	; 0x6d84 <fdevopen+0x8c>
    6d22:	dc 01       	movw	r26, r24
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    6d24:	80 e8       	ldi	r24, 0x80	; 128
    6d26:	83 83       	std	Z+3, r24	; 0x03
	: "=r" (__c),				\
	  "+z" (pnt)				\
    6d28:	e1 14       	cp	r14, r1
    6d2a:	f1 04       	cpc	r15, r1
    6d2c:	71 f0       	breq	.+28     	; 0x6d4a <fdevopen+0x52>
	: "r" (flag),				\
    6d2e:	f3 86       	std	Z+11, r15	; 0x0b
    6d30:	e2 86       	std	Z+10, r14	; 0x0a
	  "I" (ntz(mask))			\
    6d32:	81 e8       	ldi	r24, 0x81	; 129
    6d34:	83 83       	std	Z+3, r24	; 0x03
	: "r0"					\
    6d36:	80 91 91 05 	lds	r24, 0x0591
    6d3a:	90 91 92 05 	lds	r25, 0x0592
    6d3e:	89 2b       	or	r24, r25
    6d40:	21 f4       	brne	.+8      	; 0x6d4a <fdevopen+0x52>
    );						\
    6d42:	f0 93 92 05 	sts	0x0592, r31
    6d46:	e0 93 91 05 	sts	0x0591, r30
    __c;					\
})
#else
    6d4a:	01 15       	cp	r16, r1
    6d4c:	11 05       	cpc	r17, r1
    6d4e:	e1 f0       	breq	.+56     	; 0x6d88 <fdevopen+0x90>
# define GETBYTE(flag, mask, pnt)	({	\
    6d50:	11 87       	std	Z+9, r17	; 0x09
    6d52:	00 87       	std	Z+8, r16	; 0x08
    unsigned char __c;				\
    6d54:	83 81       	ldd	r24, Z+3	; 0x03
    6d56:	82 60       	ori	r24, 0x02	; 2
    6d58:	83 83       	std	Z+3, r24	; 0x03
    __c = ((flag) & (mask))			\
    6d5a:	80 91 93 05 	lds	r24, 0x0593
    6d5e:	90 91 94 05 	lds	r25, 0x0594
    6d62:	89 2b       	or	r24, r25
    6d64:	89 f4       	brne	.+34     	; 0x6d88 <fdevopen+0x90>
	  ? pgm_read_byte(pnt) : *pnt;		\
    6d66:	f0 93 94 05 	sts	0x0594, r31
    6d6a:	e0 93 93 05 	sts	0x0593, r30
    pnt++;					\
    6d6e:	80 91 95 05 	lds	r24, 0x0595
    6d72:	90 91 96 05 	lds	r25, 0x0596
    6d76:	89 2b       	or	r24, r25
    6d78:	39 f4       	brne	.+14     	; 0x6d88 <fdevopen+0x90>
    __c;					\
    6d7a:	f0 93 96 05 	sts	0x0596, r31
    6d7e:	e0 93 95 05 	sts	0x0595, r30
    6d82:	02 c0       	rjmp	.+4      	; 0x6d88 <fdevopen+0x90>
    6d84:	a0 e0       	ldi	r26, 0x00	; 0
    6d86:	b0 e0       	ldi	r27, 0x00	; 0
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN
    6d88:	cd 01       	movw	r24, r26
    6d8a:	e6 e0       	ldi	r30, 0x06	; 6
    6d8c:	cd b7       	in	r28, 0x3d	; 61
    6d8e:	de b7       	in	r29, 0x3e	; 62
    6d90:	0c 94 75 39 	jmp	0x72ea	; 0x72ea <__epilogue_restores__+0x18>

00006d94 <fputc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6d94:	0f 93       	push	r16
    6d96:	1f 93       	push	r17
    6d98:	cf 93       	push	r28
    6d9a:	df 93       	push	r29
    6d9c:	8c 01       	movw	r16, r24
    6d9e:	eb 01       	movw	r28, r22
#include <stdlib.h>
#include <string.h>
    6da0:	8b 81       	ldd	r24, Y+3	; 0x03
    6da2:	99 27       	eor	r25, r25
    6da4:	81 ff       	sbrs	r24, 1
    6da6:	1b c0       	rjmp	.+54     	; 0x6dde <fputc+0x4a>

#include "stdio_private.h"
#include "ftoa_engine.h"
    6da8:	82 ff       	sbrs	r24, 2
    6daa:	0d c0       	rjmp	.+26     	; 0x6dc6 <fputc+0x32>
#include "ntz.h"
    6dac:	2e 81       	ldd	r18, Y+6	; 0x06
    6dae:	3f 81       	ldd	r19, Y+7	; 0x07
    6db0:	8c 81       	ldd	r24, Y+4	; 0x04
    6db2:	9d 81       	ldd	r25, Y+5	; 0x05
    6db4:	28 17       	cp	r18, r24
    6db6:	39 07       	cpc	r19, r25
    6db8:	64 f4       	brge	.+24     	; 0x6dd2 <fputc+0x3e>
#include "xtoa_fast.h"
    6dba:	e8 81       	ld	r30, Y
    6dbc:	f9 81       	ldd	r31, Y+1	; 0x01
    6dbe:	01 93       	st	Z+, r16
    6dc0:	f9 83       	std	Y+1, r31	; 0x01
    6dc2:	e8 83       	st	Y, r30
    6dc4:	06 c0       	rjmp	.+12     	; 0x6dd2 <fputc+0x3e>

/*
 * This file can be compiled into more than one flavour.  The default
 * is to offer the usual modifiers and integer formatting support
    6dc6:	e8 85       	ldd	r30, Y+8	; 0x08
    6dc8:	f9 85       	ldd	r31, Y+9	; 0x09
    6dca:	80 2f       	mov	r24, r16
    6dcc:	09 95       	icall
    6dce:	89 2b       	or	r24, r25
    6dd0:	31 f4       	brne	.+12     	; 0x6dde <fputc+0x4a>
 * (level 2).  Level 1 maintains a minimal version that just offers
    6dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    6dd4:	9f 81       	ldd	r25, Y+7	; 0x07
    6dd6:	01 96       	adiw	r24, 0x01	; 1
    6dd8:	9f 83       	std	Y+7, r25	; 0x07
    6dda:	8e 83       	std	Y+6, r24	; 0x06
    6ddc:	02 c0       	rjmp	.+4      	; 0x6de2 <fputc+0x4e>
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    6dde:	0f ef       	ldi	r16, 0xFF	; 255
    6de0:	1f ef       	ldi	r17, 0xFF	; 255
 * intented for floating point support.
 */

#ifndef PRINTF_LEVEL
    6de2:	c8 01       	movw	r24, r16
    6de4:	df 91       	pop	r29
    6de6:	cf 91       	pop	r28
    6de8:	1f 91       	pop	r17
    6dea:	0f 91       	pop	r16
    6dec:	08 95       	ret

00006dee <printf>:

/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
    6dee:	a2 e0       	ldi	r26, 0x02	; 2
    6df0:	b0 e0       	ldi	r27, 0x00	; 0
    6df2:	ed ef       	ldi	r30, 0xFD	; 253
    6df4:	f6 e3       	ldi	r31, 0x36	; 54
    6df6:	0c 94 5d 39 	jmp	0x72ba	; 0x72ba <__prologue_saves__+0x20>
    6dfa:	fe 01       	movw	r30, r28
    6dfc:	37 96       	adiw	r30, 0x07	; 7
    6dfe:	61 91       	ld	r22, Z+
    6e00:	71 91       	ld	r23, Z+
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

    6e02:	fa 83       	std	Y+2, r31	; 0x02
    6e04:	e9 83       	std	Y+1, r30	; 0x01
#include "stdio_private.h"
    6e06:	af 01       	movw	r20, r30
    6e08:	80 91 93 05 	lds	r24, 0x0593
    6e0c:	90 91 94 05 	lds	r25, 0x0594
    6e10:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <vfprintf>
    6e14:	e2 e0       	ldi	r30, 0x02	; 2
    6e16:	22 96       	adiw	r28, 0x02	; 2
    6e18:	0c 94 79 39 	jmp	0x72f2	; 0x72f2 <__epilogue_restores__+0x20>

00006e1c <puts>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6e1c:	0f 93       	push	r16
    6e1e:	1f 93       	push	r17
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	8c 01       	movw	r16, r24
#include <stdlib.h>
#include <string.h>

#include "stdio_private.h"
    6e26:	e0 91 93 05 	lds	r30, 0x0593
    6e2a:	f0 91 94 05 	lds	r31, 0x0594
    6e2e:	83 81       	ldd	r24, Z+3	; 0x03
    6e30:	81 ff       	sbrs	r24, 1
    6e32:	1f c0       	rjmp	.+62     	; 0x6e72 <puts+0x56>
    6e34:	c0 e0       	ldi	r28, 0x00	; 0
    6e36:	d0 e0       	ldi	r29, 0x00	; 0
    6e38:	0a c0       	rjmp	.+20     	; 0x6e4e <puts+0x32>
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"

    6e3a:	fd 01       	movw	r30, r26
    6e3c:	20 85       	ldd	r18, Z+8	; 0x08
    6e3e:	31 85       	ldd	r19, Z+9	; 0x09
    6e40:	bd 01       	movw	r22, r26
    6e42:	f9 01       	movw	r30, r18
    6e44:	09 95       	icall
    6e46:	89 2b       	or	r24, r25
    6e48:	11 f0       	breq	.+4      	; 0x6e4e <puts+0x32>
    6e4a:	cf ef       	ldi	r28, 0xFF	; 255
    6e4c:	df ef       	ldi	r29, 0xFF	; 255
#include <string.h>

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    6e4e:	f8 01       	movw	r30, r16
    6e50:	81 91       	ld	r24, Z+
    6e52:	8f 01       	movw	r16, r30
    6e54:	a0 91 93 05 	lds	r26, 0x0593
    6e58:	b0 91 94 05 	lds	r27, 0x0594
    6e5c:	88 23       	and	r24, r24
    6e5e:	69 f7       	brne	.-38     	; 0x6e3a <puts+0x1e>

/*
 * This file can be compiled into more than one flavour.  The default
    6e60:	fd 01       	movw	r30, r26
    6e62:	20 85       	ldd	r18, Z+8	; 0x08
    6e64:	31 85       	ldd	r19, Z+9	; 0x09
    6e66:	bd 01       	movw	r22, r26
    6e68:	8a e0       	ldi	r24, 0x0A	; 10
    6e6a:	f9 01       	movw	r30, r18
    6e6c:	09 95       	icall
    6e6e:	89 2b       	or	r24, r25
    6e70:	11 f0       	breq	.+4      	; 0x6e76 <puts+0x5a>
    6e72:	cf ef       	ldi	r28, 0xFF	; 255
    6e74:	df ef       	ldi	r29, 0xFF	; 255
 * is to offer the usual modifiers and integer formatting support
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
 * intented for floating point support.
    6e76:	ce 01       	movw	r24, r28
    6e78:	df 91       	pop	r29
    6e7a:	cf 91       	pop	r28
    6e7c:	1f 91       	pop	r17
    6e7e:	0f 91       	pop	r16
    6e80:	08 95       	ret

00006e82 <sprintf>:

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
    6e82:	a0 e1       	ldi	r26, 0x10	; 16
    6e84:	b0 e0       	ldi	r27, 0x00	; 0
    6e86:	e7 e4       	ldi	r30, 0x47	; 71
    6e88:	f7 e3       	ldi	r31, 0x37	; 55
    6e8a:	0c 94 5b 39 	jmp	0x72b6	; 0x72b6 <__prologue_saves__+0x1c>
    6e8e:	0f 89       	ldd	r16, Y+23	; 0x17
    6e90:	18 8d       	ldd	r17, Y+24	; 0x18

#include "stdio_private.h"
#include "ftoa_engine.h"
#include "ntz.h"
#include "xtoa_fast.h"
    6e92:	86 e0       	ldi	r24, 0x06	; 6
    6e94:	8e 83       	std	Y+6, r24	; 0x06

    6e96:	1c 83       	std	Y+4, r17	; 0x04
    6e98:	0b 83       	std	Y+3, r16	; 0x03
/*
    6e9a:	8f ef       	ldi	r24, 0xFF	; 255
    6e9c:	9f e7       	ldi	r25, 0x7F	; 127
    6e9e:	98 87       	std	Y+8, r25	; 0x08
    6ea0:	8f 83       	std	Y+7, r24	; 0x07
 * This file can be compiled into more than one flavour.  The default
    6ea2:	ae 01       	movw	r20, r28
    6ea4:	45 5e       	subi	r20, 0xE5	; 229
    6ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea8:	5a 83       	std	Y+2, r21	; 0x02
    6eaa:	49 83       	std	Y+1, r20	; 0x01
 * is to offer the usual modifiers and integer formatting support
    6eac:	69 8d       	ldd	r22, Y+25	; 0x19
    6eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6eb0:	ce 01       	movw	r24, r28
    6eb2:	03 96       	adiw	r24, 0x03	; 3
    6eb4:	0e 94 b4 2e 	call	0x5d68	; 0x5d68 <vfprintf>
 * (level 2).  Level 1 maintains a minimal version that just offers
 * integer formatting, but no modifier support whatsoever.  Level 3 is
    6eb8:	29 85       	ldd	r18, Y+9	; 0x09
    6eba:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ebc:	02 0f       	add	r16, r18
    6ebe:	13 1f       	adc	r17, r19
    6ec0:	f8 01       	movw	r30, r16
    6ec2:	10 82       	st	Z, r1
    6ec4:	e4 e0       	ldi	r30, 0x04	; 4
    6ec6:	60 96       	adiw	r28, 0x10	; 16
    6ec8:	0c 94 77 39 	jmp	0x72ee	; 0x72ee <__epilogue_restores__+0x1c>

00006ecc <__ultoa_invert>:
    6ecc:	fa 01       	movw	r30, r20
    6ece:	aa 27       	eor	r26, r26
    6ed0:	28 30       	cpi	r18, 0x08	; 8
    6ed2:	51 f1       	breq	.+84     	; 0x6f28 <__ultoa_invert+0x5c>
    6ed4:	20 31       	cpi	r18, 0x10	; 16
    6ed6:	81 f1       	breq	.+96     	; 0x6f38 <__ultoa_invert+0x6c>
    6ed8:	e8 94       	clt
    6eda:	6f 93       	push	r22
    6edc:	6e 7f       	andi	r22, 0xFE	; 254
    6ede:	6e 5f       	subi	r22, 0xFE	; 254
    6ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ee6:	af 4f       	sbci	r26, 0xFF	; 255
    6ee8:	b1 e0       	ldi	r27, 0x01	; 1
    6eea:	3e d0       	rcall	.+124    	; 0x6f68 <__ultoa_invert+0x9c>
    6eec:	b4 e0       	ldi	r27, 0x04	; 4
    6eee:	3c d0       	rcall	.+120    	; 0x6f68 <__ultoa_invert+0x9c>
    6ef0:	67 0f       	add	r22, r23
    6ef2:	78 1f       	adc	r23, r24
    6ef4:	89 1f       	adc	r24, r25
    6ef6:	9a 1f       	adc	r25, r26
    6ef8:	a1 1d       	adc	r26, r1
    6efa:	68 0f       	add	r22, r24
    6efc:	79 1f       	adc	r23, r25
    6efe:	8a 1f       	adc	r24, r26
    6f00:	91 1d       	adc	r25, r1
    6f02:	a1 1d       	adc	r26, r1
    6f04:	6a 0f       	add	r22, r26
    6f06:	71 1d       	adc	r23, r1
    6f08:	81 1d       	adc	r24, r1
    6f0a:	91 1d       	adc	r25, r1
    6f0c:	a1 1d       	adc	r26, r1
    6f0e:	20 d0       	rcall	.+64     	; 0x6f50 <__ultoa_invert+0x84>
    6f10:	09 f4       	brne	.+2      	; 0x6f14 <__ultoa_invert+0x48>
    6f12:	68 94       	set
    6f14:	3f 91       	pop	r19
    6f16:	2a e0       	ldi	r18, 0x0A	; 10
    6f18:	26 9f       	mul	r18, r22
    6f1a:	11 24       	eor	r1, r1
    6f1c:	30 19       	sub	r19, r0
    6f1e:	30 5d       	subi	r19, 0xD0	; 208
    6f20:	31 93       	st	Z+, r19
    6f22:	de f6       	brtc	.-74     	; 0x6eda <__ultoa_invert+0xe>
    6f24:	cf 01       	movw	r24, r30
    6f26:	08 95       	ret
    6f28:	46 2f       	mov	r20, r22
    6f2a:	47 70       	andi	r20, 0x07	; 7
    6f2c:	40 5d       	subi	r20, 0xD0	; 208
    6f2e:	41 93       	st	Z+, r20
    6f30:	b3 e0       	ldi	r27, 0x03	; 3
    6f32:	0f d0       	rcall	.+30     	; 0x6f52 <__ultoa_invert+0x86>
    6f34:	c9 f7       	brne	.-14     	; 0x6f28 <__ultoa_invert+0x5c>
    6f36:	f6 cf       	rjmp	.-20     	; 0x6f24 <__ultoa_invert+0x58>
    6f38:	46 2f       	mov	r20, r22
    6f3a:	4f 70       	andi	r20, 0x0F	; 15
    6f3c:	40 5d       	subi	r20, 0xD0	; 208
    6f3e:	4a 33       	cpi	r20, 0x3A	; 58
    6f40:	18 f0       	brcs	.+6      	; 0x6f48 <__ultoa_invert+0x7c>
    6f42:	49 5d       	subi	r20, 0xD9	; 217
    6f44:	31 fd       	sbrc	r19, 1
    6f46:	40 52       	subi	r20, 0x20	; 32
    6f48:	41 93       	st	Z+, r20
    6f4a:	02 d0       	rcall	.+4      	; 0x6f50 <__ultoa_invert+0x84>
    6f4c:	a9 f7       	brne	.-22     	; 0x6f38 <__ultoa_invert+0x6c>
    6f4e:	ea cf       	rjmp	.-44     	; 0x6f24 <__ultoa_invert+0x58>
    6f50:	b4 e0       	ldi	r27, 0x04	; 4
    6f52:	a6 95       	lsr	r26
    6f54:	97 95       	ror	r25
    6f56:	87 95       	ror	r24
    6f58:	77 95       	ror	r23
    6f5a:	67 95       	ror	r22
    6f5c:	ba 95       	dec	r27
    6f5e:	c9 f7       	brne	.-14     	; 0x6f52 <__ultoa_invert+0x86>
    6f60:	00 97       	sbiw	r24, 0x00	; 0
    6f62:	61 05       	cpc	r22, r1
    6f64:	71 05       	cpc	r23, r1
    6f66:	08 95       	ret
    6f68:	9b 01       	movw	r18, r22
    6f6a:	ac 01       	movw	r20, r24
    6f6c:	0a 2e       	mov	r0, r26
    6f6e:	06 94       	lsr	r0
    6f70:	57 95       	ror	r21
    6f72:	47 95       	ror	r20
    6f74:	37 95       	ror	r19
    6f76:	27 95       	ror	r18
    6f78:	ba 95       	dec	r27
    6f7a:	c9 f7       	brne	.-14     	; 0x6f6e <__ultoa_invert+0xa2>
    6f7c:	62 0f       	add	r22, r18
    6f7e:	73 1f       	adc	r23, r19
    6f80:	84 1f       	adc	r24, r20
    6f82:	95 1f       	adc	r25, r21
    6f84:	a0 1d       	adc	r26, r0
    6f86:	08 95       	ret

00006f88 <calloc>:
/* From: Id: printf_p_new.c,v 1.1.1.9 2002/10/15 20:10:28 joerg_wunsch Exp */
/* $Id: vfprintf.c,v 1.18 2007/03/11 03:34:51 dmix Exp $ */

#include <avr/pgmspace.h>
#include <stdarg.h>
#include <stdio.h>
    6f88:	0f 93       	push	r16
    6f8a:	1f 93       	push	r17
    6f8c:	cf 93       	push	r28
    6f8e:	df 93       	push	r29
#include <stdlib.h>
#include <string.h>

    6f90:	68 9f       	mul	r22, r24
    6f92:	80 01       	movw	r16, r0
    6f94:	69 9f       	mul	r22, r25
    6f96:	10 0d       	add	r17, r0
    6f98:	78 9f       	mul	r23, r24
    6f9a:	10 0d       	add	r17, r0
    6f9c:	11 24       	eor	r1, r1
    6f9e:	c8 01       	movw	r24, r16
    6fa0:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <malloc>
    6fa4:	ec 01       	movw	r28, r24
    6fa6:	00 97       	sbiw	r24, 0x00	; 0
    6fa8:	29 f0       	breq	.+10     	; 0x6fb4 <calloc+0x2c>
#include "stdio_private.h"
#include "ftoa_engine.h"
    6faa:	a8 01       	movw	r20, r16
    6fac:	60 e0       	ldi	r22, 0x00	; 0
    6fae:	70 e0       	ldi	r23, 0x00	; 0
    6fb0:	0e 94 de 38 	call	0x71bc	; 0x71bc <memset>
#include "ntz.h"
#include "xtoa_fast.h"
    6fb4:	ce 01       	movw	r24, r28
    6fb6:	df 91       	pop	r29
    6fb8:	cf 91       	pop	r28
    6fba:	1f 91       	pop	r17
    6fbc:	0f 91       	pop	r16
    6fbe:	08 95       	ret

00006fc0 <malloc>:
#else
# error "Not a known printf level."
#endif

#ifndef	__AVR_HAVE_LPMX__
# if  defined(__AVR_ENHANCED__) && __AVR_ENHANCED__
    6fc0:	cf 93       	push	r28
    6fc2:	df 93       	push	r29
    6fc4:	ac 01       	movw	r20, r24
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
	"lpm	%0,Z+	\n\t"			\
	"sbrs	%2,%3	\n\t"			\
    6fc6:	02 97       	sbiw	r24, 0x02	; 2
    6fc8:	10 f4       	brcc	.+4      	; 0x6fce <malloc+0xe>
    6fca:	42 e0       	ldi	r20, 0x02	; 2
    6fcc:	50 e0       	ldi	r21, 0x00	; 0
	  "I" (ntz(mask))			\
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    6fce:	a0 91 99 05 	lds	r26, 0x0599
    6fd2:	b0 91 9a 05 	lds	r27, 0x059A
    6fd6:	fd 01       	movw	r30, r26
    6fd8:	c0 e0       	ldi	r28, 0x00	; 0
    6fda:	d0 e0       	ldi	r29, 0x00	; 0
    6fdc:	20 e0       	ldi	r18, 0x00	; 0
    6fde:	30 e0       	ldi	r19, 0x00	; 0
    6fe0:	20 c0       	rjmp	.+64     	; 0x7022 <malloc+0x62>
    unsigned char __c;				\
    asm (					\
	"sbrc	%2,%3	\n\t"			\
    6fe2:	80 81       	ld	r24, Z
    6fe4:	91 81       	ldd	r25, Z+1	; 0x01
    6fe6:	84 17       	cp	r24, r20
    6fe8:	95 07       	cpc	r25, r21
    6fea:	69 f4       	brne	.+26     	; 0x7006 <malloc+0x46>
    6fec:	82 81       	ldd	r24, Z+2	; 0x02
    6fee:	93 81       	ldd	r25, Z+3	; 0x03
	"lpm		\n\t"			\
	"sbrs	%2,%3	\n\t"			\
	"ld	r0,Z	\n\t"			\
	"adiw	r30,1	\n\t"			\
	"mov	%0,r0	"			\
    6ff0:	20 97       	sbiw	r28, 0x00	; 0
    6ff2:	19 f0       	breq	.+6      	; 0x6ffa <malloc+0x3a>
	: "=r" (__c),				\
    6ff4:	9b 83       	std	Y+3, r25	; 0x03
    6ff6:	8a 83       	std	Y+2, r24	; 0x02
    6ff8:	04 c0       	rjmp	.+8      	; 0x7002 <malloc+0x42>
	  "+z" (pnt)				\
	: "r" (flag),				\
    6ffa:	90 93 9a 05 	sts	0x059A, r25
    6ffe:	80 93 99 05 	sts	0x0599, r24
	  "I" (ntz(mask))			\
    7002:	9f 01       	movw	r18, r30
    7004:	32 c0       	rjmp	.+100    	; 0x706a <malloc+0xaa>
	: "r0"					\
    );						\
    7006:	48 17       	cp	r20, r24
    7008:	59 07       	cpc	r21, r25
    700a:	38 f4       	brcc	.+14     	; 0x701a <malloc+0x5a>
    __c;					\
    700c:	21 15       	cp	r18, r1
    700e:	31 05       	cpc	r19, r1
    7010:	19 f0       	breq	.+6      	; 0x7018 <malloc+0x58>
    7012:	82 17       	cp	r24, r18
    7014:	93 07       	cpc	r25, r19
    7016:	08 f4       	brcc	.+2      	; 0x701a <malloc+0x5a>
    7018:	9c 01       	movw	r18, r24
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    asm (					\
    701a:	ef 01       	movw	r28, r30
    701c:	02 80       	ldd	r0, Z+2	; 0x02
    701e:	f3 81       	ldd	r31, Z+3	; 0x03
    7020:	e0 2d       	mov	r30, r0
    );						\
    __c;					\
})
#elif	1
# define GETBYTE(flag, mask, pnt)	({	\
    unsigned char __c;				\
    7022:	30 97       	sbiw	r30, 0x00	; 0
    7024:	f1 f6       	brne	.-68     	; 0x6fe2 <malloc+0x22>
})
#endif

/* --------------------------------------------------------------------	*/
#if  PRINTF_LEVEL <= PRINTF_MIN

    7026:	21 15       	cp	r18, r1
    7028:	31 05       	cpc	r19, r1
    702a:	99 f1       	breq	.+102    	; 0x7092 <malloc+0xd2>
#define FL_PGMSTRING	0x01
    702c:	c9 01       	movw	r24, r18
    702e:	84 1b       	sub	r24, r20
    7030:	95 0b       	sbc	r25, r21
    7032:	04 97       	sbiw	r24, 0x04	; 4
    7034:	08 f4       	brcc	.+2      	; 0x7038 <malloc+0x78>
    7036:	a9 01       	movw	r20, r18
    7038:	e0 e0       	ldi	r30, 0x00	; 0
    703a:	f0 e0       	ldi	r31, 0x00	; 0
    703c:	28 c0       	rjmp	.+80     	; 0x708e <malloc+0xce>
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80
    703e:	8d 91       	ld	r24, X+
    7040:	9c 91       	ld	r25, X
    7042:	11 97       	sbiw	r26, 0x01	; 1
    7044:	82 17       	cp	r24, r18
    7046:	93 07       	cpc	r25, r19
    7048:	f9 f4       	brne	.+62     	; 0x7088 <malloc+0xc8>

    704a:	48 17       	cp	r20, r24
    704c:	59 07       	cpc	r21, r25
    704e:	81 f4       	brne	.+32     	; 0x7070 <malloc+0xb0>
    7050:	ed 01       	movw	r28, r26
    7052:	8a 81       	ldd	r24, Y+2	; 0x02
    7054:	9b 81       	ldd	r25, Y+3	; 0x03
int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/
    7056:	30 97       	sbiw	r30, 0x00	; 0
    7058:	19 f0       	breq	.+6      	; 0x7060 <malloc+0xa0>

    705a:	93 83       	std	Z+3, r25	; 0x03
    705c:	82 83       	std	Z+2, r24	; 0x02
    705e:	04 c0       	rjmp	.+8      	; 0x7068 <malloc+0xa8>
    stream->len = 0;

    7060:	90 93 9a 05 	sts	0x059A, r25
    7064:	80 93 99 05 	sts	0x0599, r24
    if ((stream->flags & __SWR) == 0)
    7068:	9d 01       	movw	r18, r26
    706a:	2e 5f       	subi	r18, 0xFE	; 254
    706c:	3f 4f       	sbci	r19, 0xFF	; 255
    706e:	4c c0       	rjmp	.+152    	; 0x7108 <malloc+0x148>
		if (c != '%') break;
	    }
	    putc (c, stream);
	}

	for (flags = 0;
    7070:	84 1b       	sub	r24, r20
    7072:	95 0b       	sbc	r25, r21
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    7074:	fd 01       	movw	r30, r26
    7076:	e8 0f       	add	r30, r24
    7078:	f9 1f       	adc	r31, r25
	{
    707a:	41 93       	st	Z+, r20
    707c:	51 93       	st	Z+, r21
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    707e:	02 97       	sbiw	r24, 0x02	; 2
    7080:	8d 93       	st	X+, r24
    7082:	9c 93       	st	X, r25
		continue;
    7084:	9f 01       	movw	r18, r30
    7086:	40 c0       	rjmp	.+128    	; 0x7108 <malloc+0x148>

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
    7088:	fd 01       	movw	r30, r26
    708a:	a2 81       	ldd	r26, Z+2	; 0x02
    708c:	b3 81       	ldd	r27, Z+3	; 0x03
#if  PRINTF_LEVEL <= PRINTF_MIN

#define FL_PGMSTRING	0x01
#define FL_ALTHEX	0x04
#define FL_ALT		0x10
#define FL_ALTLWR	0x20
    708e:	10 97       	sbiw	r26, 0x00	; 0
    7090:	b1 f6       	brne	.-84     	; 0x703e <malloc+0x7e>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    7092:	80 91 97 05 	lds	r24, 0x0597
    7096:	90 91 98 05 	lds	r25, 0x0598
    709a:	89 2b       	or	r24, r25
    709c:	41 f4       	brne	.+16     	; 0x70ae <malloc+0xee>
	    (void) va_arg (ap, double);
    709e:	80 91 c0 03 	lds	r24, 0x03C0
    70a2:	90 91 c1 03 	lds	r25, 0x03C1
    70a6:	90 93 98 05 	sts	0x0598, r25
    70aa:	80 93 97 05 	sts	0x0597, r24
	    putc ('?', stream);
    70ae:	20 91 c2 03 	lds	r18, 0x03C2
    70b2:	30 91 c3 03 	lds	r19, 0x03C3
	    continue;
    70b6:	21 15       	cp	r18, r1
    70b8:	31 05       	cpc	r19, r1
    70ba:	49 f4       	brne	.+18     	; 0x70ce <malloc+0x10e>
	}
    70bc:	8d b7       	in	r24, 0x3d	; 61
    70be:	28 2f       	mov	r18, r24
    70c0:	33 27       	eor	r19, r19
    70c2:	80 91 be 03 	lds	r24, 0x03BE
    70c6:	90 91 bf 03 	lds	r25, 0x03BF
    70ca:	28 1b       	sub	r18, r24
    70cc:	39 0b       	sbc	r19, r25

    70ce:	a0 91 97 05 	lds	r26, 0x0597
    70d2:	b0 91 98 05 	lds	r27, 0x0598
    70d6:	2a 1b       	sub	r18, r26
    70d8:	3b 0b       	sbc	r19, r27
	{
	    const char * pnt;

	    switch (c) {
    70da:	24 17       	cp	r18, r20
    70dc:	35 07       	cpc	r19, r21
    70de:	90 f0       	brcs	.+36     	; 0x7104 <malloc+0x144>
    70e0:	ca 01       	movw	r24, r20
    70e2:	02 96       	adiw	r24, 0x02	; 2
    70e4:	28 17       	cp	r18, r24
    70e6:	39 07       	cpc	r19, r25
    70e8:	68 f0       	brcs	.+26     	; 0x7104 <malloc+0x144>

	      case 'c':
    70ea:	9d 01       	movw	r18, r26
    70ec:	2e 5f       	subi	r18, 0xFE	; 254
    70ee:	3f 4f       	sbci	r19, 0xFF	; 255
    70f0:	c9 01       	movw	r24, r18
    70f2:	84 0f       	add	r24, r20
    70f4:	95 1f       	adc	r25, r21
    70f6:	90 93 98 05 	sts	0x0598, r25
    70fa:	80 93 97 05 	sts	0x0597, r24
		putc (va_arg (ap, int), stream);
    70fe:	4d 93       	st	X+, r20
    7100:	5c 93       	st	X, r21
    7102:	02 c0       	rjmp	.+4      	; 0x7108 <malloc+0x148>
		continue;
    7104:	20 e0       	ldi	r18, 0x00	; 0
    7106:	30 e0       	ldi	r19, 0x00	; 0

	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
    7108:	c9 01       	movw	r24, r18
    710a:	df 91       	pop	r29
    710c:	cf 91       	pop	r28
    710e:	08 95       	ret

00007110 <free>:
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
		continue;
    7110:	cf 93       	push	r28
    7112:	df 93       	push	r29
	    }
	}

	if (c == 'd' || c == 'i') {
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    7114:	00 97       	sbiw	r24, 0x00	; 0
    7116:	09 f4       	brne	.+2      	; 0x711a <free+0xa>
    7118:	4e c0       	rjmp	.+156    	; 0x71b6 <free+0xa6>
	    flags &= ~FL_ALT;
	    if (x < 0) {
		x = -x;
		/* `putc ('-', stream)' will considarably inlarge stack size.
    711a:	ec 01       	movw	r28, r24
    711c:	22 97       	sbiw	r28, 0x02	; 2
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    711e:	1b 82       	std	Y+3, r1	; 0x03
    7120:	1a 82       	std	Y+2, r1	; 0x02
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;

	} else {
	    int base;

    7122:	a0 91 99 05 	lds	r26, 0x0599
    7126:	b0 91 9a 05 	lds	r27, 0x059A
    712a:	10 97       	sbiw	r26, 0x00	; 0
    712c:	11 f1       	breq	.+68     	; 0x7172 <free+0x62>
    712e:	40 e0       	ldi	r20, 0x00	; 0
    7130:	50 e0       	ldi	r21, 0x00	; 0
    7132:	01 c0       	rjmp	.+2      	; 0x7136 <free+0x26>
	    switch (c) {
	      case 'u':
    7134:	dc 01       	movw	r26, r24
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    7136:	ac 17       	cp	r26, r28
    7138:	bd 07       	cpc	r27, r29
    713a:	00 f1       	brcs	.+64     	; 0x717c <free+0x6c>
	        base = 16;
		goto ultoa;
	      case 'X':
    713c:	bb 83       	std	Y+3, r27	; 0x03
    713e:	aa 83       	std	Y+2, r26	; 0x02
		flags |= FL_ALTHEX;
    7140:	fe 01       	movw	r30, r28
    7142:	21 91       	ld	r18, Z+
    7144:	31 91       	ld	r19, Z+
    7146:	e2 0f       	add	r30, r18
    7148:	f3 1f       	adc	r31, r19
    714a:	ea 17       	cp	r30, r26
    714c:	fb 07       	cpc	r31, r27
    714e:	71 f4       	brne	.+28     	; 0x716c <free+0x5c>
	        base = 16 | XTOA_UPPER;
	      ultoa:
    7150:	8d 91       	ld	r24, X+
    7152:	9c 91       	ld	r25, X
    7154:	11 97       	sbiw	r26, 0x01	; 1
    7156:	28 0f       	add	r18, r24
    7158:	39 1f       	adc	r19, r25
    715a:	2e 5f       	subi	r18, 0xFE	; 254
    715c:	3f 4f       	sbci	r19, 0xFF	; 255
    715e:	39 83       	std	Y+1, r19	; 0x01
    7160:	28 83       	st	Y, r18
		c = __ultoa_invert ((flags & FL_LONG)
    7162:	fd 01       	movw	r30, r26
    7164:	82 81       	ldd	r24, Z+2	; 0x02
    7166:	93 81       	ldd	r25, Z+3	; 0x03
    7168:	9b 83       	std	Y+3, r25	; 0x03
    716a:	8a 83       	std	Y+2, r24	; 0x02
				    ? va_arg(ap, unsigned long)
				    : va_arg(ap, unsigned int),
    716c:	41 15       	cp	r20, r1
    716e:	51 05       	cpc	r21, r1
    7170:	59 f4       	brne	.+22     	; 0x7188 <free+0x78>
				    (char *)buf, base)  -  (char *)buf;
		break;
    7172:	d0 93 9a 05 	sts	0x059A, r29
    7176:	c0 93 99 05 	sts	0x0599, r28
    717a:	1d c0       	rjmp	.+58     	; 0x71b6 <free+0xa6>
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
	      case 'x':
    717c:	fd 01       	movw	r30, r26
    717e:	82 81       	ldd	r24, Z+2	; 0x02
    7180:	93 81       	ldd	r25, Z+3	; 0x03
    7182:	ad 01       	movw	r20, r26
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
		/* no break */
    7184:	00 97       	sbiw	r24, 0x00	; 0
    7186:	b1 f6       	brne	.-84     	; 0x7134 <free+0x24>

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
	    putc ('-', stream);
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
	    putc ('0', stream);
    7188:	fa 01       	movw	r30, r20
    718a:	d3 83       	std	Z+3, r29	; 0x03
    718c:	c2 83       	std	Z+2, r28	; 0x02
	    if (flags & FL_ALTHEX)
#if  FL_ALTLWR != 'x' - 'X'
    718e:	21 91       	ld	r18, Z+
    7190:	31 91       	ld	r19, Z+
    7192:	e2 0f       	add	r30, r18
    7194:	f3 1f       	adc	r31, r19
    7196:	ec 17       	cp	r30, r28
    7198:	fd 07       	cpc	r31, r29
    719a:	69 f4       	brne	.+26     	; 0x71b6 <free+0xa6>
# error
#endif
    719c:	88 81       	ld	r24, Y
    719e:	99 81       	ldd	r25, Y+1	; 0x01
    71a0:	28 0f       	add	r18, r24
    71a2:	39 1f       	adc	r19, r25
    71a4:	2e 5f       	subi	r18, 0xFE	; 254
    71a6:	3f 4f       	sbci	r19, 0xFF	; 255
    71a8:	fa 01       	movw	r30, r20
    71aa:	31 83       	std	Z+1, r19	; 0x01
    71ac:	20 83       	st	Z, r18
		putc ('X' + (flags & FL_ALTLWR), stream);
    71ae:	8a 81       	ldd	r24, Y+2	; 0x02
    71b0:	9b 81       	ldd	r25, Y+3	; 0x03
    71b2:	93 83       	std	Z+3, r25	; 0x03
    71b4:	82 83       	std	Z+2, r24	; 0x02
    71b6:	df 91       	pop	r29
    71b8:	cf 91       	pop	r28
    71ba:	08 95       	ret

000071bc <memset>:
    71bc:	dc 01       	movw	r26, r24
    71be:	01 c0       	rjmp	.+2      	; 0x71c2 <memset+0x6>
    71c0:	6d 93       	st	X+, r22
    71c2:	41 50       	subi	r20, 0x01	; 1
    71c4:	50 40       	sbci	r21, 0x00	; 0
    71c6:	e0 f7       	brcc	.-8      	; 0x71c0 <memset+0x4>
    71c8:	08 95       	ret

000071ca <__mulsi3>:
    71ca:	62 9f       	mul	r22, r18
    71cc:	d0 01       	movw	r26, r0
    71ce:	73 9f       	mul	r23, r19
    71d0:	f0 01       	movw	r30, r0
    71d2:	82 9f       	mul	r24, r18
    71d4:	e0 0d       	add	r30, r0
    71d6:	f1 1d       	adc	r31, r1
    71d8:	64 9f       	mul	r22, r20
    71da:	e0 0d       	add	r30, r0
    71dc:	f1 1d       	adc	r31, r1
    71de:	92 9f       	mul	r25, r18
    71e0:	f0 0d       	add	r31, r0
    71e2:	83 9f       	mul	r24, r19
    71e4:	f0 0d       	add	r31, r0
    71e6:	74 9f       	mul	r23, r20
    71e8:	f0 0d       	add	r31, r0
    71ea:	65 9f       	mul	r22, r21
    71ec:	f0 0d       	add	r31, r0
    71ee:	99 27       	eor	r25, r25
    71f0:	72 9f       	mul	r23, r18
    71f2:	b0 0d       	add	r27, r0
    71f4:	e1 1d       	adc	r30, r1
    71f6:	f9 1f       	adc	r31, r25
    71f8:	63 9f       	mul	r22, r19
    71fa:	b0 0d       	add	r27, r0
    71fc:	e1 1d       	adc	r30, r1
    71fe:	f9 1f       	adc	r31, r25
    7200:	bd 01       	movw	r22, r26
    7202:	cf 01       	movw	r24, r30
    7204:	11 24       	eor	r1, r1
    7206:	08 95       	ret

00007208 <__udivmodhi4>:
    7208:	aa 1b       	sub	r26, r26
    720a:	bb 1b       	sub	r27, r27
    720c:	51 e1       	ldi	r21, 0x11	; 17
    720e:	07 c0       	rjmp	.+14     	; 0x721e <__udivmodhi4_ep>

00007210 <__udivmodhi4_loop>:
    7210:	aa 1f       	adc	r26, r26
    7212:	bb 1f       	adc	r27, r27
    7214:	a6 17       	cp	r26, r22
    7216:	b7 07       	cpc	r27, r23
    7218:	10 f0       	brcs	.+4      	; 0x721e <__udivmodhi4_ep>
    721a:	a6 1b       	sub	r26, r22
    721c:	b7 0b       	sbc	r27, r23

0000721e <__udivmodhi4_ep>:
    721e:	88 1f       	adc	r24, r24
    7220:	99 1f       	adc	r25, r25
    7222:	5a 95       	dec	r21
    7224:	a9 f7       	brne	.-22     	; 0x7210 <__udivmodhi4_loop>
    7226:	80 95       	com	r24
    7228:	90 95       	com	r25
    722a:	bc 01       	movw	r22, r24
    722c:	cd 01       	movw	r24, r26
    722e:	08 95       	ret

00007230 <__divmodhi4>:
    7230:	97 fb       	bst	r25, 7
    7232:	09 2e       	mov	r0, r25
    7234:	07 26       	eor	r0, r23
    7236:	0a d0       	rcall	.+20     	; 0x724c <__divmodhi4_neg1>
    7238:	77 fd       	sbrc	r23, 7
    723a:	04 d0       	rcall	.+8      	; 0x7244 <__divmodhi4_neg2>
    723c:	e5 df       	rcall	.-54     	; 0x7208 <__udivmodhi4>
    723e:	06 d0       	rcall	.+12     	; 0x724c <__divmodhi4_neg1>
    7240:	00 20       	and	r0, r0
    7242:	1a f4       	brpl	.+6      	; 0x724a <__divmodhi4_exit>

00007244 <__divmodhi4_neg2>:
    7244:	70 95       	com	r23
    7246:	61 95       	neg	r22
    7248:	7f 4f       	sbci	r23, 0xFF	; 255

0000724a <__divmodhi4_exit>:
    724a:	08 95       	ret

0000724c <__divmodhi4_neg1>:
    724c:	f6 f7       	brtc	.-4      	; 0x724a <__divmodhi4_exit>
    724e:	90 95       	com	r25
    7250:	81 95       	neg	r24
    7252:	9f 4f       	sbci	r25, 0xFF	; 255
    7254:	08 95       	ret

00007256 <__udivmodsi4>:
    7256:	a1 e2       	ldi	r26, 0x21	; 33
    7258:	1a 2e       	mov	r1, r26
    725a:	aa 1b       	sub	r26, r26
    725c:	bb 1b       	sub	r27, r27
    725e:	fd 01       	movw	r30, r26
    7260:	0d c0       	rjmp	.+26     	; 0x727c <__udivmodsi4_ep>

00007262 <__udivmodsi4_loop>:
    7262:	aa 1f       	adc	r26, r26
    7264:	bb 1f       	adc	r27, r27
    7266:	ee 1f       	adc	r30, r30
    7268:	ff 1f       	adc	r31, r31
    726a:	a2 17       	cp	r26, r18
    726c:	b3 07       	cpc	r27, r19
    726e:	e4 07       	cpc	r30, r20
    7270:	f5 07       	cpc	r31, r21
    7272:	20 f0       	brcs	.+8      	; 0x727c <__udivmodsi4_ep>
    7274:	a2 1b       	sub	r26, r18
    7276:	b3 0b       	sbc	r27, r19
    7278:	e4 0b       	sbc	r30, r20
    727a:	f5 0b       	sbc	r31, r21

0000727c <__udivmodsi4_ep>:
    727c:	66 1f       	adc	r22, r22
    727e:	77 1f       	adc	r23, r23
    7280:	88 1f       	adc	r24, r24
    7282:	99 1f       	adc	r25, r25
    7284:	1a 94       	dec	r1
    7286:	69 f7       	brne	.-38     	; 0x7262 <__udivmodsi4_loop>
    7288:	60 95       	com	r22
    728a:	70 95       	com	r23
    728c:	80 95       	com	r24
    728e:	90 95       	com	r25
    7290:	9b 01       	movw	r18, r22
    7292:	ac 01       	movw	r20, r24
    7294:	bd 01       	movw	r22, r26
    7296:	cf 01       	movw	r24, r30
    7298:	08 95       	ret

0000729a <__prologue_saves__>:
    729a:	2f 92       	push	r2
    729c:	3f 92       	push	r3
    729e:	4f 92       	push	r4
    72a0:	5f 92       	push	r5
    72a2:	6f 92       	push	r6
    72a4:	7f 92       	push	r7
    72a6:	8f 92       	push	r8
    72a8:	9f 92       	push	r9
    72aa:	af 92       	push	r10
    72ac:	bf 92       	push	r11
    72ae:	cf 92       	push	r12
    72b0:	df 92       	push	r13
    72b2:	ef 92       	push	r14
    72b4:	ff 92       	push	r15
    72b6:	0f 93       	push	r16
    72b8:	1f 93       	push	r17
    72ba:	cf 93       	push	r28
    72bc:	df 93       	push	r29
    72be:	cd b7       	in	r28, 0x3d	; 61
    72c0:	de b7       	in	r29, 0x3e	; 62
    72c2:	ca 1b       	sub	r28, r26
    72c4:	db 0b       	sbc	r29, r27
    72c6:	0f b6       	in	r0, 0x3f	; 63
    72c8:	f8 94       	cli
    72ca:	de bf       	out	0x3e, r29	; 62
    72cc:	0f be       	out	0x3f, r0	; 63
    72ce:	cd bf       	out	0x3d, r28	; 61
    72d0:	09 94       	ijmp

000072d2 <__epilogue_restores__>:
    72d2:	2a 88       	ldd	r2, Y+18	; 0x12
    72d4:	39 88       	ldd	r3, Y+17	; 0x11
    72d6:	48 88       	ldd	r4, Y+16	; 0x10
    72d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    72da:	6e 84       	ldd	r6, Y+14	; 0x0e
    72dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    72de:	8c 84       	ldd	r8, Y+12	; 0x0c
    72e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    72e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    72e4:	b9 84       	ldd	r11, Y+9	; 0x09
    72e6:	c8 84       	ldd	r12, Y+8	; 0x08
    72e8:	df 80       	ldd	r13, Y+7	; 0x07
    72ea:	ee 80       	ldd	r14, Y+6	; 0x06
    72ec:	fd 80       	ldd	r15, Y+5	; 0x05
    72ee:	0c 81       	ldd	r16, Y+4	; 0x04
    72f0:	1b 81       	ldd	r17, Y+3	; 0x03
    72f2:	aa 81       	ldd	r26, Y+2	; 0x02
    72f4:	b9 81       	ldd	r27, Y+1	; 0x01
    72f6:	ce 0f       	add	r28, r30
    72f8:	d1 1d       	adc	r29, r1
    72fa:	0f b6       	in	r0, 0x3f	; 63
    72fc:	f8 94       	cli
    72fe:	de bf       	out	0x3e, r29	; 62
    7300:	0f be       	out	0x3f, r0	; 63
    7302:	cd bf       	out	0x3d, r28	; 61
    7304:	ed 01       	movw	r28, r26
    7306:	08 95       	ret

00007308 <__eeprom_read_byte_1F2021>:
    7308:	f9 99       	sbic	0x1f, 1	; 31
    730a:	fe cf       	rjmp	.-4      	; 0x7308 <__eeprom_read_byte_1F2021>
    730c:	b2 bd       	out	0x22, r27	; 34
    730e:	a1 bd       	out	0x21, r26	; 33
    7310:	f8 9a       	sbi	0x1f, 0	; 31
    7312:	11 96       	adiw	r26, 0x01	; 1
    7314:	00 b4       	in	r0, 0x20	; 32
    7316:	08 95       	ret

00007318 <__eeprom_write_byte_1F2021>:
    7318:	f9 99       	sbic	0x1f, 1	; 31
    731a:	fe cf       	rjmp	.-4      	; 0x7318 <__eeprom_write_byte_1F2021>
    731c:	b2 bd       	out	0x22, r27	; 34
    731e:	a1 bd       	out	0x21, r26	; 33
    7320:	00 bc       	out	0x20, r0	; 32
    7322:	11 96       	adiw	r26, 0x01	; 1
    7324:	0f b6       	in	r0, 0x3f	; 63
    7326:	f8 94       	cli
    7328:	fa 9a       	sbi	0x1f, 2	; 31
    732a:	f9 9a       	sbi	0x1f, 1	; 31
    732c:	0f be       	out	0x3f, r0	; 63
    732e:	08 95       	ret

00007330 <_exit>:
    7330:	ff cf       	rjmp	.-2      	; 0x7330 <_exit>
